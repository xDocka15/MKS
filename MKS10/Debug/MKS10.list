
MKS10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0b8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e170  0801a268  0801a268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080283d8  080283d8  0002a090  2**0
                  CONTENTS
  4 .ARM          00000008  080283d8  080283d8  000293d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080283e0  080283e0  0002a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080283e0  080283e0  000293e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080283e4  080283e4  000293e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080283e8  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002a090  2**0
                  CONTENTS
 10 .bss          000111c4  20000090  20000090  0002a090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20011254  20011254  0002a090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002a090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034f12  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008698  00000000  00000000  0005efd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025d8  00000000  00000000  00067670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001de9  00000000  00000000  00069c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000377c6  00000000  00000000  0006ba31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f7a1  00000000  00000000  000a31f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001021dd  00000000  00000000  000e2998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e4b75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6a8  00000000  00000000  001e4bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001ef260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a250 	.word	0x0801a250

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0801a250 	.word	0x0801a250

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	2000014c 	.word	0x2000014c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f8a5 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f81f 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f8c5 	bl	8000780 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f899 	bl	800072c <MX_USART3_UART_Init>
  MX_RNG_Init();
 80005fa:	f000 f883 	bl	8000704 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <main+0x44>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fe4b 	bl	80052b0 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a03      	ldr	r2, [pc, #12]	@ (800062c <main+0x48>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f004 fe2f 	bl	8005282 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x40>
 8000628:	0801a274 	.word	0x0801a274
 800062c:	200003a4 	.word	0x200003a4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	@ 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f018 fce7 	bl	8019012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	@ 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fdcf 	bl	8003258 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f95a 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f830 	bl	8003748 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f943 	bl	8000978 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_RNG_Init+0x20>)
 800070a:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <MX_RNG_Init+0x24>)
 800070c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_RNG_Init+0x20>)
 8000710:	f003 fa6c 	bl	8003bec <HAL_RNG_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800071a:	f000 f92d 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000034c 	.word	0x2000034c
 8000728:	50060800 	.word	0x50060800

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART3_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000764:	f003 fd64 	bl	8004230 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f903 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000035c 	.word	0x2000035c
 800077c:	40004800 	.word	0x40004800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4b5b      	ldr	r3, [pc, #364]	@ (8000908 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a5a      	ldr	r2, [pc, #360]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b58      	ldr	r3, [pc, #352]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b54      	ldr	r3, [pc, #336]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a53      	ldr	r2, [pc, #332]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b51      	ldr	r3, [pc, #324]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b4a      	ldr	r3, [pc, #296]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b46      	ldr	r3, [pc, #280]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a45      	ldr	r2, [pc, #276]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b43      	ldr	r3, [pc, #268]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b3f      	ldr	r3, [pc, #252]	@ (8000908 <MX_GPIO_Init+0x188>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a3e      	ldr	r2, [pc, #248]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b3c      	ldr	r3, [pc, #240]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b38      	ldr	r3, [pc, #224]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a37      	ldr	r2, [pc, #220]	@ (8000908 <MX_GPIO_Init+0x188>)
 800082c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b35      	ldr	r3, [pc, #212]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000844:	4831      	ldr	r0, [pc, #196]	@ (800090c <MX_GPIO_Init+0x18c>)
 8000846:	f002 fced 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	4830      	ldr	r0, [pc, #192]	@ (8000910 <MX_GPIO_Init+0x190>)
 8000850:	f002 fce8 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	@ (8000914 <MX_GPIO_Init+0x194>)
 800086c:	f002 fb16 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000870:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4820      	ldr	r0, [pc, #128]	@ (800090c <MX_GPIO_Init+0x18c>)
 800088a:	f002 fb07 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088e:	2340      	movs	r3, #64	@ 0x40
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481a      	ldr	r0, [pc, #104]	@ (8000910 <MX_GPIO_Init+0x190>)
 80008a6:	f002 faf9 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4814      	ldr	r0, [pc, #80]	@ (8000910 <MX_GPIO_Init+0x190>)
 80008be:	f002 faed 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008c2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d4:	230a      	movs	r3, #10
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <MX_GPIO_Init+0x198>)
 80008e0:	f002 fadc 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <MX_GPIO_Init+0x198>)
 80008fa:	f002 facf 	bl	8002e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	@ 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800
 8000918:	40020000 	.word	0x40020000

0800091c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4809      	ldr	r0, [pc, #36]	@ (8000950 <StartDefaultTask+0x34>)
 800092c:	f003 f988 	bl	8003c40 <HAL_RNG_GenerateRandomNumber>
	srand(rnd);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4618      	mov	r0, r3
 8000934:	f018 f9a0 	bl	8018c78 <srand>
  /* init code for LWIP */
  MX_LWIP_Init();
 8000938:	f003 ff3e 	bl	80047b8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Initialize tcp echo server */
  tcpecho_init();
 800093c:	f000 faa0 	bl	8000e80 <tcpecho_init>
  /* Initialize tcp telnet server */
  tcptelnet_init();
 8000940:	f000 fdb6 	bl	80014b0 <tcptelnet_init>
  /* Initialize HTTP server */
  httpd_init();
 8000944:	f00a ff38 	bl	800b7b8 <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f004 fcfd 	bl	8005348 <osDelay>
 800094e:	e7fb      	b.n	8000948 <StartDefaultTask+0x2c>
 8000950:	2000034c 	.word	0x2000034c

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 ff09 	bl	800177c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40002000 	.word	0x40002000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_MspInit+0x54>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <HAL_MspInit+0x54>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x54>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_MspInit+0x54>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_MspInit+0x54>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_MspInit+0x54>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 ffd3 	bl	8001974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <HAL_RNG_MspInit+0x3c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_RNG_MspInit+0x40>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <HAL_RNG_MspInit+0x40>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <HAL_RNG_MspInit+0x40>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	50060800 	.word	0x50060800
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_UART_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_UART_MspInit+0x8c>)
 8000a98:	f002 fa00 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004800 	.word	0x40004800
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b33      	ldr	r3, [pc, #204]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a32      	ldr	r2, [pc, #200]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 f84e 	bl	8003b88 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000af6:	f003 f81f 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8000afa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000afe:	f003 f81b 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8000b02:	4603      	mov	r3, r0
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	0c9b      	lsrs	r3, r3, #18
 8000b12:	3b01      	subs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b18:	4a21      	ldr	r2, [pc, #132]	@ (8000ba0 <HAL_InitTick+0xf0>)
 8000b1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b22:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b28:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b3c:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b3e:	f003 f8d5 	bl	8003cec <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11b      	bne.n	8000b88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b52:	f003 f925 	bl	8003da0 <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d111      	bne.n	8000b88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b64:	202d      	movs	r0, #45	@ 0x2d
 8000b66:	f000 ff21 	bl	80019ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d808      	bhi.n	8000b82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	202d      	movs	r0, #45	@ 0x2d
 8000b76:	f000 fefd 	bl	8001974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <HAL_InitTick+0xf4>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e002      	b.n	8000b88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3738      	adds	r7, #56	@ 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	200003a8 	.word	0x200003a8
 8000ba0:	40002000 	.word	0x40002000
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000be6:	f003 f94b 	bl	8003e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003a8 	.word	0x200003a8

08000bf4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <ETH_IRQHandler+0x10>)
 8000bfa:	f001 fa73 	bl	80020e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20005114 	.word	0x20005114

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <_kill+0x20>)
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20011244 	.word	0x20011244

08000c3c <_exit>:

void _exit (int status)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe5 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <_exit+0x12>

08000c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e00a      	b.n	8000c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c64:	f3af 8000 	nop.w
 8000c68:	4601      	mov	r1, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	b2ca      	uxtb	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	dbf0      	blt.n	8000c64 <_read+0x12>
  }

  return len;
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e009      	b.n	8000cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbf1      	blt.n	8000c9e <_write+0x12>
  }
  return len;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_close>:

int _close(int file)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cec:	605a      	str	r2, [r3, #4]
  return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_isatty>:

int _isatty(int file)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200003f0 	.word	0x200003f0
 8000d94:	20011258 	.word	0x20011258
 8000d98:	20011244 	.word	0x20011244

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f007 fa81 	bl	80082d4 <netconn_new_with_proto_and_callback>
 8000dd2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d04e      	beq.n	8000e78 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000dda:	2207      	movs	r2, #7
 8000ddc:	2100      	movs	r1, #0
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f007 fb32 	bl	8008448 <netconn_bind>
 8000de4:	4603      	mov	r3, r0
 8000de6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000de8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13f      	bne.n	8000e70 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df0:	21ff      	movs	r1, #255	@ 0xff
 8000df2:	69f8      	ldr	r0, [r7, #28]
 8000df4:	f007 fb98 	bl	8008528 <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	69f8      	ldr	r0, [r7, #28]
 8000e00:	f007 fbbe 	bl	8008580 <netconn_accept>
 8000e04:	4603      	mov	r3, r0
 8000e06:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f3      	bne.n	8000df8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e10:	e01b      	b.n	8000e4a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f107 020a 	add.w	r2, r7, #10
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f009 fc9f 	bl	800a760 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f007 fe28 	bl	8008a84 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 fcdc 	bl	800a7f4 <netbuf_next>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dae7      	bge.n	8000e12 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fc6b 	bl	800a720 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fd9c 	bl	8008990 <netconn_recv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0d9      	beq.n	8000e12 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 ff11 	bl	8008c88 <netconn_close>
          netconn_delete(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fad1 	bl	8008410 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e6e:	e7c3      	b.n	8000df8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 facc 	bl	8008410 <netconn_delete>
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e86:	2304      	movs	r3, #4
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4903      	ldr	r1, [pc, #12]	@ (8000ea0 <tcpecho_init+0x20>)
 8000e92:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <tcpecho_init+0x24>)
 8000e94:	f017 feac 	bl	8018bf0 <sys_thread_new>
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08000dc1 	.word	0x08000dc1
 8000ea4:	0801a290 	.word	0x0801a290

08000ea8 <http_client>:
#define CMD_BUFFER_LEN 512


/*-----------------------------------------------------------------------------------*/
static void http_client(char *s, uint16_t size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147,229,144,124);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <http_client+0xbc>)
 8000eba:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <http_client+0xc0>)
 8000ebe:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f007 fa05 	bl	80082d4 <netconn_new_with_proto_and_callback>
 8000eca:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2250      	movs	r2, #80	@ 0x50
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f007 faef 	bl	80084b8 <netconn_connect>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d136      	bne.n	8000f4e <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee0:	69b8      	ldr	r0, [r7, #24]
 8000ee2:	f7ff f98f 	bl	8000204 <strlen>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f007 fdc7 	bl	8008a84 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000efc:	e019      	b.n	8000f32 <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size-len);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	8bfb      	ldrh	r3, [r7, #30]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	f00c faab 	bl	800d46c <pbuf_copy_partial>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fbf7 	bl	800a720 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f32:	8bfa      	ldrh	r2, [r7, #30]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d20d      	bcs.n	8000f56 <http_client+0xae>
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f007 fd25 	bl	8008990 <netconn_recv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0d8      	beq.n	8000efe <http_client+0x56>
 8000f4c:	e003      	b.n	8000f56 <http_client+0xae>
		}
	} else {
		sprintf(s, "Connection error\n");
 8000f4e:	4907      	ldr	r1, [pc, #28]	@ (8000f6c <http_client+0xc4>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f017 ffd1 	bl	8018ef8 <siprintf>
	}
	netconn_delete(client);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f007 fa5a 	bl	8008410 <netconn_delete>
}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	7c90e593 	.word	0x7c90e593
 8000f68:	0801a2a0 	.word	0x0801a2a0
 8000f6c:	0801a2ec 	.word	0x0801a2ec

08000f70 <telnet_process_command>:

static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f7c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f80:	6018      	str	r0, [r3, #0]
 8000f82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f86:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000f8a:	6019      	str	r1, [r3, #0]
	char s[CMD_BUFFER_LEN];
	char *token;
	token = strtok(cmd, " ");
 8000f8c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f90:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f94:	49c4      	ldr	r1, [pc, #784]	@ (80012a8 <telnet_process_command+0x338>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f018 f87e 	bl	8019098 <strtok>
 8000f9c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (strcasecmp(token, "HELLO") == 0)
 8000fa0:	49c2      	ldr	r1, [pc, #776]	@ (80012ac <telnet_process_command+0x33c>)
 8000fa2:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8000fa6:	f018 f83d 	bl	8019024 <strcasecmp>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d118      	bne.n	8000fe2 <telnet_process_command+0x72>
	{
		sprintf(s, "Communication OK\n");
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	49be      	ldr	r1, [pc, #760]	@ (80012b0 <telnet_process_command+0x340>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f017 ff9e 	bl	8018ef8 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f91f 	bl	8000204 <strlen>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f107 010c 	add.w	r1, r7, #12
 8000fcc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fd0:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	f007 fd52 	bl	8008a84 <netconn_write_partly>
	{
		http_client(s, CMD_BUFFER_LEN);
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
	}

}
 8000fe0:	e1bc      	b.n	800135c <telnet_process_command+0x3ec>
	else if (strcasecmp(token, "LED1") == 0)
 8000fe2:	49b4      	ldr	r1, [pc, #720]	@ (80012b4 <telnet_process_command+0x344>)
 8000fe4:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8000fe8:	f018 f81c 	bl	8019024 <strcasecmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d139      	bne.n	8001066 <telnet_process_command+0xf6>
		token = strtok(NULL, " "); // led1?"ON":"OFF"
 8000ff2:	49ad      	ldr	r1, [pc, #692]	@ (80012a8 <telnet_process_command+0x338>)
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f018 f84f 	bl	8019098 <strtok>
 8000ffa:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		if (strcasecmp(token, "ON") == 0)
 8000ffe:	49ae      	ldr	r1, [pc, #696]	@ (80012b8 <telnet_process_command+0x348>)
 8001000:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001004:	f018 f80e 	bl	8019024 <strcasecmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <telnet_process_command+0xaa>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	2101      	movs	r1, #1
 8001012:	48aa      	ldr	r0, [pc, #680]	@ (80012bc <telnet_process_command+0x34c>)
 8001014:	f002 f906 	bl	8003224 <HAL_GPIO_WritePin>
 8001018:	e00c      	b.n	8001034 <telnet_process_command+0xc4>
		} else if (strcasecmp(token, "OFF") == 0)
 800101a:	49a9      	ldr	r1, [pc, #676]	@ (80012c0 <telnet_process_command+0x350>)
 800101c:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001020:	f018 f800 	bl	8019024 <strcasecmp>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d104      	bne.n	8001034 <telnet_process_command+0xc4>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	48a3      	ldr	r0, [pc, #652]	@ (80012bc <telnet_process_command+0x34c>)
 8001030:	f002 f8f8 	bl	8003224 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	49a2      	ldr	r1, [pc, #648]	@ (80012c4 <telnet_process_command+0x354>)
 800103a:	4618      	mov	r0, r3
 800103c:	f017 ff5c 	bl	8018ef8 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f8dd 	bl	8000204 <strlen>
 800104a:	4602      	mov	r2, r0
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001054:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8001058:	2300      	movs	r3, #0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	6800      	ldr	r0, [r0, #0]
 8001060:	f007 fd10 	bl	8008a84 <netconn_write_partly>
}
 8001064:	e17a      	b.n	800135c <telnet_process_command+0x3ec>
	else if (strcasecmp(token, "LED2") == 0)
 8001066:	4998      	ldr	r1, [pc, #608]	@ (80012c8 <telnet_process_command+0x358>)
 8001068:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 800106c:	f017 ffda 	bl	8019024 <strcasecmp>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d139      	bne.n	80010ea <telnet_process_command+0x17a>
		token = strtok(NULL, " "); // led1?"ON":"OFF"
 8001076:	498c      	ldr	r1, [pc, #560]	@ (80012a8 <telnet_process_command+0x338>)
 8001078:	2000      	movs	r0, #0
 800107a:	f018 f80d 	bl	8019098 <strtok>
 800107e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		if (strcasecmp(token, "ON") == 0)
 8001082:	498d      	ldr	r1, [pc, #564]	@ (80012b8 <telnet_process_command+0x348>)
 8001084:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001088:	f017 ffcc 	bl	8019024 <strcasecmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <telnet_process_command+0x12e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	4889      	ldr	r0, [pc, #548]	@ (80012bc <telnet_process_command+0x34c>)
 8001098:	f002 f8c4 	bl	8003224 <HAL_GPIO_WritePin>
 800109c:	e00c      	b.n	80010b8 <telnet_process_command+0x148>
		} else if (strcasecmp(token, "OFF") == 0)
 800109e:	4988      	ldr	r1, [pc, #544]	@ (80012c0 <telnet_process_command+0x350>)
 80010a0:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80010a4:	f017 ffbe 	bl	8019024 <strcasecmp>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d104      	bne.n	80010b8 <telnet_process_command+0x148>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	4882      	ldr	r0, [pc, #520]	@ (80012bc <telnet_process_command+0x34c>)
 80010b4:	f002 f8b6 	bl	8003224 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4981      	ldr	r1, [pc, #516]	@ (80012c4 <telnet_process_command+0x354>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f017 ff1a 	bl	8018ef8 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f89b 	bl	8000204 <strlen>
 80010ce:	4602      	mov	r2, r0
 80010d0:	f107 010c 	add.w	r1, r7, #12
 80010d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010d8:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	6800      	ldr	r0, [r0, #0]
 80010e4:	f007 fcce 	bl	8008a84 <netconn_write_partly>
}
 80010e8:	e138      	b.n	800135c <telnet_process_command+0x3ec>
	else if (strcasecmp(token, "LED3") == 0)
 80010ea:	4978      	ldr	r1, [pc, #480]	@ (80012cc <telnet_process_command+0x35c>)
 80010ec:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80010f0:	f017 ff98 	bl	8019024 <strcasecmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d13b      	bne.n	8001172 <telnet_process_command+0x202>
		token = strtok(NULL, " "); // led1?"ON":"OFF"
 80010fa:	496b      	ldr	r1, [pc, #428]	@ (80012a8 <telnet_process_command+0x338>)
 80010fc:	2000      	movs	r0, #0
 80010fe:	f017 ffcb 	bl	8019098 <strtok>
 8001102:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		if (strcasecmp(token, "ON") == 0)
 8001106:	496c      	ldr	r1, [pc, #432]	@ (80012b8 <telnet_process_command+0x348>)
 8001108:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 800110c:	f017 ff8a 	bl	8019024 <strcasecmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <telnet_process_command+0x1b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111c:	4867      	ldr	r0, [pc, #412]	@ (80012bc <telnet_process_command+0x34c>)
 800111e:	f002 f881 	bl	8003224 <HAL_GPIO_WritePin>
 8001122:	e00d      	b.n	8001140 <telnet_process_command+0x1d0>
		} else if (strcasecmp(token, "OFF") == 0)
 8001124:	4966      	ldr	r1, [pc, #408]	@ (80012c0 <telnet_process_command+0x350>)
 8001126:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 800112a:	f017 ff7b 	bl	8019024 <strcasecmp>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <telnet_process_command+0x1d0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800113a:	4860      	ldr	r0, [pc, #384]	@ (80012bc <telnet_process_command+0x34c>)
 800113c:	f002 f872 	bl	8003224 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	495f      	ldr	r1, [pc, #380]	@ (80012c4 <telnet_process_command+0x354>)
 8001146:	4618      	mov	r0, r3
 8001148:	f017 fed6 	bl	8018ef8 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f857 	bl	8000204 <strlen>
 8001156:	4602      	mov	r2, r0
 8001158:	f107 010c 	add.w	r1, r7, #12
 800115c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001160:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8001164:	2300      	movs	r3, #0
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	6800      	ldr	r0, [r0, #0]
 800116c:	f007 fc8a 	bl	8008a84 <netconn_write_partly>
}
 8001170:	e0f4      	b.n	800135c <telnet_process_command+0x3ec>
	else if (strcasecmp(token, "STATUS") == 0)
 8001172:	4957      	ldr	r1, [pc, #348]	@ (80012d0 <telnet_process_command+0x360>)
 8001174:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001178:	f017 ff54 	bl	8019024 <strcasecmp>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 80cb 	bne.w	800131a <telnet_process_command+0x3aa>
		if(HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin))
 8001184:	2101      	movs	r1, #1
 8001186:	484d      	ldr	r0, [pc, #308]	@ (80012bc <telnet_process_command+0x34c>)
 8001188:	f002 f834 	bl	80031f4 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d018      	beq.n	80011c4 <telnet_process_command+0x254>
			sprintf(s,"LED1 is ON \n\r");
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	494f      	ldr	r1, [pc, #316]	@ (80012d4 <telnet_process_command+0x364>)
 8001198:	4618      	mov	r0, r3
 800119a:	f017 fead 	bl	8018ef8 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f82e 	bl	8000204 <strlen>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f107 010c 	add.w	r1, r7, #12
 80011ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011b2:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	6800      	ldr	r0, [r0, #0]
 80011be:	f007 fc61 	bl	8008a84 <netconn_write_partly>
 80011c2:	e017      	b.n	80011f4 <telnet_process_command+0x284>
			sprintf(s,"LED1 is OFF \n\r");
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4943      	ldr	r1, [pc, #268]	@ (80012d8 <telnet_process_command+0x368>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f017 fe94 	bl	8018ef8 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f815 	bl	8000204 <strlen>
 80011da:	4602      	mov	r2, r0
 80011dc:	f107 010c 	add.w	r1, r7, #12
 80011e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011e4:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 80011e8:	2300      	movs	r3, #0
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	6800      	ldr	r0, [r0, #0]
 80011f0:	f007 fc48 	bl	8008a84 <netconn_write_partly>
		if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	4831      	ldr	r0, [pc, #196]	@ (80012bc <telnet_process_command+0x34c>)
 80011f8:	f001 fffc 	bl	80031f4 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d018      	beq.n	8001234 <telnet_process_command+0x2c4>
			sprintf(s,"LED2 is ON \n\r");
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4935      	ldr	r1, [pc, #212]	@ (80012dc <telnet_process_command+0x36c>)
 8001208:	4618      	mov	r0, r3
 800120a:	f017 fe75 	bl	8018ef8 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe fff6 	bl	8000204 <strlen>
 8001218:	4602      	mov	r2, r0
 800121a:	f107 010c 	add.w	r1, r7, #12
 800121e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001222:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	6800      	ldr	r0, [r0, #0]
 800122e:	f007 fc29 	bl	8008a84 <netconn_write_partly>
 8001232:	e017      	b.n	8001264 <telnet_process_command+0x2f4>
			sprintf(s,"LED2 is OFF \n\r");
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4929      	ldr	r1, [pc, #164]	@ (80012e0 <telnet_process_command+0x370>)
 800123a:	4618      	mov	r0, r3
 800123c:	f017 fe5c 	bl	8018ef8 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4618      	mov	r0, r3
 8001246:	f7fe ffdd 	bl	8000204 <strlen>
 800124a:	4602      	mov	r2, r0
 800124c:	f107 010c 	add.w	r1, r7, #12
 8001250:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001254:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	6800      	ldr	r0, [r0, #0]
 8001260:	f007 fc10 	bl	8008a84 <netconn_write_partly>
		if(HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin))
 8001264:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001268:	4814      	ldr	r0, [pc, #80]	@ (80012bc <telnet_process_command+0x34c>)
 800126a:	f001 ffc3 	bl	80031f4 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d039      	beq.n	80012e8 <telnet_process_command+0x378>
			sprintf(s,"LED3 is ON \n\r");
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	491a      	ldr	r1, [pc, #104]	@ (80012e4 <telnet_process_command+0x374>)
 800127a:	4618      	mov	r0, r3
 800127c:	f017 fe3c 	bl	8018ef8 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f7fe ffbd 	bl	8000204 <strlen>
 800128a:	4602      	mov	r2, r0
 800128c:	f107 010c 	add.w	r1, r7, #12
 8001290:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001294:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	6800      	ldr	r0, [r0, #0]
 80012a0:	f007 fbf0 	bl	8008a84 <netconn_write_partly>
}
 80012a4:	e05a      	b.n	800135c <telnet_process_command+0x3ec>
 80012a6:	bf00      	nop
 80012a8:	0801a300 	.word	0x0801a300
 80012ac:	0801a304 	.word	0x0801a304
 80012b0:	0801a30c 	.word	0x0801a30c
 80012b4:	0801a320 	.word	0x0801a320
 80012b8:	0801a328 	.word	0x0801a328
 80012bc:	40020400 	.word	0x40020400
 80012c0:	0801a32c 	.word	0x0801a32c
 80012c4:	0801a330 	.word	0x0801a330
 80012c8:	0801a334 	.word	0x0801a334
 80012cc:	0801a33c 	.word	0x0801a33c
 80012d0:	0801a344 	.word	0x0801a344
 80012d4:	0801a34c 	.word	0x0801a34c
 80012d8:	0801a35c 	.word	0x0801a35c
 80012dc:	0801a36c 	.word	0x0801a36c
 80012e0:	0801a37c 	.word	0x0801a37c
 80012e4:	0801a38c 	.word	0x0801a38c
			sprintf(s,"LED3 is OFF \n\r");
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	491e      	ldr	r1, [pc, #120]	@ (8001368 <telnet_process_command+0x3f8>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f017 fe02 	bl	8018ef8 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe ff83 	bl	8000204 <strlen>
 80012fe:	4602      	mov	r2, r0
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001308:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	6800      	ldr	r0, [r0, #0]
 8001314:	f007 fbb6 	bl	8008a84 <netconn_write_partly>
}
 8001318:	e020      	b.n	800135c <telnet_process_command+0x3ec>
	else if (strcasecmp(token, "CLIENT") == 0)
 800131a:	4914      	ldr	r1, [pc, #80]	@ (800136c <telnet_process_command+0x3fc>)
 800131c:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001320:	f017 fe80 	bl	8019024 <strcasecmp>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <telnet_process_command+0x3ec>
		http_client(s, CMD_BUFFER_LEN);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fdb8 	bl	8000ea8 <http_client>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ff61 	bl	8000204 <strlen>
 8001342:	4602      	mov	r2, r0
 8001344:	f107 010c 	add.w	r1, r7, #12
 8001348:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800134c:	f5a3 7004 	sub.w	r0, r3, #528	@ 0x210
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	6800      	ldr	r0, [r0, #0]
 8001358:	f007 fb94 	bl	8008a84 <netconn_write_partly>
}
 800135c:	bf00      	nop
 800135e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	0801a39c 	.word	0x0801a39c
 800136c:	0801a3ac 	.word	0x0801a3ac

08001370 <telnet_byte_available>:


static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <telnet_byte_available+0x68>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001384:	d210      	bcs.n	80013a8 <telnet_byte_available+0x38>
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b1f      	cmp	r3, #31
 800138a:	d90d      	bls.n	80013a8 <telnet_byte_available+0x38>
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db09      	blt.n	80013a8 <telnet_byte_available+0x38>
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <telnet_byte_available+0x68>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	b291      	uxth	r1, r2
 800139c:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <telnet_byte_available+0x68>)
 800139e:	8011      	strh	r1, [r2, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <telnet_byte_available+0x6c>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b0a      	cmp	r3, #10
 80013ac:	d002      	beq.n	80013b4 <telnet_byte_available+0x44>
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b0d      	cmp	r3, #13
 80013b2:	d10c      	bne.n	80013ce <telnet_byte_available+0x5e>
		data[cnt] = '\0';
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <telnet_byte_available+0x68>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <telnet_byte_available+0x6c>)
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	4806      	ldr	r0, [pc, #24]	@ (80013dc <telnet_byte_available+0x6c>)
 80013c4:	f7ff fdd4 	bl	8000f70 <telnet_process_command>
		cnt = 0;
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <telnet_byte_available+0x68>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
	}
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200003f4 	.word	0x200003f4
 80013dc:	200003f8 	.word	0x200003f8

080013e0 <tcptelnet_thread>:

static void tcptelnet_thread(void *arg)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2010      	movs	r0, #16
 80013ee:	f006 ff71 	bl	80082d4 <netconn_new_with_proto_and_callback>
 80013f2:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d055      	beq.n	80014a6 <tcptelnet_thread+0xc6>
	{
		/* Bind connection to well known port number 23. */
		err = netconn_bind(conn, NULL, 23);
 80013fa:	2217      	movs	r2, #23
 80013fc:	2100      	movs	r1, #0
 80013fe:	69f8      	ldr	r0, [r7, #28]
 8001400:	f007 f822 	bl	8008448 <netconn_bind>
 8001404:	4603      	mov	r3, r0
 8001406:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 8001408:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d146      	bne.n	800149e <tcptelnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001410:	21ff      	movs	r1, #255	@ 0xff
 8001412:	69f8      	ldr	r0, [r7, #28]
 8001414:	f007 f888 	bl	8008528 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	69f8      	ldr	r0, [r7, #28]
 8001420:	f007 f8ae 	bl	8008580 <netconn_accept>
 8001424:	4603      	mov	r3, r0
 8001426:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8001428:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f3      	bne.n	8001418 <tcptelnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001430:	e022      	b.n	8001478 <tcptelnet_thread+0x98>
					{
						do
						{
							netbuf_data(buf, (void**)&data, &len);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f107 020a 	add.w	r2, r7, #10
 8001438:	f107 010c 	add.w	r1, r7, #12
 800143c:	4618      	mov	r0, r3
 800143e:	f009 f98f 	bl	800a760 <netbuf_data>
							while (len--) telnet_byte_available(*data++, newconn);
 8001442:	e008      	b.n	8001456 <tcptelnet_thread+0x76>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60fa      	str	r2, [r7, #12]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff8d 	bl	8001370 <telnet_byte_available>
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	b292      	uxth	r2, r2
 800145c:	817a      	strh	r2, [r7, #10]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <tcptelnet_thread+0x64>

						}
						while (netbuf_next(buf) >= 0);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4618      	mov	r0, r3
 8001466:	f009 f9c5 	bl	800a7f4 <netbuf_next>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	dae0      	bge.n	8001432 <tcptelnet_thread+0x52>

						netbuf_delete(buf);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4618      	mov	r0, r3
 8001474:	f009 f954 	bl	800a720 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f107 0210 	add.w	r2, r7, #16
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f007 fa85 	bl	8008990 <netconn_recv>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0d2      	beq.n	8001432 <tcptelnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4618      	mov	r0, r3
 8001490:	f007 fbfa 	bl	8008c88 <netconn_close>
					netconn_delete(newconn);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	4618      	mov	r0, r3
 8001498:	f006 ffba 	bl	8008410 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 800149c:	e7bc      	b.n	8001418 <tcptelnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 ffb5 	bl	8008410 <netconn_delete>
		}
	}
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <tcptelnet_init>:
/*-----------------------------------------------------------------------------------*/

void tcptelnet_init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af02      	add	r7, sp, #8
	sys_thread_new("tcptelnet_thread", tcptelnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPTELNET_THREAD_PRIO);
 80014b6:	2304      	movs	r3, #4
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014be:	2200      	movs	r2, #0
 80014c0:	4903      	ldr	r1, [pc, #12]	@ (80014d0 <tcptelnet_init+0x20>)
 80014c2:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <tcptelnet_init+0x24>)
 80014c4:	f017 fb94 	bl	8018bf0 <sys_thread_new>
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	080013e1 	.word	0x080013e1
 80014d4:	0801a3b4 	.word	0x0801a3b4

080014d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001510 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014dc:	f7ff fc5e 	bl	8000d9c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	@ (8001518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001506:	f017 febf 	bl	8019288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150a:	f7ff f86b 	bl	80005e4 <main>
  bx  lr    
 800150e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001510:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800151c:	080283e8 	.word	0x080283e8
  ldr r2, =_sbss
 8001520:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001524:	20011254 	.word	0x20011254

08001528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC_IRQHandler>

0800152a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <LAN8742_RegisterBusIO+0x28>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <LAN8742_RegisterBusIO+0x28>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <LAN8742_RegisterBusIO+0x28>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e014      	b.n	8001582 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d139      	bne.n	800161e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e01c      	b.n	80015fe <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f107 020c 	add.w	r2, r7, #12
 80015cc:	2112      	movs	r1, #18
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	4798      	blx	r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da03      	bge.n	80015e0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80015d8:	f06f 0304 	mvn.w	r3, #4
 80015dc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015de:	e00b      	b.n	80015f8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d105      	bne.n	80015f8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
         break;
 80015f6:	e005      	b.n	8001604 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b1f      	cmp	r3, #31
 8001602:	d9df      	bls.n	80015c4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b1f      	cmp	r3, #31
 800160a:	d902      	bls.n	8001612 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800160c:	f06f 0302 	mvn.w	r3, #2
 8001610:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800161e:	693b      	ldr	r3, [r7, #16]
 }
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6810      	ldr	r0, [r2, #0]
 800163c:	f107 020c 	add.w	r2, r7, #12
 8001640:	2101      	movs	r1, #1
 8001642:	4798      	blx	r3
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	da02      	bge.n	8001650 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800164a:	f06f 0304 	mvn.w	r3, #4
 800164e:	e06e      	b.n	800172e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6810      	ldr	r0, [r2, #0]
 8001658:	f107 020c 	add.w	r2, r7, #12
 800165c:	2101      	movs	r1, #1
 800165e:	4798      	blx	r3
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	da02      	bge.n	800166c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001666:	f06f 0304 	mvn.w	r3, #4
 800166a:	e060      	b.n	800172e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001676:	2301      	movs	r3, #1
 8001678:	e059      	b.n	800172e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6810      	ldr	r0, [r2, #0]
 8001682:	f107 020c 	add.w	r2, r7, #12
 8001686:	2100      	movs	r1, #0
 8001688:	4798      	blx	r3
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	da02      	bge.n	8001696 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001690:	f06f 0304 	mvn.w	r3, #4
 8001694:	e04b      	b.n	800172e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d11b      	bne.n	80016d8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <LAN8742_GetLinkState+0x90>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016b4:	2302      	movs	r3, #2
 80016b6:	e03a      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e033      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016d0:	2304      	movs	r3, #4
 80016d2:	e02c      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016d4:	2305      	movs	r3, #5
 80016d6:	e02a      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6810      	ldr	r0, [r2, #0]
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	211f      	movs	r1, #31
 80016e6:	4798      	blx	r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da02      	bge.n	80016f4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016ee:	f06f 0304 	mvn.w	r3, #4
 80016f2:	e01c      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016fe:	2306      	movs	r3, #6
 8001700:	e015      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 031c 	and.w	r3, r3, #28
 8001708:	2b18      	cmp	r3, #24
 800170a:	d101      	bne.n	8001710 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800170c:	2302      	movs	r3, #2
 800170e:	e00e      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 031c 	and.w	r3, r3, #28
 8001716:	2b08      	cmp	r3, #8
 8001718:	d101      	bne.n	800171e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800171a:	2303      	movs	r3, #3
 800171c:	e007      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 031c 	and.w	r3, r3, #28
 8001724:	2b14      	cmp	r3, #20
 8001726:	d101      	bne.n	800172c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001728:	2304      	movs	r3, #4
 800172a:	e000      	b.n	800172e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800172c:	2305      	movs	r3, #5
    }
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f8fc 	bl	800195e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f7ff f9a2 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff f90a 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008
 80017a0:	200005f8 	.word	0x200005f8

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200005f8 	.word	0x200005f8

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	@ (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff4c 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001986:	f7ff ff61 	bl	800184c <__NVIC_GetPriorityGrouping>
 800198a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7ff ffb1 	bl	80018f8 <NVIC_EncodePriority>
 8001996:	4602      	mov	r2, r0
 8001998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff80 	bl	80018a4 <__NVIC_SetPriority>
}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff54 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e08a      	b.n	8001af0 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d106      	bne.n	80019f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2223      	movs	r2, #35	@ 0x23
 80019e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f003 f9f9 	bl	8004de4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <HAL_ETH_Init+0x130>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a3f      	ldr	r2, [pc, #252]	@ (8001af8 <HAL_ETH_Init+0x130>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <HAL_ETH_Init+0x130>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_ETH_Init+0x134>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a3a      	ldr	r2, [pc, #232]	@ (8001afc <HAL_ETH_Init+0x134>)
 8001a14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a18:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a1a:	4b38      	ldr	r3, [pc, #224]	@ (8001afc <HAL_ETH_Init+0x134>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4936      	ldr	r1, [pc, #216]	@ (8001afc <HAL_ETH_Init+0x134>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a28:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <HAL_ETH_Init+0x134>)
 8001a2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a44:	f7ff feae 	bl	80017a4 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a4a:	e011      	b.n	8001a70 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a4c:	f7ff feaa 	bl	80017a4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a5a:	d909      	bls.n	8001a70 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	22e0      	movs	r2, #224	@ 0xe0
 8001a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e03f      	b.n	8001af0 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e4      	bne.n	8001a4c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 ff4c 	bl	8002920 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fff7 	bl	8002a7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 f84d 	bl	8002b2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 ffb5 	bl	8002a0c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ac6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ada:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40013800 	.word	0x40013800

08001b00 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d161      	bne.n	8001bd6 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2223      	movs	r2, #35	@ 0x23
 8001b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2204      	movs	r2, #4
 8001b24:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f9f4 	bl	8001f14 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff fe41 	bl	80017bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b58:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b70:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fd71 	bl	800265a <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0208 	orr.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff fe13 	bl	80017bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0204 	orr.w	r2, r2, #4
 8001bac:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001bc0:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001bc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bc8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2223      	movs	r2, #35	@ 0x23
 8001bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bee:	2b23      	cmp	r3, #35	@ 0x23
 8001bf0:	d170      	bne.n	8001cd4 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2223      	movs	r2, #35	@ 0x23
 8001bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001c0c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001c10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c14:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c2c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	f023 0302 	bic.w	r3, r3, #2
 8001c40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c44:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0204 	bic.w	r2, r2, #4
 8001c54:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff fdac 	bl	80017bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fcf4 	bl	800265a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0208 	bic.w	r2, r2, #8
 8001c80:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff fd96 	bl	80017bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00e      	b.n	8001cbc <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	3212      	adds	r2, #18
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d9ed      	bls.n	8001c9e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e045      	b.n	8001d8e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d08:	2b23      	cmp	r3, #35	@ 0x23
 8001d0a:	d13f      	bne.n	8001d8c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 ff77 	bl	8002c0c <ETH_Prepare_Tx_Descriptors>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e02a      	b.n	8001d8e <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d38:	f3bf 8f4f 	dsb	sy
}
 8001d3c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d904      	bls.n	8001d5a <HAL_ETH_Transmit_IT+0x7c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	1f1a      	subs	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d74:	461a      	mov	r2, r3
 8001d76:	2304      	movs	r3, #4
 8001d78:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0a4      	b.n	8001f0c <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dc8:	2b23      	cmp	r3, #35	@ 0x23
 8001dca:	d001      	beq.n	8001dd0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e09d      	b.n	8001f0c <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	3212      	adds	r2, #18
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de6:	f1c3 0304 	rsb	r3, r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001dec:	e066      	b.n	8001ebc <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <HAL_ETH_ReadData+0x88>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03c      	beq.n	8001e98 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e40:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f003 f98e 	bl	8005198 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	441a      	add	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d902      	bls.n	8001eaa <HAL_ETH_ReadData+0x114>
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	3212      	adds	r2, #18
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db06      	blt.n	8001ed2 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d202      	bcs.n	8001ed2 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d08d      	beq.n	8001dee <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	441a      	add	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f814 	bl	8001f14 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001f20:	2301      	movs	r3, #1
 8001f22:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f28:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	3212      	adds	r2, #18
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f3a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001f3c:	e044      	b.n	8001fc8 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d112      	bne.n	8001f6c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 f8f4 	bl	8005138 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	74fb      	strb	r3, [r7, #19]
 8001f5a:	e007      	b.n	8001f6c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	461a      	mov	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02a      	beq.n	8001fc8 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	6053      	str	r3, [r2, #4]
 8001f8a:	e005      	b.n	8001f98 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d902      	bls.n	8001fb6 <ETH_UpdateDescriptor+0xa2>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	3212      	adds	r2, #18
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <ETH_UpdateDescriptor+0xc0>
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1b4      	bne.n	8001f3e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d01a      	beq.n	8002014 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001fe8:	f3bf 8f5f 	dmb	sy
}
 8001fec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	18ca      	adds	r2, r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3318      	adds	r3, #24
 8002028:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800203a:	e047      	b.n	80020cc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800203c:	2301      	movs	r3, #1
 800203e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3b01      	subs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3304      	adds	r3, #4
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3301      	adds	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d902      	bls.n	8002068 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	3b04      	subs	r3, #4
 8002066:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02c      	beq.n	80020cc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db1f      	blt.n	80020c8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	3304      	adds	r3, #4
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f8bf 	bl	8005218 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	3304      	adds	r3, #4
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3301      	adds	r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d902      	bls.n	80020ba <HAL_ETH_ReleaseTxPacket+0x9e>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	3b04      	subs	r3, #4
 80020b8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020c6:	e001      	b.n	80020cc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_ETH_ReleaseTxPacket+0xbc>
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1b1      	bne.n	800203c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800210c:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_ETH_IRQHandler+0x158>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <HAL_ETH_IRQHandler+0x56>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212e:	461a      	mov	r2, r3
 8002130:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_ETH_IRQHandler+0x15c>)
 8002132:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f002 fb95 	bl	8004864 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00f      	beq.n	8002164 <HAL_ETH_IRQHandler+0x80>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002156:	461a      	mov	r2, r3
 8002158:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800215c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f002 fb90 	bl	8004884 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d042      	beq.n	80021f4 <HAL_ETH_IRQHandler+0x110>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03d      	beq.n	80021f4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f043 0208 	orr.w	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01a      	beq.n	80021c8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_ETH_IRQHandler+0x160>)
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80021b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021bc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	22e0      	movs	r2, #224	@ 0xe0
 80021c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80021c6:	e012      	b.n	80021ee <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80021d6:	4013      	ands	r3, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e6:	461a      	mov	r2, r3
 80021e8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80021ec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f002 fb58 	bl	80048a4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f81a 	bl	8002248 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_ETH_IRQHandler+0x158>)
 8002228:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800222c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f814 	bl	800225c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40013c00 	.word	0x40013c00
 8002240:	00010040 	.word	0x00010040
 8002244:	007e2000 	.word	0x007e2000

08002248 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 031c 	and.w	r3, r3, #28
 800228c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	02db      	lsls	r3, r3, #11
 8002292:	b29b      	uxth	r3, r3
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80022c0:	f7ff fa70 	bl	80017a4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022c6:	e00d      	b.n	80022e4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80022c8:	f7ff fa6c 	bl	80017a4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d6:	d301      	bcc.n	80022dc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e010      	b.n	80022fe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ec      	bne.n	80022c8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 031c 	and.w	r3, r3, #28
 8002322:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	02db      	lsls	r3, r3, #11
 8002328:	b29b      	uxth	r3, r3
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	019b      	lsls	r3, r3, #6
 8002334:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002360:	f7ff fa20 	bl	80017a4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002366:	e00d      	b.n	8002384 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002368:	f7ff fa1c 	bl	80017a4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002376:	d301      	bcc.n	800237c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e009      	b.n	8002390 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ec      	bne.n	8002368 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0e6      	b.n	800257a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf14      	ite	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	2300      	moveq	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	b29a      	uxth	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00b      	b.n	80025b2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d105      	bne.n	80025b0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025a4:	6839      	ldr	r1, [r7, #0]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f87c 	bl	80026a4 <ETH_SetMACConfig>

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 031c 	bic.w	r3, r3, #28
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025d4:	f001 faa4 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 80025d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <HAL_ETH_SetMDIOClockRange+0x74>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d804      	bhi.n	80025ec <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f043 0308 	orr.w	r3, r3, #8
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e019      	b.n	8002620 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <HAL_ETH_SetMDIOClockRange+0x78>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d204      	bcs.n	80025fe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f043 030c 	orr.w	r3, r3, #12
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e010      	b.n	8002620 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d90c      	bls.n	8002620 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <HAL_ETH_SetMDIOClockRange+0x80>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d804      	bhi.n	8002618 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e003      	b.n	8002620 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f043 0310 	orr.w	r3, r3, #16
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	611a      	str	r2, [r3, #16]
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	02160ebf 	.word	0x02160ebf
 8002634:	03938700 	.word	0x03938700
 8002638:	05f5e0ff 	.word	0x05f5e0ff
 800263c:	08f0d17f 	.word	0x08f0d17f

08002640 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800267c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff f896 	bl	80017bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800269a:	6193      	str	r3, [r2, #24]
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <ETH_SetMACConfig+0x164>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7b9b      	ldrb	r3, [r3, #14]
 80026c2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	7c12      	ldrb	r2, [r2, #16]
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d102      	bne.n	80026d2 <ETH_SetMACConfig+0x2e>
 80026cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026d0:	e000      	b.n	80026d4 <ETH_SetMACConfig+0x30>
 80026d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	7c52      	ldrb	r2, [r2, #17]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d102      	bne.n	80026e4 <ETH_SetMACConfig+0x40>
 80026de:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026e2:	e000      	b.n	80026e6 <ETH_SetMACConfig+0x42>
 80026e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	7fdb      	ldrb	r3, [r3, #31]
 80026f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	7f92      	ldrb	r2, [r2, #30]
 8002700:	2a00      	cmp	r2, #0
 8002702:	d102      	bne.n	800270a <ETH_SetMACConfig+0x66>
 8002704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002708:	e000      	b.n	800270c <ETH_SetMACConfig+0x68>
 800270a:	2200      	movs	r2, #0
                        macconf->Speed |
 800270c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7f1b      	ldrb	r3, [r3, #28]
 8002712:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002714:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800271a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	f892 2020 	ldrb.w	r2, [r2, #32]
 800272a:	2a00      	cmp	r2, #0
 800272c:	d102      	bne.n	8002734 <ETH_SetMACConfig+0x90>
 800272e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002732:	e000      	b.n	8002736 <ETH_SetMACConfig+0x92>
 8002734:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002736:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	7bdb      	ldrb	r3, [r3, #15]
 800273c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800273e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002744:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800274c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800274e:	4313      	orrs	r3, r2
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff f828 	bl	80017bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002792:	2a00      	cmp	r2, #0
 8002794:	d101      	bne.n	800279a <ETH_SetMACConfig+0xf6>
 8002796:	2280      	movs	r2, #128	@ 0x80
 8002798:	e000      	b.n	800279c <ETH_SetMACConfig+0xf8>
 800279a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800279c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	d101      	bne.n	80027b2 <ETH_SetMACConfig+0x10e>
 80027ae:	2208      	movs	r2, #8
 80027b0:	e000      	b.n	80027b4 <ETH_SetMACConfig+0x110>
 80027b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80027bc:	2a01      	cmp	r2, #1
 80027be:	d101      	bne.n	80027c4 <ETH_SetMACConfig+0x120>
 80027c0:	2204      	movs	r2, #4
 80027c2:	e000      	b.n	80027c6 <ETH_SetMACConfig+0x122>
 80027c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80027ce:	2a01      	cmp	r2, #1
 80027d0:	d101      	bne.n	80027d6 <ETH_SetMACConfig+0x132>
 80027d2:	2202      	movs	r2, #2
 80027d4:	e000      	b.n	80027d8 <ETH_SetMACConfig+0x134>
 80027d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027d8:	4313      	orrs	r3, r2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f0:	2001      	movs	r0, #1
 80027f2:	f7fe ffe3 	bl	80017bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	fd20810f 	.word	0xfd20810f

0800280c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <ETH_SetDMAConfig+0x110>)
 8002826:	4013      	ands	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7b1b      	ldrb	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <ETH_SetDMAConfig+0x2c>
 8002832:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002836:	e000      	b.n	800283a <ETH_SetDMAConfig+0x2e>
 8002838:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7b5b      	ldrb	r3, [r3, #13]
 800283e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002840:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	7f52      	ldrb	r2, [r2, #29]
 8002846:	2a00      	cmp	r2, #0
 8002848:	d102      	bne.n	8002850 <ETH_SetDMAConfig+0x44>
 800284a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800284e:	e000      	b.n	8002852 <ETH_SetDMAConfig+0x46>
 8002850:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002852:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7b9b      	ldrb	r3, [r3, #14]
 8002858:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800285a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002860:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	7f1b      	ldrb	r3, [r3, #28]
 8002866:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002868:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	7f9b      	ldrb	r3, [r3, #30]
 800286e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002870:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002876:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800287e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002880:	4313      	orrs	r3, r2
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002890:	461a      	mov	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7fe ff8a 	bl	80017bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b0:	461a      	mov	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	791b      	ldrb	r3, [r3, #4]
 80028ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002900:	2001      	movs	r0, #1
 8002902:	f7fe ff5b 	bl	80017bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	f8de3f23 	.word	0xf8de3f23

08002920 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0a6      	sub	sp, #152	@ 0x98
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002934:	2300      	movs	r3, #0
 8002936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002962:	2300      	movs	r3, #0
 8002964:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800296c:	2300      	movs	r3, #0
 800296e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002988:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800298e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800299a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe7f 	bl	80026a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029e0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029e6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff05 	bl	800280c <ETH_SetDMAConfig>
}
 8002a02:	bf00      	nop
 8002a04:	3798      	adds	r7, #152	@ 0x98
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3305      	adds	r3, #5
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	3204      	adds	r2, #4
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <ETH_MACAddressConfig+0x68>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3303      	adds	r3, #3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	061a      	lsls	r2, r3, #24
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3302      	adds	r3, #2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	4313      	orrs	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <ETH_MACAddressConfig+0x6c>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	461a      	mov	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	6013      	str	r3, [r2, #0]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40028040 	.word	0x40028040
 8002a78:	40028044 	.word	0x40028044

08002a7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e03e      	b.n	8002b08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	3206      	adds	r2, #6
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d80c      	bhi.n	8002aec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68d9      	ldr	r1, [r3, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	e004      	b.n	8002af6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d9bd      	bls.n	8002a8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b20:	611a      	str	r2, [r3, #16]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e048      	b.n	8002bce <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6919      	ldr	r1, [r3, #16]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	3212      	adds	r2, #18
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d80c      	bhi.n	8002bbe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6919      	ldr	r1, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	e004      	b.n	8002bc8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d9b3      	bls.n	8002b3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfe:	60da      	str	r2, [r3, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b091      	sub	sp, #68	@ 0x44
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c4e:	d007      	beq.n	8002c60 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c54:	3304      	adds	r3, #4
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c60:	2302      	movs	r3, #2
 8002c62:	e115      	b.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c66:	3301      	adds	r3, #1
 8002c68:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002c7c:	f023 031f 	bic.w	r3, r3, #31
 8002c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c82:	6852      	ldr	r2, [r2, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cea:	e084      	b.n	8002df6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e005      	b.n	8002d18 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d902      	bls.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x11e>
 8002d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d26:	3b04      	subs	r3, #4
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d40:	d007      	beq.n	8002d52 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d46:	3304      	adds	r3, #4
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d029      	beq.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d64:	e019      	b.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d66:	f3bf 8f5f 	dmb	sy
}
 8002d6a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d902      	bls.n	8002d8a <ETH_Prepare_Tx_Descriptors+0x17e>
 8002d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d86:	3b04      	subs	r3, #4
 8002d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	3301      	adds	r3, #1
 8002d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3e1      	bcc.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e074      	b.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db4:	3301      	adds	r3, #1
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002dd0:	f023 031f 	bic.w	r3, r3, #31
 8002dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dd6:	6852      	ldr	r2, [r2, #4]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de0:	3301      	adds	r3, #1
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002de4:	f3bf 8f5f 	dmb	sy
}
 8002de8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f af76 	bne.w	8002cec <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e005      	b.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	6a3a      	ldr	r2, [r7, #32]
 8002e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e34:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002e36:	f3bf 8f5f 	dmb	sy
}
 8002e3a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e50:	3304      	adds	r3, #4
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e5c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e62:	613b      	str	r3, [r7, #16]
  return(result);
 8002e64:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	2301      	movs	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	4413      	add	r3, r2
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f383 8810 	msr	PRIMASK, r3
}
 8002e8c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3744      	adds	r7, #68	@ 0x44
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e177      	b.n	80031a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8166 	bne.w	80031a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80c0 	beq.w	80031a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_GPIO_Init+0x324>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a61      	ldr	r2, [pc, #388]	@ (80031c4 <HAL_GPIO_Init+0x328>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <HAL_GPIO_Init+0x32c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d037      	beq.n	80030da <HAL_GPIO_Init+0x23e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_GPIO_Init+0x330>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_GPIO_Init+0x23a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_GPIO_Init+0x334>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02b      	beq.n	80030d2 <HAL_GPIO_Init+0x236>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a55      	ldr	r2, [pc, #340]	@ (80031d4 <HAL_GPIO_Init+0x338>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d025      	beq.n	80030ce <HAL_GPIO_Init+0x232>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a54      	ldr	r2, [pc, #336]	@ (80031d8 <HAL_GPIO_Init+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01f      	beq.n	80030ca <HAL_GPIO_Init+0x22e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a53      	ldr	r2, [pc, #332]	@ (80031dc <HAL_GPIO_Init+0x340>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d019      	beq.n	80030c6 <HAL_GPIO_Init+0x22a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_GPIO_Init+0x344>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0x226>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_GPIO_Init+0x348>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_GPIO_Init+0x222>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a50      	ldr	r2, [pc, #320]	@ (80031e8 <HAL_GPIO_Init+0x34c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_GPIO_Init+0x21e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4f      	ldr	r2, [pc, #316]	@ (80031ec <HAL_GPIO_Init+0x350>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_GPIO_Init+0x21a>
 80030b2:	2309      	movs	r3, #9
 80030b4:	e012      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030b6:	230a      	movs	r3, #10
 80030b8:	e010      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ba:	2308      	movs	r3, #8
 80030bc:	e00e      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030be:	2307      	movs	r3, #7
 80030c0:	e00c      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030c2:	2306      	movs	r3, #6
 80030c4:	e00a      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030c6:	2305      	movs	r3, #5
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x240>
 80030da:	2300      	movs	r3, #0
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	@ (80031c4 <HAL_GPIO_Init+0x328>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311e:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003124:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003148:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314e:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003172:	4a1f      	ldr	r2, [pc, #124]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319c:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <HAL_GPIO_Init+0x354>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	f67f ae84 	bls.w	8002eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40021400 	.word	0x40021400
 80031e0:	40021800 	.word	0x40021800
 80031e4:	40021c00 	.word	0x40021c00
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40022400 	.word	0x40022400
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e001      	b.n	8003216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e267      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003276:	4b88      	ldr	r3, [pc, #544]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b85      	ldr	r3, [pc, #532]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b82      	ldr	r3, [pc, #520]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b7e      	ldr	r3, [pc, #504]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e242      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b76      	ldr	r3, [pc, #472]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a75      	ldr	r2, [pc, #468]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b70      	ldr	r3, [pc, #448]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b69      	ldr	r3, [pc, #420]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b66      	ldr	r3, [pc, #408]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fa48 	bl	80017a4 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fa44 	bl	80017a4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e207      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5b      	ldr	r3, [pc, #364]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fa34 	bl	80017a4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fa30 	bl	80017a4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1f3      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b51      	ldr	r3, [pc, #324]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800336e:	4b4a      	ldr	r3, [pc, #296]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b44      	ldr	r3, [pc, #272]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c7      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4937      	ldr	r1, [pc, #220]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	@ (800349c <HAL_RCC_OscConfig+0x244>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe f9e9 	bl	80017a4 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe f9e5 	bl	80017a4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a8      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4925      	ldr	r1, [pc, #148]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_RCC_OscConfig+0x244>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe f9c8 	bl	80017a4 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe f9c4 	bl	80017a4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e187      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d036      	beq.n	80034b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <HAL_RCC_OscConfig+0x248>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe f9a8 	bl	80017a4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe f9a4 	bl	80017a4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e167      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_RCC_OscConfig+0x240>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e01b      	b.n	80034b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <HAL_RCC_OscConfig+0x248>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe f991 	bl	80017a4 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe f98d 	bl	80017a4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e150      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b81      	ldr	r3, [pc, #516]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b7d      	ldr	r3, [pc, #500]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	4a7c      	ldr	r2, [pc, #496]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034de:	4b7a      	ldr	r3, [pc, #488]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b77      	ldr	r3, [pc, #476]	@ (80036cc <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	@ (80036cc <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	@ (80036cc <HAL_RCC_OscConfig+0x474>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fe f94d 	bl	80017a4 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fe f949 	bl	80017a4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e10c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6a      	ldr	r3, [pc, #424]	@ (80036cc <HAL_RCC_OscConfig+0x474>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ea>
 8003534:	4b64      	ldr	r3, [pc, #400]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003538:	4a63      	ldr	r2, [pc, #396]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x30c>
 800354a:	4b5f      	ldr	r3, [pc, #380]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	4a5e      	ldr	r2, [pc, #376]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	@ 0x70
 8003556:	4b5c      	ldr	r3, [pc, #368]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	4a5b      	ldr	r2, [pc, #364]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	@ 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003564:	4b58      	ldr	r3, [pc, #352]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	4a57      	ldr	r2, [pc, #348]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003570:	4b55      	ldr	r3, [pc, #340]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003574:	4a54      	ldr	r2, [pc, #336]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe f90e 	bl	80017a4 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe f90a 	bl	80017a4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0cb      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b49      	ldr	r3, [pc, #292]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x334>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fe f8f8 	bl	80017a4 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fe f8f4 	bl	80017a4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0b5      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	4a38      	ldr	r2, [pc, #224]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a1 	beq.w	8003738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f6:	4b34      	ldr	r3, [pc, #208]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05c      	beq.n	80036bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d141      	bne.n	800368e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b31      	ldr	r3, [pc, #196]	@ (80036d0 <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe f8c8 	bl	80017a4 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe f8c4 	bl	80017a4 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e087      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b27      	ldr	r3, [pc, #156]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	491b      	ldr	r1, [pc, #108]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe f89d 	bl	80017a4 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe f899 	bl	80017a4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e05c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x416>
 800368c:	e054      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe f886 	bl	80017a4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe f882 	bl	80017a4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e045      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
 80036ba:	e03d      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e038      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x4ec>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d028      	beq.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11a      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fd ffb4 	bl	80017a4 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fd ffb0 	bl	80017a4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490a      	ldr	r1, [pc, #40]	@ (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	@ (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd f8de 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	0801defc 	.word	0x0801defc
 800390c:	20000000 	.word	0x20000000
 8003910:	20000004 	.word	0x20000004

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b094      	sub	sp, #80	@ 0x50
 800391a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392c:	4b79      	ldr	r3, [pc, #484]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d00d      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x40>
 8003938:	2b08      	cmp	r3, #8
 800393a:	f200 80e1 	bhi.w	8003b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 8003942:	2b04      	cmp	r3, #4
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e0db      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b73      	ldr	r3, [pc, #460]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800394a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800394c:	e0db      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394e:	4b73      	ldr	r3, [pc, #460]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003952:	e0d8      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b6f      	ldr	r3, [pc, #444]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003974:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
 800397e:	2300      	movs	r3, #0
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
 8003982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	f04f 0000 	mov.w	r0, #0
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	0159      	lsls	r1, r3, #5
 8003994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003998:	0150      	lsls	r0, r2, #5
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4621      	mov	r1, r4
 80039a0:	1a51      	subs	r1, r2, r1
 80039a2:	6139      	str	r1, [r7, #16]
 80039a4:	4629      	mov	r1, r5
 80039a6:	eb63 0301 	sbc.w	r3, r3, r1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b8:	4659      	mov	r1, fp
 80039ba:	018b      	lsls	r3, r1, #6
 80039bc:	4651      	mov	r1, sl
 80039be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c2:	4651      	mov	r1, sl
 80039c4:	018a      	lsls	r2, r1, #6
 80039c6:	4651      	mov	r1, sl
 80039c8:	ebb2 0801 	subs.w	r8, r2, r1
 80039cc:	4659      	mov	r1, fp
 80039ce:	eb63 0901 	sbc.w	r9, r3, r1
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e6:	4690      	mov	r8, r2
 80039e8:	4699      	mov	r9, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	eb18 0303 	adds.w	r3, r8, r3
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	462b      	mov	r3, r5
 80039f4:	eb49 0303 	adc.w	r3, r9, r3
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a06:	4629      	mov	r1, r5
 8003a08:	024b      	lsls	r3, r1, #9
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a10:	4621      	mov	r1, r4
 8003a12:	024a      	lsls	r2, r1, #9
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a24:	f7fc fc4c 	bl	80002c0 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a30:	e058      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b38      	ldr	r3, [pc, #224]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	0159      	lsls	r1, r3, #5
 8003a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5e:	0150      	lsls	r0, r2, #5
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4641      	mov	r1, r8
 8003a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a84:	ebb2 040a 	subs.w	r4, r2, sl
 8003a88:	eb63 050b 	sbc.w	r5, r3, fp
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	00eb      	lsls	r3, r5, #3
 8003a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9a:	00e2      	lsls	r2, r4, #3
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	18e3      	adds	r3, r4, r3
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	eb45 0303 	adc.w	r3, r5, r3
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aba:	4629      	mov	r1, r5
 8003abc:	028b      	lsls	r3, r1, #10
 8003abe:	4621      	mov	r1, r4
 8003ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	028a      	lsls	r2, r1, #10
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	61fa      	str	r2, [r7, #28]
 8003ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad8:	f7fc fbf2 	bl	80002c0 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3750      	adds	r7, #80	@ 0x50
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	@ (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	0801df0c 	.word	0x0801df0c

08003b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b64:	f7ff ffdc 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0b5b      	lsrs	r3, r3, #13
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	@ (8003b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	0801df0c 	.word	0x0801df0c

08003b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	220f      	movs	r2, #15
 8003b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b98:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0203 	and.w	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bca:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <HAL_RCC_GetClockConfig+0x60>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 020f 	and.w	r2, r3, #15
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40023c00 	.word	0x40023c00

08003bec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e01c      	b.n	8003c38 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	795b      	ldrb	r3, [r3, #5]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fc fee4 	bl	80009dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0204 	orr.w	r2, r2, #4
 8003c28:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	791b      	ldrb	r3, [r3, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_RNG_GenerateRandomNumber+0x1a>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e044      	b.n	8003ce4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	795b      	ldrb	r3, [r3, #5]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d133      	bne.n	8003cd2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd fd98 	bl	80017a4 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c76:	e018      	b.n	8003caa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003c78:	f7fd fd94 	bl	80017a4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d911      	bls.n	8003caa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d00a      	beq.n	8003caa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d1df      	bne.n	8003c78 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	715a      	strb	r2, [r3, #5]
 8003cd0:	e004      	b.n	8003cdc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	711a      	strb	r2, [r3, #4]

  return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e041      	b.n	8003d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f839 	bl	8003d8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f000 f9c0 	bl	80040b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d001      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e04e      	b.n	8003e56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a23      	ldr	r2, [pc, #140]	@ (8003e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d022      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de2:	d01d      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x80>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d111      	bne.n	8003e44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d010      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e42:	e007      	b.n	8003e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40010400 	.word	0x40010400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40001800 	.word	0x40001800

08003e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d020      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01b      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0202 	mvn.w	r2, #2
 8003eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8d2 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8c4 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f8d5 	bl	8004088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d020      	beq.n	8003f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0204 	mvn.w	r2, #4
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8ac 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f89e 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8af 	bl	8004088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d020      	beq.n	8003f7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01b      	beq.n	8003f7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0208 	mvn.w	r2, #8
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f886 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f878 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f889 	bl	8004088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d020      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f860 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f852 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f863 	bl	8004088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0201 	mvn.w	r2, #1
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc fcb4 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f906 	bl	800421c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00c      	beq.n	8004034 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f834 	bl	800409c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0220 	mvn.w	r2, #32
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8d8 	bl	8004208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a46      	ldr	r2, [pc, #280]	@ (80041dc <TIM_Base_SetConfig+0x12c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ce:	d00f      	beq.n	80040f0 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a43      	ldr	r2, [pc, #268]	@ (80041e0 <TIM_Base_SetConfig+0x130>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a42      	ldr	r2, [pc, #264]	@ (80041e4 <TIM_Base_SetConfig+0x134>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a41      	ldr	r2, [pc, #260]	@ (80041e8 <TIM_Base_SetConfig+0x138>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a40      	ldr	r2, [pc, #256]	@ (80041ec <TIM_Base_SetConfig+0x13c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d108      	bne.n	8004102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a35      	ldr	r2, [pc, #212]	@ (80041dc <TIM_Base_SetConfig+0x12c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d02b      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004110:	d027      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a32      	ldr	r2, [pc, #200]	@ (80041e0 <TIM_Base_SetConfig+0x130>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d023      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a31      	ldr	r2, [pc, #196]	@ (80041e4 <TIM_Base_SetConfig+0x134>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01f      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a30      	ldr	r2, [pc, #192]	@ (80041e8 <TIM_Base_SetConfig+0x138>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01b      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2f      	ldr	r2, [pc, #188]	@ (80041ec <TIM_Base_SetConfig+0x13c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d017      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2e      	ldr	r2, [pc, #184]	@ (80041f0 <TIM_Base_SetConfig+0x140>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2d      	ldr	r2, [pc, #180]	@ (80041f4 <TIM_Base_SetConfig+0x144>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2c      	ldr	r2, [pc, #176]	@ (80041f8 <TIM_Base_SetConfig+0x148>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2b      	ldr	r2, [pc, #172]	@ (80041fc <TIM_Base_SetConfig+0x14c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2a      	ldr	r2, [pc, #168]	@ (8004200 <TIM_Base_SetConfig+0x150>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a29      	ldr	r2, [pc, #164]	@ (8004204 <TIM_Base_SetConfig+0x154>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <TIM_Base_SetConfig+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0xf8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a12      	ldr	r2, [pc, #72]	@ (80041ec <TIM_Base_SetConfig+0x13c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d103      	bne.n	80041b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]
  }
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40010400 	.word	0x40010400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800
 80041fc:	40001800 	.word	0x40001800
 8004200:	40001c00 	.word	0x40001c00
 8004204:	40002000 	.word	0x40002000

08004208 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e042      	b.n	80042c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fbe2 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f82b 	bl	80042d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d4:	b0c0      	sub	sp, #256	@ 0x100
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	ea40 0301 	orr.w	r3, r0, r1
 80042f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	431a      	orrs	r2, r3
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	431a      	orrs	r2, r3
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004328:	f021 010c 	bic.w	r1, r1, #12
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004336:	430b      	orrs	r3, r1
 8004338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	6999      	ldr	r1, [r3, #24]
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	ea40 0301 	orr.w	r3, r0, r1
 8004356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b8f      	ldr	r3, [pc, #572]	@ (800459c <UART_SetConfig+0x2cc>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d005      	beq.n	8004370 <UART_SetConfig+0xa0>
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b8d      	ldr	r3, [pc, #564]	@ (80045a0 <UART_SetConfig+0x2d0>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d104      	bne.n	800437a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7ff fbf6 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 8004374:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004378:	e003      	b.n	8004382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800437a:	f7ff fbdd 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 800437e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438c:	f040 810c 	bne.w	80045a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800439a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800439e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043aa:	415b      	adcs	r3, r3
 80043ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043b2:	4621      	mov	r1, r4
 80043b4:	eb12 0801 	adds.w	r8, r2, r1
 80043b8:	4629      	mov	r1, r5
 80043ba:	eb43 0901 	adc.w	r9, r3, r1
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d2:	4690      	mov	r8, r2
 80043d4:	4699      	mov	r9, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	eb18 0303 	adds.w	r3, r8, r3
 80043dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043e0:	462b      	mov	r3, r5
 80043e2:	eb49 0303 	adc.w	r3, r9, r3
 80043e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043fe:	460b      	mov	r3, r1
 8004400:	18db      	adds	r3, r3, r3
 8004402:	653b      	str	r3, [r7, #80]	@ 0x50
 8004404:	4613      	mov	r3, r2
 8004406:	eb42 0303 	adc.w	r3, r2, r3
 800440a:	657b      	str	r3, [r7, #84]	@ 0x54
 800440c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004414:	f7fb ff54 	bl	80002c0 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4b61      	ldr	r3, [pc, #388]	@ (80045a4 <UART_SetConfig+0x2d4>)
 800441e:	fba3 2302 	umull	r2, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	011c      	lsls	r4, r3, #4
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004430:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004440:	415b      	adcs	r3, r3
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004448:	4641      	mov	r1, r8
 800444a:	eb12 0a01 	adds.w	sl, r2, r1
 800444e:	4649      	mov	r1, r9
 8004450:	eb43 0b01 	adc.w	fp, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004468:	4692      	mov	sl, r2
 800446a:	469b      	mov	fp, r3
 800446c:	4643      	mov	r3, r8
 800446e:	eb1a 0303 	adds.w	r3, sl, r3
 8004472:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004476:	464b      	mov	r3, r9
 8004478:	eb4b 0303 	adc.w	r3, fp, r3
 800447c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800448c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004494:	460b      	mov	r3, r1
 8004496:	18db      	adds	r3, r3, r3
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40
 800449a:	4613      	mov	r3, r2
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044aa:	f7fb ff09 	bl	80002c0 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <UART_SetConfig+0x2d4>)
 80044b6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2264      	movs	r2, #100	@ 0x64
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	1acb      	subs	r3, r1, r3
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044ca:	4b36      	ldr	r3, [pc, #216]	@ (80045a4 <UART_SetConfig+0x2d4>)
 80044cc:	fba3 2302 	umull	r2, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044f4:	415b      	adcs	r3, r3
 80044f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044fc:	4641      	mov	r1, r8
 80044fe:	1851      	adds	r1, r2, r1
 8004500:	6339      	str	r1, [r7, #48]	@ 0x30
 8004502:	4649      	mov	r1, r9
 8004504:	414b      	adcs	r3, r1
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004514:	4659      	mov	r1, fp
 8004516:	00cb      	lsls	r3, r1, #3
 8004518:	4651      	mov	r1, sl
 800451a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451e:	4651      	mov	r1, sl
 8004520:	00ca      	lsls	r2, r1, #3
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	4603      	mov	r3, r0
 8004528:	4642      	mov	r2, r8
 800452a:	189b      	adds	r3, r3, r2
 800452c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004530:	464b      	mov	r3, r9
 8004532:	460a      	mov	r2, r1
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800454c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004550:	460b      	mov	r3, r1
 8004552:	18db      	adds	r3, r3, r3
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004556:	4613      	mov	r3, r2
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004566:	f7fb feab 	bl	80002c0 <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <UART_SetConfig+0x2d4>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	2164      	movs	r1, #100	@ 0x64
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	3332      	adds	r3, #50	@ 0x32
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <UART_SetConfig+0x2d4>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4422      	add	r2, r4
 8004596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004598:	e106      	b.n	80047a8 <UART_SetConfig+0x4d8>
 800459a:	bf00      	nop
 800459c:	40011000 	.word	0x40011000
 80045a0:	40011400 	.word	0x40011400
 80045a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ba:	4642      	mov	r2, r8
 80045bc:	464b      	mov	r3, r9
 80045be:	1891      	adds	r1, r2, r2
 80045c0:	6239      	str	r1, [r7, #32]
 80045c2:	415b      	adcs	r3, r3
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ca:	4641      	mov	r1, r8
 80045cc:	1854      	adds	r4, r2, r1
 80045ce:	4649      	mov	r1, r9
 80045d0:	eb43 0501 	adc.w	r5, r3, r1
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	00eb      	lsls	r3, r5, #3
 80045de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e2:	00e2      	lsls	r2, r4, #3
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	18e3      	adds	r3, r4, r3
 80045ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045f0:	464b      	mov	r3, r9
 80045f2:	eb45 0303 	adc.w	r3, r5, r3
 80045f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004616:	4629      	mov	r1, r5
 8004618:	008b      	lsls	r3, r1, #2
 800461a:	4621      	mov	r1, r4
 800461c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004620:	4621      	mov	r1, r4
 8004622:	008a      	lsls	r2, r1, #2
 8004624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004628:	f7fb fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4b60      	ldr	r3, [pc, #384]	@ (80047b4 <UART_SetConfig+0x4e4>)
 8004632:	fba3 2302 	umull	r2, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	011c      	lsls	r4, r3, #4
 800463a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	61b9      	str	r1, [r7, #24]
 8004654:	415b      	adcs	r3, r3
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	6139      	str	r1, [r7, #16]
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004690:	464b      	mov	r3, r9
 8004692:	460a      	mov	r2, r1
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046b4:	4649      	mov	r1, r9
 80046b6:	008b      	lsls	r3, r1, #2
 80046b8:	4641      	mov	r1, r8
 80046ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046be:	4641      	mov	r1, r8
 80046c0:	008a      	lsls	r2, r1, #2
 80046c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046c6:	f7fb fdfb 	bl	80002c0 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	4b38      	ldr	r3, [pc, #224]	@ (80047b4 <UART_SetConfig+0x4e4>)
 80046d2:	fba3 2301 	umull	r2, r3, r3, r1
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2264      	movs	r2, #100	@ 0x64
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	1acb      	subs	r3, r1, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	@ 0x32
 80046e4:	4a33      	ldr	r2, [pc, #204]	@ (80047b4 <UART_SetConfig+0x4e4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f0:	441c      	add	r4, r3
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80046fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	415b      	adcs	r3, r3
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004742:	464b      	mov	r3, r9
 8004744:	460a      	mov	r2, r1
 8004746:	eb42 0303 	adc.w	r3, r2, r3
 800474a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	663b      	str	r3, [r7, #96]	@ 0x60
 8004756:	667a      	str	r2, [r7, #100]	@ 0x64
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004764:	4649      	mov	r1, r9
 8004766:	008b      	lsls	r3, r1, #2
 8004768:	4641      	mov	r1, r8
 800476a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476e:	4641      	mov	r1, r8
 8004770:	008a      	lsls	r2, r1, #2
 8004772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004776:	f7fb fda3 	bl	80002c0 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <UART_SetConfig+0x4e4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	@ 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	@ 0x32
 8004792:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <UART_SetConfig+0x4e4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 020f 	and.w	r2, r3, #15
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4422      	add	r2, r4
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047ae:	46bd      	mov	sp, r7
 80047b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b4:	51eb851f 	.word	0x51eb851f

080047b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b08c      	sub	sp, #48	@ 0x30
 80047bc:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80047be:	2100      	movs	r1, #0
 80047c0:	2000      	movs	r0, #0
 80047c2:	f006 f9b5 	bl	800ab30 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80047c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004830 <MX_LWIP_Init+0x78>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80047cc:	4b19      	ldr	r3, [pc, #100]	@ (8004834 <MX_LWIP_Init+0x7c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80047d2:	4b19      	ldr	r3, [pc, #100]	@ (8004838 <MX_LWIP_Init+0x80>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80047d8:	4b18      	ldr	r3, [pc, #96]	@ (800483c <MX_LWIP_Init+0x84>)
 80047da:	9302      	str	r3, [sp, #8]
 80047dc:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <MX_LWIP_Init+0x88>)
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <MX_LWIP_Init+0x80>)
 80047e6:	4a13      	ldr	r2, [pc, #76]	@ (8004834 <MX_LWIP_Init+0x7c>)
 80047e8:	4911      	ldr	r1, [pc, #68]	@ (8004830 <MX_LWIP_Init+0x78>)
 80047ea:	4816      	ldr	r0, [pc, #88]	@ (8004844 <MX_LWIP_Init+0x8c>)
 80047ec:	f007 fdba 	bl	800c364 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80047f0:	4814      	ldr	r0, [pc, #80]	@ (8004844 <MX_LWIP_Init+0x8c>)
 80047f2:	f007 ff71 	bl	800c6d8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80047f6:	4813      	ldr	r0, [pc, #76]	@ (8004844 <MX_LWIP_Init+0x8c>)
 80047f8:	f007 ff7e 	bl	800c6f8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80047fc:	4912      	ldr	r1, [pc, #72]	@ (8004848 <MX_LWIP_Init+0x90>)
 80047fe:	4811      	ldr	r0, [pc, #68]	@ (8004844 <MX_LWIP_Init+0x8c>)
 8004800:	f008 f880 	bl	800c904 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004804:	4b11      	ldr	r3, [pc, #68]	@ (800484c <MX_LWIP_Init+0x94>)
 8004806:	1d3c      	adds	r4, r7, #4
 8004808:	461d      	mov	r5, r3
 800480a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	490a      	ldr	r1, [pc, #40]	@ (8004844 <MX_LWIP_Init+0x8c>)
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd48 	bl	80052b0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004820:	4808      	ldr	r0, [pc, #32]	@ (8004844 <MX_LWIP_Init+0x8c>)
 8004822:	f010 fa4f 	bl	8014cc4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004826:	bf00      	nop
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bdb0      	pop	{r4, r5, r7, pc}
 800482e:	bf00      	nop
 8004830:	20000634 	.word	0x20000634
 8004834:	20000638 	.word	0x20000638
 8004838:	2000063c 	.word	0x2000063c
 800483c:	0800aa41 	.word	0x0800aa41
 8004840:	08004d39 	.word	0x08004d39
 8004844:	200005fc 	.word	0x200005fc
 8004848:	08004851 	.word	0x08004851
 800484c:	0801a3d0 	.word	0x0801a3d0

08004850 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800486c:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <HAL_ETH_RxCpltCallback+0x1c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fe99 	bl	80055a8 <osSemaphoreRelease>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000510c 	.word	0x2000510c

08004884 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <HAL_ETH_TxCpltCallback+0x1c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fe89 	bl	80055a8 <osSemaphoreRelease>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20005110 	.word	0x20005110

080048a4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd fec7 	bl	8002640 <HAL_ETH_GetDMAError>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b8:	2b80      	cmp	r3, #128	@ 0x80
 80048ba:	d104      	bne.n	80048c6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <HAL_ETH_ErrorCallback+0x2c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fe71 	bl	80055a8 <osSemaphoreRelease>
  }
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000510c 	.word	0x2000510c

080048d4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80048d4:	b5b0      	push	{r4, r5, r7, lr}
 80048d6:	b0ac      	sub	sp, #176	@ 0xb0
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80048ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80048f2:	2264      	movs	r2, #100	@ 0x64
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f014 fb8b 	bl	8019012 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80048fc:	4b94      	ldr	r3, [pc, #592]	@ (8004b50 <low_level_init+0x27c>)
 80048fe:	4a95      	ldr	r2, [pc, #596]	@ (8004b54 <low_level_init+0x280>)
 8004900:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004902:	2300      	movs	r3, #0
 8004904:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 800490e:	23e1      	movs	r3, #225	@ 0xe1
 8004910:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0xFE;
 8004914:	23fe      	movs	r3, #254	@ 0xfe
 8004916:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0xEC;
 800491a:	23ec      	movs	r3, #236	@ 0xec
 800491c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x83;
 8004920:	2383      	movs	r3, #131	@ 0x83
 8004922:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8004926:	4a8a      	ldr	r2, [pc, #552]	@ (8004b50 <low_level_init+0x27c>)
 8004928:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800492c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800492e:	4b88      	ldr	r3, [pc, #544]	@ (8004b50 <low_level_init+0x27c>)
 8004930:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004934:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004936:	4b86      	ldr	r3, [pc, #536]	@ (8004b50 <low_level_init+0x27c>)
 8004938:	4a87      	ldr	r2, [pc, #540]	@ (8004b58 <low_level_init+0x284>)
 800493a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800493c:	4b84      	ldr	r3, [pc, #528]	@ (8004b50 <low_level_init+0x27c>)
 800493e:	4a87      	ldr	r2, [pc, #540]	@ (8004b5c <low_level_init+0x288>)
 8004940:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004942:	4b83      	ldr	r3, [pc, #524]	@ (8004b50 <low_level_init+0x27c>)
 8004944:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004948:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800494a:	4881      	ldr	r0, [pc, #516]	@ (8004b50 <low_level_init+0x27c>)
 800494c:	f7fd f83c 	bl	80019c8 <HAL_ETH_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004956:	2238      	movs	r2, #56	@ 0x38
 8004958:	2100      	movs	r1, #0
 800495a:	4881      	ldr	r0, [pc, #516]	@ (8004b60 <low_level_init+0x28c>)
 800495c:	f014 fb59 	bl	8019012 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004960:	4b7f      	ldr	r3, [pc, #508]	@ (8004b60 <low_level_init+0x28c>)
 8004962:	2221      	movs	r2, #33	@ 0x21
 8004964:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004966:	4b7e      	ldr	r3, [pc, #504]	@ (8004b60 <low_level_init+0x28c>)
 8004968:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800496c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800496e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b60 <low_level_init+0x28c>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004974:	487b      	ldr	r0, [pc, #492]	@ (8004b64 <low_level_init+0x290>)
 8004976:	f007 fbaf 	bl	800c0d8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2206      	movs	r2, #6
 800497e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004982:	4b73      	ldr	r3, [pc, #460]	@ (8004b50 <low_level_init+0x27c>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800498e:	4b70      	ldr	r3, [pc, #448]	@ (8004b50 <low_level_init+0x27c>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	785a      	ldrb	r2, [r3, #1]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800499a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b50 <low_level_init+0x27c>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	789a      	ldrb	r2, [r3, #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80049a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b50 <low_level_init+0x27c>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	78da      	ldrb	r2, [r3, #3]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80049b2:	4b67      	ldr	r3, [pc, #412]	@ (8004b50 <low_level_init+0x27c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	791a      	ldrb	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80049be:	4b64      	ldr	r3, [pc, #400]	@ (8004b50 <low_level_init+0x27c>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	795a      	ldrb	r2, [r3, #5]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80049d8:	f043 030a 	orr.w	r3, r3, #10
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e8:	2300      	movs	r3, #0
 80049ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80049ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fd58 	bl	80054a8 <osSemaphoreCreate>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004b68 <low_level_init+0x294>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a02:	2300      	movs	r3, #0
 8004a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8004a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fd4b 	bl	80054a8 <osSemaphoreCreate>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4a55      	ldr	r2, [pc, #340]	@ (8004b6c <low_level_init+0x298>)
 8004a16:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8004a18:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <low_level_init+0x294>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fd74 	bl	800550c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8004a24:	4b51      	ldr	r3, [pc, #324]	@ (8004b6c <low_level_init+0x298>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fd6e 	bl	800550c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004a30:	4b4f      	ldr	r3, [pc, #316]	@ (8004b70 <low_level_init+0x29c>)
 8004a32:	f107 0408 	add.w	r4, r7, #8
 8004a36:	461d      	mov	r5, r3
 8004a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fc30 	bl	80052b0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004a50:	4948      	ldr	r1, [pc, #288]	@ (8004b74 <low_level_init+0x2a0>)
 8004a52:	4849      	ldr	r0, [pc, #292]	@ (8004b78 <low_level_init+0x2a4>)
 8004a54:	f7fc fd69 	bl	800152a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004a58:	4847      	ldr	r0, [pc, #284]	@ (8004b78 <low_level_init+0x2a4>)
 8004a5a:	f7fc fd98 	bl	800158e <LAN8742_Init>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d006      	beq.n	8004a72 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f007 ff1d 	bl	800c8a4 <netif_set_link_down>
    netif_set_down(netif);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f007 feb0 	bl	800c7d0 <netif_set_down>
 8004a70:	e06b      	b.n	8004b4a <low_level_init+0x276>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004a72:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d165      	bne.n	8004b46 <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a7a:	483f      	ldr	r0, [pc, #252]	@ (8004b78 <low_level_init+0x2a4>)
 8004a7c:	f7fc fdd4 	bl	8001628 <LAN8742_GetLinkState>
 8004a80:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004a84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	dc06      	bgt.n	8004a9a <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f007 ff09 	bl	800c8a4 <netif_set_link_down>
      netif_set_down(netif);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f007 fe9c 	bl	800c7d0 <netif_set_down>
 8004a98:	e057      	b.n	8004b4a <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	3b02      	subs	r3, #2
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d82b      	bhi.n	8004afc <low_level_init+0x228>
 8004aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <low_level_init+0x1d8>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004acf 	.word	0x08004acf
 8004ab4:	08004adf 	.word	0x08004adf
 8004ab8:	08004aef 	.word	0x08004aef
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004abc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8004ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004acc:	e01f      	b.n	8004b0e <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8004ad4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004adc:	e017      	b.n	8004b0e <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004ade:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004aec:	e00f      	b.n	8004b0e <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004afa:	e008      	b.n	8004b0e <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004afc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8004b04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004b0c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b0e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004b12:	4619      	mov	r1, r3
 8004b14:	480e      	ldr	r0, [pc, #56]	@ (8004b50 <low_level_init+0x27c>)
 8004b16:	f7fd fc3f 	bl	8002398 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b1e:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8004b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b24:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4808      	ldr	r0, [pc, #32]	@ (8004b50 <low_level_init+0x27c>)
 8004b2e:	f7fd fd2a 	bl	8002586 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004b32:	4807      	ldr	r0, [pc, #28]	@ (8004b50 <low_level_init+0x27c>)
 8004b34:	f7fc ffe4 	bl	8001b00 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f007 fddd 	bl	800c6f8 <netif_set_up>
    netif_set_link_up(netif);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f007 fe78 	bl	800c834 <netif_set_link_up>
 8004b44:	e001      	b.n	8004b4a <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8004b46:	f7fb ff17 	bl	8000978 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b4a:	37b0      	adds	r7, #176	@ 0xb0
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b50:	20005114 	.word	0x20005114
 8004b54:	40028000 	.word	0x40028000
 8004b58:	2000506c 	.word	0x2000506c
 8004b5c:	20004fcc 	.word	0x20004fcc
 8004b60:	200051c4 	.word	0x200051c4
 8004b64:	0801df14 	.word	0x0801df14
 8004b68:	2000510c 	.word	0x2000510c
 8004b6c:	20005110 	.word	0x20005110
 8004b70:	0801a3f4 	.word	0x0801a3f4
 8004b74:	2000000c 	.word	0x2000000c
 8004b78:	200051fc 	.word	0x200051fc

08004b7c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b092      	sub	sp, #72	@ 0x48
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004b94:	f107 030c 	add.w	r3, r7, #12
 8004b98:	2230      	movs	r2, #48	@ 0x30
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f014 fa38 	bl	8019012 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	2230      	movs	r2, #48	@ 0x30
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f014 fa31 	bl	8019012 <memset>

  for(q = p; q != NULL; q = q->next)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb4:	e045      	b.n	8004c42 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d902      	bls.n	8004bc2 <low_level_output+0x46>
      return ERR_IF;
 8004bbc:	f06f 030b 	mvn.w	r3, #11
 8004bc0:	e06c      	b.n	8004c9c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc8:	4613      	mov	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	3348      	adds	r3, #72	@ 0x48
 8004bd2:	443b      	add	r3, r7
 8004bd4:	3b3c      	subs	r3, #60	@ 0x3c
 8004bd6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bda:	895b      	ldrh	r3, [r3, #10]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	3348      	adds	r3, #72	@ 0x48
 8004bea:	443b      	add	r3, r7
 8004bec:	3b38      	subs	r3, #56	@ 0x38
 8004bee:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d011      	beq.n	8004c1a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	f107 000c 	add.w	r0, r7, #12
 8004bfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c00:	460b      	mov	r3, r1
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	440b      	add	r3, r1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	18c1      	adds	r1, r0, r3
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	3348      	adds	r3, #72	@ 0x48
 8004c14:	443b      	add	r3, r7
 8004c16:	3b34      	subs	r3, #52	@ 0x34
 8004c18:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3348      	adds	r3, #72	@ 0x48
 8004c2e:	443b      	add	r3, r7
 8004c30:	3b34      	subs	r3, #52	@ 0x34
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c38:	3301      	adds	r3, #1
 8004c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1b6      	bne.n	8004bb6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	891b      	ldrh	r3, [r3, #8]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <low_level_output+0x128>)
 8004c50:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004c52:	4a14      	ldr	r2, [pc, #80]	@ (8004ca4 <low_level_output+0x128>)
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <low_level_output+0x128>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004c60:	6838      	ldr	r0, [r7, #0]
 8004c62:	f008 faa3 	bl	800d1ac <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8004c66:	490f      	ldr	r1, [pc, #60]	@ (8004ca4 <low_level_output+0x128>)
 8004c68:	480f      	ldr	r0, [pc, #60]	@ (8004ca8 <low_level_output+0x12c>)
 8004c6a:	f7fd f838 	bl	8001cde <HAL_ETH_Transmit_IT>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10e      	bne.n	8004c92 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004c74:	bf00      	nop
 8004c76:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <low_level_output+0x130>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fc44 	bl	800550c <osSemaphoreWait>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f5      	bne.n	8004c76 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8004c8a:	4807      	ldr	r0, [pc, #28]	@ (8004ca8 <low_level_output+0x12c>)
 8004c8c:	f7fd f9c6 	bl	800201c <HAL_ETH_ReleaseTxPacket>
 8004c90:	e002      	b.n	8004c98 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004c92:	6838      	ldr	r0, [r7, #0]
 8004c94:	f008 f9e4 	bl	800d060 <pbuf_free>
  }

  return errval;
 8004c98:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3748      	adds	r7, #72	@ 0x48
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200051c4 	.word	0x200051c4
 8004ca8:	20005114 	.word	0x20005114
 8004cac:	20005110 	.word	0x20005110

08004cb0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <low_level_input+0x2c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004cc4:	f107 030c 	add.w	r3, r7, #12
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4805      	ldr	r0, [pc, #20]	@ (8004ce0 <low_level_input+0x30>)
 8004ccc:	f7fd f863 	bl	8001d96 <HAL_ETH_ReadData>
  }

  return p;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20004fc8 	.word	0x20004fc8
 8004ce0:	20005114 	.word	0x20005114

08004ce4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d34 <ethernetif_input+0x50>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fc05 	bl	800550c <osSemaphoreWait>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f5      	bne.n	8004cf4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f7ff ffd1 	bl	8004cb0 <low_level_input>
 8004d0e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	4798      	blx	r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f008 f99a 	bl	800d060 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ea      	bne.n	8004d08 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004d32:	e7df      	b.n	8004cf4 <ethernetif_input+0x10>
 8004d34:	2000510c 	.word	0x2000510c

08004d38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <ethernetif_init+0x1c>
 8004d46:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <ethernetif_init+0x48>)
 8004d48:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8004d4c:	490d      	ldr	r1, [pc, #52]	@ (8004d84 <ethernetif_init+0x4c>)
 8004d4e:	480e      	ldr	r0, [pc, #56]	@ (8004d88 <ethernetif_init+0x50>)
 8004d50:	f014 f8c0 	bl	8018ed4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2273      	movs	r2, #115	@ 0x73
 8004d58:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2274      	movs	r2, #116	@ 0x74
 8004d60:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a09      	ldr	r2, [pc, #36]	@ (8004d8c <ethernetif_init+0x54>)
 8004d68:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <ethernetif_init+0x58>)
 8004d6e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fdaf 	bl	80048d4 <low_level_init>

  return ERR_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	0801a410 	.word	0x0801a410
 8004d84:	0801a42c 	.word	0x0801a42c
 8004d88:	0801a43c 	.word	0x0801a43c
 8004d8c:	08016b85 	.word	0x08016b85
 8004d90:	08004b7d 	.word	0x08004b7d

08004d94 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	4809      	ldr	r0, [pc, #36]	@ (8004dc8 <pbuf_free_custom+0x34>)
 8004da4:	f007 fa88 	bl	800c2b8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004da8:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <pbuf_free_custom+0x38>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004db0:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <pbuf_free_custom+0x38>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <pbuf_free_custom+0x3c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fbf4 	bl	80055a8 <osSemaphoreRelease>
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	0801df14 	.word	0x0801df14
 8004dcc:	20004fc8 	.word	0x20004fc8
 8004dd0:	2000510c 	.word	0x2000510c

08004dd4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004dd8:	f7fc fce4 	bl	80017a4 <HAL_GetTick>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	@ 0x38
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a59      	ldr	r2, [pc, #356]	@ (8004f68 <HAL_ETH_MspInit+0x184>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f040 80ac 	bne.w	8004f60 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	4b57      	ldr	r3, [pc, #348]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	4a56      	ldr	r2, [pc, #344]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e18:	4b54      	ldr	r3, [pc, #336]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	4b50      	ldr	r3, [pc, #320]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e34:	4b4d      	ldr	r3, [pc, #308]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	4b49      	ldr	r3, [pc, #292]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	4a48      	ldr	r2, [pc, #288]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e50:	4b46      	ldr	r3, [pc, #280]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	4a41      	ldr	r2, [pc, #260]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e66:	f043 0304 	orr.w	r3, r3, #4
 8004e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	4a3a      	ldr	r2, [pc, #232]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e88:	4b38      	ldr	r3, [pc, #224]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	4b34      	ldr	r3, [pc, #208]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	4a33      	ldr	r2, [pc, #204]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004e9e:	f043 0302 	orr.w	r3, r3, #2
 8004ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea4:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f6c <HAL_ETH_MspInit+0x188>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004ecc:	2332      	movs	r3, #50	@ 0x32
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004edc:	230b      	movs	r3, #11
 8004ede:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4822      	ldr	r0, [pc, #136]	@ (8004f70 <HAL_ETH_MspInit+0x18c>)
 8004ee8:	f7fd ffd8 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004eec:	2386      	movs	r3, #134	@ 0x86
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004efc:	230b      	movs	r3, #11
 8004efe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f04:	4619      	mov	r1, r3
 8004f06:	481b      	ldr	r0, [pc, #108]	@ (8004f74 <HAL_ETH_MspInit+0x190>)
 8004f08:	f7fd ffc8 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f12:	2302      	movs	r3, #2
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f1e:	230b      	movs	r3, #11
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f26:	4619      	mov	r1, r3
 8004f28:	4813      	ldr	r0, [pc, #76]	@ (8004f78 <HAL_ETH_MspInit+0x194>)
 8004f2a:	f7fd ffb7 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004f2e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f40:	230b      	movs	r3, #11
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f48:	4619      	mov	r1, r3
 8004f4a:	480c      	ldr	r0, [pc, #48]	@ (8004f7c <HAL_ETH_MspInit+0x198>)
 8004f4c:	f7fd ffa6 	bl	8002e9c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004f50:	2200      	movs	r2, #0
 8004f52:	2105      	movs	r1, #5
 8004f54:	203d      	movs	r0, #61	@ 0x3d
 8004f56:	f7fc fd0d 	bl	8001974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004f5a:	203d      	movs	r0, #61	@ 0x3d
 8004f5c:	f7fc fd26 	bl	80019ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f60:	bf00      	nop
 8004f62:	3738      	adds	r7, #56	@ 0x38
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40028000 	.word	0x40028000
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40020800 	.word	0x40020800
 8004f74:	40020000 	.word	0x40020000
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	40021800 	.word	0x40021800

08004f80 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004f84:	4802      	ldr	r0, [pc, #8]	@ (8004f90 <ETH_PHY_IO_Init+0x10>)
 8004f86:	f7fd fb19 	bl	80025bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20005114 	.word	0x20005114

08004f94 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return 0;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	4807      	ldr	r0, [pc, #28]	@ (8004fd4 <ETH_PHY_IO_ReadReg+0x30>)
 8004fb8:	f7fd f95a 	bl	8002270 <HAL_ETH_ReadPHYRegister>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	e000      	b.n	8004fca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20005114 	.word	0x20005114

08004fd8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	4807      	ldr	r0, [pc, #28]	@ (8005008 <ETH_PHY_IO_WriteReg+0x30>)
 8004fec:	f7fd f98b 	bl	8002306 <HAL_ETH_WritePHYRegister>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffa:	e000      	b.n	8004ffe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20005114 	.word	0x20005114

0800500c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005010:	f7fc fbc8 	bl	80017a4 <HAL_GetTick>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b0a0      	sub	sp, #128	@ 0x80
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005024:	f107 0308 	add.w	r3, r7, #8
 8005028:	2264      	movs	r2, #100	@ 0x64
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f013 fff0 	bl	8019012 <memset>
  int32_t PHYLinkState = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800503a:	2300      	movs	r3, #0
 800503c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800503e:	2300      	movs	r3, #0
 8005040:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005046:	483a      	ldr	r0, [pc, #232]	@ (8005130 <ethernet_link_thread+0x114>)
 8005048:	f7fc faee 	bl	8001628 <LAN8742_GetLinkState>
 800504c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800504e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005050:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <ethernet_link_thread+0x5e>
 8005060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005062:	2b01      	cmp	r3, #1
 8005064:	dc09      	bgt.n	800507a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005066:	4833      	ldr	r0, [pc, #204]	@ (8005134 <ethernet_link_thread+0x118>)
 8005068:	f7fc fdba 	bl	8001be0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800506c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800506e:	f007 fbaf 	bl	800c7d0 <netif_set_down>
    netif_set_link_down(netif);
 8005072:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005074:	f007 fc16 	bl	800c8a4 <netif_set_link_down>
 8005078:	e055      	b.n	8005126 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800507a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800507c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d14e      	bne.n	8005126 <ethernet_link_thread+0x10a>
 8005088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800508a:	2b01      	cmp	r3, #1
 800508c:	dd4b      	ble.n	8005126 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800508e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005090:	3b02      	subs	r3, #2
 8005092:	2b03      	cmp	r3, #3
 8005094:	d82a      	bhi.n	80050ec <ethernet_link_thread+0xd0>
 8005096:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <ethernet_link_thread+0x80>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050ad 	.word	0x080050ad
 80050a0:	080050bf 	.word	0x080050bf
 80050a4:	080050cf 	.word	0x080050cf
 80050a8:	080050df 	.word	0x080050df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80050ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80050b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050b8:	2301      	movs	r3, #1
 80050ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050bc:	e017      	b.n	80050ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80050be:	2300      	movs	r3, #0
 80050c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80050c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050c8:	2301      	movs	r3, #1
 80050ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050cc:	e00f      	b.n	80050ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80050ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050d2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80050d4:	2300      	movs	r3, #0
 80050d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050d8:	2301      	movs	r3, #1
 80050da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050dc:	e007      	b.n	80050ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80050de:	2300      	movs	r3, #0
 80050e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80050e2:	2300      	movs	r3, #0
 80050e4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050ea:	e000      	b.n	80050ee <ethernet_link_thread+0xd2>
    default:
      break;
 80050ec:	bf00      	nop
    }

    if(linkchanged)
 80050ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d018      	beq.n	8005126 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80050f4:	f107 0308 	add.w	r3, r7, #8
 80050f8:	4619      	mov	r1, r3
 80050fa:	480e      	ldr	r0, [pc, #56]	@ (8005134 <ethernet_link_thread+0x118>)
 80050fc:	f7fd f94c 	bl	8002398 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005100:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005102:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005106:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005108:	f107 0308 	add.w	r3, r7, #8
 800510c:	4619      	mov	r1, r3
 800510e:	4809      	ldr	r0, [pc, #36]	@ (8005134 <ethernet_link_thread+0x118>)
 8005110:	f7fd fa39 	bl	8002586 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005114:	4807      	ldr	r0, [pc, #28]	@ (8005134 <ethernet_link_thread+0x118>)
 8005116:	f7fc fcf3 	bl	8001b00 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800511a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800511c:	f007 faec 	bl	800c6f8 <netif_set_up>
      netif_set_link_up(netif);
 8005120:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005122:	f007 fb87 	bl	800c834 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005126:	2064      	movs	r0, #100	@ 0x64
 8005128:	f000 f90e 	bl	8005348 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800512c:	e78b      	b.n	8005046 <ethernet_link_thread+0x2a>
 800512e:	bf00      	nop
 8005130:	200051fc 	.word	0x200051fc
 8005134:	20005114 	.word	0x20005114

08005138 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005140:	4812      	ldr	r0, [pc, #72]	@ (800518c <HAL_ETH_RxAllocateCallback+0x54>)
 8005142:	f007 f845 	bl	800c1d0 <memp_malloc_pool>
 8005146:	60f8      	str	r0, [r7, #12]
  if (p)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d014      	beq.n	8005178 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f103 0220 	add.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a0d      	ldr	r2, [pc, #52]	@ (8005190 <HAL_ETH_RxAllocateCallback+0x58>)
 800515c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005166:	9201      	str	r2, [sp, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2241      	movs	r2, #65	@ 0x41
 800516e:	2100      	movs	r1, #0
 8005170:	2000      	movs	r0, #0
 8005172:	f007 fdbb 	bl	800ccec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005176:	e005      	b.n	8005184 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005178:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_ETH_RxAllocateCallback+0x5c>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	0801df14 	.word	0x0801df14
 8005190:	08004d95 	.word	0x08004d95
 8005194:	20004fc8 	.word	0x20004fc8

08005198 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005198:	b480      	push	{r7}
 800519a:	b089      	sub	sp, #36	@ 0x24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3b20      	subs	r3, #32
 80051b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2200      	movs	r2, #0
 80051c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e003      	b.n	80051e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e009      	b.n	8005204 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	891a      	ldrh	r2, [r3, #8]
 80051f4:	887b      	ldrh	r3, [r7, #2]
 80051f6:	4413      	add	r3, r2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f2      	bne.n	80051f0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	3724      	adds	r7, #36	@ 0x24
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f007 ff1d 	bl	800d060 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	4603      	mov	r3, r0
 8005236:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800523c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005240:	2b84      	cmp	r3, #132	@ 0x84
 8005242:	d005      	beq.n	8005250 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005244:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	3303      	adds	r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005264:	f3ef 8305 	mrs	r3, IPSR
 8005268:	607b      	str	r3, [r7, #4]
  return(result);
 800526a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005286:	f001 fd5f 	bl	8006d48 <vTaskStartScheduler>
  
  return osOK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}

08005290 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005294:	f7ff ffe3 	bl	800525e <inHandlerMode>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800529e:	f001 fe79 	bl	8006f94 <xTaskGetTickCountFromISR>
 80052a2:	4603      	mov	r3, r0
 80052a4:	e002      	b.n	80052ac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80052a6:	f001 fe65 	bl	8006f74 <xTaskGetTickCount>
 80052aa:	4603      	mov	r3, r0
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af04      	add	r7, sp, #16
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d020      	beq.n	8005304 <osThreadCreate+0x54>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01c      	beq.n	8005304 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685c      	ldr	r4, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691e      	ldr	r6, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ffa6 	bl	800522e <makeFreeRtosPriority>
 80052e2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ec:	9202      	str	r2, [sp, #8]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	9100      	str	r1, [sp, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	4632      	mov	r2, r6
 80052f6:	4629      	mov	r1, r5
 80052f8:	4620      	mov	r0, r4
 80052fa:	f001 fb3f 	bl	800697c <xTaskCreateStatic>
 80052fe:	4603      	mov	r3, r0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e01c      	b.n	800533e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685c      	ldr	r4, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005310:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff88 	bl	800522e <makeFreeRtosPriority>
 800531e:	4602      	mov	r2, r0
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	9200      	str	r2, [sp, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4632      	mov	r2, r6
 800532c:	4629      	mov	r1, r5
 800532e:	4620      	mov	r0, r4
 8005330:	f001 fb84 	bl	8006a3c <xTaskCreate>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d001      	beq.n	800533e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	e000      	b.n	8005340 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005348 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <osDelay+0x16>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	e000      	b.n	8005360 <osDelay+0x18>
 800535e:	2301      	movs	r3, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f001 fcbb 	bl	8006cdc <vTaskDelay>
  
  return osOK;
 8005366:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4619      	mov	r1, r3
 8005386:	2001      	movs	r0, #1
 8005388:	f000 fc85 	bl	8005c96 <xQueueCreateMutexStatic>
 800538c:	4603      	mov	r3, r0
 800538e:	e003      	b.n	8005398 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005390:	2001      	movs	r0, #1
 8005392:	f000 fc68 	bl	8005c66 <xQueueCreateMutex>
 8005396:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <osMutexWait+0x18>
    return osErrorParameter;
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	e03a      	b.n	800542e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d103      	bne.n	80053cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e009      	b.n	80053e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <osMutexWait+0x40>
      ticks = 1;
 80053dc:	2301      	movs	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053e0:	f7ff ff3d 	bl	800525e <inHandlerMode>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d017      	beq.n	800541a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	461a      	mov	r2, r3
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 f88c 	bl	8006510 <xQueueReceiveFromISR>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <osMutexWait+0x62>
      return osErrorOS;
 80053fe:	23ff      	movs	r3, #255	@ 0xff
 8005400:	e015      	b.n	800542e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <osMutexWait+0x8c>
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <osMutexWait+0x98>)
 800540a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	e008      	b.n	800542c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 ff67 	bl	80062f0 <xQueueSemaphoreTake>
 8005422:	4603      	mov	r3, r0
 8005424:	2b01      	cmp	r3, #1
 8005426:	d001      	beq.n	800542c <osMutexWait+0x8c>
    return osErrorOS;
 8005428:	23ff      	movs	r3, #255	@ 0xff
 800542a:	e000      	b.n	800542e <osMutexWait+0x8e>
  }
  
  return osOK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005448:	2300      	movs	r3, #0
 800544a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800544c:	f7ff ff07 	bl	800525e <inHandlerMode>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fdd5 	bl	800600c <xQueueGiveFromISR>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <osMutexRelease+0x30>
      return osErrorOS;
 8005468:	23ff      	movs	r3, #255	@ 0xff
 800546a:	e017      	b.n	800549c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <osMutexRelease+0x5e>
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <osMutexRelease+0x68>)
 8005474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	e00a      	b.n	800549a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005484:	2300      	movs	r3, #0
 8005486:	2200      	movs	r2, #0
 8005488:	2100      	movs	r1, #0
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fc1e 	bl	8005ccc <xQueueGenericSend>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d001      	beq.n	800549a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005496:	23ff      	movs	r3, #255	@ 0xff
 8005498:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00f      	beq.n	80054da <osSemaphoreCreate+0x32>
    if (count == 1) {
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10a      	bne.n	80054d6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2203      	movs	r2, #3
 80054c6:	9200      	str	r2, [sp, #0]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2100      	movs	r1, #0
 80054cc:	2001      	movs	r0, #1
 80054ce:	f000 fad9 	bl	8005a84 <xQueueGenericCreateStatic>
 80054d2:	4603      	mov	r3, r0
 80054d4:	e016      	b.n	8005504 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e014      	b.n	8005504 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d110      	bne.n	8005502 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80054e0:	2203      	movs	r2, #3
 80054e2:	2100      	movs	r1, #0
 80054e4:	2001      	movs	r0, #1
 80054e6:	f000 fb4a 	bl	8005b7e <xQueueGenericCreate>
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <osSemaphoreCreate+0x56>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2200      	movs	r2, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fbe7 	bl	8005ccc <xQueueGenericSend>
      return sema;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	e000      	b.n	8005504 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005502:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	e03a      	b.n	800559a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d103      	bne.n	8005538 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e009      	b.n	800554c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d006      	beq.n	800554c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <osSemaphoreWait+0x40>
      ticks = 1;
 8005548:	2301      	movs	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800554c:	f7ff fe87 	bl	800525e <inHandlerMode>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	461a      	mov	r2, r3
 800555c:	2100      	movs	r1, #0
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 ffd6 	bl	8006510 <xQueueReceiveFromISR>
 8005564:	4603      	mov	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d001      	beq.n	800556e <osSemaphoreWait+0x62>
      return osErrorOS;
 800556a:	23ff      	movs	r3, #255	@ 0xff
 800556c:	e015      	b.n	800559a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d011      	beq.n	8005598 <osSemaphoreWait+0x8c>
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <osSemaphoreWait+0x98>)
 8005576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	e008      	b.n	8005598 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 feb1 	bl	80062f0 <xQueueSemaphoreTake>
 800558e:	4603      	mov	r3, r0
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005594:	23ff      	movs	r3, #255	@ 0xff
 8005596:	e000      	b.n	800559a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80055b8:	f7ff fe51 	bl	800525e <inHandlerMode>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fd1f 	bl	800600c <xQueueGiveFromISR>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d001      	beq.n	80055d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80055d4:	23ff      	movs	r3, #255	@ 0xff
 80055d6:	e017      	b.n	8005608 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d013      	beq.n	8005606 <osSemaphoreRelease+0x5e>
 80055de:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <osSemaphoreRelease+0x68>)
 80055e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	e00a      	b.n	8005606 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80055f0:	2300      	movs	r3, #0
 80055f2:	2200      	movs	r2, #0
 80055f4:	2100      	movs	r1, #0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb68 	bl	8005ccc <xQueueGenericSend>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005602:	23ff      	movs	r3, #255	@ 0xff
 8005604:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800561c:	f7ff fe1f 	bl	800525e <inHandlerMode>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005626:	2382      	movs	r3, #130	@ 0x82
 8005628:	e003      	b.n	8005632 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 f830 	bl	8006690 <vQueueDelete>

  return osOK; 
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800563a:	b590      	push	{r4, r7, lr}
 800563c:	b085      	sub	sp, #20
 800563e:	af02      	add	r7, sp, #8
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <osMessageCreate+0x36>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2400      	movs	r4, #0
 8005666:	9400      	str	r4, [sp, #0]
 8005668:	f000 fa0c 	bl	8005a84 <xQueueGenericCreateStatic>
 800566c:	4603      	mov	r3, r0
 800566e:	e008      	b.n	8005682 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	4619      	mov	r1, r3
 800567c:	f000 fa7f 	bl	8005b7e <xQueueGenericCreate>
 8005680:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bd90      	pop	{r4, r7, pc}
	...

0800568c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <osMessagePut+0x1e>
    ticks = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80056aa:	f7ff fdd8 	bl	800525e <inHandlerMode>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d018      	beq.n	80056e6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80056b4:	f107 0210 	add.w	r2, r7, #16
 80056b8:	f107 0108 	add.w	r1, r7, #8
 80056bc:	2300      	movs	r3, #0
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fc06 	bl	8005ed0 <xQueueGenericSendFromISR>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d001      	beq.n	80056ce <osMessagePut+0x42>
      return osErrorOS;
 80056ca:	23ff      	movs	r3, #255	@ 0xff
 80056cc:	e018      	b.n	8005700 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d014      	beq.n	80056fe <osMessagePut+0x72>
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <osMessagePut+0x7c>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	e00b      	b.n	80056fe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056e6:	f107 0108 	add.w	r1, r7, #8
 80056ea:	2300      	movs	r3, #0
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 faec 	bl	8005ccc <xQueueGenericSend>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d001      	beq.n	80056fe <osMessagePut+0x72>
      return osErrorOS;
 80056fa:	23ff      	movs	r3, #255	@ 0xff
 80056fc:	e000      	b.n	8005700 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b08b      	sub	sp, #44	@ 0x2c
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005726:	2380      	movs	r3, #128	@ 0x80
 8005728:	617b      	str	r3, [r7, #20]
    return event;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	461c      	mov	r4, r3
 800572e:	f107 0314 	add.w	r3, r7, #20
 8005732:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800573a:	e054      	b.n	80057e6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d103      	bne.n	8005754 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 8005752:	e009      	b.n	8005768 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <osMessageGet+0x5c>
      ticks = 1;
 8005764:	2301      	movs	r3, #1
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005768:	f7ff fd79 	bl	800525e <inHandlerMode>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01c      	beq.n	80057ac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005772:	f107 0220 	add.w	r2, r7, #32
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	68b8      	ldr	r0, [r7, #8]
 8005780:	f000 fec6 	bl	8006510 <xQueueReceiveFromISR>
 8005784:	4603      	mov	r3, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800578a:	2310      	movs	r3, #16
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e001      	b.n	8005794 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01d      	beq.n	80057d6 <osMessageGet+0xca>
 800579a:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <osMessageGet+0xe4>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	e014      	b.n	80057d6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	3304      	adds	r3, #4
 80057b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b4:	4619      	mov	r1, r3
 80057b6:	68b8      	ldr	r0, [r7, #8]
 80057b8:	f000 fcb8 	bl	800612c <xQueueReceive>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d102      	bne.n	80057c8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80057c2:	2310      	movs	r3, #16
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e006      	b.n	80057d6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <osMessageGet+0xc6>
 80057ce:	2300      	movs	r3, #0
 80057d0:	e000      	b.n	80057d4 <osMessageGet+0xc8>
 80057d2:	2340      	movs	r3, #64	@ 0x40
 80057d4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	461c      	mov	r4, r3
 80057da:	f107 0314 	add.w	r3, r7, #20
 80057de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	372c      	adds	r7, #44	@ 0x2c
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}
 80057ee:	bf00      	nop
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80057fc:	f7ff fd2f 	bl	800525e <inHandlerMode>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 ff23 	bl	8006652 <uxQueueMessagesWaitingFromISR>
 800580c:	4603      	mov	r3, r0
 800580e:	e003      	b.n	8005818 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 feff 	bl	8006614 <uxQueueMessagesWaiting>
 8005816:	4603      	mov	r3, r0
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005828:	f7ff fd19 	bl	800525e <inHandlerMode>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <osMessageDelete+0x16>
    return osErrorISR;
 8005832:	2382      	movs	r3, #130	@ 0x82
 8005834:	e003      	b.n	800583e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 ff2a 	bl	8006690 <vQueueDelete>

  return osOK; 
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f103 0208 	add.w	r2, r3, #8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f103 0208 	add.w	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f103 0208 	add.w	r2, r3, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d103      	bne.n	8005908 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e00c      	b.n	8005922 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3308      	adds	r3, #8
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e002      	b.n	8005916 <vListInsert+0x2e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d2f6      	bcs.n	8005910 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6892      	ldr	r2, [r2, #8]
 8005970:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6852      	ldr	r2, [r2, #4]
 800597a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d103      	bne.n	800598e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059dc:	f002 f94c 	bl	8007c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	441a      	add	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	441a      	add	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	22ff      	movs	r2, #255	@ 0xff
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	22ff      	movs	r2, #255	@ 0xff
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d114      	bne.n	8005a5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01a      	beq.n	8005a70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fbfe 	bl	8007240 <xTaskRemoveFromEventList>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <xQueueGenericReset+0xd0>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	e009      	b.n	8005a70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3310      	adds	r3, #16
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fef0 	bl	8005846 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3324      	adds	r3, #36	@ 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff feeb 	bl	8005846 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a70:	f002 f934 	bl	8007cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a74:	2301      	movs	r3, #1
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	@ 0x38
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <xQueueGenericCreateStatic+0x56>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <xQueueGenericCreateStatic+0x5a>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <xQueueGenericCreateStatic+0x5c>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	623b      	str	r3, [r7, #32]
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <xQueueGenericCreateStatic+0x84>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <xQueueGenericCreateStatic+0x88>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <xQueueGenericCreateStatic+0x8a>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	61fb      	str	r3, [r7, #28]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b2a:	2348      	movs	r3, #72	@ 0x48
 8005b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b48      	cmp	r3, #72	@ 0x48
 8005b32:	d00b      	beq.n	8005b4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	61bb      	str	r3, [r7, #24]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f840 	bl	8005bf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3730      	adds	r7, #48	@ 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08a      	sub	sp, #40	@ 0x28
 8005b82:	af02      	add	r7, sp, #8
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	613b      	str	r3, [r7, #16]
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3348      	adds	r3, #72	@ 0x48
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f002 f97f 	bl	8007ebc <pvPortMalloc>
 8005bbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d011      	beq.n	8005bea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	3348      	adds	r3, #72	@ 0x48
 8005bce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bd8:	79fa      	ldrb	r2, [r7, #7]
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f805 	bl	8005bf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bea:	69bb      	ldr	r3, [r7, #24]
	}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c22:	2101      	movs	r1, #1
 8005c24:	69b8      	ldr	r0, [r7, #24]
 8005c26:	f7ff fec3 	bl	80059b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c52:	2300      	movs	r3, #0
 8005c54:	2200      	movs	r2, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f837 	bl	8005ccc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c70:	2301      	movs	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	6978      	ldr	r0, [r7, #20]
 8005c80:	f7ff ff7d 	bl	8005b7e <xQueueGenericCreate>
 8005c84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff ffd3 	bl	8005c32 <prvInitialiseMutex>

		return xNewQueue;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b088      	sub	sp, #32
 8005c9a:	af02      	add	r7, sp, #8
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	6039      	str	r1, [r7, #0]
 8005ca0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	6939      	ldr	r1, [r7, #16]
 8005cb4:	6978      	ldr	r0, [r7, #20]
 8005cb6:	f7ff fee5 	bl	8005a84 <xQueueGenericCreateStatic>
 8005cba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff ffb8 	bl	8005c32 <prvInitialiseMutex>

		return xNewQueue;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
	}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08e      	sub	sp, #56	@ 0x38
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <xQueueGenericSend+0x34>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	e7fd      	b.n	8005cfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <xQueueGenericSend+0x42>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <xQueueGenericSend+0x46>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueGenericSend+0x48>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10b      	bne.n	8005d30 <xQueueGenericSend+0x64>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	e7fd      	b.n	8005d2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d103      	bne.n	8005d3e <xQueueGenericSend+0x72>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <xQueueGenericSend+0x76>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueGenericSend+0x78>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xQueueGenericSend+0x94>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	623b      	str	r3, [r7, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d60:	f001 fc34 	bl	80075cc <xTaskGetSchedulerState>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <xQueueGenericSend+0xa4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <xQueueGenericSend+0xa8>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <xQueueGenericSend+0xaa>
 8005d74:	2300      	movs	r3, #0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <xQueueGenericSend+0xc6>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	61fb      	str	r3, [r7, #28]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d92:	f001 ff71 	bl	8007c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <xQueueGenericSend+0xdc>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d129      	bne.n	8005dfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dae:	f000 fcab 	bl	8006708 <prvCopyDataToQueue>
 8005db2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	3324      	adds	r3, #36	@ 0x24
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fa3d 	bl	8007240 <xTaskRemoveFromEventList>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ecc <xQueueGenericSend+0x200>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	e00a      	b.n	8005df4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005de4:	4b39      	ldr	r3, [pc, #228]	@ (8005ecc <xQueueGenericSend+0x200>)
 8005de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005df4:	f001 ff72 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e063      	b.n	8005ec4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e02:	f001 ff6b 	bl	8007cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e05c      	b.n	8005ec4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fa77 	bl	8007308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e1e:	f001 ff5d 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e22:	f000 fffb 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e26:	f001 ff27 	bl	8007c78 <vPortEnterCritical>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d103      	bne.n	8005e40 <xQueueGenericSend+0x174>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d103      	bne.n	8005e56 <xQueueGenericSend+0x18a>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e56:	f001 ff41 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e5a:	1d3a      	adds	r2, r7, #4
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fa66 	bl	8007334 <xTaskCheckForTimeOut>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d124      	bne.n	8005eb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e70:	f000 fd42 	bl	80068f8 <prvIsQueueFull>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f9b6 	bl	80071f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e8a:	f000 fccd 	bl	8006828 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e8e:	f000 ffd3 	bl	8006e38 <xTaskResumeAll>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f af7c 	bne.w	8005d92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <xQueueGenericSend+0x200>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	e772      	b.n	8005d92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eae:	f000 fcbb 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eb2:	f000 ffc1 	bl	8006e38 <xTaskResumeAll>
 8005eb6:	e76c      	b.n	8005d92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eba:	f000 fcb5 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ebe:	f000 ffbb 	bl	8006e38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3738      	adds	r7, #56	@ 0x38
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b090      	sub	sp, #64	@ 0x40
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10b      	bne.n	8005f00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <xQueueGenericSendFromISR+0x3e>
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <xQueueGenericSendFromISR+0x42>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <xQueueGenericSendFromISR+0x44>
 8005f12:	2300      	movs	r3, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <xQueueGenericSendFromISR+0x6e>
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <xQueueGenericSendFromISR+0x72>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <xQueueGenericSendFromISR+0x74>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	623b      	str	r3, [r7, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f60:	f001 ff6a 	bl	8007e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f64:	f3ef 8211 	mrs	r2, BASEPRI
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	61fa      	str	r2, [r7, #28]
 8005f7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <xQueueGenericSendFromISR+0xc2>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d12f      	bne.n	8005ff2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005fa8:	f000 fbae 	bl	8006708 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d112      	bne.n	8005fdc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	3324      	adds	r3, #36	@ 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f93c 	bl	8007240 <xTaskRemoveFromEventList>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00e      	beq.n	8005fec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e007      	b.n	8005fec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	b25a      	sxtb	r2, r3
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fec:	2301      	movs	r3, #1
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ff0:	e001      	b.n	8005ff6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006000:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006004:	4618      	mov	r0, r3
 8006006:	3740      	adds	r7, #64	@ 0x40
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	@ 0x38
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	61fb      	str	r3, [r7, #28]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <xQueueGiveFromISR+0x5c>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <xQueueGiveFromISR+0x60>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <xQueueGiveFromISR+0x62>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61bb      	str	r3, [r7, #24]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800608a:	f001 fed5 	bl	8007e38 <vPortValidateInterruptPriority>
	__asm volatile
 800608e:	f3ef 8211 	mrs	r2, BASEPRI
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	617a      	str	r2, [r7, #20]
 80060a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d22b      	bcs.n	8006112 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d112      	bne.n	80060fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	3324      	adds	r3, #36	@ 0x24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 f8ac 	bl	8007240 <xTaskRemoveFromEventList>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2201      	movs	r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e007      	b.n	800610c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006100:	3301      	adds	r3, #1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	b25a      	sxtb	r2, r3
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800610c:	2301      	movs	r3, #1
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006110:	e001      	b.n	8006116 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f383 8811 	msr	BASEPRI, r3
}
 8006120:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006124:	4618      	mov	r0, r3
 8006126:	3738      	adds	r7, #56	@ 0x38
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	@ 0x30
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006138:	2300      	movs	r3, #0
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <xQueueReceive+0x32>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	623b      	str	r3, [r7, #32]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <xQueueReceive+0x40>
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <xQueueReceive+0x44>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <xQueueReceive+0x46>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <xQueueReceive+0x62>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	61fb      	str	r3, [r7, #28]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800618e:	f001 fa1d 	bl	80075cc <xTaskGetSchedulerState>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <xQueueReceive+0x72>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <xQueueReceive+0x76>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <xQueueReceive+0x78>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <xQueueReceive+0x94>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	61bb      	str	r3, [r7, #24]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061c0:	f001 fd5a 	bl	8007c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01f      	beq.n	8006210 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061d4:	f000 fb02 	bl	80067dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	1e5a      	subs	r2, r3, #1
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00f      	beq.n	8006208 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	3310      	adds	r3, #16
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 f827 	bl	8007240 <xTaskRemoveFromEventList>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061f8:	4b3c      	ldr	r3, [pc, #240]	@ (80062ec <xQueueReceive+0x1c0>)
 80061fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006208:	f001 fd68 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 800620c:	2301      	movs	r3, #1
 800620e:	e069      	b.n	80062e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d103      	bne.n	800621e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006216:	f001 fd61 	bl	8007cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800621a:	2300      	movs	r3, #0
 800621c:	e062      	b.n	80062e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006224:	f107 0310 	add.w	r3, r7, #16
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f86d 	bl	8007308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006232:	f001 fd53 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006236:	f000 fdf1 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800623a:	f001 fd1d 	bl	8007c78 <vPortEnterCritical>
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006244:	b25b      	sxtb	r3, r3
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d103      	bne.n	8006254 <xQueueReceive+0x128>
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800625a:	b25b      	sxtb	r3, r3
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d103      	bne.n	800626a <xQueueReceive+0x13e>
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800626a:	f001 fd37 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800626e:	1d3a      	adds	r2, r7, #4
 8006270:	f107 0310 	add.w	r3, r7, #16
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f001 f85c 	bl	8007334 <xTaskCheckForTimeOut>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d123      	bne.n	80062ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006284:	f000 fb22 	bl	80068cc <prvIsQueueEmpty>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d017      	beq.n	80062be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	3324      	adds	r3, #36	@ 0x24
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ffac 	bl	80071f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800629c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800629e:	f000 fac3 	bl	8006828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062a2:	f000 fdc9 	bl	8006e38 <xTaskResumeAll>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d189      	bne.n	80061c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80062ac:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <xQueueReceive+0x1c0>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	e780      	b.n	80061c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062c0:	f000 fab2 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062c4:	f000 fdb8 	bl	8006e38 <xTaskResumeAll>
 80062c8:	e77a      	b.n	80061c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062cc:	f000 faac 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062d0:	f000 fdb2 	bl	8006e38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d6:	f000 faf9 	bl	80068cc <prvIsQueueEmpty>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f43f af6f 	beq.w	80061c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3730      	adds	r7, #48	@ 0x30
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08e      	sub	sp, #56	@ 0x38
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	623b      	str	r3, [r7, #32]
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61fb      	str	r3, [r7, #28]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006344:	f001 f942 	bl	80075cc <xTaskGetSchedulerState>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <xQueueSemaphoreTake+0x64>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <xQueueSemaphoreTake+0x68>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <xQueueSemaphoreTake+0x6a>
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	61bb      	str	r3, [r7, #24]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006376:	f001 fc7f 	bl	8007c78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800637a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	d024      	beq.n	80063d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	1e5a      	subs	r2, r3, #1
 800638a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006396:	f001 fac5 	bl	8007924 <pvTaskIncrementMutexHeldCount>
 800639a:	4602      	mov	r2, r0
 800639c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00f      	beq.n	80063c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063aa:	3310      	adds	r3, #16
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 ff47 	bl	8007240 <xTaskRemoveFromEventList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063b8:	4b54      	ldr	r3, [pc, #336]	@ (800650c <xQueueSemaphoreTake+0x21c>)
 80063ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063c8:	f001 fc88 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e098      	b.n	8006502 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d112      	bne.n	80063fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	617b      	str	r3, [r7, #20]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063f4:	f001 fc72 	bl	8007cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e082      	b.n	8006502 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4618      	mov	r0, r3
 8006408:	f000 ff7e 	bl	8007308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006410:	f001 fc64 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006414:	f000 fd02 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006418:	f001 fc2e 	bl	8007c78 <vPortEnterCritical>
 800641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006422:	b25b      	sxtb	r3, r3
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d103      	bne.n	8006432 <xQueueSemaphoreTake+0x142>
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d103      	bne.n	8006448 <xQueueSemaphoreTake+0x158>
 8006440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006448:	f001 fc48 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800644c:	463a      	mov	r2, r7
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f000 ff6d 	bl	8007334 <xTaskCheckForTimeOut>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d132      	bne.n	80064c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006462:	f000 fa33 	bl	80068cc <prvIsQueueEmpty>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d026      	beq.n	80064ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d109      	bne.n	8006488 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006474:	f001 fc00 	bl	8007c78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4618      	mov	r0, r3
 800647e:	f001 f8c3 	bl	8007608 <xTaskPriorityInherit>
 8006482:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006484:	f001 fc2a 	bl	8007cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	3324      	adds	r3, #36	@ 0x24
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	4611      	mov	r1, r2
 8006490:	4618      	mov	r0, r3
 8006492:	f000 feaf 	bl	80071f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006498:	f000 f9c6 	bl	8006828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800649c:	f000 fccc 	bl	8006e38 <xTaskResumeAll>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f47f af67 	bne.w	8006376 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80064a8:	4b18      	ldr	r3, [pc, #96]	@ (800650c <xQueueSemaphoreTake+0x21c>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	e75d      	b.n	8006376 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064bc:	f000 f9b4 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064c0:	f000 fcba 	bl	8006e38 <xTaskResumeAll>
 80064c4:	e757      	b.n	8006376 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064c8:	f000 f9ae 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064cc:	f000 fcb4 	bl	8006e38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064d2:	f000 f9fb 	bl	80068cc <prvIsQueueEmpty>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f43f af4c 	beq.w	8006376 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00d      	beq.n	8006500 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80064e4:	f001 fbc8 	bl	8007c78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064ea:	f000 f8f5 	bl	80066d8 <prvGetDisinheritPriorityAfterTimeout>
 80064ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f984 	bl	8007804 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80064fc:	f001 fbee 	bl	8007cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006502:	4618      	mov	r0, r3
 8006504:	3738      	adds	r7, #56	@ 0x38
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	@ 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	623b      	str	r3, [r7, #32]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <xQueueReceiveFromISR+0x3c>
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <xQueueReceiveFromISR+0x40>
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <xQueueReceiveFromISR+0x42>
 8006550:	2300      	movs	r3, #0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	61fb      	str	r3, [r7, #28]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800656e:	f001 fc63 	bl	8007e38 <vPortValidateInterruptPriority>
	__asm volatile
 8006572:	f3ef 8211 	mrs	r2, BASEPRI
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	61ba      	str	r2, [r7, #24]
 8006588:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800658a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800658c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d02f      	beq.n	80065fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065a8:	f000 f918 	bl	80067dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	1e5a      	subs	r2, r3, #1
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d112      	bne.n	80065e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	3310      	adds	r3, #16
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fe38 	bl	8007240 <xTaskRemoveFromEventList>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00e      	beq.n	80065f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e007      	b.n	80065f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e8:	3301      	adds	r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	b25a      	sxtb	r2, r3
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80065f4:	2301      	movs	r3, #1
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f8:	e001      	b.n	80065fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f383 8811 	msr	BASEPRI, r3
}
 8006608:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800660a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800660c:	4618      	mov	r0, r3
 800660e:	3738      	adds	r7, #56	@ 0x38
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60bb      	str	r3, [r7, #8]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800663a:	f001 fb1d 	bl	8007c78 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006644:	f001 fb4a 	bl	8007cdc <vPortExitCritical>

	return uxReturn;
 8006648:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	60fb      	str	r3, [r7, #12]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006682:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006684:	4618      	mov	r0, r3
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <vQueueDelete+0x2a>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60bb      	str	r3, [r7, #8]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f934 	bl	8006928 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f001 fcc4 	bl	8008058 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1c3 0307 	rsb	r3, r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e001      	b.n	80066fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80066fa:	68fb      	ldr	r3, [r7, #12]
	}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d14d      	bne.n	80067ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 ffde 	bl	80076f4 <xTaskPriorityDisinherit>
 8006738:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	e043      	b.n	80067ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d119      	bne.n	800677c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6858      	ldr	r0, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	461a      	mov	r2, r3
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	f012 fdbf 	bl	80192d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d32b      	bcc.n	80067ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	e026      	b.n	80067ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68d8      	ldr	r0, [r3, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	461a      	mov	r2, r3
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	f012 fda5 	bl	80192d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	425b      	negs	r3, r3
 8006796:	441a      	add	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d207      	bcs.n	80067b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	425b      	negs	r3, r3
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d105      	bne.n	80067ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067d2:	697b      	ldr	r3, [r7, #20]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d018      	beq.n	8006820 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	441a      	add	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d303      	bcc.n	8006810 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68d9      	ldr	r1, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	461a      	mov	r2, r3
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f012 fd5b 	bl	80192d6 <memcpy>
	}
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006830:	f001 fa22 	bl	8007c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800683a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800683c:	e011      	b.n	8006862 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d012      	beq.n	800686c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3324      	adds	r3, #36	@ 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fcf8 	bl	8007240 <xTaskRemoveFromEventList>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006856:	f000 fdd1 	bl	80073fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	3b01      	subs	r3, #1
 800685e:	b2db      	uxtb	r3, r3
 8006860:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	dce9      	bgt.n	800683e <prvUnlockQueue+0x16>
 800686a:	e000      	b.n	800686e <prvUnlockQueue+0x46>
					break;
 800686c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	22ff      	movs	r2, #255	@ 0xff
 8006872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006876:	f001 fa31 	bl	8007cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800687a:	f001 f9fd 	bl	8007c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006884:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006886:	e011      	b.n	80068ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3310      	adds	r3, #16
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fcd3 	bl	8007240 <xTaskRemoveFromEventList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068a0:	f000 fdac 	bl	80073fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dce9      	bgt.n	8006888 <prvUnlockQueue+0x60>
 80068b4:	e000      	b.n	80068b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	22ff      	movs	r2, #255	@ 0xff
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068c0:	f001 fa0c 	bl	8007cdc <vPortExitCritical>
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d4:	f001 f9d0 	bl	8007c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068e0:	2301      	movs	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e001      	b.n	80068ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068ea:	f001 f9f7 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 80068ee:	68fb      	ldr	r3, [r7, #12]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006900:	f001 f9ba 	bl	8007c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690c:	429a      	cmp	r2, r3
 800690e:	d102      	bne.n	8006916 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e001      	b.n	800691a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800691a:	f001 f9df 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e016      	b.n	8006964 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006936:	4a10      	ldr	r2, [pc, #64]	@ (8006978 <vQueueUnregisterQueue+0x50>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4413      	add	r3, r2
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d10b      	bne.n	800695e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006946:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <vQueueUnregisterQueue+0x50>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2100      	movs	r1, #0
 800694c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006950:	4a09      	ldr	r2, [pc, #36]	@ (8006978 <vQueueUnregisterQueue+0x50>)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4413      	add	r3, r2
 8006958:	2200      	movs	r2, #0
 800695a:	605a      	str	r2, [r3, #4]
				break;
 800695c:	e006      	b.n	800696c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b07      	cmp	r3, #7
 8006968:	d9e5      	bls.n	8006936 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	2000521c 	.word	0x2000521c

0800697c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	@ 0x38
 8006980:	af04      	add	r7, sp, #16
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	623b      	str	r3, [r7, #32]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	61fb      	str	r3, [r7, #28]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069c6:	23a0      	movs	r3, #160	@ 0xa0
 80069c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80069ce:	d00b      	beq.n	80069e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61bb      	str	r3, [r7, #24]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01e      	beq.n	8006a2e <xTaskCreateStatic+0xb2>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01b      	beq.n	8006a2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9303      	str	r3, [sp, #12]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	9302      	str	r3, [sp, #8]
 8006a10:	f107 0314 	add.w	r3, r7, #20
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f851 	bl	8006ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a28:	f000 f8ee 	bl	8006c08 <prvAddNewTaskToReadyList>
 8006a2c:	e001      	b.n	8006a32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a32:	697b      	ldr	r3, [r7, #20]
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3728      	adds	r7, #40	@ 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	@ 0x30
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fa33 	bl	8007ebc <pvPortMalloc>
 8006a56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a5e:	20a0      	movs	r0, #160	@ 0xa0
 8006a60:	f001 fa2c 	bl	8007ebc <pvPortMalloc>
 8006a64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a72:	e005      	b.n	8006a80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a74:	6978      	ldr	r0, [r7, #20]
 8006a76:	f001 faef 	bl	8008058 <vPortFree>
 8006a7a:	e001      	b.n	8006a80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d017      	beq.n	8006ab6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	2300      	movs	r3, #0
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f80f 	bl	8006ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aaa:	69f8      	ldr	r0, [r7, #28]
 8006aac:	f000 f8ac 	bl	8006c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e002      	b.n	8006abc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006abc:	69bb      	ldr	r3, [r7, #24]
	}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	617b      	str	r3, [r7, #20]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01f      	beq.n	8006b58 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e012      	b.n	8006b44 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	7819      	ldrb	r1, [r3, #0]
 8006b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3334      	adds	r3, #52	@ 0x34
 8006b2e:	460a      	mov	r2, r1
 8006b30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d006      	beq.n	8006b4c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d9e9      	bls.n	8006b1e <prvInitialiseNewTask+0x56>
 8006b4a:	e000      	b.n	8006b4e <prvInitialiseNewTask+0x86>
			{
				break;
 8006b4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b56:	e003      	b.n	8006b60 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d901      	bls.n	8006b6a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b66:	2306      	movs	r3, #6
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	2200      	movs	r2, #0
 8006b7a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fe80 	bl	8005886 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	3318      	adds	r3, #24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fe7b 	bl	8005886 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	f1c3 0207 	rsb	r2, r3, #7
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	334c      	adds	r3, #76	@ 0x4c
 8006bba:	224c      	movs	r2, #76	@ 0x4c
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f012 fa27 	bl	8019012 <memset>
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006bfc <prvInitialiseNewTask+0x134>)
 8006bc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8006c00 <prvInitialiseNewTask+0x138>)
 8006bce:	655a      	str	r2, [r3, #84]	@ 0x54
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006c04 <prvInitialiseNewTask+0x13c>)
 8006bd4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	69b8      	ldr	r0, [r7, #24]
 8006bdc:	f000 ff1c 	bl	8007a18 <pxPortInitialiseStack>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf2:	bf00      	nop
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20011108 	.word	0x20011108
 8006c00:	20011170 	.word	0x20011170
 8006c04:	200111d8 	.word	0x200111d8

08006c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c10:	f001 f832 	bl	8007c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c14:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc0 <prvAddNewTaskToReadyList+0xb8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	4a29      	ldr	r2, [pc, #164]	@ (8006cc0 <prvAddNewTaskToReadyList+0xb8>)
 8006c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c1e:	4b29      	ldr	r3, [pc, #164]	@ (8006cc4 <prvAddNewTaskToReadyList+0xbc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c26:	4a27      	ldr	r2, [pc, #156]	@ (8006cc4 <prvAddNewTaskToReadyList+0xbc>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c2c:	4b24      	ldr	r3, [pc, #144]	@ (8006cc0 <prvAddNewTaskToReadyList+0xb8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d110      	bne.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c34:	f000 fc06 	bl	8007444 <prvInitialiseTaskLists>
 8006c38:	e00d      	b.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c3a:	4b23      	ldr	r3, [pc, #140]	@ (8006cc8 <prvAddNewTaskToReadyList+0xc0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c42:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <prvAddNewTaskToReadyList+0xbc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d802      	bhi.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c50:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <prvAddNewTaskToReadyList+0xbc>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c56:	4b1d      	ldr	r3, [pc, #116]	@ (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	2201      	movs	r2, #1
 8006c66:	409a      	lsls	r2, r3
 8006c68:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	4a18      	ldr	r2, [pc, #96]	@ (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4a15      	ldr	r2, [pc, #84]	@ (8006cd4 <prvAddNewTaskToReadyList+0xcc>)
 8006c80:	441a      	add	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f7fe fe09 	bl	80058a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c8e:	f001 f825 	bl	8007cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c92:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <prvAddNewTaskToReadyList+0xc0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <prvAddNewTaskToReadyList+0xbc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d207      	bcs.n	8006cb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd8 <prvAddNewTaskToReadyList+0xd0>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	2000535c 	.word	0x2000535c
 8006cc4:	2000525c 	.word	0x2000525c
 8006cc8:	20005368 	.word	0x20005368
 8006ccc:	20005378 	.word	0x20005378
 8006cd0:	20005364 	.word	0x20005364
 8006cd4:	20005260 	.word	0x20005260
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cee:	4b14      	ldr	r3, [pc, #80]	@ (8006d40 <vTaskDelay+0x64>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <vTaskDelay+0x32>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d0e:	f000 f885 	bl	8006e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d12:	2100      	movs	r1, #0
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fe19 	bl	800794c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d1a:	f000 f88d 	bl	8006e38 <xTaskResumeAll>
 8006d1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d26:	4b07      	ldr	r3, [pc, #28]	@ (8006d44 <vTaskDelay+0x68>)
 8006d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20005384 	.word	0x20005384
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	@ 0x28
 8006d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d56:	463a      	mov	r2, r7
 8006d58:	1d39      	adds	r1, r7, #4
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7f9 fc26 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	9202      	str	r2, [sp, #8]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	2300      	movs	r3, #0
 8006d74:	460a      	mov	r2, r1
 8006d76:	4921      	ldr	r1, [pc, #132]	@ (8006dfc <vTaskStartScheduler+0xb4>)
 8006d78:	4821      	ldr	r0, [pc, #132]	@ (8006e00 <vTaskStartScheduler+0xb8>)
 8006d7a:	f7ff fdff 	bl	800697c <xTaskCreateStatic>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4a20      	ldr	r2, [pc, #128]	@ (8006e04 <vTaskStartScheduler+0xbc>)
 8006d82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d84:	4b1f      	ldr	r3, [pc, #124]	@ (8006e04 <vTaskStartScheduler+0xbc>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	e001      	b.n	8006d96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d11b      	bne.n	8006dd4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	613b      	str	r3, [r7, #16]
}
 8006dae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006db0:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <vTaskStartScheduler+0xc0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	334c      	adds	r3, #76	@ 0x4c
 8006db6:	4a15      	ldr	r2, [pc, #84]	@ (8006e0c <vTaskStartScheduler+0xc4>)
 8006db8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dba:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <vTaskStartScheduler+0xc8>)
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dc2:	4b14      	ldr	r3, [pc, #80]	@ (8006e14 <vTaskStartScheduler+0xcc>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <vTaskStartScheduler+0xd0>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dce:	f000 feaf 	bl	8007b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dd2:	e00f      	b.n	8006df4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d10b      	bne.n	8006df4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <vTaskStartScheduler+0xa8>
}
 8006df4:	bf00      	nop
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	0801a464 	.word	0x0801a464
 8006e00:	08007415 	.word	0x08007415
 8006e04:	20005380 	.word	0x20005380
 8006e08:	2000525c 	.word	0x2000525c
 8006e0c:	20000040 	.word	0x20000040
 8006e10:	2000537c 	.word	0x2000537c
 8006e14:	20005368 	.word	0x20005368
 8006e18:	20005360 	.word	0x20005360

08006e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e20:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <vTaskSuspendAll+0x18>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a03      	ldr	r2, [pc, #12]	@ (8006e34 <vTaskSuspendAll+0x18>)
 8006e28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e2a:	bf00      	nop
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	20005384 	.word	0x20005384

08006e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e46:	4b42      	ldr	r3, [pc, #264]	@ (8006f50 <xTaskResumeAll+0x118>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10b      	bne.n	8006e66 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	603b      	str	r3, [r7, #0]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e66:	f000 ff07 	bl	8007c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e6a:	4b39      	ldr	r3, [pc, #228]	@ (8006f50 <xTaskResumeAll+0x118>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	4a37      	ldr	r2, [pc, #220]	@ (8006f50 <xTaskResumeAll+0x118>)
 8006e72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e74:	4b36      	ldr	r3, [pc, #216]	@ (8006f50 <xTaskResumeAll+0x118>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d161      	bne.n	8006f40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e7c:	4b35      	ldr	r3, [pc, #212]	@ (8006f54 <xTaskResumeAll+0x11c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05d      	beq.n	8006f40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e84:	e02e      	b.n	8006ee4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e86:	4b34      	ldr	r3, [pc, #208]	@ (8006f58 <xTaskResumeAll+0x120>)
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3318      	adds	r3, #24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fd61 	bl	800595a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fd5c 	bl	800595a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8006f5c <xTaskResumeAll+0x124>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f5c <xTaskResumeAll+0x124>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a27      	ldr	r2, [pc, #156]	@ (8006f60 <xTaskResumeAll+0x128>)
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe fce8 	bl	80058a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed4:	4b23      	ldr	r3, [pc, #140]	@ (8006f64 <xTaskResumeAll+0x12c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d302      	bcc.n	8006ee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ede:	4b22      	ldr	r3, [pc, #136]	@ (8006f68 <xTaskResumeAll+0x130>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f58 <xTaskResumeAll+0x120>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1cc      	bne.n	8006e86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ef2:	f000 fb4b 	bl	800758c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f6c <xTaskResumeAll+0x134>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d010      	beq.n	8006f24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f02:	f000 f859 	bl	8006fb8 <xTaskIncrementTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f0c:	4b16      	ldr	r3, [pc, #88]	@ (8006f68 <xTaskResumeAll+0x130>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f1      	bne.n	8006f02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f1e:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <xTaskResumeAll+0x134>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f24:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <xTaskResumeAll+0x130>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <xTaskResumeAll+0x138>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f40:	f000 fecc 	bl	8007cdc <vPortExitCritical>

	return xAlreadyYielded;
 8006f44:	68bb      	ldr	r3, [r7, #8]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20005384 	.word	0x20005384
 8006f54:	2000535c 	.word	0x2000535c
 8006f58:	2000531c 	.word	0x2000531c
 8006f5c:	20005364 	.word	0x20005364
 8006f60:	20005260 	.word	0x20005260
 8006f64:	2000525c 	.word	0x2000525c
 8006f68:	20005370 	.word	0x20005370
 8006f6c:	2000536c 	.word	0x2000536c
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f7a:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <xTaskGetTickCount+0x1c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f80:	687b      	ldr	r3, [r7, #4]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20005360 	.word	0x20005360

08006f94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f9a:	f000 ff4d 	bl	8007e38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fa2:	4b04      	ldr	r3, [pc, #16]	@ (8006fb4 <xTaskGetTickCountFromISR+0x20>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fa8:	683b      	ldr	r3, [r7, #0]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20005360 	.word	0x20005360

08006fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8007100 <xTaskIncrementTick+0x148>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 808f 	bne.w	80070ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8007104 <xTaskIncrementTick+0x14c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8007104 <xTaskIncrementTick+0x14c>)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d121      	bne.n	8007024 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fe0:	4b49      	ldr	r3, [pc, #292]	@ (8007108 <xTaskIncrementTick+0x150>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	603b      	str	r3, [r7, #0]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <xTaskIncrementTick+0x46>
 8007002:	4b41      	ldr	r3, [pc, #260]	@ (8007108 <xTaskIncrementTick+0x150>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	4b40      	ldr	r3, [pc, #256]	@ (800710c <xTaskIncrementTick+0x154>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3e      	ldr	r2, [pc, #248]	@ (8007108 <xTaskIncrementTick+0x150>)
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	4a3e      	ldr	r2, [pc, #248]	@ (800710c <xTaskIncrementTick+0x154>)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4b3e      	ldr	r3, [pc, #248]	@ (8007110 <xTaskIncrementTick+0x158>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	4a3c      	ldr	r2, [pc, #240]	@ (8007110 <xTaskIncrementTick+0x158>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	f000 fab4 	bl	800758c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007024:	4b3b      	ldr	r3, [pc, #236]	@ (8007114 <xTaskIncrementTick+0x15c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	d348      	bcc.n	80070c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800702e:	4b36      	ldr	r3, [pc, #216]	@ (8007108 <xTaskIncrementTick+0x150>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007038:	4b36      	ldr	r3, [pc, #216]	@ (8007114 <xTaskIncrementTick+0x15c>)
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	601a      	str	r2, [r3, #0]
					break;
 8007040:	e03e      	b.n	80070c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <xTaskIncrementTick+0x150>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d203      	bcs.n	8007062 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800705a:	4a2e      	ldr	r2, [pc, #184]	@ (8007114 <xTaskIncrementTick+0x15c>)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007060:	e02e      	b.n	80070c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3304      	adds	r3, #4
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fc77 	bl	800595a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	3318      	adds	r3, #24
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fc6e 	bl	800595a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	2201      	movs	r2, #1
 8007084:	409a      	lsls	r2, r3
 8007086:	4b24      	ldr	r3, [pc, #144]	@ (8007118 <xTaskIncrementTick+0x160>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	4a22      	ldr	r2, [pc, #136]	@ (8007118 <xTaskIncrementTick+0x160>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a1f      	ldr	r2, [pc, #124]	@ (800711c <xTaskIncrementTick+0x164>)
 800709e:	441a      	add	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe fbfa 	bl	80058a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007120 <xTaskIncrementTick+0x168>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3b9      	bcc.n	800702e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070be:	e7b6      	b.n	800702e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070c0:	4b17      	ldr	r3, [pc, #92]	@ (8007120 <xTaskIncrementTick+0x168>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c6:	4915      	ldr	r1, [pc, #84]	@ (800711c <xTaskIncrementTick+0x164>)
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d901      	bls.n	80070dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070dc:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <xTaskIncrementTick+0x16c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e004      	b.n	80070f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <xTaskIncrementTick+0x170>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007128 <xTaskIncrementTick+0x170>)
 80070f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070f4:	697b      	ldr	r3, [r7, #20]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20005384 	.word	0x20005384
 8007104:	20005360 	.word	0x20005360
 8007108:	20005314 	.word	0x20005314
 800710c:	20005318 	.word	0x20005318
 8007110:	20005374 	.word	0x20005374
 8007114:	2000537c 	.word	0x2000537c
 8007118:	20005364 	.word	0x20005364
 800711c:	20005260 	.word	0x20005260
 8007120:	2000525c 	.word	0x2000525c
 8007124:	20005370 	.word	0x20005370
 8007128:	2000536c 	.word	0x2000536c

0800712c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007132:	4b2a      	ldr	r3, [pc, #168]	@ (80071dc <vTaskSwitchContext+0xb0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800713a:	4b29      	ldr	r3, [pc, #164]	@ (80071e0 <vTaskSwitchContext+0xb4>)
 800713c:	2201      	movs	r2, #1
 800713e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007140:	e045      	b.n	80071ce <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007142:	4b27      	ldr	r3, [pc, #156]	@ (80071e0 <vTaskSwitchContext+0xb4>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007148:	4b26      	ldr	r3, [pc, #152]	@ (80071e4 <vTaskSwitchContext+0xb8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	fab3 f383 	clz	r3, r3
 8007154:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	f1c3 031f 	rsb	r3, r3, #31
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	4922      	ldr	r1, [pc, #136]	@ (80071e8 <vTaskSwitchContext+0xbc>)
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	607b      	str	r3, [r7, #4]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <vTaskSwitchContext+0x5a>
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <vTaskSwitchContext+0xbc>)
 8007196:	4413      	add	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3308      	adds	r3, #8
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d104      	bne.n	80071ba <vTaskSwitchContext+0x8e>
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4a0a      	ldr	r2, [pc, #40]	@ (80071ec <vTaskSwitchContext+0xc0>)
 80071c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071c4:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <vTaskSwitchContext+0xc0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	334c      	adds	r3, #76	@ 0x4c
 80071ca:	4a09      	ldr	r2, [pc, #36]	@ (80071f0 <vTaskSwitchContext+0xc4>)
 80071cc:	6013      	str	r3, [r2, #0]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	20005384 	.word	0x20005384
 80071e0:	20005370 	.word	0x20005370
 80071e4:	20005364 	.word	0x20005364
 80071e8:	20005260 	.word	0x20005260
 80071ec:	2000525c 	.word	0x2000525c
 80071f0:	20000040 	.word	0x20000040

080071f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	e7fd      	b.n	8007218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800721c:	4b07      	ldr	r3, [pc, #28]	@ (800723c <vTaskPlaceOnEventList+0x48>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3318      	adds	r3, #24
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fe fb5f 	bl	80058e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800722a:	2101      	movs	r1, #1
 800722c:	6838      	ldr	r0, [r7, #0]
 800722e:	f000 fb8d 	bl	800794c <prvAddCurrentTaskToDelayedList>
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	2000525c 	.word	0x2000525c

08007240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3318      	adds	r3, #24
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fb71 	bl	800595a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007278:	4b1d      	ldr	r3, [pc, #116]	@ (80072f0 <xTaskRemoveFromEventList+0xb0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fb68 	bl	800595a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	2201      	movs	r2, #1
 8007290:	409a      	lsls	r2, r3
 8007292:	4b18      	ldr	r3, [pc, #96]	@ (80072f4 <xTaskRemoveFromEventList+0xb4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4313      	orrs	r3, r2
 8007298:	4a16      	ldr	r2, [pc, #88]	@ (80072f4 <xTaskRemoveFromEventList+0xb4>)
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <xTaskRemoveFromEventList+0xb8>)
 80072aa:	441a      	add	r2, r3
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fe faf4 	bl	80058a0 <vListInsertEnd>
 80072b8:	e005      	b.n	80072c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3318      	adds	r3, #24
 80072be:	4619      	mov	r1, r3
 80072c0:	480e      	ldr	r0, [pc, #56]	@ (80072fc <xTaskRemoveFromEventList+0xbc>)
 80072c2:	f7fe faed 	bl	80058a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <xTaskRemoveFromEventList+0xc0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d905      	bls.n	80072e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007304 <xTaskRemoveFromEventList+0xc4>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e001      	b.n	80072e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072e4:	697b      	ldr	r3, [r7, #20]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20005384 	.word	0x20005384
 80072f4:	20005364 	.word	0x20005364
 80072f8:	20005260 	.word	0x20005260
 80072fc:	2000531c 	.word	0x2000531c
 8007300:	2000525c 	.word	0x2000525c
 8007304:	20005370 	.word	0x20005370

08007308 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007310:	4b06      	ldr	r3, [pc, #24]	@ (800732c <vTaskInternalSetTimeOutState+0x24>)
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007318:	4b05      	ldr	r3, [pc, #20]	@ (8007330 <vTaskInternalSetTimeOutState+0x28>)
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20005374 	.word	0x20005374
 8007330:	20005360 	.word	0x20005360

08007334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10b      	bne.n	800735c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	613b      	str	r3, [r7, #16]
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	e7fd      	b.n	8007358 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10b      	bne.n	800737a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	60fb      	str	r3, [r7, #12]
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	e7fd      	b.n	8007376 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800737a:	f000 fc7d 	bl	8007c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800737e:	4b1d      	ldr	r3, [pc, #116]	@ (80073f4 <xTaskCheckForTimeOut+0xc0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d102      	bne.n	800739e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e023      	b.n	80073e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b15      	ldr	r3, [pc, #84]	@ (80073f8 <xTaskCheckForTimeOut+0xc4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d007      	beq.n	80073ba <xTaskCheckForTimeOut+0x86>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	e015      	b.n	80073e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d20b      	bcs.n	80073dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ff99 	bl	8007308 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	e004      	b.n	80073e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073e6:	f000 fc79 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 80073ea:	69fb      	ldr	r3, [r7, #28]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20005360 	.word	0x20005360
 80073f8:	20005374 	.word	0x20005374

080073fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007400:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <vTaskMissedYield+0x14>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
}
 8007406:	bf00      	nop
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20005370 	.word	0x20005370

08007414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800741c:	f000 f852 	bl	80074c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007420:	4b06      	ldr	r3, [pc, #24]	@ (800743c <prvIdleTask+0x28>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d9f9      	bls.n	800741c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007428:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <prvIdleTask+0x2c>)
 800742a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007438:	e7f0      	b.n	800741c <prvIdleTask+0x8>
 800743a:	bf00      	nop
 800743c:	20005260 	.word	0x20005260
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800744a:	2300      	movs	r3, #0
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	e00c      	b.n	800746a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4a12      	ldr	r2, [pc, #72]	@ (80074a4 <prvInitialiseTaskLists+0x60>)
 800745c:	4413      	add	r3, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe f9f1 	bl	8005846 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3301      	adds	r3, #1
 8007468:	607b      	str	r3, [r7, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b06      	cmp	r3, #6
 800746e:	d9ef      	bls.n	8007450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007470:	480d      	ldr	r0, [pc, #52]	@ (80074a8 <prvInitialiseTaskLists+0x64>)
 8007472:	f7fe f9e8 	bl	8005846 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007476:	480d      	ldr	r0, [pc, #52]	@ (80074ac <prvInitialiseTaskLists+0x68>)
 8007478:	f7fe f9e5 	bl	8005846 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800747c:	480c      	ldr	r0, [pc, #48]	@ (80074b0 <prvInitialiseTaskLists+0x6c>)
 800747e:	f7fe f9e2 	bl	8005846 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007482:	480c      	ldr	r0, [pc, #48]	@ (80074b4 <prvInitialiseTaskLists+0x70>)
 8007484:	f7fe f9df 	bl	8005846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007488:	480b      	ldr	r0, [pc, #44]	@ (80074b8 <prvInitialiseTaskLists+0x74>)
 800748a:	f7fe f9dc 	bl	8005846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800748e:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <prvInitialiseTaskLists+0x78>)
 8007490:	4a05      	ldr	r2, [pc, #20]	@ (80074a8 <prvInitialiseTaskLists+0x64>)
 8007492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <prvInitialiseTaskLists+0x7c>)
 8007496:	4a05      	ldr	r2, [pc, #20]	@ (80074ac <prvInitialiseTaskLists+0x68>)
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20005260 	.word	0x20005260
 80074a8:	200052ec 	.word	0x200052ec
 80074ac:	20005300 	.word	0x20005300
 80074b0:	2000531c 	.word	0x2000531c
 80074b4:	20005330 	.word	0x20005330
 80074b8:	20005348 	.word	0x20005348
 80074bc:	20005314 	.word	0x20005314
 80074c0:	20005318 	.word	0x20005318

080074c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ca:	e019      	b.n	8007500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074cc:	f000 fbd4 	bl	8007c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d0:	4b10      	ldr	r3, [pc, #64]	@ (8007514 <prvCheckTasksWaitingTermination+0x50>)
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fa3c 	bl	800595a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <prvCheckTasksWaitingTermination+0x54>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007518 <prvCheckTasksWaitingTermination+0x54>)
 80074ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074ec:	4b0b      	ldr	r3, [pc, #44]	@ (800751c <prvCheckTasksWaitingTermination+0x58>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	4a0a      	ldr	r2, [pc, #40]	@ (800751c <prvCheckTasksWaitingTermination+0x58>)
 80074f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074f6:	f000 fbf1 	bl	8007cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f810 	bl	8007520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007500:	4b06      	ldr	r3, [pc, #24]	@ (800751c <prvCheckTasksWaitingTermination+0x58>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e1      	bne.n	80074cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20005330 	.word	0x20005330
 8007518:	2000535c 	.word	0x2000535c
 800751c:	20005344 	.word	0x20005344

08007520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	334c      	adds	r3, #76	@ 0x4c
 800752c:	4618      	mov	r0, r3
 800752e:	f011 fe1f 	bl	8019170 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fd89 	bl	8008058 <vPortFree>
				vPortFree( pxTCB );
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fd86 	bl	8008058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800754c:	e019      	b.n	8007582 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007554:	2b01      	cmp	r3, #1
 8007556:	d103      	bne.n	8007560 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fd7d 	bl	8008058 <vPortFree>
	}
 800755e:	e010      	b.n	8007582 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007566:	2b02      	cmp	r3, #2
 8007568:	d00b      	beq.n	8007582 <prvDeleteTCB+0x62>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	60fb      	str	r3, [r7, #12]
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	e7fd      	b.n	800757e <prvDeleteTCB+0x5e>
	}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <prvResetNextTaskUnblockTime+0x38>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <prvResetNextTaskUnblockTime+0x3c>)
 800759e:	f04f 32ff 	mov.w	r2, #4294967295
 80075a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075a4:	e008      	b.n	80075b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <prvResetNextTaskUnblockTime+0x38>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <prvResetNextTaskUnblockTime+0x3c>)
 80075b6:	6013      	str	r3, [r2, #0]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20005314 	.word	0x20005314
 80075c8:	2000537c 	.word	0x2000537c

080075cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <xTaskGetSchedulerState+0x34>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075da:	2301      	movs	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	e008      	b.n	80075f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e0:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <xTaskGetSchedulerState+0x38>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075e8:	2302      	movs	r3, #2
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	e001      	b.n	80075f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075f2:	687b      	ldr	r3, [r7, #4]
	}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20005368 	.word	0x20005368
 8007604:	20005384 	.word	0x20005384

08007608 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d05e      	beq.n	80076dc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007622:	4b31      	ldr	r3, [pc, #196]	@ (80076e8 <xTaskPriorityInherit+0xe0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d24e      	bcs.n	80076ca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	db06      	blt.n	8007642 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007634:	4b2c      	ldr	r3, [pc, #176]	@ (80076e8 <xTaskPriorityInherit+0xe0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	f1c3 0207 	rsb	r2, r3, #7
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6959      	ldr	r1, [r3, #20]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4a26      	ldr	r2, [pc, #152]	@ (80076ec <xTaskPriorityInherit+0xe4>)
 8007654:	4413      	add	r3, r2
 8007656:	4299      	cmp	r1, r3
 8007658:	d12f      	bne.n	80076ba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	3304      	adds	r3, #4
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe f97b 	bl	800595a <uxListRemove>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	2201      	movs	r2, #1
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	43da      	mvns	r2, r3
 8007676:	4b1e      	ldr	r3, [pc, #120]	@ (80076f0 <xTaskPriorityInherit+0xe8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4013      	ands	r3, r2
 800767c:	4a1c      	ldr	r2, [pc, #112]	@ (80076f0 <xTaskPriorityInherit+0xe8>)
 800767e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007680:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <xTaskPriorityInherit+0xe0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768e:	2201      	movs	r2, #1
 8007690:	409a      	lsls	r2, r3
 8007692:	4b17      	ldr	r3, [pc, #92]	@ (80076f0 <xTaskPriorityInherit+0xe8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4313      	orrs	r3, r2
 8007698:	4a15      	ldr	r2, [pc, #84]	@ (80076f0 <xTaskPriorityInherit+0xe8>)
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4a10      	ldr	r2, [pc, #64]	@ (80076ec <xTaskPriorityInherit+0xe4>)
 80076aa:	441a      	add	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f7fe f8f4 	bl	80058a0 <vListInsertEnd>
 80076b8:	e004      	b.n	80076c4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ba:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <xTaskPriorityInherit+0xe0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	e008      	b.n	80076dc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ce:	4b06      	ldr	r3, [pc, #24]	@ (80076e8 <xTaskPriorityInherit+0xe0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d201      	bcs.n	80076dc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076d8:	2301      	movs	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076dc:	68fb      	ldr	r3, [r7, #12]
	}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	2000525c 	.word	0x2000525c
 80076ec:	20005260 	.word	0x20005260
 80076f0:	20005364 	.word	0x20005364

080076f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d070      	beq.n	80077ec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800770a:	4b3b      	ldr	r3, [pc, #236]	@ (80077f8 <xTaskPriorityDisinherit+0x104>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d00b      	beq.n	800772c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	e7fd      	b.n	8007728 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10b      	bne.n	800774c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60bb      	str	r3, [r7, #8]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007750:	1e5a      	subs	r2, r3, #1
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800775e:	429a      	cmp	r2, r3
 8007760:	d044      	beq.n	80077ec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	d140      	bne.n	80077ec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe f8f3 	bl	800595a <uxListRemove>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d115      	bne.n	80077a6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777e:	491f      	ldr	r1, [pc, #124]	@ (80077fc <xTaskPriorityDisinherit+0x108>)
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xTaskPriorityDisinherit+0xb2>
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	2201      	movs	r2, #1
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	43da      	mvns	r2, r3
 800779c:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <xTaskPriorityDisinherit+0x10c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4013      	ands	r3, r2
 80077a2:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <xTaskPriorityDisinherit+0x10c>)
 80077a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b2:	f1c3 0207 	rsb	r2, r3, #7
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	2201      	movs	r2, #1
 80077c0:	409a      	lsls	r2, r3
 80077c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <xTaskPriorityDisinherit+0x10c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007800 <xTaskPriorityDisinherit+0x10c>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a08      	ldr	r2, [pc, #32]	@ (80077fc <xTaskPriorityDisinherit+0x108>)
 80077da:	441a      	add	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7fe f85c 	bl	80058a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077ec:	697b      	ldr	r3, [r7, #20]
	}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2000525c 	.word	0x2000525c
 80077fc:	20005260 	.word	0x20005260
 8007800:	20005364 	.word	0x20005364

08007804 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007812:	2301      	movs	r3, #1
 8007814:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d079      	beq.n	8007910 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	60fb      	str	r3, [r7, #12]
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d902      	bls.n	800784c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e002      	b.n	8007852 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007850:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	429a      	cmp	r2, r3
 800785a:	d059      	beq.n	8007910 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d154      	bne.n	8007910 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007866:	4b2c      	ldr	r3, [pc, #176]	@ (8007918 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	d10b      	bne.n	8007888 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60bb      	str	r3, [r7, #8]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	db04      	blt.n	80078a6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f1c3 0207 	rsb	r2, r3, #7
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	6959      	ldr	r1, [r3, #20]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4a19      	ldr	r2, [pc, #100]	@ (800791c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078b6:	4413      	add	r3, r2
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d129      	bne.n	8007910 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe f84a 	bl	800595a <uxListRemove>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	2201      	movs	r2, #1
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	43da      	mvns	r2, r3
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4013      	ands	r3, r2
 80078de:	4a10      	ldr	r2, [pc, #64]	@ (8007920 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	2201      	movs	r2, #1
 80078e8:	409a      	lsls	r2, r3
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007920 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4a06      	ldr	r2, [pc, #24]	@ (800791c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007902:	441a      	add	r2, r3
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	3304      	adds	r3, #4
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f7fd ffc8 	bl	80058a0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007910:	bf00      	nop
 8007912:	3720      	adds	r7, #32
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	2000525c 	.word	0x2000525c
 800791c:	20005260 	.word	0x20005260
 8007920:	20005364 	.word	0x20005364

08007924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007928:	4b07      	ldr	r3, [pc, #28]	@ (8007948 <pvTaskIncrementMutexHeldCount+0x24>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <pvTaskIncrementMutexHeldCount+0x24>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007936:	3201      	adds	r2, #1
 8007938:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800793a:	4b03      	ldr	r3, [pc, #12]	@ (8007948 <pvTaskIncrementMutexHeldCount+0x24>)
 800793c:	681b      	ldr	r3, [r3, #0]
	}
 800793e:	4618      	mov	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	2000525c 	.word	0x2000525c

0800794c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007956:	4b29      	ldr	r3, [pc, #164]	@ (80079fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795c:	4b28      	ldr	r3, [pc, #160]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd fff9 	bl	800595a <uxListRemove>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800796e:	4b24      	ldr	r3, [pc, #144]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	2201      	movs	r2, #1
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43da      	mvns	r2, r3
 800797c:	4b21      	ldr	r3, [pc, #132]	@ (8007a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4013      	ands	r3, r2
 8007982:	4a20      	ldr	r2, [pc, #128]	@ (8007a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007984:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d10a      	bne.n	80079a4 <prvAddCurrentTaskToDelayedList+0x58>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007994:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	481a      	ldr	r0, [pc, #104]	@ (8007a08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800799e:	f7fd ff7f 	bl	80058a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079a2:	e026      	b.n	80079f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4413      	add	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079ac:	4b14      	ldr	r3, [pc, #80]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d209      	bcs.n	80079d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079bc:	4b13      	ldr	r3, [pc, #76]	@ (8007a0c <prvAddCurrentTaskToDelayedList+0xc0>)
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3304      	adds	r3, #4
 80079c6:	4619      	mov	r1, r3
 80079c8:	4610      	mov	r0, r2
 80079ca:	f7fd ff8d 	bl	80058e8 <vListInsert>
}
 80079ce:	e010      	b.n	80079f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fd ff83 	bl	80058e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d202      	bcs.n	80079f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079ec:	4a09      	ldr	r2, [pc, #36]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6013      	str	r3, [r2, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20005360 	.word	0x20005360
 8007a00:	2000525c 	.word	0x2000525c
 8007a04:	20005364 	.word	0x20005364
 8007a08:	20005348 	.word	0x20005348
 8007a0c:	20005318 	.word	0x20005318
 8007a10:	20005314 	.word	0x20005314
 8007a14:	2000537c 	.word	0x2000537c

08007a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3b04      	subs	r3, #4
 8007a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f023 0201 	bic.w	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3b04      	subs	r3, #4
 8007a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a48:	4a0c      	ldr	r2, [pc, #48]	@ (8007a7c <pxPortInitialiseStack+0x64>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3b14      	subs	r3, #20
 8007a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f06f 0202 	mvn.w	r2, #2
 8007a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3b20      	subs	r3, #32
 8007a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	08007a81 	.word	0x08007a81

08007a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a8a:	4b13      	ldr	r3, [pc, #76]	@ (8007ad8 <prvTaskExitError+0x58>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a92:	d00b      	beq.n	8007aac <prvTaskExitError+0x2c>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	60fb      	str	r3, [r7, #12]
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <prvTaskExitError+0x28>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60bb      	str	r3, [r7, #8]
}
 8007abe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ac0:	bf00      	nop
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0fc      	beq.n	8007ac2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000020 	.word	0x20000020
 8007adc:	00000000 	.word	0x00000000

08007ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <pxCurrentTCBConst2>)
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	6808      	ldr	r0, [r1, #0]
 8007ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aea:	f380 8809 	msr	PSP, r0
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f04f 0000 	mov.w	r0, #0
 8007af6:	f380 8811 	msr	BASEPRI, r0
 8007afa:	4770      	bx	lr
 8007afc:	f3af 8000 	nop.w

08007b00 <pxCurrentTCBConst2>:
 8007b00:	2000525c 	.word	0x2000525c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b08:	4808      	ldr	r0, [pc, #32]	@ (8007b2c <prvPortStartFirstTask+0x24>)
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f380 8808 	msr	MSP, r0
 8007b12:	f04f 0000 	mov.w	r0, #0
 8007b16:	f380 8814 	msr	CONTROL, r0
 8007b1a:	b662      	cpsie	i
 8007b1c:	b661      	cpsie	f
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	df00      	svc	0
 8007b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b2a:	bf00      	nop
 8007b2c:	e000ed08 	.word	0xe000ed08

08007b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b36:	4b47      	ldr	r3, [pc, #284]	@ (8007c54 <xPortStartScheduler+0x124>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a47      	ldr	r2, [pc, #284]	@ (8007c58 <xPortStartScheduler+0x128>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d10b      	bne.n	8007b58 <xPortStartScheduler+0x28>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	613b      	str	r3, [r7, #16]
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	e7fd      	b.n	8007b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b58:	4b3e      	ldr	r3, [pc, #248]	@ (8007c54 <xPortStartScheduler+0x124>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c5c <xPortStartScheduler+0x12c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10b      	bne.n	8007b7a <xPortStartScheduler+0x4a>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	60fb      	str	r3, [r7, #12]
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	e7fd      	b.n	8007b76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b7a:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <xPortStartScheduler+0x130>)
 8007b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	22ff      	movs	r2, #255	@ 0xff
 8007b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	4b31      	ldr	r3, [pc, #196]	@ (8007c64 <xPortStartScheduler+0x134>)
 8007ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ba2:	4b31      	ldr	r3, [pc, #196]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ba8:	e009      	b.n	8007bbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007baa:	4b2f      	ldr	r3, [pc, #188]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc6:	2b80      	cmp	r3, #128	@ 0x80
 8007bc8:	d0ef      	beq.n	8007baa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bca:	4b27      	ldr	r3, [pc, #156]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f1c3 0307 	rsb	r3, r3, #7
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d00b      	beq.n	8007bee <xPortStartScheduler+0xbe>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60bb      	str	r3, [r7, #8]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bee:	4b1e      	ldr	r3, [pc, #120]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c00:	4a19      	ldr	r2, [pc, #100]	@ (8007c68 <xPortStartScheduler+0x138>)
 8007c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c0c:	4b17      	ldr	r3, [pc, #92]	@ (8007c6c <xPortStartScheduler+0x13c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a16      	ldr	r2, [pc, #88]	@ (8007c6c <xPortStartScheduler+0x13c>)
 8007c12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c18:	4b14      	ldr	r3, [pc, #80]	@ (8007c6c <xPortStartScheduler+0x13c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a13      	ldr	r2, [pc, #76]	@ (8007c6c <xPortStartScheduler+0x13c>)
 8007c1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c24:	f000 f8da 	bl	8007ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c28:	4b11      	ldr	r3, [pc, #68]	@ (8007c70 <xPortStartScheduler+0x140>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c2e:	f000 f8f9 	bl	8007e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c32:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <xPortStartScheduler+0x144>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a0f      	ldr	r2, [pc, #60]	@ (8007c74 <xPortStartScheduler+0x144>)
 8007c38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c3e:	f7ff ff63 	bl	8007b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c42:	f7ff fa73 	bl	800712c <vTaskSwitchContext>
	prvTaskExitError();
 8007c46:	f7ff ff1b 	bl	8007a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	e000ed00 	.word	0xe000ed00
 8007c58:	410fc271 	.word	0x410fc271
 8007c5c:	410fc270 	.word	0x410fc270
 8007c60:	e000e400 	.word	0xe000e400
 8007c64:	20005388 	.word	0x20005388
 8007c68:	2000538c 	.word	0x2000538c
 8007c6c:	e000ed20 	.word	0xe000ed20
 8007c70:	20000020 	.word	0x20000020
 8007c74:	e000ef34 	.word	0xe000ef34

08007c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c92:	4b10      	ldr	r3, [pc, #64]	@ (8007cd4 <vPortEnterCritical+0x5c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	4a0e      	ldr	r2, [pc, #56]	@ (8007cd4 <vPortEnterCritical+0x5c>)
 8007c9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <vPortEnterCritical+0x5c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d110      	bne.n	8007cc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <vPortEnterCritical+0x60>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00b      	beq.n	8007cc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	603b      	str	r3, [r7, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <vPortEnterCritical+0x4a>
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20000020 	.word	0x20000020
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ce2:	4b12      	ldr	r3, [pc, #72]	@ (8007d2c <vPortExitCritical+0x50>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <vPortExitCritical+0x26>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	607b      	str	r3, [r7, #4]
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	e7fd      	b.n	8007cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d02:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <vPortExitCritical+0x50>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	4a08      	ldr	r2, [pc, #32]	@ (8007d2c <vPortExitCritical+0x50>)
 8007d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d0c:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <vPortExitCritical+0x50>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <vPortExitCritical+0x44>
 8007d14:	2300      	movs	r3, #0
 8007d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
}
 8007d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	20000020 	.word	0x20000020

08007d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d30:	f3ef 8009 	mrs	r0, PSP
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4b15      	ldr	r3, [pc, #84]	@ (8007d90 <pxCurrentTCBConst>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	f01e 0f10 	tst.w	lr, #16
 8007d40:	bf08      	it	eq
 8007d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d54:	f380 8811 	msr	BASEPRI, r0
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f7ff f9e4 	bl	800712c <vTaskSwitchContext>
 8007d64:	f04f 0000 	mov.w	r0, #0
 8007d68:	f380 8811 	msr	BASEPRI, r0
 8007d6c:	bc09      	pop	{r0, r3}
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	6808      	ldr	r0, [r1, #0]
 8007d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d76:	f01e 0f10 	tst.w	lr, #16
 8007d7a:	bf08      	it	eq
 8007d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d80:	f380 8809 	msr	PSP, r0
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	f3af 8000 	nop.w

08007d90 <pxCurrentTCBConst>:
 8007d90:	2000525c 	.word	0x2000525c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop

08007d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007db2:	f7ff f901 	bl	8006fb8 <xTaskIncrementTick>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dbc:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <SysTick_Handler+0x40>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f383 8811 	msr	BASEPRI, r3
}
 8007dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	e000ed04 	.word	0xe000ed04

08007ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007de0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <vPortSetupTimerInterrupt+0x34>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007de6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <vPortSetupTimerInterrupt+0x38>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dec:	4b0a      	ldr	r3, [pc, #40]	@ (8007e18 <vPortSetupTimerInterrupt+0x3c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0a      	ldr	r2, [pc, #40]	@ (8007e1c <vPortSetupTimerInterrupt+0x40>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	099b      	lsrs	r3, r3, #6
 8007df8:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <vPortSetupTimerInterrupt+0x44>)
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dfe:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <vPortSetupTimerInterrupt+0x34>)
 8007e00:	2207      	movs	r2, #7
 8007e02:	601a      	str	r2, [r3, #0]
}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	e000e010 	.word	0xe000e010
 8007e14:	e000e018 	.word	0xe000e018
 8007e18:	20000000 	.word	0x20000000
 8007e1c:	10624dd3 	.word	0x10624dd3
 8007e20:	e000e014 	.word	0xe000e014

08007e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e34 <vPortEnableVFP+0x10>
 8007e28:	6801      	ldr	r1, [r0, #0]
 8007e2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e2e:	6001      	str	r1, [r0, #0]
 8007e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e32:	bf00      	nop
 8007e34:	e000ed88 	.word	0xe000ed88

08007e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e3e:	f3ef 8305 	mrs	r3, IPSR
 8007e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d915      	bls.n	8007e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e4a:	4a18      	ldr	r2, [pc, #96]	@ (8007eac <vPortValidateInterruptPriority+0x74>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e54:	4b16      	ldr	r3, [pc, #88]	@ (8007eb0 <vPortValidateInterruptPriority+0x78>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	7afa      	ldrb	r2, [r7, #11]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d20b      	bcs.n	8007e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e76:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb4 <vPortValidateInterruptPriority+0x7c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb8 <vPortValidateInterruptPriority+0x80>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d90b      	bls.n	8007e9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	603b      	str	r3, [r7, #0]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <vPortValidateInterruptPriority+0x62>
	}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	e000e3f0 	.word	0xe000e3f0
 8007eb0:	20005388 	.word	0x20005388
 8007eb4:	e000ed0c 	.word	0xe000ed0c
 8007eb8:	2000538c 	.word	0x2000538c

08007ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	@ 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ec8:	f7fe ffa8 	bl	8006e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8008040 <pvPortMalloc+0x184>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ed4:	f000 f924 	bl	8008120 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8008044 <pvPortMalloc+0x188>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 8095 	bne.w	8008010 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01e      	beq.n	8007f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007eec:	2208      	movs	r2, #8
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d015      	beq.n	8007f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f023 0307 	bic.w	r3, r3, #7
 8007f04:	3308      	adds	r3, #8
 8007f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <pvPortMalloc+0x6e>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	617b      	str	r3, [r7, #20]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06f      	beq.n	8008010 <pvPortMalloc+0x154>
 8007f30:	4b45      	ldr	r3, [pc, #276]	@ (8008048 <pvPortMalloc+0x18c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d86a      	bhi.n	8008010 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f3a:	4b44      	ldr	r3, [pc, #272]	@ (800804c <pvPortMalloc+0x190>)
 8007f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f3e:	4b43      	ldr	r3, [pc, #268]	@ (800804c <pvPortMalloc+0x190>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f44:	e004      	b.n	8007f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d903      	bls.n	8007f62 <pvPortMalloc+0xa6>
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f1      	bne.n	8007f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f62:	4b37      	ldr	r3, [pc, #220]	@ (8008040 <pvPortMalloc+0x184>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d051      	beq.n	8008010 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2208      	movs	r2, #8
 8007f72:	4413      	add	r3, r2
 8007f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	2308      	movs	r3, #8
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d920      	bls.n	8007fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <pvPortMalloc+0xfc>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	e7fd      	b.n	8007fb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fca:	69b8      	ldr	r0, [r7, #24]
 8007fcc:	f000 f90a 	bl	80081e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008048 <pvPortMalloc+0x18c>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	4a1b      	ldr	r2, [pc, #108]	@ (8008048 <pvPortMalloc+0x18c>)
 8007fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fde:	4b1a      	ldr	r3, [pc, #104]	@ (8008048 <pvPortMalloc+0x18c>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8008050 <pvPortMalloc+0x194>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d203      	bcs.n	8007ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fea:	4b17      	ldr	r3, [pc, #92]	@ (8008048 <pvPortMalloc+0x18c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a18      	ldr	r2, [pc, #96]	@ (8008050 <pvPortMalloc+0x194>)
 8007ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <pvPortMalloc+0x188>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008006:	4b13      	ldr	r3, [pc, #76]	@ (8008054 <pvPortMalloc+0x198>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	4a11      	ldr	r2, [pc, #68]	@ (8008054 <pvPortMalloc+0x198>)
 800800e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008010:	f7fe ff12 	bl	8006e38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <pvPortMalloc+0x17a>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	60fb      	str	r3, [r7, #12]
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	e7fd      	b.n	8008032 <pvPortMalloc+0x176>
	return pvReturn;
 8008036:	69fb      	ldr	r3, [r7, #28]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3728      	adds	r7, #40	@ 0x28
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	2000d398 	.word	0x2000d398
 8008044:	2000d3ac 	.word	0x2000d3ac
 8008048:	2000d39c 	.word	0x2000d39c
 800804c:	2000d390 	.word	0x2000d390
 8008050:	2000d3a0 	.word	0x2000d3a0
 8008054:	2000d3a4 	.word	0x2000d3a4

08008058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04f      	beq.n	800810a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800806a:	2308      	movs	r3, #8
 800806c:	425b      	negs	r3, r3
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4413      	add	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b25      	ldr	r3, [pc, #148]	@ (8008114 <vPortFree+0xbc>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10b      	bne.n	800809e <vPortFree+0x46>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	60fb      	str	r3, [r7, #12]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <vPortFree+0x66>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60bb      	str	r3, [r7, #8]
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	4b14      	ldr	r3, [pc, #80]	@ (8008114 <vPortFree+0xbc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01e      	beq.n	800810a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11a      	bne.n	800810a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008114 <vPortFree+0xbc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	43db      	mvns	r3, r3
 80080de:	401a      	ands	r2, r3
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080e4:	f7fe fe9a 	bl	8006e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008118 <vPortFree+0xc0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	4a09      	ldr	r2, [pc, #36]	@ (8008118 <vPortFree+0xc0>)
 80080f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080f6:	6938      	ldr	r0, [r7, #16]
 80080f8:	f000 f874 	bl	80081e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080fc:	4b07      	ldr	r3, [pc, #28]	@ (800811c <vPortFree+0xc4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	4a06      	ldr	r2, [pc, #24]	@ (800811c <vPortFree+0xc4>)
 8008104:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008106:	f7fe fe97 	bl	8006e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800810a:	bf00      	nop
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	2000d3ac 	.word	0x2000d3ac
 8008118:	2000d39c 	.word	0x2000d39c
 800811c:	2000d3a8 	.word	0x2000d3a8

08008120 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800812a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800812c:	4b27      	ldr	r3, [pc, #156]	@ (80081cc <prvHeapInit+0xac>)
 800812e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00c      	beq.n	8008154 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3307      	adds	r3, #7
 800813e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0307 	bic.w	r3, r3, #7
 8008146:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	4a1f      	ldr	r2, [pc, #124]	@ (80081cc <prvHeapInit+0xac>)
 8008150:	4413      	add	r3, r2
 8008152:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008158:	4a1d      	ldr	r2, [pc, #116]	@ (80081d0 <prvHeapInit+0xb0>)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800815e:	4b1c      	ldr	r3, [pc, #112]	@ (80081d0 <prvHeapInit+0xb0>)
 8008160:	2200      	movs	r2, #0
 8008162:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	4413      	add	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800816c:	2208      	movs	r2, #8
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <prvHeapInit+0xb4>)
 8008180:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <prvHeapInit+0xb4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800818a:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <prvHeapInit+0xb4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <prvHeapInit+0xb4>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	4a0a      	ldr	r2, [pc, #40]	@ (80081d8 <prvHeapInit+0xb8>)
 80081ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	4a09      	ldr	r2, [pc, #36]	@ (80081dc <prvHeapInit+0xbc>)
 80081b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081b8:	4b09      	ldr	r3, [pc, #36]	@ (80081e0 <prvHeapInit+0xc0>)
 80081ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081be:	601a      	str	r2, [r3, #0]
}
 80081c0:	bf00      	nop
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20005390 	.word	0x20005390
 80081d0:	2000d390 	.word	0x2000d390
 80081d4:	2000d398 	.word	0x2000d398
 80081d8:	2000d3a0 	.word	0x2000d3a0
 80081dc:	2000d39c 	.word	0x2000d39c
 80081e0:	2000d3ac 	.word	0x2000d3ac

080081e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081ec:	4b28      	ldr	r3, [pc, #160]	@ (8008290 <prvInsertBlockIntoFreeList+0xac>)
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e002      	b.n	80081f8 <prvInsertBlockIntoFreeList+0x14>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d8f7      	bhi.n	80081f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4413      	add	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d108      	bne.n	8008226 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	441a      	add	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d118      	bne.n	800826c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b15      	ldr	r3, [pc, #84]	@ (8008294 <prvInsertBlockIntoFreeList+0xb0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d00d      	beq.n	8008262 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	441a      	add	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e008      	b.n	8008274 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008262:	4b0c      	ldr	r3, [pc, #48]	@ (8008294 <prvInsertBlockIntoFreeList+0xb0>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e003      	b.n	8008274 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	429a      	cmp	r2, r3
 800827a:	d002      	beq.n	8008282 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	2000d390 	.word	0x2000d390
 8008294:	2000d398 	.word	0x2000d398

08008298 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	461a      	mov	r2, r3
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f002 fc29 	bl	800ab04 <tcpip_send_msg_wait_sem>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80082b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <netconn_apimsg+0x2e>
    return apimsg->err;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80082c4:	e001      	b.n	80082ca <netconn_apimsg+0x32>
  }
  return err;
 80082c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08c      	sub	sp, #48	@ 0x30
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	603a      	str	r2, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
 80082e0:	460b      	mov	r3, r1
 80082e2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 f95b 	bl	80095a4 <netconn_alloc>
 80082ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80082f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d054      	beq.n	80083a0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80082f6:	79bb      	ldrb	r3, [r7, #6]
 80082f8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80082fe:	f107 0308 	add.w	r3, r7, #8
 8008302:	4619      	mov	r1, r3
 8008304:	4829      	ldr	r0, [pc, #164]	@ (80083ac <netconn_new_with_proto_and_callback+0xd8>)
 8008306:	f7ff ffc7 	bl	8008298 <netconn_apimsg>
 800830a:	4603      	mov	r3, r0
 800830c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008310:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008314:	2b00      	cmp	r3, #0
 8008316:	d043      	beq.n	80083a0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <netconn_new_with_proto_and_callback+0x58>
 8008320:	4b23      	ldr	r3, [pc, #140]	@ (80083b0 <netconn_new_with_proto_and_callback+0xdc>)
 8008322:	22a3      	movs	r2, #163	@ 0xa3
 8008324:	4923      	ldr	r1, [pc, #140]	@ (80083b4 <netconn_new_with_proto_and_callback+0xe0>)
 8008326:	4824      	ldr	r0, [pc, #144]	@ (80083b8 <netconn_new_with_proto_and_callback+0xe4>)
 8008328:	f010 fdd4 	bl	8018ed4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	3310      	adds	r3, #16
 8008330:	4618      	mov	r0, r3
 8008332:	f010 fb68 	bl	8018a06 <sys_mbox_valid>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <netconn_new_with_proto_and_callback+0x74>
 800833c:	4b1c      	ldr	r3, [pc, #112]	@ (80083b0 <netconn_new_with_proto_and_callback+0xdc>)
 800833e:	22a4      	movs	r2, #164	@ 0xa4
 8008340:	491e      	ldr	r1, [pc, #120]	@ (80083bc <netconn_new_with_proto_and_callback+0xe8>)
 8008342:	481d      	ldr	r0, [pc, #116]	@ (80083b8 <netconn_new_with_proto_and_callback+0xe4>)
 8008344:	f010 fdc6 	bl	8018ed4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834a:	3314      	adds	r3, #20
 800834c:	4618      	mov	r0, r3
 800834e:	f010 fb5a 	bl	8018a06 <sys_mbox_valid>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <netconn_new_with_proto_and_callback+0x90>
 8008358:	4b15      	ldr	r3, [pc, #84]	@ (80083b0 <netconn_new_with_proto_and_callback+0xdc>)
 800835a:	22a6      	movs	r2, #166	@ 0xa6
 800835c:	4918      	ldr	r1, [pc, #96]	@ (80083c0 <netconn_new_with_proto_and_callback+0xec>)
 800835e:	4816      	ldr	r0, [pc, #88]	@ (80083b8 <netconn_new_with_proto_and_callback+0xe4>)
 8008360:	f010 fdb8 	bl	8018ed4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008366:	330c      	adds	r3, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f010 fbdd 	bl	8018b28 <sys_sem_valid>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <netconn_new_with_proto_and_callback+0xac>
 8008374:	4b0e      	ldr	r3, [pc, #56]	@ (80083b0 <netconn_new_with_proto_and_callback+0xdc>)
 8008376:	22a9      	movs	r2, #169	@ 0xa9
 8008378:	4912      	ldr	r1, [pc, #72]	@ (80083c4 <netconn_new_with_proto_and_callback+0xf0>)
 800837a:	480f      	ldr	r0, [pc, #60]	@ (80083b8 <netconn_new_with_proto_and_callback+0xe4>)
 800837c:	f010 fdaa 	bl	8018ed4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008382:	330c      	adds	r3, #12
 8008384:	4618      	mov	r0, r3
 8008386:	f010 fbc2 	bl	8018b0e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800838a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838c:	3310      	adds	r3, #16
 800838e:	4618      	mov	r0, r3
 8008390:	f010 fab2 	bl	80188f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008396:	2007      	movs	r0, #7
 8008398:	f003 ffb2 	bl	800c300 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80083a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3730      	adds	r7, #48	@ 0x30
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	08009579 	.word	0x08009579
 80083b0:	0801a46c 	.word	0x0801a46c
 80083b4:	0801a4a0 	.word	0x0801a4a0
 80083b8:	0801a4c4 	.word	0x0801a4c4
 80083bc:	0801a4ec 	.word	0x0801a4ec
 80083c0:	0801a504 	.word	0x0801a504
 80083c4:	0801a528 	.word	0x0801a528

080083c8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08c      	sub	sp, #48	@ 0x30
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <netconn_prepare_delete+0x12>
    return ERR_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e014      	b.n	8008404 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80083de:	2329      	movs	r3, #41	@ 0x29
 80083e0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	4619      	mov	r1, r3
 80083e8:	4808      	ldr	r0, [pc, #32]	@ (800840c <netconn_prepare_delete+0x44>)
 80083ea:	f7ff ff55 	bl	8008298 <netconn_apimsg>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80083f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <netconn_prepare_delete+0x3a>
    return err;
 80083fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008400:	e000      	b.n	8008404 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3730      	adds	r7, #48	@ 0x30
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	08009ae5 	.word	0x08009ae5

08008410 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <netconn_delete+0x12>
    return ERR_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e00d      	b.n	800843e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff ffd0 	bl	80083c8 <netconn_prepare_delete>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800842c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <netconn_delete+0x2a>
    netconn_free(conn);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f923 	bl	8009680 <netconn_free>
  }
  return err;
 800843a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08e      	sub	sp, #56	@ 0x38
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <netconn_bind+0x28>
 800845c:	4b11      	ldr	r3, [pc, #68]	@ (80084a4 <netconn_bind+0x5c>)
 800845e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008462:	4911      	ldr	r1, [pc, #68]	@ (80084a8 <netconn_bind+0x60>)
 8008464:	4811      	ldr	r0, [pc, #68]	@ (80084ac <netconn_bind+0x64>)
 8008466:	f010 fd35 	bl	8018ed4 <iprintf>
 800846a:	f06f 030f 	mvn.w	r3, #15
 800846e:	e015      	b.n	800849c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008476:	4b0e      	ldr	r3, [pc, #56]	@ (80084b0 <netconn_bind+0x68>)
 8008478:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008486:	f107 0314 	add.w	r3, r7, #20
 800848a:	4619      	mov	r1, r3
 800848c:	4809      	ldr	r0, [pc, #36]	@ (80084b4 <netconn_bind+0x6c>)
 800848e:	f7ff ff03 	bl	8008298 <netconn_apimsg>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008498:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800849c:	4618      	mov	r0, r3
 800849e:	3738      	adds	r7, #56	@ 0x38
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	0801a46c 	.word	0x0801a46c
 80084a8:	0801a5a4 	.word	0x0801a5a4
 80084ac:	0801a4c4 	.word	0x0801a4c4
 80084b0:	0802817c 	.word	0x0802817c
 80084b4:	08009cad 	.word	0x08009cad

080084b8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	@ 0x38
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <netconn_connect+0x28>
 80084cc:	4b11      	ldr	r3, [pc, #68]	@ (8008514 <netconn_connect+0x5c>)
 80084ce:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 80084d2:	4911      	ldr	r1, [pc, #68]	@ (8008518 <netconn_connect+0x60>)
 80084d4:	4811      	ldr	r0, [pc, #68]	@ (800851c <netconn_connect+0x64>)
 80084d6:	f010 fcfd 	bl	8018ed4 <iprintf>
 80084da:	f06f 030f 	mvn.w	r3, #15
 80084de:	e015      	b.n	800850c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80084e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008520 <netconn_connect+0x68>)
 80084e8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80084f2:	88fb      	ldrh	r3, [r7, #6]
 80084f4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	4619      	mov	r1, r3
 80084fc:	4809      	ldr	r0, [pc, #36]	@ (8008524 <netconn_connect+0x6c>)
 80084fe:	f7ff fecb 	bl	8008298 <netconn_apimsg>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008508:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800850c:	4618      	mov	r0, r3
 800850e:	3738      	adds	r7, #56	@ 0x38
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	0801a46c 	.word	0x0801a46c
 8008518:	0801a5e0 	.word	0x0801a5e0
 800851c:	0801a4c4 	.word	0x0801a4c4
 8008520:	0802817c 	.word	0x0802817c
 8008524:	08009e41 	.word	0x08009e41

08008528 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08c      	sub	sp, #48	@ 0x30
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <netconn_listen_with_backlog+0x26>
 800853a:	4b0d      	ldr	r3, [pc, #52]	@ (8008570 <netconn_listen_with_backlog+0x48>)
 800853c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008540:	490c      	ldr	r1, [pc, #48]	@ (8008574 <netconn_listen_with_backlog+0x4c>)
 8008542:	480d      	ldr	r0, [pc, #52]	@ (8008578 <netconn_listen_with_backlog+0x50>)
 8008544:	f010 fcc6 	bl	8018ed4 <iprintf>
 8008548:	f06f 030f 	mvn.w	r3, #15
 800854c:	e00c      	b.n	8008568 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008552:	f107 030c 	add.w	r3, r7, #12
 8008556:	4619      	mov	r1, r3
 8008558:	4808      	ldr	r0, [pc, #32]	@ (800857c <netconn_listen_with_backlog+0x54>)
 800855a:	f7ff fe9d 	bl	8008298 <netconn_apimsg>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008564:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008568:	4618      	mov	r0, r3
 800856a:	3730      	adds	r7, #48	@ 0x30
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0801a46c 	.word	0x0801a46c
 8008574:	0801a624 	.word	0x0801a624
 8008578:	0801a4c4 	.word	0x0801a4c4
 800857c:	08009fbd 	.word	0x08009fbd

08008580 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <netconn_accept+0x24>
 8008590:	4b3d      	ldr	r3, [pc, #244]	@ (8008688 <netconn_accept+0x108>)
 8008592:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008596:	493d      	ldr	r1, [pc, #244]	@ (800868c <netconn_accept+0x10c>)
 8008598:	483d      	ldr	r0, [pc, #244]	@ (8008690 <netconn_accept+0x110>)
 800859a:	f010 fc9b 	bl	8018ed4 <iprintf>
 800859e:	f06f 030f 	mvn.w	r3, #15
 80085a2:	e06c      	b.n	800867e <netconn_accept+0xfe>
  *new_conn = NULL;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <netconn_accept+0x44>
 80085b0:	4b35      	ldr	r3, [pc, #212]	@ (8008688 <netconn_accept+0x108>)
 80085b2:	f240 12e3 	movw	r2, #483	@ 0x1e3
 80085b6:	4937      	ldr	r1, [pc, #220]	@ (8008694 <netconn_accept+0x114>)
 80085b8:	4835      	ldr	r0, [pc, #212]	@ (8008690 <netconn_accept+0x110>)
 80085ba:	f010 fc8b 	bl	8018ed4 <iprintf>
 80085be:	f06f 030f 	mvn.w	r3, #15
 80085c2:	e05c      	b.n	800867e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fb6c 	bl	8008ca2 <netconn_err>
 80085ca:	4603      	mov	r3, r0
 80085cc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80085ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80085d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085da:	e050      	b.n	800867e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3314      	adds	r3, #20
 80085e0:	4618      	mov	r0, r3
 80085e2:	f010 fa10 	bl	8018a06 <sys_mbox_valid>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <netconn_accept+0x78>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7f1b      	ldrb	r3, [r3, #28]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80085f8:	f06f 030e 	mvn.w	r3, #14
 80085fc:	e03f      	b.n	800867e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7f1b      	ldrb	r3, [r3, #28]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3314      	adds	r3, #20
 800860e:	f107 020c 	add.w	r2, r7, #12
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f010 f9da 	bl	80189ce <sys_arch_mbox_tryfetch>
 800861a:	4603      	mov	r3, r0
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d10a      	bne.n	8008638 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008622:	f06f 0306 	mvn.w	r3, #6
 8008626:	e02a      	b.n	800867e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3314      	adds	r3, #20
 800862c:	f107 010c 	add.w	r1, r7, #12
 8008630:	2200      	movs	r2, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f010 f98c 	bl	8018950 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <netconn_accept+0xcc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008644:	2200      	movs	r2, #0
 8008646:	2101      	movs	r1, #1
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f107 0213 	add.w	r2, r7, #19
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fb75 	bl	8008d44 <lwip_netconn_is_err_msg>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008664:	e00b      	b.n	800867e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d102      	bne.n	8008672 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800866c:	f06f 030e 	mvn.w	r3, #14
 8008670:	e005      	b.n	800867e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800867c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	0801a46c 	.word	0x0801a46c
 800868c:	0801a644 	.word	0x0801a644
 8008690:	0801a4c4 	.word	0x0801a4c4
 8008694:	0801a664 	.word	0x0801a664

08008698 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <netconn_recv_data+0x2c>
 80086b0:	4b58      	ldr	r3, [pc, #352]	@ (8008814 <netconn_recv_data+0x17c>)
 80086b2:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80086b6:	4958      	ldr	r1, [pc, #352]	@ (8008818 <netconn_recv_data+0x180>)
 80086b8:	4858      	ldr	r0, [pc, #352]	@ (800881c <netconn_recv_data+0x184>)
 80086ba:	f010 fc0b 	bl	8018ed4 <iprintf>
 80086be:	f06f 030f 	mvn.w	r3, #15
 80086c2:	e0a2      	b.n	800880a <netconn_recv_data+0x172>
  *new_buf = NULL;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d109      	bne.n	80086e4 <netconn_recv_data+0x4c>
 80086d0:	4b50      	ldr	r3, [pc, #320]	@ (8008814 <netconn_recv_data+0x17c>)
 80086d2:	f240 224a 	movw	r2, #586	@ 0x24a
 80086d6:	4952      	ldr	r1, [pc, #328]	@ (8008820 <netconn_recv_data+0x188>)
 80086d8:	4850      	ldr	r0, [pc, #320]	@ (800881c <netconn_recv_data+0x184>)
 80086da:	f010 fbfb 	bl	8018ed4 <iprintf>
 80086de:	f06f 030f 	mvn.w	r3, #15
 80086e2:	e092      	b.n	800880a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3310      	adds	r3, #16
 80086e8:	4618      	mov	r0, r3
 80086ea:	f010 f98c 	bl	8018a06 <sys_mbox_valid>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10e      	bne.n	8008712 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fad4 	bl	8008ca2 <netconn_err>
 80086fa:	4603      	mov	r3, r0
 80086fc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80086fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008706:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800870a:	e07e      	b.n	800880a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800870c:	f06f 030a 	mvn.w	r3, #10
 8008710:	e07b      	b.n	800880a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	7f1b      	ldrb	r3, [r3, #28]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <netconn_recv_data+0xa6>
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7f1b      	ldrb	r3, [r3, #28]
 800872c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008730:	2b00      	cmp	r3, #0
 8008732:	d104      	bne.n	800873e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d023      	beq.n	8008786 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3310      	adds	r3, #16
 8008742:	f107 0218 	add.w	r2, r7, #24
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f010 f940 	bl	80189ce <sys_arch_mbox_tryfetch>
 800874e:	4603      	mov	r3, r0
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008754:	d11f      	bne.n	8008796 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 faa3 	bl	8008ca2 <netconn_err>
 800875c:	4603      	mov	r3, r0
 800875e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008760:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008768:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800876c:	e04d      	b.n	800880a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	7f1b      	ldrb	r3, [r3, #28]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800877a:	f06f 030a 	mvn.w	r3, #10
 800877e:	e044      	b.n	800880a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008780:	f06f 0306 	mvn.w	r3, #6
 8008784:	e041      	b.n	800880a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3310      	adds	r3, #16
 800878a:	f107 0118 	add.w	r1, r7, #24
 800878e:	2200      	movs	r2, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f010 f8dd 	bl	8018950 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800879e:	2b10      	cmp	r3, #16
 80087a0:	d117      	bne.n	80087d2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f107 0217 	add.w	r2, r7, #23
 80087a8:	4611      	mov	r1, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 faca 	bl	8008d44 <lwip_netconn_is_err_msg>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80087b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ba:	f113 0f0f 	cmn.w	r3, #15
 80087be:	d101      	bne.n	80087c4 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e022      	b.n	800880a <netconn_recv_data+0x172>
      }
      return err;
 80087c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087c8:	e01f      	b.n	800880a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	891b      	ldrh	r3, [r3, #8]
 80087ce:	83fb      	strh	r3, [r7, #30]
 80087d0:	e00d      	b.n	80087ee <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <netconn_recv_data+0x14e>
 80087d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <netconn_recv_data+0x17c>)
 80087da:	f240 2291 	movw	r2, #657	@ 0x291
 80087de:	4911      	ldr	r1, [pc, #68]	@ (8008824 <netconn_recv_data+0x18c>)
 80087e0:	480e      	ldr	r0, [pc, #56]	@ (800881c <netconn_recv_data+0x184>)
 80087e2:	f010 fb77 	bl	8018ed4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	891b      	ldrh	r3, [r3, #8]
 80087ec:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <netconn_recv_data+0x16a>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	8bfa      	ldrh	r2, [r7, #30]
 80087fc:	2101      	movs	r1, #1
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	0801a46c 	.word	0x0801a46c
 8008818:	0801a684 	.word	0x0801a684
 800881c:	0801a4c4 	.word	0x0801a4c4
 8008820:	0801a6a4 	.word	0x0801a6a4
 8008824:	0801a6c0 	.word	0x0801a6c0

08008828 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <netconn_tcp_recvd_msg+0x1e>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008842:	2b10      	cmp	r3, #16
 8008844:	d009      	beq.n	800885a <netconn_tcp_recvd_msg+0x32>
 8008846:	4b0c      	ldr	r3, [pc, #48]	@ (8008878 <netconn_tcp_recvd_msg+0x50>)
 8008848:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800884c:	490b      	ldr	r1, [pc, #44]	@ (800887c <netconn_tcp_recvd_msg+0x54>)
 800884e:	480c      	ldr	r0, [pc, #48]	@ (8008880 <netconn_tcp_recvd_msg+0x58>)
 8008850:	f010 fb40 	bl	8018ed4 <iprintf>
 8008854:	f06f 030f 	mvn.w	r3, #15
 8008858:	e00a      	b.n	8008870 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4806      	ldr	r0, [pc, #24]	@ (8008884 <netconn_tcp_recvd_msg+0x5c>)
 800886a:	f7ff fd15 	bl	8008298 <netconn_apimsg>
 800886e:	4603      	mov	r3, r0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	0801a46c 	.word	0x0801a46c
 800887c:	0801a6cc 	.word	0x0801a6cc
 8008880:	0801a4c4 	.word	0x0801a4c4
 8008884:	0800a0ed 	.word	0x0800a0ed

08008888 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b090      	sub	sp, #64	@ 0x40
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3310      	adds	r3, #16
 800889a:	4618      	mov	r0, r3
 800889c:	f010 f8b3 	bl	8018a06 <sys_mbox_valid>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d102      	bne.n	80088ac <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80088a6:	f06f 030a 	mvn.w	r3, #10
 80088aa:	e06d      	b.n	8008988 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	7f1b      	ldrb	r3, [r3, #28]
 80088b0:	b25b      	sxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	da07      	bge.n	80088c6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	7f1b      	ldrb	r3, [r3, #28]
 80088ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80088c4:	e039      	b.n	800893a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	461a      	mov	r2, r3
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f7ff fee3 	bl	8008698 <netconn_recv_data>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80088d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80088e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80088e4:	e050      	b.n	8008988 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10e      	bne.n	8008914 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80088f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <netconn_recv_data_tcp+0x7a>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	891b      	ldrh	r3, [r3, #8]
 8008900:	e000      	b.n	8008904 <netconn_recv_data_tcp+0x7c>
 8008902:	2301      	movs	r3, #1
 8008904:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008906:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008908:	f107 0214 	add.w	r2, r7, #20
 800890c:	4619      	mov	r1, r3
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff ff8a 	bl	8008828 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	2b00      	cmp	r3, #0
 8008918:	d134      	bne.n	8008984 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	f003 0310 	and.w	r3, r3, #16
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	7f1b      	ldrb	r3, [r3, #28]
 8008928:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800892c:	b2da      	uxtb	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008932:	f06f 0306 	mvn.w	r3, #6
 8008936:	e027      	b.n	8008988 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008938:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <netconn_recv_data_tcp+0xc6>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008946:	2200      	movs	r2, #0
 8008948:	2101      	movs	r1, #1
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f9a3 	bl	8008ca2 <netconn_err>
 800895c:	4603      	mov	r3, r0
 800895e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8008962:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <netconn_recv_data_tcp+0xe8>
          return err;
 800896a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800896e:	e00b      	b.n	8008988 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008970:	f06f 030d 	mvn.w	r3, #13
 8008974:	e008      	b.n	8008988 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008976:	2101      	movs	r1, #1
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f955 	bl	8008c28 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800897e:	f06f 030e 	mvn.w	r3, #14
 8008982:	e001      	b.n	8008988 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008984:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008988:	4618      	mov	r0, r3
 800898a:	3740      	adds	r7, #64	@ 0x40
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <netconn_recv+0x28>
 80089a4:	4b32      	ldr	r3, [pc, #200]	@ (8008a70 <netconn_recv+0xe0>)
 80089a6:	f240 3263 	movw	r2, #867	@ 0x363
 80089aa:	4932      	ldr	r1, [pc, #200]	@ (8008a74 <netconn_recv+0xe4>)
 80089ac:	4832      	ldr	r0, [pc, #200]	@ (8008a78 <netconn_recv+0xe8>)
 80089ae:	f010 fa91 	bl	8018ed4 <iprintf>
 80089b2:	f06f 030f 	mvn.w	r3, #15
 80089b6:	e056      	b.n	8008a66 <netconn_recv+0xd6>
  *new_buf = NULL;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <netconn_recv+0x48>
 80089c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008a70 <netconn_recv+0xe0>)
 80089c6:	f240 3265 	movw	r2, #869	@ 0x365
 80089ca:	492c      	ldr	r1, [pc, #176]	@ (8008a7c <netconn_recv+0xec>)
 80089cc:	482a      	ldr	r0, [pc, #168]	@ (8008a78 <netconn_recv+0xe8>)
 80089ce:	f010 fa81 	bl	8018ed4 <iprintf>
 80089d2:	f06f 030f 	mvn.w	r3, #15
 80089d6:	e046      	b.n	8008a66 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d13a      	bne.n	8008a5a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089e8:	2006      	movs	r0, #6
 80089ea:	f003 fc13 	bl	800c214 <memp_malloc>
 80089ee:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d102      	bne.n	80089fc <netconn_recv+0x6c>
      return ERR_MEM;
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	e034      	b.n	8008a66 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80089fc:	f107 030c 	add.w	r3, r7, #12
 8008a00:	2200      	movs	r2, #0
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff ff3f 	bl	8008888 <netconn_recv_data_tcp>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008a0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d006      	beq.n	8008a24 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008a16:	6979      	ldr	r1, [r7, #20]
 8008a18:	2006      	movs	r0, #6
 8008a1a:	f003 fc71 	bl	800c300 <memp_free>
      return err;
 8008a1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a22:	e020      	b.n	8008a66 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <netconn_recv+0xa8>
 8008a2a:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <netconn_recv+0xe0>)
 8008a2c:	f240 3279 	movw	r2, #889	@ 0x379
 8008a30:	4913      	ldr	r1, [pc, #76]	@ (8008a80 <netconn_recv+0xf0>)
 8008a32:	4811      	ldr	r0, [pc, #68]	@ (8008a78 <netconn_recv+0xe8>)
 8008a34:	f010 fa4e 	bl	8018ed4 <iprintf>

    buf->p = p;
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2200      	movs	r2, #0
 8008a48:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e005      	b.n	8008a66 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff fe1a 	bl	8008698 <netconn_recv_data>
 8008a64:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	0801a46c 	.word	0x0801a46c
 8008a74:	0801a684 	.word	0x0801a684
 8008a78:	0801a4c4 	.word	0x0801a4c4
 8008a7c:	0801a6a4 	.word	0x0801a6a4
 8008a80:	0801a71c 	.word	0x0801a71c

08008a84 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	f107 0110 	add.w	r1, r7, #16
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f805 	bl	8008ab8 <netconn_write_vectors_partly>
 8008aae:	4603      	mov	r3, r0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b092      	sub	sp, #72	@ 0x48
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	80fb      	strh	r3, [r7, #6]
 8008aca:	4613      	mov	r3, r2
 8008acc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d109      	bne.n	8008ae8 <netconn_write_vectors_partly+0x30>
 8008ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8008c10 <netconn_write_vectors_partly+0x158>)
 8008ad6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008ada:	494e      	ldr	r1, [pc, #312]	@ (8008c14 <netconn_write_vectors_partly+0x15c>)
 8008adc:	484e      	ldr	r0, [pc, #312]	@ (8008c18 <netconn_write_vectors_partly+0x160>)
 8008ade:	f010 f9f9 	bl	8018ed4 <iprintf>
 8008ae2:	f06f 030f 	mvn.w	r3, #15
 8008ae6:	e08e      	b.n	8008c06 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008af0:	2b10      	cmp	r3, #16
 8008af2:	d009      	beq.n	8008b08 <netconn_write_vectors_partly+0x50>
 8008af4:	4b46      	ldr	r3, [pc, #280]	@ (8008c10 <netconn_write_vectors_partly+0x158>)
 8008af6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8008afa:	4948      	ldr	r1, [pc, #288]	@ (8008c1c <netconn_write_vectors_partly+0x164>)
 8008afc:	4846      	ldr	r0, [pc, #280]	@ (8008c18 <netconn_write_vectors_partly+0x160>)
 8008afe:	f010 f9e9 	bl	8018ed4 <iprintf>
 8008b02:	f06f 0305 	mvn.w	r3, #5
 8008b06:	e07e      	b.n	8008c06 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	7f1b      	ldrb	r3, [r3, #28]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <netconn_write_vectors_partly+0x66>
 8008b14:	797b      	ldrb	r3, [r7, #5]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <netconn_write_vectors_partly+0x6a>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <netconn_write_vectors_partly+0x6c>
 8008b22:	2300      	movs	r3, #0
 8008b24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008b28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <netconn_write_vectors_partly+0x84>
 8008b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008b36:	f06f 0305 	mvn.w	r3, #5
 8008b3a:	e064      	b.n	8008c06 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008b40:	2300      	movs	r3, #0
 8008b42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b44:	e015      	b.n	8008b72 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b52:	4413      	add	r3, r2
 8008b54:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8008b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d202      	bcs.n	8008b6c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008b66:	f06f 0305 	mvn.w	r3, #5
 8008b6a:	e04c      	b.n	8008c06 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b6e:	3301      	adds	r3, #1
 8008b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b76:	429a      	cmp	r2, r3
 8008b78:	dbe5      	blt.n	8008b46 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	e040      	b.n	8008c06 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da0a      	bge.n	8008ba0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008b90:	f06f 0305 	mvn.w	r3, #5
 8008b94:	e037      	b.n	8008c06 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008b96:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008bb0:	797b      	ldrb	r3, [r7, #5]
 8008bb2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008bbe:	f107 0314 	add.w	r3, r7, #20
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4816      	ldr	r0, [pc, #88]	@ (8008c20 <netconn_write_vectors_partly+0x168>)
 8008bc6:	f7ff fb67 	bl	8008298 <netconn_apimsg>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008bd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d114      	bne.n	8008c02 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008be2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008be4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d006      	beq.n	8008c02 <netconn_write_vectors_partly+0x14a>
 8008bf4:	4b06      	ldr	r3, [pc, #24]	@ (8008c10 <netconn_write_vectors_partly+0x158>)
 8008bf6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008bfa:	490a      	ldr	r1, [pc, #40]	@ (8008c24 <netconn_write_vectors_partly+0x16c>)
 8008bfc:	4806      	ldr	r0, [pc, #24]	@ (8008c18 <netconn_write_vectors_partly+0x160>)
 8008bfe:	f010 f969 	bl	8018ed4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008c02:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3748      	adds	r7, #72	@ 0x48
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	0801a46c 	.word	0x0801a46c
 8008c14:	0801a744 	.word	0x0801a744
 8008c18:	0801a4c4 	.word	0x0801a4c4
 8008c1c:	0801a760 	.word	0x0801a760
 8008c20:	0800a4f1 	.word	0x0800a4f1
 8008c24:	0801a784 	.word	0x0801a784

08008c28 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08c      	sub	sp, #48	@ 0x30
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <netconn_close_shutdown+0x26>
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <netconn_close_shutdown+0x50>)
 8008c3c:	f240 4247 	movw	r2, #1095	@ 0x447
 8008c40:	490e      	ldr	r1, [pc, #56]	@ (8008c7c <netconn_close_shutdown+0x54>)
 8008c42:	480f      	ldr	r0, [pc, #60]	@ (8008c80 <netconn_close_shutdown+0x58>)
 8008c44:	f010 f946 	bl	8018ed4 <iprintf>
 8008c48:	f06f 030f 	mvn.w	r3, #15
 8008c4c:	e010      	b.n	8008c70 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008c56:	2329      	movs	r3, #41	@ 0x29
 8008c58:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008c5a:	f107 030c 	add.w	r3, r7, #12
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4808      	ldr	r0, [pc, #32]	@ (8008c84 <netconn_close_shutdown+0x5c>)
 8008c62:	f7ff fb19 	bl	8008298 <netconn_apimsg>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008c6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3730      	adds	r7, #48	@ 0x30
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	0801a46c 	.word	0x0801a46c
 8008c7c:	0801a7a8 	.word	0x0801a7a8
 8008c80:	0801a4c4 	.word	0x0801a4c4
 8008c84:	0800a609 	.word	0x0800a609

08008c88 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008c90:	2103      	movs	r1, #3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff ffc8 	bl	8008c28 <netconn_close_shutdown>
 8008c98:	4603      	mov	r3, r0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <netconn_err+0x12>
    return ERR_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e00d      	b.n	8008cd0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008cb4:	f00f ffc2 	bl	8018c3c <sys_arch_protect>
 8008cb8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7a1b      	ldrb	r3, [r3, #8]
 8008cbe:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f00f ffc6 	bl	8018c58 <sys_arch_unprotect>
  return err;
 8008ccc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce6:	f113 0f0d 	cmn.w	r3, #13
 8008cea:	d009      	beq.n	8008d00 <lwip_netconn_err_to_msg+0x28>
 8008cec:	f113 0f0d 	cmn.w	r3, #13
 8008cf0:	dc0c      	bgt.n	8008d0c <lwip_netconn_err_to_msg+0x34>
 8008cf2:	f113 0f0f 	cmn.w	r3, #15
 8008cf6:	d007      	beq.n	8008d08 <lwip_netconn_err_to_msg+0x30>
 8008cf8:	f113 0f0e 	cmn.w	r3, #14
 8008cfc:	d002      	beq.n	8008d04 <lwip_netconn_err_to_msg+0x2c>
 8008cfe:	e005      	b.n	8008d0c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008d00:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <lwip_netconn_err_to_msg+0x54>)
 8008d02:	e00e      	b.n	8008d22 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008d04:	4b0a      	ldr	r3, [pc, #40]	@ (8008d30 <lwip_netconn_err_to_msg+0x58>)
 8008d06:	e00c      	b.n	8008d22 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008d08:	4b0a      	ldr	r3, [pc, #40]	@ (8008d34 <lwip_netconn_err_to_msg+0x5c>)
 8008d0a:	e00a      	b.n	8008d22 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <lwip_netconn_err_to_msg+0x48>
 8008d14:	4b08      	ldr	r3, [pc, #32]	@ (8008d38 <lwip_netconn_err_to_msg+0x60>)
 8008d16:	227d      	movs	r2, #125	@ 0x7d
 8008d18:	4908      	ldr	r1, [pc, #32]	@ (8008d3c <lwip_netconn_err_to_msg+0x64>)
 8008d1a:	4809      	ldr	r0, [pc, #36]	@ (8008d40 <lwip_netconn_err_to_msg+0x68>)
 8008d1c:	f010 f8da 	bl	8018ed4 <iprintf>
      return NULL;
 8008d20:	2300      	movs	r3, #0
  }
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	0801df20 	.word	0x0801df20
 8008d30:	0801df21 	.word	0x0801df21
 8008d34:	0801df22 	.word	0x0801df22
 8008d38:	0801a7c4 	.word	0x0801a7c4
 8008d3c:	0801a7f8 	.word	0x0801a7f8
 8008d40:	0801a808 	.word	0x0801a808

08008d44 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <lwip_netconn_is_err_msg+0x1c>
 8008d54:	4b12      	ldr	r3, [pc, #72]	@ (8008da0 <lwip_netconn_is_err_msg+0x5c>)
 8008d56:	2285      	movs	r2, #133	@ 0x85
 8008d58:	4912      	ldr	r1, [pc, #72]	@ (8008da4 <lwip_netconn_is_err_msg+0x60>)
 8008d5a:	4813      	ldr	r0, [pc, #76]	@ (8008da8 <lwip_netconn_is_err_msg+0x64>)
 8008d5c:	f010 f8ba 	bl	8018ed4 <iprintf>

  if (msg == &netconn_aborted) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a12      	ldr	r2, [pc, #72]	@ (8008dac <lwip_netconn_is_err_msg+0x68>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d104      	bne.n	8008d72 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	22f3      	movs	r2, #243	@ 0xf3
 8008d6c:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e012      	b.n	8008d98 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a0e      	ldr	r2, [pc, #56]	@ (8008db0 <lwip_netconn_is_err_msg+0x6c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d104      	bne.n	8008d84 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	22f2      	movs	r2, #242	@ 0xf2
 8008d7e:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e009      	b.n	8008d98 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a0b      	ldr	r2, [pc, #44]	@ (8008db4 <lwip_netconn_is_err_msg+0x70>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d104      	bne.n	8008d96 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	22f1      	movs	r2, #241	@ 0xf1
 8008d90:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e000      	b.n	8008d98 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	0801a7c4 	.word	0x0801a7c4
 8008da4:	0801a830 	.word	0x0801a830
 8008da8:	0801a808 	.word	0x0801a808
 8008dac:	0801df20 	.word	0x0801df20
 8008db0:	0801df21 	.word	0x0801df21
 8008db4:	0801df22 	.word	0x0801df22

08008db8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <recv_udp+0x20>
 8008dcc:	4b34      	ldr	r3, [pc, #208]	@ (8008ea0 <recv_udp+0xe8>)
 8008dce:	22e5      	movs	r2, #229	@ 0xe5
 8008dd0:	4934      	ldr	r1, [pc, #208]	@ (8008ea4 <recv_udp+0xec>)
 8008dd2:	4835      	ldr	r0, [pc, #212]	@ (8008ea8 <recv_udp+0xf0>)
 8008dd4:	f010 f87e 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d105      	bne.n	8008dea <recv_udp+0x32>
 8008dde:	4b30      	ldr	r3, [pc, #192]	@ (8008ea0 <recv_udp+0xe8>)
 8008de0:	22e6      	movs	r2, #230	@ 0xe6
 8008de2:	4932      	ldr	r1, [pc, #200]	@ (8008eac <recv_udp+0xf4>)
 8008de4:	4830      	ldr	r0, [pc, #192]	@ (8008ea8 <recv_udp+0xf0>)
 8008de6:	f010 f875 	bl	8018ed4 <iprintf>
  conn = (struct netconn *)arg;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d103      	bne.n	8008dfc <recv_udp+0x44>
    pbuf_free(p);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f004 f933 	bl	800d060 <pbuf_free>
    return;
 8008dfa:	e04d      	b.n	8008e98 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d005      	beq.n	8008e12 <recv_udp+0x5a>
 8008e06:	4b26      	ldr	r3, [pc, #152]	@ (8008ea0 <recv_udp+0xe8>)
 8008e08:	22ee      	movs	r2, #238	@ 0xee
 8008e0a:	4929      	ldr	r1, [pc, #164]	@ (8008eb0 <recv_udp+0xf8>)
 8008e0c:	4826      	ldr	r0, [pc, #152]	@ (8008ea8 <recv_udp+0xf0>)
 8008e0e:	f010 f861 	bl	8018ed4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	3310      	adds	r3, #16
 8008e16:	4618      	mov	r0, r3
 8008e18:	f00f fdf5 	bl	8018a06 <sys_mbox_valid>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f004 f91c 	bl	800d060 <pbuf_free>
    return;
 8008e28:	e036      	b.n	8008e98 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008e2a:	2006      	movs	r0, #6
 8008e2c:	f003 f9f2 	bl	800c214 <memp_malloc>
 8008e30:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d103      	bne.n	8008e40 <recv_udp+0x88>
    pbuf_free(p);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f004 f911 	bl	800d060 <pbuf_free>
    return;
 8008e3e:	e02b      	b.n	8008e98 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <recv_udp+0xa0>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	e000      	b.n	8008e5a <recv_udp+0xa2>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008e62:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	891b      	ldrh	r3, [r3, #8]
 8008e68:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3310      	adds	r3, #16
 8008e6e:	69b9      	ldr	r1, [r7, #24]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f00f fd53 	bl	801891c <sys_mbox_trypost>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008e7c:	69b8      	ldr	r0, [r7, #24]
 8008e7e:	f001 fc4f 	bl	800a720 <netbuf_delete>
    return;
 8008e82:	e009      	b.n	8008e98 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <recv_udp+0xe0>
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	8afa      	ldrh	r2, [r7, #22]
 8008e92:	2100      	movs	r1, #0
 8008e94:	69f8      	ldr	r0, [r7, #28]
 8008e96:	4798      	blx	r3
  }
}
 8008e98:	3720      	adds	r7, #32
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	0801a7c4 	.word	0x0801a7c4
 8008ea4:	0801a83c 	.word	0x0801a83c
 8008ea8:	0801a808 	.word	0x0801a808
 8008eac:	0801a860 	.word	0x0801a860
 8008eb0:	0801a880 	.word	0x0801a880

08008eb4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <recv_tcp+0x22>
 8008ec8:	4b36      	ldr	r3, [pc, #216]	@ (8008fa4 <recv_tcp+0xf0>)
 8008eca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008ece:	4936      	ldr	r1, [pc, #216]	@ (8008fa8 <recv_tcp+0xf4>)
 8008ed0:	4836      	ldr	r0, [pc, #216]	@ (8008fac <recv_tcp+0xf8>)
 8008ed2:	f00f ffff 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <recv_tcp+0x36>
 8008edc:	4b31      	ldr	r3, [pc, #196]	@ (8008fa4 <recv_tcp+0xf0>)
 8008ede:	f240 122d 	movw	r2, #301	@ 0x12d
 8008ee2:	4933      	ldr	r1, [pc, #204]	@ (8008fb0 <recv_tcp+0xfc>)
 8008ee4:	4831      	ldr	r0, [pc, #196]	@ (8008fac <recv_tcp+0xf8>)
 8008ee6:	f00f fff5 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d006      	beq.n	8008f00 <recv_tcp+0x4c>
 8008ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8008fa4 <recv_tcp+0xf0>)
 8008ef4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8008ef8:	492e      	ldr	r1, [pc, #184]	@ (8008fb4 <recv_tcp+0x100>)
 8008efa:	482c      	ldr	r0, [pc, #176]	@ (8008fac <recv_tcp+0xf8>)
 8008efc:	f00f ffea 	bl	8018ed4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <recv_tcp+0x5c>
    return ERR_VAL;
 8008f0a:	f06f 0305 	mvn.w	r3, #5
 8008f0e:	e045      	b.n	8008f9c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d006      	beq.n	8008f28 <recv_tcp+0x74>
 8008f1a:	4b22      	ldr	r3, [pc, #136]	@ (8008fa4 <recv_tcp+0xf0>)
 8008f1c:	f240 1235 	movw	r2, #309	@ 0x135
 8008f20:	4925      	ldr	r1, [pc, #148]	@ (8008fb8 <recv_tcp+0x104>)
 8008f22:	4822      	ldr	r0, [pc, #136]	@ (8008fac <recv_tcp+0xf8>)
 8008f24:	f00f ffd6 	bl	8018ed4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	3310      	adds	r3, #16
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f00f fd6a 	bl	8018a06 <sys_mbox_valid>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10d      	bne.n	8008f54 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	891b      	ldrh	r3, [r3, #8]
 8008f42:	4619      	mov	r1, r3
 8008f44:	68b8      	ldr	r0, [r7, #8]
 8008f46:	f005 f865 	bl	800e014 <tcp_recved>
      pbuf_free(p);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f004 f888 	bl	800d060 <pbuf_free>
    }
    return ERR_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	e023      	b.n	8008f9c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <recv_tcp+0xb2>
    msg = p;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	891b      	ldrh	r3, [r3, #8]
 8008f62:	83fb      	strh	r3, [r7, #30]
 8008f64:	e003      	b.n	8008f6e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008f66:	4b15      	ldr	r3, [pc, #84]	@ (8008fbc <recv_tcp+0x108>)
 8008f68:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	3310      	adds	r3, #16
 8008f72:	69b9      	ldr	r1, [r7, #24]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f00f fcd1 	bl	801891c <sys_mbox_trypost>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008f80:	f04f 33ff 	mov.w	r3, #4294967295
 8008f84:	e00a      	b.n	8008f9c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <recv_tcp+0xe6>
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f92:	8bfa      	ldrh	r2, [r7, #30]
 8008f94:	2100      	movs	r1, #0
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	4798      	blx	r3
  }

  return ERR_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	0801a7c4 	.word	0x0801a7c4
 8008fa8:	0801a8a0 	.word	0x0801a8a0
 8008fac:	0801a808 	.word	0x0801a808
 8008fb0:	0801a8c4 	.word	0x0801a8c4
 8008fb4:	0801a8e4 	.word	0x0801a8e4
 8008fb8:	0801a8fc 	.word	0x0801a8fc
 8008fbc:	0801df22 	.word	0x0801df22

08008fc0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <poll_tcp+0x22>
 8008fd4:	4b29      	ldr	r3, [pc, #164]	@ (800907c <poll_tcp+0xbc>)
 8008fd6:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8008fda:	4929      	ldr	r1, [pc, #164]	@ (8009080 <poll_tcp+0xc0>)
 8008fdc:	4829      	ldr	r0, [pc, #164]	@ (8009084 <poll_tcp+0xc4>)
 8008fde:	f00f ff79 	bl	8018ed4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d104      	bne.n	8008ff4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008fea:	2101      	movs	r1, #1
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f001 f8b3 	bl	800a158 <lwip_netconn_do_writemore>
 8008ff2:	e016      	b.n	8009022 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	785b      	ldrb	r3, [r3, #1]
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d112      	bne.n	8009022 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <poll_tcp+0x5a>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	7a5b      	ldrb	r3, [r3, #9]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	7a5a      	ldrb	r2, [r3, #9]
 8009014:	3a01      	subs	r2, #1
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800901a:	2101      	movs	r1, #1
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fbf7 	bl	8009810 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	7f1b      	ldrb	r3, [r3, #28]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b00      	cmp	r3, #0
 800902c:	d021      	beq.n	8009072 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01d      	beq.n	8009072 <poll_tcp+0xb2>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800903e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009042:	d316      	bcc.n	8009072 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800904c:	2b04      	cmp	r3, #4
 800904e:	d810      	bhi.n	8009072 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	7f1b      	ldrb	r3, [r3, #28]
 8009054:	f023 0310 	bic.w	r3, r3, #16
 8009058:	b2da      	uxtb	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <poll_tcp+0xb2>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	2200      	movs	r2, #0
 800906c:	2102      	movs	r1, #2
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	0801a7c4 	.word	0x0801a7c4
 8009080:	0801a91c 	.word	0x0801a91c
 8009084:	0801a808 	.word	0x0801a808

08009088 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <sent_tcp+0x26>
 80090a0:	4b20      	ldr	r3, [pc, #128]	@ (8009124 <sent_tcp+0x9c>)
 80090a2:	f240 1293 	movw	r2, #403	@ 0x193
 80090a6:	4920      	ldr	r1, [pc, #128]	@ (8009128 <sent_tcp+0xa0>)
 80090a8:	4820      	ldr	r0, [pc, #128]	@ (800912c <sent_tcp+0xa4>)
 80090aa:	f00f ff13 	bl	8018ed4 <iprintf>

  if (conn) {
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d032      	beq.n	800911a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d104      	bne.n	80090c6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80090bc:	2101      	movs	r1, #1
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f001 f84a 	bl	800a158 <lwip_netconn_do_writemore>
 80090c4:	e007      	b.n	80090d6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d103      	bne.n	80090d6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80090ce:	2101      	movs	r1, #1
 80090d0:	6978      	ldr	r0, [r7, #20]
 80090d2:	f000 fb9d 	bl	8009810 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01d      	beq.n	800911a <sent_tcp+0x92>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80090e6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80090ea:	d316      	bcc.n	800911a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d810      	bhi.n	800911a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	7f1b      	ldrb	r3, [r3, #28]
 80090fc:	f023 0310 	bic.w	r3, r3, #16
 8009100:	b2da      	uxtb	r2, r3
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <sent_tcp+0x92>
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	2102      	movs	r1, #2
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	0801a7c4 	.word	0x0801a7c4
 8009128:	0801a91c 	.word	0x0801a91c
 800912c:	0801a808 	.word	0x0801a808

08009130 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <err_tcp+0x24>
 8009146:	4b5f      	ldr	r3, [pc, #380]	@ (80092c4 <err_tcp+0x194>)
 8009148:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800914c:	495e      	ldr	r1, [pc, #376]	@ (80092c8 <err_tcp+0x198>)
 800914e:	485f      	ldr	r0, [pc, #380]	@ (80092cc <err_tcp+0x19c>)
 8009150:	f00f fec0 	bl	8018ed4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009154:	f00f fd72 	bl	8018c3c <sys_arch_protect>
 8009158:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	2200      	movs	r2, #0
 800915e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	7f1b      	ldrb	r3, [r3, #28]
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	b2da      	uxtb	r2, r3
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2200      	movs	r2, #0
 800917e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009180:	69b8      	ldr	r0, [r7, #24]
 8009182:	f00f fd69 	bl	8018c58 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <err_tcp+0x6a>
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009192:	2200      	movs	r2, #0
 8009194:	2104      	movs	r1, #4
 8009196:	69f8      	ldr	r0, [r7, #28]
 8009198:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <err_tcp+0x7e>
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a6:	2200      	movs	r2, #0
 80091a8:	2100      	movs	r1, #0
 80091aa:	69f8      	ldr	r0, [r7, #28]
 80091ac:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d005      	beq.n	80091c2 <err_tcp+0x92>
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ba:	2200      	movs	r2, #0
 80091bc:	2102      	movs	r1, #2
 80091be:	69f8      	ldr	r0, [r7, #28]
 80091c0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80091c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff fd86 	bl	8008cd8 <lwip_netconn_err_to_msg>
 80091cc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	3310      	adds	r3, #16
 80091d2:	4618      	mov	r0, r3
 80091d4:	f00f fc17 	bl	8018a06 <sys_mbox_valid>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	3310      	adds	r3, #16
 80091e2:	6939      	ldr	r1, [r7, #16]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f00f fb99 	bl	801891c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3314      	adds	r3, #20
 80091ee:	4618      	mov	r0, r3
 80091f0:	f00f fc09 	bl	8018a06 <sys_mbox_valid>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	3314      	adds	r3, #20
 80091fe:	6939      	ldr	r1, [r7, #16]
 8009200:	4618      	mov	r0, r3
 8009202:	f00f fb8b 	bl	801891c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d005      	beq.n	8009218 <err_tcp+0xe8>
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	2b04      	cmp	r3, #4
 8009210:	d002      	beq.n	8009218 <err_tcp+0xe8>
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d143      	bne.n	80092a0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	7f1b      	ldrb	r3, [r3, #28]
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	bf14      	ite	ne
 8009224:	2301      	movne	r3, #1
 8009226:	2300      	moveq	r3, #0
 8009228:	b2db      	uxtb	r3, r3
 800922a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	7f1b      	ldrb	r3, [r3, #28]
 8009230:	f023 0304 	bic.w	r3, r3, #4
 8009234:	b2da      	uxtb	r2, r3
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d13b      	bne.n	80092b8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <err_tcp+0x126>
 8009248:	4b1e      	ldr	r3, [pc, #120]	@ (80092c4 <err_tcp+0x194>)
 800924a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800924e:	4920      	ldr	r1, [pc, #128]	@ (80092d0 <err_tcp+0x1a0>)
 8009250:	481e      	ldr	r0, [pc, #120]	@ (80092cc <err_tcp+0x19c>)
 8009252:	f00f fe3f 	bl	8018ed4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	2b04      	cmp	r3, #4
 800925a:	d104      	bne.n	8009266 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	2200      	movs	r2, #0
 8009262:	711a      	strb	r2, [r3, #4]
 8009264:	e003      	b.n	800926e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330c      	adds	r3, #12
 8009276:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009278:	68b8      	ldr	r0, [r7, #8]
 800927a:	f00f fc55 	bl	8018b28 <sys_sem_valid>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <err_tcp+0x162>
 8009284:	4b0f      	ldr	r3, [pc, #60]	@ (80092c4 <err_tcp+0x194>)
 8009286:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800928a:	4912      	ldr	r1, [pc, #72]	@ (80092d4 <err_tcp+0x1a4>)
 800928c:	480f      	ldr	r0, [pc, #60]	@ (80092cc <err_tcp+0x19c>)
 800928e:	f00f fe21 	bl	8018ed4 <iprintf>
      conn->current_msg = NULL;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	2200      	movs	r2, #0
 8009296:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009298:	68b8      	ldr	r0, [r7, #8]
 800929a:	f00f fc2b 	bl	8018af4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800929e:	e00b      	b.n	80092b8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <err_tcp+0x18a>
 80092a8:	4b06      	ldr	r3, [pc, #24]	@ (80092c4 <err_tcp+0x194>)
 80092aa:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80092ae:	490a      	ldr	r1, [pc, #40]	@ (80092d8 <err_tcp+0x1a8>)
 80092b0:	4806      	ldr	r0, [pc, #24]	@ (80092cc <err_tcp+0x19c>)
 80092b2:	f00f fe0f 	bl	8018ed4 <iprintf>
  }
}
 80092b6:	e000      	b.n	80092ba <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80092b8:	bf00      	nop
}
 80092ba:	bf00      	nop
 80092bc:	3720      	adds	r7, #32
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	0801a7c4 	.word	0x0801a7c4
 80092c8:	0801a91c 	.word	0x0801a91c
 80092cc:	0801a808 	.word	0x0801a808
 80092d0:	0801a92c 	.word	0x0801a92c
 80092d4:	0801a948 	.word	0x0801a948
 80092d8:	0801a964 	.word	0x0801a964

080092dc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f005 fe8f 	bl	800f010 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80092f2:	490a      	ldr	r1, [pc, #40]	@ (800931c <setup_tcp+0x40>)
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f005 fe9d 	bl	800f034 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80092fa:	4909      	ldr	r1, [pc, #36]	@ (8009320 <setup_tcp+0x44>)
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f005 febb 	bl	800f078 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009302:	2202      	movs	r2, #2
 8009304:	4907      	ldr	r1, [pc, #28]	@ (8009324 <setup_tcp+0x48>)
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f005 ff12 	bl	800f130 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800930c:	4906      	ldr	r1, [pc, #24]	@ (8009328 <setup_tcp+0x4c>)
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f005 fed4 	bl	800f0bc <tcp_err>
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	08008eb5 	.word	0x08008eb5
 8009320:	08009089 	.word	0x08009089
 8009324:	08008fc1 	.word	0x08008fc1
 8009328:	08009131 	.word	0x08009131

0800932c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b089      	sub	sp, #36	@ 0x24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	4613      	mov	r3, r2
 8009338:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d102      	bne.n	800934a <accept_function+0x1e>
    return ERR_VAL;
 8009344:	f06f 0305 	mvn.w	r3, #5
 8009348:	e0a1      	b.n	800948e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	3314      	adds	r3, #20
 800934e:	4618      	mov	r0, r3
 8009350:	f00f fb59 	bl	8018a06 <sys_mbox_valid>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800935a:	f06f 0305 	mvn.w	r3, #5
 800935e:	e096      	b.n	800948e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d11b      	bne.n	800939e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f103 0414 	add.w	r4, r3, #20
 800936c:	f06f 000c 	mvn.w	r0, #12
 8009370:	f7ff fcb2 	bl	8008cd8 <lwip_netconn_err_to_msg>
 8009374:	4603      	mov	r3, r0
 8009376:	4619      	mov	r1, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f00f facf 	bl	801891c <sys_mbox_trypost>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <accept_function+0x6c>
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009390:	2200      	movs	r2, #0
 8009392:	2100      	movs	r1, #0
 8009394:	69f8      	ldr	r0, [r7, #28]
 8009396:	4798      	blx	r3
    }
    return ERR_VAL;
 8009398:	f06f 0305 	mvn.w	r3, #5
 800939c:	e077      	b.n	800948e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800939e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d006      	beq.n	80093b4 <accept_function+0x88>
 80093a6:	4b3c      	ldr	r3, [pc, #240]	@ (8009498 <accept_function+0x16c>)
 80093a8:	f240 222a 	movw	r2, #554	@ 0x22a
 80093ac:	493b      	ldr	r1, [pc, #236]	@ (800949c <accept_function+0x170>)
 80093ae:	483c      	ldr	r0, [pc, #240]	@ (80094a0 <accept_function+0x174>)
 80093b0:	f00f fd90 	bl	8018ed4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f000 f8f0 	bl	80095a4 <netconn_alloc>
 80093c4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11b      	bne.n	8009404 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f103 0414 	add.w	r4, r3, #20
 80093d2:	f06f 000c 	mvn.w	r0, #12
 80093d6:	f7ff fc7f 	bl	8008cd8 <lwip_netconn_err_to_msg>
 80093da:	4603      	mov	r3, r0
 80093dc:	4619      	mov	r1, r3
 80093de:	4620      	mov	r0, r4
 80093e0:	f00f fa9c 	bl	801891c <sys_mbox_trypost>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <accept_function+0xd2>
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f6:	2200      	movs	r2, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	69f8      	ldr	r0, [r7, #28]
 80093fc:	4798      	blx	r3
    }
    return ERR_MEM;
 80093fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009402:	e044      	b.n	800948e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800940a:	69b8      	ldr	r0, [r7, #24]
 800940c:	f7ff ff66 	bl	80092dc <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	3314      	adds	r3, #20
 8009414:	69b9      	ldr	r1, [r7, #24]
 8009416:	4618      	mov	r0, r3
 8009418:	f00f fa80 	bl	801891c <sys_mbox_trypost>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d02a      	beq.n	8009478 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009428:	2100      	movs	r1, #0
 800942a:	6978      	ldr	r0, [r7, #20]
 800942c:	f005 fdf0 	bl	800f010 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009430:	2100      	movs	r1, #0
 8009432:	6978      	ldr	r0, [r7, #20]
 8009434:	f005 fdfe 	bl	800f034 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009438:	2100      	movs	r1, #0
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f005 fe1c 	bl	800f078 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009440:	2200      	movs	r2, #0
 8009442:	2100      	movs	r1, #0
 8009444:	6978      	ldr	r0, [r7, #20]
 8009446:	f005 fe73 	bl	800f130 <tcp_poll>
    tcp_err(pcb, NULL);
 800944a:	2100      	movs	r1, #0
 800944c:	6978      	ldr	r0, [r7, #20]
 800944e:	f005 fe35 	bl	800f0bc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2200      	movs	r2, #0
 8009456:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	3310      	adds	r3, #16
 800945c:	4618      	mov	r0, r3
 800945e:	f00f fa4b 	bl	80188f8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	3310      	adds	r3, #16
 8009466:	4618      	mov	r0, r3
 8009468:	f00f fade 	bl	8018a28 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800946c:	69b8      	ldr	r0, [r7, #24]
 800946e:	f000 f907 	bl	8009680 <netconn_free>
    return ERR_MEM;
 8009472:	f04f 33ff 	mov.w	r3, #4294967295
 8009476:	e00a      	b.n	800948e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <accept_function+0x160>
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	2200      	movs	r2, #0
 8009486:	2100      	movs	r1, #0
 8009488:	69f8      	ldr	r0, [r7, #28]
 800948a:	4798      	blx	r3
  }

  return ERR_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3724      	adds	r7, #36	@ 0x24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd90      	pop	{r4, r7, pc}
 8009496:	bf00      	nop
 8009498:	0801a7c4 	.word	0x0801a7c4
 800949c:	0801a980 	.word	0x0801a980
 80094a0:	0801a808 	.word	0x0801a808

080094a4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80094a4:	b590      	push	{r4, r7, lr}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d006      	beq.n	80094c8 <pcb_new+0x24>
 80094ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009568 <pcb_new+0xc4>)
 80094bc:	f240 2265 	movw	r2, #613	@ 0x265
 80094c0:	492a      	ldr	r1, [pc, #168]	@ (800956c <pcb_new+0xc8>)
 80094c2:	482b      	ldr	r0, [pc, #172]	@ (8009570 <pcb_new+0xcc>)
 80094c4:	f00f fd06 	bl	8018ed4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d022      	beq.n	800951c <pcb_new+0x78>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d133      	bne.n	8009542 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f00b f836 	bl	8014552 <udp_new_ip_type>
 80094e6:	4603      	mov	r3, r0
 80094e8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d02a      	beq.n	800954a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b22      	cmp	r3, #34	@ 0x22
 80094fc:	d104      	bne.n	8009508 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6858      	ldr	r0, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	4917      	ldr	r1, [pc, #92]	@ (8009574 <pcb_new+0xd0>)
 8009516:	f00a ffa3 	bl	8014460 <udp_recv>
      }
      break;
 800951a:	e016      	b.n	800954a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681c      	ldr	r4, [r3, #0]
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	4618      	mov	r0, r3
 8009524:	f005 fd66 	bl	800eff4 <tcp_new_ip_type>
 8009528:	4603      	mov	r3, r0
 800952a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fece 	bl	80092dc <setup_tcp>
      }
      break;
 8009540:	e005      	b.n	800954e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	22fa      	movs	r2, #250	@ 0xfa
 8009546:	711a      	strb	r2, [r3, #4]
      return;
 8009548:	e00a      	b.n	8009560 <pcb_new+0xbc>
      break;
 800954a:	bf00      	nop
 800954c:	e000      	b.n	8009550 <pcb_new+0xac>
      break;
 800954e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	22ff      	movs	r2, #255	@ 0xff
 800955e:	711a      	strb	r2, [r3, #4]
  }
}
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	bd90      	pop	{r4, r7, pc}
 8009566:	bf00      	nop
 8009568:	0801a7c4 	.word	0x0801a7c4
 800956c:	0801a9a8 	.word	0x0801a9a8
 8009570:	0801a808 	.word	0x0801a808
 8009574:	08008db9 	.word	0x08008db9

08009578 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff ff85 	bl	80094a4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80095b4:	2007      	movs	r0, #7
 80095b6:	f002 fe2d 	bl	800c214 <memp_malloc>
 80095ba:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <netconn_alloc+0x22>
    return NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e052      	b.n	800966c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	79fa      	ldrb	r2, [r7, #7]
 80095d0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095de:	2b10      	cmp	r3, #16
 80095e0:	d004      	beq.n	80095ec <netconn_alloc+0x48>
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	d105      	bne.n	80095f2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80095e6:	2306      	movs	r3, #6
 80095e8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80095ea:	e00a      	b.n	8009602 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80095ec:	2306      	movs	r3, #6
 80095ee:	617b      	str	r3, [r7, #20]
      break;
 80095f0:	e007      	b.n	8009602 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80095f2:	4b20      	ldr	r3, [pc, #128]	@ (8009674 <netconn_alloc+0xd0>)
 80095f4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80095f8:	491f      	ldr	r1, [pc, #124]	@ (8009678 <netconn_alloc+0xd4>)
 80095fa:	4820      	ldr	r0, [pc, #128]	@ (800967c <netconn_alloc+0xd8>)
 80095fc:	f00f fc6a 	bl	8018ed4 <iprintf>
      goto free_and_return;
 8009600:	e02f      	b.n	8009662 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3310      	adds	r3, #16
 8009606:	6979      	ldr	r1, [r7, #20]
 8009608:	4618      	mov	r0, r3
 800960a:	f00f f953 	bl	80188b4 <sys_mbox_new>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d125      	bne.n	8009660 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	330c      	adds	r3, #12
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f00f fa11 	bl	8018a42 <sys_sem_new>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3310      	adds	r3, #16
 800962a:	4618      	mov	r0, r3
 800962c:	f00f f964 	bl	80188f8 <sys_mbox_free>
    goto free_and_return;
 8009630:	e017      	b.n	8009662 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3314      	adds	r3, #20
 8009636:	4618      	mov	r0, r3
 8009638:	f00f f9f6 	bl	8018a28 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f04f 32ff 	mov.w	r2, #4294967295
 8009648:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	7cfa      	ldrb	r2, [r7, #19]
 800965a:	771a      	strb	r2, [r3, #28]
  return conn;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e005      	b.n	800966c <netconn_alloc+0xc8>
    goto free_and_return;
 8009660:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	2007      	movs	r0, #7
 8009666:	f002 fe4b 	bl	800c300 <memp_free>
  return NULL;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	0801a7c4 	.word	0x0801a7c4
 8009678:	0801a9c8 	.word	0x0801a9c8
 800967c:	0801a808 	.word	0x0801a808

08009680 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <netconn_free+0x1e>
 8009690:	4b1b      	ldr	r3, [pc, #108]	@ (8009700 <netconn_free+0x80>)
 8009692:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009696:	491b      	ldr	r1, [pc, #108]	@ (8009704 <netconn_free+0x84>)
 8009698:	481b      	ldr	r0, [pc, #108]	@ (8009708 <netconn_free+0x88>)
 800969a:	f00f fc1b 	bl	8018ed4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3310      	adds	r3, #16
 80096a2:	4618      	mov	r0, r3
 80096a4:	f00f f9af 	bl	8018a06 <sys_mbox_valid>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <netconn_free+0x3c>
 80096ae:	4b14      	ldr	r3, [pc, #80]	@ (8009700 <netconn_free+0x80>)
 80096b0:	f240 3223 	movw	r2, #803	@ 0x323
 80096b4:	4915      	ldr	r1, [pc, #84]	@ (800970c <netconn_free+0x8c>)
 80096b6:	4814      	ldr	r0, [pc, #80]	@ (8009708 <netconn_free+0x88>)
 80096b8:	f00f fc0c 	bl	8018ed4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3314      	adds	r3, #20
 80096c0:	4618      	mov	r0, r3
 80096c2:	f00f f9a0 	bl	8018a06 <sys_mbox_valid>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <netconn_free+0x5a>
 80096cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009700 <netconn_free+0x80>)
 80096ce:	f240 3226 	movw	r2, #806	@ 0x326
 80096d2:	490f      	ldr	r1, [pc, #60]	@ (8009710 <netconn_free+0x90>)
 80096d4:	480c      	ldr	r0, [pc, #48]	@ (8009708 <netconn_free+0x88>)
 80096d6:	f00f fbfd 	bl	8018ed4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	330c      	adds	r3, #12
 80096de:	4618      	mov	r0, r3
 80096e0:	f00f fa15 	bl	8018b0e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	330c      	adds	r3, #12
 80096e8:	4618      	mov	r0, r3
 80096ea:	f00f fa2e 	bl	8018b4a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	2007      	movs	r0, #7
 80096f2:	f002 fe05 	bl	800c300 <memp_free>
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	0801a7c4 	.word	0x0801a7c4
 8009704:	0801a9f0 	.word	0x0801a9f0
 8009708:	0801a808 	.word	0x0801a808
 800970c:	0801aa20 	.word	0x0801aa20
 8009710:	0801aa5c 	.word	0x0801aa5c

08009714 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3310      	adds	r3, #16
 8009720:	4618      	mov	r0, r3
 8009722:	f00f f970 	bl	8018a06 <sys_mbox_valid>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d02f      	beq.n	800978c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800972c:	e018      	b.n	8009760 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009736:	2b10      	cmp	r3, #16
 8009738:	d10e      	bne.n	8009758 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f107 020f 	add.w	r2, r7, #15
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fafe 	bl	8008d44 <lwip_netconn_is_err_msg>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d108      	bne.n	8009760 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	4618      	mov	r0, r3
 8009752:	f003 fc85 	bl	800d060 <pbuf_free>
 8009756:	e003      	b.n	8009760 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 ffe0 	bl	800a720 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3310      	adds	r3, #16
 8009764:	f107 0210 	add.w	r2, r7, #16
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f00f f92f 	bl	80189ce <sys_arch_mbox_tryfetch>
 8009770:	4603      	mov	r3, r0
 8009772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009776:	d1da      	bne.n	800972e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3310      	adds	r3, #16
 800977c:	4618      	mov	r0, r3
 800977e:	f00f f8bb 	bl	80188f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3310      	adds	r3, #16
 8009786:	4618      	mov	r0, r3
 8009788:	f00f f94e 	bl	8018a28 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3314      	adds	r3, #20
 8009790:	4618      	mov	r0, r3
 8009792:	f00f f938 	bl	8018a06 <sys_mbox_valid>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d034      	beq.n	8009806 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800979c:	e01d      	b.n	80097da <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f107 020e 	add.w	r2, r7, #14
 80097a4:	4611      	mov	r1, r2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff facc 	bl	8008d44 <lwip_netconn_is_err_msg>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d113      	bne.n	80097da <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80097b6:	6978      	ldr	r0, [r7, #20]
 80097b8:	f7ff ffac 	bl	8009714 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f004 fa49 	bl	800dc60 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2200      	movs	r2, #0
 80097d2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80097d4:	6978      	ldr	r0, [r7, #20]
 80097d6:	f7ff ff53 	bl	8009680 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3314      	adds	r3, #20
 80097de:	f107 0210 	add.w	r2, r7, #16
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f00f f8f2 	bl	80189ce <sys_arch_mbox_tryfetch>
 80097ea:	4603      	mov	r3, r0
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f0:	d1d5      	bne.n	800979e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3314      	adds	r3, #20
 80097f6:	4618      	mov	r0, r3
 80097f8:	f00f f87e 	bl	80188f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3314      	adds	r3, #20
 8009800:	4618      	mov	r0, r3
 8009802:	f00f f911 	bl	8018a28 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009806:	bf00      	nop
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d106      	bne.n	8009834 <lwip_netconn_do_close_internal+0x24>
 8009826:	4b87      	ldr	r3, [pc, #540]	@ (8009a44 <lwip_netconn_do_close_internal+0x234>)
 8009828:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800982c:	4986      	ldr	r1, [pc, #536]	@ (8009a48 <lwip_netconn_do_close_internal+0x238>)
 800982e:	4887      	ldr	r0, [pc, #540]	@ (8009a4c <lwip_netconn_do_close_internal+0x23c>)
 8009830:	f00f fb50 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800983c:	2b10      	cmp	r3, #16
 800983e:	d006      	beq.n	800984e <lwip_netconn_do_close_internal+0x3e>
 8009840:	4b80      	ldr	r3, [pc, #512]	@ (8009a44 <lwip_netconn_do_close_internal+0x234>)
 8009842:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8009846:	4982      	ldr	r1, [pc, #520]	@ (8009a50 <lwip_netconn_do_close_internal+0x240>)
 8009848:	4880      	ldr	r0, [pc, #512]	@ (8009a4c <lwip_netconn_do_close_internal+0x23c>)
 800984a:	f00f fb43 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	785b      	ldrb	r3, [r3, #1]
 8009852:	2b04      	cmp	r3, #4
 8009854:	d006      	beq.n	8009864 <lwip_netconn_do_close_internal+0x54>
 8009856:	4b7b      	ldr	r3, [pc, #492]	@ (8009a44 <lwip_netconn_do_close_internal+0x234>)
 8009858:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800985c:	497d      	ldr	r1, [pc, #500]	@ (8009a54 <lwip_netconn_do_close_internal+0x244>)
 800985e:	487b      	ldr	r0, [pc, #492]	@ (8009a4c <lwip_netconn_do_close_internal+0x23c>)
 8009860:	f00f fb38 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <lwip_netconn_do_close_internal+0x6a>
 800986c:	4b75      	ldr	r3, [pc, #468]	@ (8009a44 <lwip_netconn_do_close_internal+0x234>)
 800986e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8009872:	4979      	ldr	r1, [pc, #484]	@ (8009a58 <lwip_netconn_do_close_internal+0x248>)
 8009874:	4875      	ldr	r0, [pc, #468]	@ (8009a4c <lwip_netconn_do_close_internal+0x23c>)
 8009876:	f00f fb2d 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <lwip_netconn_do_close_internal+0x80>
 8009882:	4b70      	ldr	r3, [pc, #448]	@ (8009a44 <lwip_netconn_do_close_internal+0x234>)
 8009884:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009888:	4974      	ldr	r1, [pc, #464]	@ (8009a5c <lwip_netconn_do_close_internal+0x24c>)
 800988a:	4870      	ldr	r0, [pc, #448]	@ (8009a4c <lwip_netconn_do_close_internal+0x23c>)
 800988c:	f00f fb22 	bl	8018ed4 <iprintf>

  tpcb = conn->pcb.tcp;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	7a1b      	ldrb	r3, [r3, #8]
 800989c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d102      	bne.n	80098ba <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80098b4:	2301      	movs	r3, #1
 80098b6:	75bb      	strb	r3, [r7, #22]
 80098b8:	e01f      	b.n	80098fa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00e      	beq.n	80098de <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80098c4:	2b05      	cmp	r3, #5
 80098c6:	d007      	beq.n	80098d8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80098cc:	2b06      	cmp	r3, #6
 80098ce:	d003      	beq.n	80098d8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d102      	bne.n	80098de <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80098d8:	2301      	movs	r3, #1
 80098da:	75bb      	strb	r3, [r7, #22]
 80098dc:	e00d      	b.n	80098fa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80098de:	7b7b      	ldrb	r3, [r7, #13]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d008      	beq.n	80098f6 <lwip_netconn_do_close_internal+0xe6>
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	8b5b      	ldrh	r3, [r3, #26]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80098f0:	2301      	movs	r3, #1
 80098f2:	75bb      	strb	r3, [r7, #22]
 80098f4:	e001      	b.n	80098fa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009900:	2100      	movs	r1, #0
 8009902:	6938      	ldr	r0, [r7, #16]
 8009904:	f005 fb84 	bl	800f010 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	7d1b      	ldrb	r3, [r3, #20]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d104      	bne.n	800991a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009910:	2100      	movs	r1, #0
 8009912:	6938      	ldr	r0, [r7, #16]
 8009914:	f005 fbf4 	bl	800f100 <tcp_accept>
 8009918:	e01d      	b.n	8009956 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009920:	2100      	movs	r1, #0
 8009922:	6938      	ldr	r0, [r7, #16]
 8009924:	f005 fb86 	bl	800f034 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009928:	2100      	movs	r1, #0
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f005 fbe8 	bl	800f100 <tcp_accept>
    }
    if (shut_tx) {
 8009930:	7b7b      	ldrb	r3, [r7, #13]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009936:	2100      	movs	r1, #0
 8009938:	6938      	ldr	r0, [r7, #16]
 800993a:	f005 fb9d 	bl	800f078 <tcp_sent>
    }
    if (shut_close) {
 800993e:	7dbb      	ldrb	r3, [r7, #22]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d008      	beq.n	8009956 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009944:	2200      	movs	r2, #0
 8009946:	2100      	movs	r1, #0
 8009948:	6938      	ldr	r0, [r7, #16]
 800994a:	f005 fbf1 	bl	800f130 <tcp_poll>
      tcp_err(tpcb, NULL);
 800994e:	2100      	movs	r1, #0
 8009950:	6938      	ldr	r0, [r7, #16]
 8009952:	f005 fbb3 	bl	800f0bc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009956:	7dbb      	ldrb	r3, [r7, #22]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800995c:	6938      	ldr	r0, [r7, #16]
 800995e:	f004 f839 	bl	800d9d4 <tcp_close>
 8009962:	4603      	mov	r3, r0
 8009964:	75fb      	strb	r3, [r7, #23]
 8009966:	e007      	b.n	8009978 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	7b7a      	ldrb	r2, [r7, #13]
 800996c:	4619      	mov	r1, r3
 800996e:	6938      	ldr	r0, [r7, #16]
 8009970:	f004 f85c 	bl	800da2c <tcp_shutdown>
 8009974:	4603      	mov	r3, r0
 8009976:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009980:	2301      	movs	r3, #1
 8009982:	757b      	strb	r3, [r7, #21]
 8009984:	e016      	b.n	80099b4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d10f      	bne.n	80099b0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	7a5b      	ldrb	r3, [r3, #9]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10c      	bne.n	80099b4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800999a:	2301      	movs	r3, #1
 800999c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800999e:	7dbb      	ldrb	r3, [r7, #22]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80099a4:	6938      	ldr	r0, [r7, #16]
 80099a6:	f004 f95b 	bl	800dc60 <tcp_abort>
          err = ERR_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	75fb      	strb	r3, [r7, #23]
 80099ae:	e001      	b.n	80099b4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80099b0:	2301      	movs	r3, #1
 80099b2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80099b4:	7d7b      	ldrb	r3, [r7, #21]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d052      	beq.n	8009a60 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	330c      	adds	r3, #12
 80099c2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	7dfa      	ldrb	r2, [r7, #23]
 80099ca:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80099d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d129      	bne.n	8009a34 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80099e0:	7dbb      	ldrb	r3, [r7, #22]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00c      	beq.n	8009a00 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <lwip_netconn_do_close_internal+0x1f0>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	2200      	movs	r2, #0
 80099fa:	2104      	movs	r1, #4
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
      }
      if (shut_rx) {
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <lwip_netconn_do_close_internal+0x20a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a12:	2200      	movs	r2, #0
 8009a14:	2100      	movs	r1, #0
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
      }
      if (shut_tx) {
 8009a1a:	7b7b      	ldrb	r3, [r7, #13]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <lwip_netconn_do_close_internal+0x224>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2102      	movs	r1, #2
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009a3a:	68b8      	ldr	r0, [r7, #8]
 8009a3c:	f00f f85a 	bl	8018af4 <sys_sem_signal>
    }
    return ERR_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e03c      	b.n	8009abe <lwip_netconn_do_close_internal+0x2ae>
 8009a44:	0801a7c4 	.word	0x0801a7c4
 8009a48:	0801aa98 	.word	0x0801aa98
 8009a4c:	0801a808 	.word	0x0801a808
 8009a50:	0801aaa8 	.word	0x0801aaa8
 8009a54:	0801aac8 	.word	0x0801aac8
 8009a58:	0801aaec 	.word	0x0801aaec
 8009a5c:	0801a92c 	.word	0x0801a92c
  }
  if (!close_finished) {
 8009a60:	7d7b      	ldrb	r3, [r7, #21]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d11e      	bne.n	8009aa4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	7d1b      	ldrb	r3, [r3, #20]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d106      	bne.n	8009a7c <lwip_netconn_do_close_internal+0x26c>
 8009a6e:	4b16      	ldr	r3, [pc, #88]	@ (8009ac8 <lwip_netconn_do_close_internal+0x2b8>)
 8009a70:	f240 4241 	movw	r2, #1089	@ 0x441
 8009a74:	4915      	ldr	r1, [pc, #84]	@ (8009acc <lwip_netconn_do_close_internal+0x2bc>)
 8009a76:	4816      	ldr	r0, [pc, #88]	@ (8009ad0 <lwip_netconn_do_close_internal+0x2c0>)
 8009a78:	f00f fa2c 	bl	8018ed4 <iprintf>
    if (shut_tx) {
 8009a7c:	7b7b      	ldrb	r3, [r7, #13]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009a82:	4914      	ldr	r1, [pc, #80]	@ (8009ad4 <lwip_netconn_do_close_internal+0x2c4>)
 8009a84:	6938      	ldr	r0, [r7, #16]
 8009a86:	f005 faf7 	bl	800f078 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4912      	ldr	r1, [pc, #72]	@ (8009ad8 <lwip_netconn_do_close_internal+0x2c8>)
 8009a8e:	6938      	ldr	r0, [r7, #16]
 8009a90:	f005 fb4e 	bl	800f130 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009a94:	4911      	ldr	r1, [pc, #68]	@ (8009adc <lwip_netconn_do_close_internal+0x2cc>)
 8009a96:	6938      	ldr	r0, [r7, #16]
 8009a98:	f005 fb10 	bl	800f0bc <tcp_err>
    tcp_arg(tpcb, conn);
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	6938      	ldr	r0, [r7, #16]
 8009aa0:	f005 fab6 	bl	800f010 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d106      	bne.n	8009aba <lwip_netconn_do_close_internal+0x2aa>
 8009aac:	4b06      	ldr	r3, [pc, #24]	@ (8009ac8 <lwip_netconn_do_close_internal+0x2b8>)
 8009aae:	f240 424d 	movw	r2, #1101	@ 0x44d
 8009ab2:	490b      	ldr	r1, [pc, #44]	@ (8009ae0 <lwip_netconn_do_close_internal+0x2d0>)
 8009ab4:	4806      	ldr	r0, [pc, #24]	@ (8009ad0 <lwip_netconn_do_close_internal+0x2c0>)
 8009ab6:	f00f fa0d 	bl	8018ed4 <iprintf>
  return err;
 8009aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	0801a7c4 	.word	0x0801a7c4
 8009acc:	0801ab00 	.word	0x0801ab00
 8009ad0:	0801a808 	.word	0x0801a808
 8009ad4:	08009089 	.word	0x08009089
 8009ad8:	08008fc1 	.word	0x08008fc1
 8009adc:	08009131 	.word	0x08009131
 8009ae0:	0801ab24 	.word	0x0801ab24

08009ae4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	785b      	ldrb	r3, [r3, #1]
 8009af6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <lwip_netconn_do_delconn+0x36>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b08:	2b10      	cmp	r3, #16
 8009b0a:	d006      	beq.n	8009b1a <lwip_netconn_do_delconn+0x36>
 8009b0c:	4b60      	ldr	r3, [pc, #384]	@ (8009c90 <lwip_netconn_do_delconn+0x1ac>)
 8009b0e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8009b12:	4960      	ldr	r1, [pc, #384]	@ (8009c94 <lwip_netconn_do_delconn+0x1b0>)
 8009b14:	4860      	ldr	r0, [pc, #384]	@ (8009c98 <lwip_netconn_do_delconn+0x1b4>)
 8009b16:	f00f f9dd 	bl	8018ed4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <lwip_netconn_do_delconn+0x48>
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d002      	beq.n	8009b2c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009b26:	7afb      	ldrb	r3, [r7, #11]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d109      	bne.n	8009b40 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d10a      	bne.n	8009b48 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	7f1b      	ldrb	r3, [r3, #28]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d103      	bne.n	8009b48 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	22fb      	movs	r2, #251	@ 0xfb
 8009b44:	711a      	strb	r2, [r3, #4]
 8009b46:	e097      	b.n	8009c78 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d10d      	bne.n	8009b6a <lwip_netconn_do_delconn+0x86>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	7f1b      	ldrb	r3, [r3, #28]
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d106      	bne.n	8009b6a <lwip_netconn_do_delconn+0x86>
 8009b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8009c90 <lwip_netconn_do_delconn+0x1ac>)
 8009b5e:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009b62:	494e      	ldr	r1, [pc, #312]	@ (8009c9c <lwip_netconn_do_delconn+0x1b8>)
 8009b64:	484c      	ldr	r0, [pc, #304]	@ (8009c98 <lwip_netconn_do_delconn+0x1b4>)
 8009b66:	f00f f9b5 	bl	8018ed4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff fdcd 	bl	8009714 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d05f      	beq.n	8009c44 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d00d      	beq.n	8009bae <lwip_netconn_do_delconn+0xca>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d151      	bne.n	8009c3a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f00a fc7a 	bl	80144a0 <udp_remove>
          break;
 8009bac:	e046      	b.n	8009c3c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <lwip_netconn_do_delconn+0xe2>
 8009bb8:	4b35      	ldr	r3, [pc, #212]	@ (8009c90 <lwip_netconn_do_delconn+0x1ac>)
 8009bba:	f240 4294 	movw	r2, #1172	@ 0x494
 8009bbe:	4938      	ldr	r1, [pc, #224]	@ (8009ca0 <lwip_netconn_do_delconn+0x1bc>)
 8009bc0:	4835      	ldr	r0, [pc, #212]	@ (8009c98 <lwip_netconn_do_delconn+0x1b4>)
 8009bc2:	f00f f987 	bl	8018ed4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2204      	movs	r2, #4
 8009bcc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fe14 	bl	8009810 <lwip_netconn_do_close_internal>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d04b      	beq.n	8009c86 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	785b      	ldrb	r3, [r3, #1]
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d006      	beq.n	8009c06 <lwip_netconn_do_delconn+0x122>
 8009bf8:	4b25      	ldr	r3, [pc, #148]	@ (8009c90 <lwip_netconn_do_delconn+0x1ac>)
 8009bfa:	f240 429a 	movw	r2, #1178	@ 0x49a
 8009bfe:	4929      	ldr	r1, [pc, #164]	@ (8009ca4 <lwip_netconn_do_delconn+0x1c0>)
 8009c00:	4825      	ldr	r0, [pc, #148]	@ (8009c98 <lwip_netconn_do_delconn+0x1b4>)
 8009c02:	f00f f967 	bl	8018ed4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009c06:	4828      	ldr	r0, [pc, #160]	@ (8009ca8 <lwip_netconn_do_delconn+0x1c4>)
 8009c08:	f00e ffe5 	bl	8018bd6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	330c      	adds	r3, #12
 8009c12:	2100      	movs	r1, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f00e ff3c 	bl	8018a92 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009c1a:	4823      	ldr	r0, [pc, #140]	@ (8009ca8 <lwip_netconn_do_delconn+0x1c4>)
 8009c1c:	f00e ffcc 	bl	8018bb8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d02d      	beq.n	8009c86 <lwip_netconn_do_delconn+0x1a2>
 8009c2a:	4b19      	ldr	r3, [pc, #100]	@ (8009c90 <lwip_netconn_do_delconn+0x1ac>)
 8009c2c:	f240 429e 	movw	r2, #1182	@ 0x49e
 8009c30:	491c      	ldr	r1, [pc, #112]	@ (8009ca4 <lwip_netconn_do_delconn+0x1c0>)
 8009c32:	4819      	ldr	r0, [pc, #100]	@ (8009c98 <lwip_netconn_do_delconn+0x1b4>)
 8009c34:	f00f f94e 	bl	8018ed4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009c38:	e025      	b.n	8009c86 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009c3a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <lwip_netconn_do_delconn+0x17a>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	6810      	ldr	r0, [r2, #0]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d007      	beq.n	8009c78 <lwip_netconn_do_delconn+0x194>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	6810      	ldr	r0, [r2, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	2102      	movs	r1, #2
 8009c76:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	330c      	adds	r3, #12
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f00e ff52 	bl	8018b28 <sys_sem_valid>
 8009c84:	e000      	b.n	8009c88 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009c86:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0801a7c4 	.word	0x0801a7c4
 8009c94:	0801ab34 	.word	0x0801ab34
 8009c98:	0801a808 	.word	0x0801a808
 8009c9c:	0801ab48 	.word	0x0801ab48
 8009ca0:	0801ab68 	.word	0x0801ab68
 8009ca4:	0801ab84 	.word	0x0801ab84
 8009ca8:	2000d3bc 	.word	0x2000d3bc

08009cac <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d025      	beq.n	8009d0e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d00e      	beq.n	8009cee <lwip_netconn_do_bind+0x42>
 8009cd0:	2b20      	cmp	r3, #32
 8009cd2:	d119      	bne.n	8009d08 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6858      	ldr	r0, [r3, #4]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	6899      	ldr	r1, [r3, #8]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	899b      	ldrh	r3, [r3, #12]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f00a fac6 	bl	8014274 <udp_bind>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	73fb      	strb	r3, [r7, #15]
        break;
 8009cec:	e011      	b.n	8009d12 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6858      	ldr	r0, [r3, #4]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6899      	ldr	r1, [r3, #8]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	899b      	ldrh	r3, [r3, #12]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	f003 ffbb 	bl	800dc78 <tcp_bind>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
        break;
 8009d06:	e004      	b.n	8009d12 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009d08:	23fa      	movs	r3, #250	@ 0xfa
 8009d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8009d0c:	e001      	b.n	8009d12 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009d0e:	23fa      	movs	r3, #250	@ 0xfa
 8009d10:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	7bfa      	ldrb	r2, [r7, #15]
 8009d16:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009d18:	bf00      	nop
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009d3c:	f06f 0305 	mvn.w	r3, #5
 8009d40:	e070      	b.n	8009e24 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d006      	beq.n	8009d58 <lwip_netconn_do_connected+0x38>
 8009d4a:	4b38      	ldr	r3, [pc, #224]	@ (8009e2c <lwip_netconn_do_connected+0x10c>)
 8009d4c:	f240 5223 	movw	r2, #1315	@ 0x523
 8009d50:	4937      	ldr	r1, [pc, #220]	@ (8009e30 <lwip_netconn_do_connected+0x110>)
 8009d52:	4838      	ldr	r0, [pc, #224]	@ (8009e34 <lwip_netconn_do_connected+0x114>)
 8009d54:	f00f f8be 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10c      	bne.n	8009d7a <lwip_netconn_do_connected+0x5a>
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	7f1b      	ldrb	r3, [r3, #28]
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <lwip_netconn_do_connected+0x5a>
 8009d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8009e2c <lwip_netconn_do_connected+0x10c>)
 8009d6e:	f240 5224 	movw	r2, #1316	@ 0x524
 8009d72:	4931      	ldr	r1, [pc, #196]	@ (8009e38 <lwip_netconn_do_connected+0x118>)
 8009d74:	482f      	ldr	r0, [pc, #188]	@ (8009e34 <lwip_netconn_do_connected+0x114>)
 8009d76:	f00f f8ad 	bl	8018ed4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d008      	beq.n	8009d94 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	79fa      	ldrb	r2, [r7, #7]
 8009d88:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	330c      	adds	r3, #12
 8009d92:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	d106      	bne.n	8009dae <lwip_netconn_do_connected+0x8e>
 8009da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009da8:	69b8      	ldr	r0, [r7, #24]
 8009daa:	f7ff fa97 	bl	80092dc <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	7f1b      	ldrb	r3, [r3, #28]
 8009db2:	f003 0304 	and.w	r3, r3, #4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bf0c      	ite	eq
 8009dba:	2301      	moveq	r3, #1
 8009dbc:	2300      	movne	r3, #0
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	7f1b      	ldrb	r3, [r3, #28]
 8009dc6:	f023 0304 	bic.w	r3, r3, #4
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <lwip_netconn_do_connected+0xbc>
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10c      	bne.n	8009df6 <lwip_netconn_do_connected+0xd6>
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <lwip_netconn_do_connected+0xc8>
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d006      	beq.n	8009df6 <lwip_netconn_do_connected+0xd6>
 8009de8:	4b10      	ldr	r3, [pc, #64]	@ (8009e2c <lwip_netconn_do_connected+0x10c>)
 8009dea:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8009dee:	4913      	ldr	r1, [pc, #76]	@ (8009e3c <lwip_netconn_do_connected+0x11c>)
 8009df0:	4810      	ldr	r0, [pc, #64]	@ (8009e34 <lwip_netconn_do_connected+0x114>)
 8009df2:	f00f f86f 	bl	8018ed4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d005      	beq.n	8009e16 <lwip_netconn_do_connected+0xf6>
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2102      	movs	r1, #2
 8009e12:	69b8      	ldr	r0, [r7, #24]
 8009e14:	4798      	blx	r3

  if (was_blocking) {
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009e1c:	69f8      	ldr	r0, [r7, #28]
 8009e1e:	f00e fe69 	bl	8018af4 <sys_sem_signal>
  }
  return ERR_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3720      	adds	r7, #32
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	0801a7c4 	.word	0x0801a7c4
 8009e30:	0801ab8c 	.word	0x0801ab8c
 8009e34:	0801a808 	.word	0x0801a808
 8009e38:	0801abac 	.word	0x0801abac
 8009e3c:	0801abec 	.word	0x0801abec

08009e40 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009e56:	23f1      	movs	r3, #241	@ 0xf1
 8009e58:	75fb      	strb	r3, [r7, #23]
 8009e5a:	e09b      	b.n	8009f94 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e66:	2b10      	cmp	r3, #16
 8009e68:	d00f      	beq.n	8009e8a <lwip_netconn_do_connect+0x4a>
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	f040 8087 	bne.w	8009f7e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6858      	ldr	r0, [r3, #4]
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6899      	ldr	r1, [r3, #8]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	899b      	ldrh	r3, [r3, #12]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f00a fa80 	bl	8014384 <udp_connect>
 8009e84:	4603      	mov	r3, r0
 8009e86:	75fb      	strb	r3, [r7, #23]
        break;
 8009e88:	e084      	b.n	8009f94 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	785b      	ldrb	r3, [r3, #1]
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d102      	bne.n	8009e9a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009e94:	23f7      	movs	r3, #247	@ 0xf7
 8009e96:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009e98:	e07b      	b.n	8009f92 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	785b      	ldrb	r3, [r3, #1]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009ea4:	23f6      	movs	r3, #246	@ 0xf6
 8009ea6:	75fb      	strb	r3, [r7, #23]
        break;
 8009ea8:	e073      	b.n	8009f92 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff fa14 	bl	80092dc <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6858      	ldr	r0, [r3, #4]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6899      	ldr	r1, [r3, #8]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	899a      	ldrh	r2, [r3, #12]
 8009ec2:	4b38      	ldr	r3, [pc, #224]	@ (8009fa4 <lwip_netconn_do_connect+0x164>)
 8009ec4:	f004 f93c 	bl	800e140 <tcp_connect>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d15e      	bne.n	8009f92 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	7f1b      	ldrb	r3, [r3, #28]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bf14      	ite	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	2300      	moveq	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2203      	movs	r2, #3
 8009ef0:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <lwip_netconn_do_connect+0xcc>
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	7f1a      	ldrb	r2, [r3, #28]
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0204 	orr.w	r2, r2, #4
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	771a      	strb	r2, [r3, #28]
 8009f0a:	e008      	b.n	8009f1e <lwip_netconn_do_connect+0xde>
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	7f1a      	ldrb	r2, [r3, #28]
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0204 	bic.w	r2, r2, #4
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009f24:	23fb      	movs	r3, #251	@ 0xfb
 8009f26:	75fb      	strb	r3, [r7, #23]
        break;
 8009f28:	e033      	b.n	8009f92 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d006      	beq.n	8009f4a <lwip_netconn_do_connect+0x10a>
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009fa8 <lwip_netconn_do_connect+0x168>)
 8009f3e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8009f42:	491a      	ldr	r1, [pc, #104]	@ (8009fac <lwip_netconn_do_connect+0x16c>)
 8009f44:	481a      	ldr	r0, [pc, #104]	@ (8009fb0 <lwip_netconn_do_connect+0x170>)
 8009f46:	f00e ffc5 	bl	8018ed4 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009f4a:	481a      	ldr	r0, [pc, #104]	@ (8009fb4 <lwip_netconn_do_connect+0x174>)
 8009f4c:	f00e fe43 	bl	8018bd6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f00e fd9a 	bl	8018a92 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009f5e:	4815      	ldr	r0, [pc, #84]	@ (8009fb4 <lwip_netconn_do_connect+0x174>)
 8009f60:	f00e fe2a 	bl	8018bb8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	785b      	ldrb	r3, [r3, #1]
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d116      	bne.n	8009f9c <lwip_netconn_do_connect+0x15c>
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa8 <lwip_netconn_do_connect+0x168>)
 8009f70:	f240 5274 	movw	r2, #1396	@ 0x574
 8009f74:	490d      	ldr	r1, [pc, #52]	@ (8009fac <lwip_netconn_do_connect+0x16c>)
 8009f76:	480e      	ldr	r0, [pc, #56]	@ (8009fb0 <lwip_netconn_do_connect+0x170>)
 8009f78:	f00e ffac 	bl	8018ed4 <iprintf>
              return;
 8009f7c:	e00e      	b.n	8009f9c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa8 <lwip_netconn_do_connect+0x168>)
 8009f80:	f240 527d 	movw	r2, #1405	@ 0x57d
 8009f84:	490c      	ldr	r1, [pc, #48]	@ (8009fb8 <lwip_netconn_do_connect+0x178>)
 8009f86:	480a      	ldr	r0, [pc, #40]	@ (8009fb0 <lwip_netconn_do_connect+0x170>)
 8009f88:	f00e ffa4 	bl	8018ed4 <iprintf>
 8009f8c:	23fa      	movs	r3, #250	@ 0xfa
 8009f8e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009f90:	e000      	b.n	8009f94 <lwip_netconn_do_connect+0x154>
        break;
 8009f92:	bf00      	nop
    }
  }
  msg->err = err;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	7dfa      	ldrb	r2, [r7, #23]
 8009f98:	711a      	strb	r2, [r3, #4]
 8009f9a:	e000      	b.n	8009f9e <lwip_netconn_do_connect+0x15e>
              return;
 8009f9c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	08009d21 	.word	0x08009d21
 8009fa8:	0801a7c4 	.word	0x0801a7c4
 8009fac:	0801ab84 	.word	0x0801ab84
 8009fb0:	0801a808 	.word	0x0801a808
 8009fb4:	2000d3bc 	.word	0x2000d3bc
 8009fb8:	0801ac0c 	.word	0x0801ac0c

08009fbc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d07f      	beq.n	800a0d2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fdc:	2b10      	cmp	r3, #16
 8009fde:	d175      	bne.n	800a0cc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d165      	bne.n	800a0b6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	7d1b      	ldrb	r3, [r3, #20]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009ff6:	23fa      	movs	r3, #250	@ 0xfa
 8009ff8:	72fb      	strb	r3, [r7, #11]
 8009ffa:	e06c      	b.n	800a0d6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009ffc:	23ff      	movs	r3, #255	@ 0xff
 8009ffe:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f107 020b 	add.w	r2, r7, #11
 800a00a:	7cf9      	ldrb	r1, [r7, #19]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f003 fefd 	bl	800de0c <tcp_listen_with_backlog_and_err>
 800a012:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d05d      	beq.n	800a0d6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3310      	adds	r3, #16
 800a020:	4618      	mov	r0, r3
 800a022:	f00e fcf0 	bl	8018a06 <sys_mbox_valid>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3310      	adds	r3, #16
 800a032:	4618      	mov	r0, r3
 800a034:	f00e fc60 	bl	80188f8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3310      	adds	r3, #16
 800a03e:	4618      	mov	r0, r3
 800a040:	f00e fcf2 	bl	8018a28 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3314      	adds	r3, #20
 800a04e:	4618      	mov	r0, r3
 800a050:	f00e fcd9 	bl	8018a06 <sys_mbox_valid>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d108      	bne.n	800a06c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3314      	adds	r3, #20
 800a060:	2106      	movs	r1, #6
 800a062:	4618      	mov	r0, r3
 800a064:	f00e fc26 	bl	80188b4 <sys_mbox_new>
 800a068:	4603      	mov	r3, r0
 800a06a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a06c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d118      	bne.n	800a0a6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2202      	movs	r2, #2
 800a07a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4619      	mov	r1, r3
 800a090:	4610      	mov	r0, r2
 800a092:	f004 ffbd 	bl	800f010 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	4912      	ldr	r1, [pc, #72]	@ (800a0e8 <lwip_netconn_do_listen+0x12c>)
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f005 f82e 	bl	800f100 <tcp_accept>
 800a0a4:	e017      	b.n	800a0d6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f003 fc94 	bl	800d9d4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	605a      	str	r2, [r3, #4]
 800a0b4:	e00f      	b.n	800a0d6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d102      	bne.n	800a0c6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	72fb      	strb	r3, [r7, #11]
 800a0c4:	e007      	b.n	800a0d6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a0c6:	23f5      	movs	r3, #245	@ 0xf5
 800a0c8:	72fb      	strb	r3, [r7, #11]
 800a0ca:	e004      	b.n	800a0d6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a0cc:	23f0      	movs	r3, #240	@ 0xf0
 800a0ce:	72fb      	strb	r3, [r7, #11]
 800a0d0:	e001      	b.n	800a0d6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a0d2:	23f5      	movs	r3, #245	@ 0xf5
 800a0d4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a0d6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800932d 	.word	0x0800932d

0800a0ec <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d022      	beq.n	800a14e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a112:	2b10      	cmp	r3, #16
 800a114:	d11b      	bne.n	800a14e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a122:	d202      	bcs.n	800a12a <lwip_netconn_do_recv+0x3e>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	b29b      	uxth	r3, r3
 800a128:	e001      	b.n	800a12e <lwip_netconn_do_recv+0x42>
 800a12a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a12e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	89fa      	ldrh	r2, [r7, #14]
 800a138:	4611      	mov	r1, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f003 ff6a 	bl	800e014 <tcp_recved>
        remaining -= recved;
 800a140:	89fb      	ldrh	r3, [r7, #14]
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e6      	bne.n	800a11c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d106      	bne.n	800a17c <lwip_netconn_do_writemore+0x24>
 800a16e:	4b96      	ldr	r3, [pc, #600]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a170:	f240 6273 	movw	r2, #1651	@ 0x673
 800a174:	4995      	ldr	r1, [pc, #596]	@ (800a3cc <lwip_netconn_do_writemore+0x274>)
 800a176:	4896      	ldr	r0, [pc, #600]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a178:	f00e feac 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d006      	beq.n	800a192 <lwip_netconn_do_writemore+0x3a>
 800a184:	4b90      	ldr	r3, [pc, #576]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a186:	f240 6274 	movw	r2, #1652	@ 0x674
 800a18a:	4992      	ldr	r1, [pc, #584]	@ (800a3d4 <lwip_netconn_do_writemore+0x27c>)
 800a18c:	4890      	ldr	r0, [pc, #576]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a18e:	f00e fea1 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <lwip_netconn_do_writemore+0x50>
 800a19a:	4b8b      	ldr	r3, [pc, #556]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a19c:	f240 6275 	movw	r2, #1653	@ 0x675
 800a1a0:	498d      	ldr	r1, [pc, #564]	@ (800a3d8 <lwip_netconn_do_writemore+0x280>)
 800a1a2:	488b      	ldr	r0, [pc, #556]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a1a4:	f00e fe96 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <lwip_netconn_do_writemore+0x66>
 800a1b0:	4b85      	ldr	r3, [pc, #532]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a1b2:	f240 6276 	movw	r2, #1654	@ 0x676
 800a1b6:	4989      	ldr	r1, [pc, #548]	@ (800a3dc <lwip_netconn_do_writemore+0x284>)
 800a1b8:	4885      	ldr	r0, [pc, #532]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a1ba:	f00e fe8b 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	699a      	ldr	r2, [r3, #24]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d306      	bcc.n	800a1dc <lwip_netconn_do_writemore+0x84>
 800a1ce:	4b7e      	ldr	r3, [pc, #504]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a1d0:	f240 6277 	movw	r2, #1655	@ 0x677
 800a1d4:	4982      	ldr	r1, [pc, #520]	@ (800a3e0 <lwip_netconn_do_writemore+0x288>)
 800a1d6:	487e      	ldr	r0, [pc, #504]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a1d8:	f00e fe7c 	bl	8018ed4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	899b      	ldrh	r3, [r3, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <lwip_netconn_do_writemore+0x9c>
 800a1e6:	4b78      	ldr	r3, [pc, #480]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a1e8:	f240 6279 	movw	r2, #1657	@ 0x679
 800a1ec:	497d      	ldr	r1, [pc, #500]	@ (800a3e4 <lwip_netconn_do_writemore+0x28c>)
 800a1ee:	4878      	ldr	r0, [pc, #480]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a1f0:	f00e fe70 	bl	8018ed4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	7f1b      	ldrb	r3, [r3, #28]
 800a1fa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7f1b      	ldrb	r3, [r3, #28]
 800a200:	f003 0302 	and.w	r3, r3, #2
 800a204:	2b00      	cmp	r3, #0
 800a206:	d104      	bne.n	800a212 <lwip_netconn_do_writemore+0xba>
 800a208:	7ebb      	ldrb	r3, [r7, #26]
 800a20a:	f003 0304 	and.w	r3, r3, #4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <lwip_netconn_do_writemore+0xbe>
 800a212:	2301      	movs	r3, #1
 800a214:	e000      	b.n	800a218 <lwip_netconn_do_writemore+0xc0>
 800a216:	2300      	movs	r3, #0
 800a218:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	4413      	add	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a244:	d307      	bcc.n	800a256 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a24a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a24c:	7ebb      	ldrb	r3, [r7, #26]
 800a24e:	f043 0302 	orr.w	r3, r3, #2
 800a252:	76bb      	strb	r3, [r7, #26]
 800a254:	e001      	b.n	800a25a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a262:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a264:	89fa      	ldrh	r2, [r7, #14]
 800a266:	8bbb      	ldrh	r3, [r7, #28]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d216      	bcs.n	800a29a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a26c:	89fb      	ldrh	r3, [r7, #14]
 800a26e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a270:	7e3b      	ldrb	r3, [r7, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00d      	beq.n	800a292 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a276:	8bbb      	ldrh	r3, [r7, #28]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10e      	bne.n	800a29a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d102      	bne.n	800a28c <lwip_netconn_do_writemore+0x134>
 800a286:	f06f 0306 	mvn.w	r3, #6
 800a28a:	e000      	b.n	800a28e <lwip_netconn_do_writemore+0x136>
 800a28c:	2300      	movs	r3, #0
 800a28e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a290:	e07d      	b.n	800a38e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a292:	7ebb      	ldrb	r3, [r7, #26]
 800a294:	f043 0302 	orr.w	r3, r3, #2
 800a298:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	691a      	ldr	r2, [r3, #16]
 800a2a0:	8bbb      	ldrh	r3, [r7, #28]
 800a2a2:	441a      	add	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d906      	bls.n	800a2be <lwip_netconn_do_writemore+0x166>
 800a2b0:	4b45      	ldr	r3, [pc, #276]	@ (800a3c8 <lwip_netconn_do_writemore+0x270>)
 800a2b2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a2b6:	494c      	ldr	r1, [pc, #304]	@ (800a3e8 <lwip_netconn_do_writemore+0x290>)
 800a2b8:	4845      	ldr	r0, [pc, #276]	@ (800a3d0 <lwip_netconn_do_writemore+0x278>)
 800a2ba:	f00e fe0b 	bl	8018ed4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a2be:	8bbb      	ldrh	r3, [r7, #28]
 800a2c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d103      	bne.n	800a2d0 <lwip_netconn_do_writemore+0x178>
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ce:	d209      	bcs.n	800a2e4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a2d4:	8bba      	ldrh	r2, [r7, #28]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d10b      	bne.n	800a2f2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	899b      	ldrh	r3, [r3, #12]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d906      	bls.n	800a2f2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a2e8:	7ebb      	ldrb	r3, [r7, #26]
 800a2ea:	f043 0302 	orr.w	r3, r3, #2
 800a2ee:	76bb      	strb	r3, [r7, #26]
 800a2f0:	e001      	b.n	800a2f6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6858      	ldr	r0, [r3, #4]
 800a2fa:	7ebb      	ldrb	r3, [r7, #26]
 800a2fc:	8bba      	ldrh	r2, [r7, #28]
 800a2fe:	6979      	ldr	r1, [r7, #20]
 800a300:	f007 fdc2 	bl	8011e88 <tcp_write>
 800a304:	4603      	mov	r3, r0
 800a306:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a308:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d12c      	bne.n	800a36a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	6999      	ldr	r1, [r3, #24]
 800a316:	8bba      	ldrh	r2, [r7, #28]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	440a      	add	r2, r1
 800a31e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	6919      	ldr	r1, [r3, #16]
 800a326:	8bba      	ldrh	r2, [r7, #28]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	440a      	add	r2, r1
 800a32e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	691a      	ldr	r2, [r3, #16]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d113      	bne.n	800a36a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	899a      	ldrh	r2, [r3, #12]
 800a348:	3a01      	subs	r2, #1
 800a34a:	b292      	uxth	r2, r2
 800a34c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	899b      	ldrh	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d008      	beq.n	800a36a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	3208      	adds	r2, #8
 800a360:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	2200      	movs	r2, #0
 800a368:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a36a:	7e7b      	ldrb	r3, [r7, #25]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d004      	beq.n	800a37a <lwip_netconn_do_writemore+0x222>
 800a370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f43f af50 	beq.w	800a21a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a37a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <lwip_netconn_do_writemore+0x234>
 800a382:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d146      	bne.n	800a41a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a38c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a38e:	7e3b      	ldrb	r3, [r7, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d02b      	beq.n	800a3ec <lwip_netconn_do_writemore+0x294>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d223      	bcs.n	800a3ec <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <lwip_netconn_do_writemore+0x260>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2103      	movs	r1, #3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7f1b      	ldrb	r3, [r3, #28]
 800a3bc:	f043 0310 	orr.w	r3, r3, #16
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	771a      	strb	r2, [r3, #28]
 800a3c6:	e028      	b.n	800a41a <lwip_netconn_do_writemore+0x2c2>
 800a3c8:	0801a7c4 	.word	0x0801a7c4
 800a3cc:	0801a91c 	.word	0x0801a91c
 800a3d0:	0801a808 	.word	0x0801a808
 800a3d4:	0801ac24 	.word	0x0801ac24
 800a3d8:	0801a92c 	.word	0x0801a92c
 800a3dc:	0801ac44 	.word	0x0801ac44
 800a3e0:	0801ac5c 	.word	0x0801ac5c
 800a3e4:	0801ac9c 	.word	0x0801ac9c
 800a3e8:	0801acc4 	.word	0x0801acc4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a3f4:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a3f8:	d305      	bcc.n	800a406 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a402:	2b04      	cmp	r3, #4
 800a404:	d909      	bls.n	800a41a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <lwip_netconn_do_writemore+0x2c2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a412:	2200      	movs	r2, #0
 800a414:	2103      	movs	r1, #3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a41a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d11d      	bne.n	800a45e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	699a      	ldr	r2, [r3, #24]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d002      	beq.n	800a438 <lwip_netconn_do_writemore+0x2e0>
 800a432:	7e3b      	ldrb	r3, [r7, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a438:	2301      	movs	r3, #1
 800a43a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4618      	mov	r0, r3
 800a442:	f008 fb0b 	bl	8012a5c <tcp_output>
 800a446:	4603      	mov	r3, r0
 800a448:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a44a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a44e:	f113 0f04 	cmn.w	r3, #4
 800a452:	d12c      	bne.n	800a4ae <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a454:	7b3b      	ldrb	r3, [r7, #12]
 800a456:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a458:	2301      	movs	r3, #1
 800a45a:	76fb      	strb	r3, [r7, #27]
 800a45c:	e027      	b.n	800a4ae <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a45e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d120      	bne.n	800a4aa <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f008 faf5 	bl	8012a5c <tcp_output>
 800a472:	4603      	mov	r3, r0
 800a474:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a476:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a47a:	f113 0f04 	cmn.w	r3, #4
 800a47e:	d104      	bne.n	800a48a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a480:	7b7b      	ldrb	r3, [r7, #13]
 800a482:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a484:	2301      	movs	r3, #1
 800a486:	76fb      	strb	r3, [r7, #27]
 800a488:	e011      	b.n	800a4ae <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a48a:	7e3b      	ldrb	r3, [r7, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00e      	beq.n	800a4ae <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a1b      	ldr	r3, [r3, #32]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <lwip_netconn_do_writemore+0x348>
 800a49a:	f06f 0306 	mvn.w	r3, #6
 800a49e:	e000      	b.n	800a4a2 <lwip_netconn_do_writemore+0x34a>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	76fb      	strb	r3, [r7, #27]
 800a4a8:	e001      	b.n	800a4ae <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a4ae:	7efb      	ldrb	r3, [r7, #27]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d015      	beq.n	800a4e0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	330c      	adds	r3, #12
 800a4bc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	7ffa      	ldrb	r2, [r7, #31]
 800a4c4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d006      	beq.n	800a4e6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a4d8:	68b8      	ldr	r0, [r7, #8]
 800a4da:	f00e fb0b 	bl	8018af4 <sys_sem_signal>
 800a4de:	e002      	b.n	800a4e6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	e000      	b.n	800a4e8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3720      	adds	r7, #32
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fbce 	bl	8008ca2 <netconn_err>
 800a506:	4603      	mov	r3, r0
 800a508:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d166      	bne.n	800a5e0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a51c:	2b10      	cmp	r3, #16
 800a51e:	d15d      	bne.n	800a5dc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a52a:	23fb      	movs	r3, #251	@ 0xfb
 800a52c:	73fb      	strb	r3, [r7, #15]
 800a52e:	e057      	b.n	800a5e0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d04d      	beq.n	800a5d6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2201      	movs	r2, #1
 800a540:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d006      	beq.n	800a55a <lwip_netconn_do_write+0x6a>
 800a54c:	4b28      	ldr	r3, [pc, #160]	@ (800a5f0 <lwip_netconn_do_write+0x100>)
 800a54e:	f240 7223 	movw	r2, #1827	@ 0x723
 800a552:	4928      	ldr	r1, [pc, #160]	@ (800a5f4 <lwip_netconn_do_write+0x104>)
 800a554:	4828      	ldr	r0, [pc, #160]	@ (800a5f8 <lwip_netconn_do_write+0x108>)
 800a556:	f00e fcbd 	bl	8018ed4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <lwip_netconn_do_write+0x80>
 800a562:	4b23      	ldr	r3, [pc, #140]	@ (800a5f0 <lwip_netconn_do_write+0x100>)
 800a564:	f240 7224 	movw	r2, #1828	@ 0x724
 800a568:	4924      	ldr	r1, [pc, #144]	@ (800a5fc <lwip_netconn_do_write+0x10c>)
 800a56a:	4823      	ldr	r0, [pc, #140]	@ (800a5f8 <lwip_netconn_do_write+0x108>)
 800a56c:	f00e fcb2 	bl	8018ed4 <iprintf>
        msg->conn->current_msg = msg;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2100      	movs	r1, #0
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fdea 	bl	800a158 <lwip_netconn_do_writemore>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d02e      	beq.n	800a5e8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d006      	beq.n	800a5a2 <lwip_netconn_do_write+0xb2>
 800a594:	4b16      	ldr	r3, [pc, #88]	@ (800a5f0 <lwip_netconn_do_write+0x100>)
 800a596:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a59a:	4919      	ldr	r1, [pc, #100]	@ (800a600 <lwip_netconn_do_write+0x110>)
 800a59c:	4816      	ldr	r0, [pc, #88]	@ (800a5f8 <lwip_netconn_do_write+0x108>)
 800a59e:	f00e fc99 	bl	8018ed4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a5a2:	4818      	ldr	r0, [pc, #96]	@ (800a604 <lwip_netconn_do_write+0x114>)
 800a5a4:	f00e fb17 	bl	8018bd6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	330c      	adds	r3, #12
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f00e fa6e 	bl	8018a92 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a5b6:	4813      	ldr	r0, [pc, #76]	@ (800a604 <lwip_netconn_do_write+0x114>)
 800a5b8:	f00e fafe 	bl	8018bb8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d110      	bne.n	800a5e8 <lwip_netconn_do_write+0xf8>
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f0 <lwip_netconn_do_write+0x100>)
 800a5c8:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a5cc:	490c      	ldr	r1, [pc, #48]	@ (800a600 <lwip_netconn_do_write+0x110>)
 800a5ce:	480a      	ldr	r0, [pc, #40]	@ (800a5f8 <lwip_netconn_do_write+0x108>)
 800a5d0:	f00e fc80 	bl	8018ed4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a5d4:	e008      	b.n	800a5e8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a5d6:	23f5      	movs	r3, #245	@ 0xf5
 800a5d8:	73fb      	strb	r3, [r7, #15]
 800a5da:	e001      	b.n	800a5e0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a5dc:	23fa      	movs	r3, #250	@ 0xfa
 800a5de:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	7bfa      	ldrb	r2, [r7, #15]
 800a5e4:	711a      	strb	r2, [r3, #4]
 800a5e6:	e000      	b.n	800a5ea <lwip_netconn_do_write+0xfa>
        return;
 800a5e8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	0801a7c4 	.word	0x0801a7c4
 800a5f4:	0801ab68 	.word	0x0801ab68
 800a5f8:	0801a808 	.word	0x0801a808
 800a5fc:	0801acf0 	.word	0x0801acf0
 800a600:	0801ab84 	.word	0x0801ab84
 800a604:	2000d3bc 	.word	0x2000d3bc

0800a608 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d069      	beq.n	800a6fa <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a630:	2b10      	cmp	r3, #16
 800a632:	d162      	bne.n	800a6fa <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d002      	beq.n	800a642 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a63c:	7afb      	ldrb	r3, [r7, #11]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d05b      	beq.n	800a6fa <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d103      	bne.n	800a650 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	22f5      	movs	r2, #245	@ 0xf5
 800a64c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a64e:	e059      	b.n	800a704 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a650:	7afb      	ldrb	r3, [r7, #11]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d103      	bne.n	800a65e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	22fb      	movs	r2, #251	@ 0xfb
 800a65a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a65c:	e052      	b.n	800a704 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	7a1b      	ldrb	r3, [r3, #8]
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff f850 	bl	8009714 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <lwip_netconn_do_close+0x84>
 800a67e:	4b23      	ldr	r3, [pc, #140]	@ (800a70c <lwip_netconn_do_close+0x104>)
 800a680:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800a684:	4922      	ldr	r1, [pc, #136]	@ (800a710 <lwip_netconn_do_close+0x108>)
 800a686:	4823      	ldr	r0, [pc, #140]	@ (800a714 <lwip_netconn_do_close+0x10c>)
 800a688:	f00e fc24 	bl	8018ed4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2204      	movs	r2, #4
 800a692:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff f8b4 	bl	8009810 <lwip_netconn_do_close_internal>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d029      	beq.n	800a702 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d006      	beq.n	800a6c6 <lwip_netconn_do_close+0xbe>
 800a6b8:	4b14      	ldr	r3, [pc, #80]	@ (800a70c <lwip_netconn_do_close+0x104>)
 800a6ba:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800a6be:	4916      	ldr	r1, [pc, #88]	@ (800a718 <lwip_netconn_do_close+0x110>)
 800a6c0:	4814      	ldr	r0, [pc, #80]	@ (800a714 <lwip_netconn_do_close+0x10c>)
 800a6c2:	f00e fc07 	bl	8018ed4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a6c6:	4815      	ldr	r0, [pc, #84]	@ (800a71c <lwip_netconn_do_close+0x114>)
 800a6c8:	f00e fa85 	bl	8018bd6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	330c      	adds	r3, #12
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f00e f9dc 	bl	8018a92 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a6da:	4810      	ldr	r0, [pc, #64]	@ (800a71c <lwip_netconn_do_close+0x114>)
 800a6dc:	f00e fa6c 	bl	8018bb8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	785b      	ldrb	r3, [r3, #1]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00b      	beq.n	800a702 <lwip_netconn_do_close+0xfa>
 800a6ea:	4b08      	ldr	r3, [pc, #32]	@ (800a70c <lwip_netconn_do_close+0x104>)
 800a6ec:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800a6f0:	4909      	ldr	r1, [pc, #36]	@ (800a718 <lwip_netconn_do_close+0x110>)
 800a6f2:	4808      	ldr	r0, [pc, #32]	@ (800a714 <lwip_netconn_do_close+0x10c>)
 800a6f4:	f00e fbee 	bl	8018ed4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a6f8:	e003      	b.n	800a702 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	22f5      	movs	r2, #245	@ 0xf5
 800a6fe:	711a      	strb	r2, [r3, #4]
 800a700:	e000      	b.n	800a704 <lwip_netconn_do_close+0xfc>
      return;
 800a702:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	0801a7c4 	.word	0x0801a7c4
 800a710:	0801ab68 	.word	0x0801ab68
 800a714:	0801a808 	.word	0x0801a808
 800a718:	0801ab84 	.word	0x0801ab84
 800a71c:	2000d3bc 	.word	0x2000d3bc

0800a720 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d013      	beq.n	800a756 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f002 fc90 	bl	800d060 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	605a      	str	r2, [r3, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	2006      	movs	r0, #6
 800a752:	f001 fdd5 	bl	800c300 <memp_free>
  }
}
 800a756:	bf00      	nop
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
	...

0800a760 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d108      	bne.n	800a784 <netbuf_data+0x24>
 800a772:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e0 <netbuf_data+0x80>)
 800a774:	22c6      	movs	r2, #198	@ 0xc6
 800a776:	491b      	ldr	r1, [pc, #108]	@ (800a7e4 <netbuf_data+0x84>)
 800a778:	481b      	ldr	r0, [pc, #108]	@ (800a7e8 <netbuf_data+0x88>)
 800a77a:	f00e fbab 	bl	8018ed4 <iprintf>
 800a77e:	f06f 030f 	mvn.w	r3, #15
 800a782:	e029      	b.n	800a7d8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d108      	bne.n	800a79c <netbuf_data+0x3c>
 800a78a:	4b15      	ldr	r3, [pc, #84]	@ (800a7e0 <netbuf_data+0x80>)
 800a78c:	22c7      	movs	r2, #199	@ 0xc7
 800a78e:	4917      	ldr	r1, [pc, #92]	@ (800a7ec <netbuf_data+0x8c>)
 800a790:	4815      	ldr	r0, [pc, #84]	@ (800a7e8 <netbuf_data+0x88>)
 800a792:	f00e fb9f 	bl	8018ed4 <iprintf>
 800a796:	f06f 030f 	mvn.w	r3, #15
 800a79a:	e01d      	b.n	800a7d8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d108      	bne.n	800a7b4 <netbuf_data+0x54>
 800a7a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e0 <netbuf_data+0x80>)
 800a7a4:	22c8      	movs	r2, #200	@ 0xc8
 800a7a6:	4912      	ldr	r1, [pc, #72]	@ (800a7f0 <netbuf_data+0x90>)
 800a7a8:	480f      	ldr	r0, [pc, #60]	@ (800a7e8 <netbuf_data+0x88>)
 800a7aa:	f00e fb93 	bl	8018ed4 <iprintf>
 800a7ae:	f06f 030f 	mvn.w	r3, #15
 800a7b2:	e011      	b.n	800a7d8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <netbuf_data+0x62>
    return ERR_BUF;
 800a7bc:	f06f 0301 	mvn.w	r3, #1
 800a7c0:	e00a      	b.n	800a7d8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	895a      	ldrh	r2, [r3, #10]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	0801ad1c 	.word	0x0801ad1c
 800a7e4:	0801ae24 	.word	0x0801ae24
 800a7e8:	0801ad6c 	.word	0x0801ad6c
 800a7ec:	0801ae40 	.word	0x0801ae40
 800a7f0:	0801ae60 	.word	0x0801ae60

0800a7f4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d108      	bne.n	800a814 <netbuf_next+0x20>
 800a802:	4b11      	ldr	r3, [pc, #68]	@ (800a848 <netbuf_next+0x54>)
 800a804:	22e0      	movs	r2, #224	@ 0xe0
 800a806:	4911      	ldr	r1, [pc, #68]	@ (800a84c <netbuf_next+0x58>)
 800a808:	4811      	ldr	r0, [pc, #68]	@ (800a850 <netbuf_next+0x5c>)
 800a80a:	f00e fb63 	bl	8018ed4 <iprintf>
 800a80e:	f04f 33ff 	mov.w	r3, #4294967295
 800a812:	e014      	b.n	800a83e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d102      	bne.n	800a824 <netbuf_next+0x30>
    return -1;
 800a81e:	f04f 33ff 	mov.w	r3, #4294967295
 800a822:	e00c      	b.n	800a83e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <netbuf_next+0x48>
    return 1;
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <netbuf_next+0x4a>
  }
  return 0;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	0801ad1c 	.word	0x0801ad1c
 800a84c:	0801ae7c 	.word	0x0801ae7c
 800a850:	0801ad6c 	.word	0x0801ad6c

0800a854 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a85e:	f009 f9b5 	bl	8013bcc <sys_timeouts_sleeptime>
 800a862:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d10b      	bne.n	800a884 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a86c:	4813      	ldr	r0, [pc, #76]	@ (800a8bc <tcpip_timeouts_mbox_fetch+0x68>)
 800a86e:	f00e f9b2 	bl	8018bd6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a872:	2200      	movs	r2, #0
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f00e f86a 	bl	8018950 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a87c:	480f      	ldr	r0, [pc, #60]	@ (800a8bc <tcpip_timeouts_mbox_fetch+0x68>)
 800a87e:	f00e f99b 	bl	8018bb8 <sys_mutex_lock>
    return;
 800a882:	e018      	b.n	800a8b6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d102      	bne.n	800a890 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a88a:	f009 f965 	bl	8013b58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a88e:	e7e6      	b.n	800a85e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a890:	480a      	ldr	r0, [pc, #40]	@ (800a8bc <tcpip_timeouts_mbox_fetch+0x68>)
 800a892:	f00e f9a0 	bl	8018bd6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f00e f858 	bl	8018950 <sys_arch_mbox_fetch>
 800a8a0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a8a2:	4806      	ldr	r0, [pc, #24]	@ (800a8bc <tcpip_timeouts_mbox_fetch+0x68>)
 800a8a4:	f00e f988 	bl	8018bb8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	d102      	bne.n	800a8b6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a8b0:	f009 f952 	bl	8013b58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a8b4:	e7d3      	b.n	800a85e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	2000d3bc 	.word	0x2000d3bc

0800a8c0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a8c8:	4810      	ldr	r0, [pc, #64]	@ (800a90c <tcpip_thread+0x4c>)
 800a8ca:	f00e f975 	bl	8018bb8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a8ce:	4b10      	ldr	r3, [pc, #64]	@ (800a910 <tcpip_thread+0x50>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a8d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a910 <tcpip_thread+0x50>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a0e      	ldr	r2, [pc, #56]	@ (800a914 <tcpip_thread+0x54>)
 800a8dc:	6812      	ldr	r2, [r2, #0]
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a8e2:	f107 030c 	add.w	r3, r7, #12
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	480b      	ldr	r0, [pc, #44]	@ (800a918 <tcpip_thread+0x58>)
 800a8ea:	f7ff ffb3 	bl	800a854 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d106      	bne.n	800a902 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a8f4:	4b09      	ldr	r3, [pc, #36]	@ (800a91c <tcpip_thread+0x5c>)
 800a8f6:	2291      	movs	r2, #145	@ 0x91
 800a8f8:	4909      	ldr	r1, [pc, #36]	@ (800a920 <tcpip_thread+0x60>)
 800a8fa:	480a      	ldr	r0, [pc, #40]	@ (800a924 <tcpip_thread+0x64>)
 800a8fc:	f00e faea 	bl	8018ed4 <iprintf>
      continue;
 800a900:	e003      	b.n	800a90a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4618      	mov	r0, r3
 800a906:	f000 f80f 	bl	800a928 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a90a:	e7ea      	b.n	800a8e2 <tcpip_thread+0x22>
 800a90c:	2000d3bc 	.word	0x2000d3bc
 800a910:	2000d3b0 	.word	0x2000d3b0
 800a914:	2000d3b4 	.word	0x2000d3b4
 800a918:	2000d3b8 	.word	0x2000d3b8
 800a91c:	0801aeb4 	.word	0x0801aeb4
 800a920:	0801aee4 	.word	0x0801aee4
 800a924:	0801af04 	.word	0x0801af04

0800a928 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d026      	beq.n	800a986 <tcpip_thread_handle_msg+0x5e>
 800a938:	2b02      	cmp	r3, #2
 800a93a:	dc2b      	bgt.n	800a994 <tcpip_thread_handle_msg+0x6c>
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <tcpip_thread_handle_msg+0x1e>
 800a940:	2b01      	cmp	r3, #1
 800a942:	d015      	beq.n	800a970 <tcpip_thread_handle_msg+0x48>
 800a944:	e026      	b.n	800a994 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	6850      	ldr	r0, [r2, #4]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6892      	ldr	r2, [r2, #8]
 800a952:	4611      	mov	r1, r2
 800a954:	4798      	blx	r3
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	4618      	mov	r0, r3
 800a962:	f002 fb7d 	bl	800d060 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	2009      	movs	r0, #9
 800a96a:	f001 fcc9 	bl	800c300 <memp_free>
      break;
 800a96e:	e018      	b.n	800a9a2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6892      	ldr	r2, [r2, #8]
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	2008      	movs	r0, #8
 800a980:	f001 fcbe 	bl	800c300 <memp_free>
      break;
 800a984:	e00d      	b.n	800a9a2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6892      	ldr	r2, [r2, #8]
 800a98e:	4610      	mov	r0, r2
 800a990:	4798      	blx	r3
      break;
 800a992:	e006      	b.n	800a9a2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a994:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <tcpip_thread_handle_msg+0x84>)
 800a996:	22cf      	movs	r2, #207	@ 0xcf
 800a998:	4905      	ldr	r1, [pc, #20]	@ (800a9b0 <tcpip_thread_handle_msg+0x88>)
 800a99a:	4806      	ldr	r0, [pc, #24]	@ (800a9b4 <tcpip_thread_handle_msg+0x8c>)
 800a99c:	f00e fa9a 	bl	8018ed4 <iprintf>
      break;
 800a9a0:	bf00      	nop
  }
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0801aeb4 	.word	0x0801aeb4
 800a9b0:	0801aee4 	.word	0x0801aee4
 800a9b4:	0801af04 	.word	0x0801af04

0800a9b8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a9c4:	481a      	ldr	r0, [pc, #104]	@ (800aa30 <tcpip_inpkt+0x78>)
 800a9c6:	f00e f81e 	bl	8018a06 <sys_mbox_valid>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d105      	bne.n	800a9dc <tcpip_inpkt+0x24>
 800a9d0:	4b18      	ldr	r3, [pc, #96]	@ (800aa34 <tcpip_inpkt+0x7c>)
 800a9d2:	22fc      	movs	r2, #252	@ 0xfc
 800a9d4:	4918      	ldr	r1, [pc, #96]	@ (800aa38 <tcpip_inpkt+0x80>)
 800a9d6:	4819      	ldr	r0, [pc, #100]	@ (800aa3c <tcpip_inpkt+0x84>)
 800a9d8:	f00e fa7c 	bl	8018ed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a9dc:	2009      	movs	r0, #9
 800a9de:	f001 fc19 	bl	800c214 <memp_malloc>
 800a9e2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d102      	bne.n	800a9f0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ee:	e01a      	b.n	800aa26 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aa08:	6979      	ldr	r1, [r7, #20]
 800aa0a:	4809      	ldr	r0, [pc, #36]	@ (800aa30 <tcpip_inpkt+0x78>)
 800aa0c:	f00d ff86 	bl	801891c <sys_mbox_trypost>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d006      	beq.n	800aa24 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	2009      	movs	r0, #9
 800aa1a:	f001 fc71 	bl	800c300 <memp_free>
    return ERR_MEM;
 800aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa22:	e000      	b.n	800aa26 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aa24:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	2000d3b8 	.word	0x2000d3b8
 800aa34:	0801aeb4 	.word	0x0801aeb4
 800aa38:	0801af2c 	.word	0x0801af2c
 800aa3c:	0801af04 	.word	0x0801af04

0800aa40 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800aa50:	f003 0318 	and.w	r3, r3, #24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d006      	beq.n	800aa66 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800aa58:	4a08      	ldr	r2, [pc, #32]	@ (800aa7c <tcpip_input+0x3c>)
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff ffab 	bl	800a9b8 <tcpip_inpkt>
 800aa62:	4603      	mov	r3, r0
 800aa64:	e005      	b.n	800aa72 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800aa66:	4a06      	ldr	r2, [pc, #24]	@ (800aa80 <tcpip_input+0x40>)
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff ffa4 	bl	800a9b8 <tcpip_inpkt>
 800aa70:	4603      	mov	r3, r0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	08018709 	.word	0x08018709
 800aa80:	080175d5 	.word	0x080175d5

0800aa84 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa8e:	4819      	ldr	r0, [pc, #100]	@ (800aaf4 <tcpip_try_callback+0x70>)
 800aa90:	f00d ffb9 	bl	8018a06 <sys_mbox_valid>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <tcpip_try_callback+0x24>
 800aa9a:	4b17      	ldr	r3, [pc, #92]	@ (800aaf8 <tcpip_try_callback+0x74>)
 800aa9c:	f240 125d 	movw	r2, #349	@ 0x15d
 800aaa0:	4916      	ldr	r1, [pc, #88]	@ (800aafc <tcpip_try_callback+0x78>)
 800aaa2:	4817      	ldr	r0, [pc, #92]	@ (800ab00 <tcpip_try_callback+0x7c>)
 800aaa4:	f00e fa16 	bl	8018ed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800aaa8:	2008      	movs	r0, #8
 800aaaa:	f001 fbb3 	bl	800c214 <memp_malloc>
 800aaae:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800aab6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaba:	e017      	b.n	800aaec <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aace:	68f9      	ldr	r1, [r7, #12]
 800aad0:	4808      	ldr	r0, [pc, #32]	@ (800aaf4 <tcpip_try_callback+0x70>)
 800aad2:	f00d ff23 	bl	801891c <sys_mbox_trypost>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d006      	beq.n	800aaea <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800aadc:	68f9      	ldr	r1, [r7, #12]
 800aade:	2008      	movs	r0, #8
 800aae0:	f001 fc0e 	bl	800c300 <memp_free>
    return ERR_MEM;
 800aae4:	f04f 33ff 	mov.w	r3, #4294967295
 800aae8:	e000      	b.n	800aaec <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	2000d3b8 	.word	0x2000d3b8
 800aaf8:	0801aeb4 	.word	0x0801aeb4
 800aafc:	0801af2c 	.word	0x0801af2c
 800ab00:	0801af04 	.word	0x0801af04

0800ab04 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ab10:	4806      	ldr	r0, [pc, #24]	@ (800ab2c <tcpip_send_msg_wait_sem+0x28>)
 800ab12:	f00e f851 	bl	8018bb8 <sys_mutex_lock>
  fn(apimsg);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	68b8      	ldr	r0, [r7, #8]
 800ab1a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ab1c:	4803      	ldr	r0, [pc, #12]	@ (800ab2c <tcpip_send_msg_wait_sem+0x28>)
 800ab1e:	f00e f85a 	bl	8018bd6 <sys_mutex_unlock>
  return ERR_OK;
 800ab22:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	2000d3bc 	.word	0x2000d3bc

0800ab30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ab3a:	f000 fec1 	bl	800b8c0 <lwip_init>

  tcpip_init_done = initfunc;
 800ab3e:	4a17      	ldr	r2, [pc, #92]	@ (800ab9c <tcpip_init+0x6c>)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ab44:	4a16      	ldr	r2, [pc, #88]	@ (800aba0 <tcpip_init+0x70>)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ab4a:	2106      	movs	r1, #6
 800ab4c:	4815      	ldr	r0, [pc, #84]	@ (800aba4 <tcpip_init+0x74>)
 800ab4e:	f00d feb1 	bl	80188b4 <sys_mbox_new>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d006      	beq.n	800ab66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ab58:	4b13      	ldr	r3, [pc, #76]	@ (800aba8 <tcpip_init+0x78>)
 800ab5a:	f240 2261 	movw	r2, #609	@ 0x261
 800ab5e:	4913      	ldr	r1, [pc, #76]	@ (800abac <tcpip_init+0x7c>)
 800ab60:	4813      	ldr	r0, [pc, #76]	@ (800abb0 <tcpip_init+0x80>)
 800ab62:	f00e f9b7 	bl	8018ed4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ab66:	4813      	ldr	r0, [pc, #76]	@ (800abb4 <tcpip_init+0x84>)
 800ab68:	f00e f80a 	bl	8018b80 <sys_mutex_new>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d006      	beq.n	800ab80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ab72:	4b0d      	ldr	r3, [pc, #52]	@ (800aba8 <tcpip_init+0x78>)
 800ab74:	f240 2265 	movw	r2, #613	@ 0x265
 800ab78:	490f      	ldr	r1, [pc, #60]	@ (800abb8 <tcpip_init+0x88>)
 800ab7a:	480d      	ldr	r0, [pc, #52]	@ (800abb0 <tcpip_init+0x80>)
 800ab7c:	f00e f9aa 	bl	8018ed4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ab80:	2300      	movs	r3, #0
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab88:	2200      	movs	r2, #0
 800ab8a:	490c      	ldr	r1, [pc, #48]	@ (800abbc <tcpip_init+0x8c>)
 800ab8c:	480c      	ldr	r0, [pc, #48]	@ (800abc0 <tcpip_init+0x90>)
 800ab8e:	f00e f82f 	bl	8018bf0 <sys_thread_new>
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2000d3b0 	.word	0x2000d3b0
 800aba0:	2000d3b4 	.word	0x2000d3b4
 800aba4:	2000d3b8 	.word	0x2000d3b8
 800aba8:	0801aeb4 	.word	0x0801aeb4
 800abac:	0801af3c 	.word	0x0801af3c
 800abb0:	0801af04 	.word	0x0801af04
 800abb4:	2000d3bc 	.word	0x2000d3bc
 800abb8:	0801af60 	.word	0x0801af60
 800abbc:	0800a8c1 	.word	0x0800a8c1
 800abc0:	0801af84 	.word	0x0801af84

0800abc4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <fs_open+0x16>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d102      	bne.n	800abe0 <fs_open+0x1c>
    return ERR_ARG;
 800abda:	f06f 030f 	mvn.w	r3, #15
 800abde:	e028      	b.n	800ac32 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800abe0:	4b16      	ldr	r3, [pc, #88]	@ (800ac3c <fs_open+0x78>)
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e020      	b.n	800ac28 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	4619      	mov	r1, r3
 800abec:	6838      	ldr	r0, [r7, #0]
 800abee:	f7f5 faff 	bl	80001f0 <strcmp>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d114      	bne.n	800ac22 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	68da      	ldr	r2, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	7c1a      	ldrb	r2, [r3, #16]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e007      	b.n	800ac32 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1db      	bne.n	800abe6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ac2e:	f06f 0305 	mvn.w	r3, #5
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	08028020 	.word	0x08028020

0800ac40 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	1ad3      	subs	r3, r2, r3
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ac7a:	222c      	movs	r2, #44	@ 0x2c
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f00e f9c7 	bl	8019012 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ac92:	202c      	movs	r0, #44	@ 0x2c
 800ac94:	f001 f91a 	bl	800becc <mem_malloc>
 800ac98:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff ffe6 	bl	800ac72 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800aca6:	687b      	ldr	r3, [r7, #4]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff ffbb 	bl	800ac40 <fs_close>
    hs->handle = NULL;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a1b      	ldr	r3, [r3, #32]
 800acdc:	4618      	mov	r0, r3
 800acde:	f002 f9bf 	bl	800d060 <pbuf_free>
    hs->req = NULL;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d005      	beq.n	800ad0a <http_state_free+0x1a>
    http_state_eof(hs);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff ffd6 	bl	800acb0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 ff47 	bl	800bb98 <mem_free>
  }
}
 800ad0a:	bf00      	nop
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d106      	bne.n	800ad36 <http_write+0x22>
 800ad28:	4b2c      	ldr	r3, [pc, #176]	@ (800addc <http_write+0xc8>)
 800ad2a:	f240 2219 	movw	r2, #537	@ 0x219
 800ad2e:	492c      	ldr	r1, [pc, #176]	@ (800ade0 <http_write+0xcc>)
 800ad30:	482c      	ldr	r0, [pc, #176]	@ (800ade4 <http_write+0xd0>)
 800ad32:	f00e f8cf 	bl	8018ed4 <iprintf>
  len = *length;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ad3c:	8afb      	ldrh	r3, [r7, #22]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <http_write+0x32>
    return ERR_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	e045      	b.n	800add2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ad4c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ad4e:	8aba      	ldrh	r2, [r7, #20]
 800ad50:	8afb      	ldrh	r3, [r7, #22]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d201      	bcs.n	800ad5a <http_write+0x46>
    len = max_len;
 800ad56:	8abb      	ldrh	r3, [r7, #20]
 800ad58:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ad62:	8afa      	ldrh	r2, [r7, #22]
 800ad64:	8abb      	ldrh	r3, [r7, #20]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d901      	bls.n	800ad6e <http_write+0x5a>
    len = max_len;
 800ad6a:	8abb      	ldrh	r3, [r7, #20]
 800ad6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	8afa      	ldrh	r2, [r7, #22]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f007 f887 	bl	8011e88 <tcp_write>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ad7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	d10f      	bne.n	800ada8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ad98:	2b08      	cmp	r3, #8
 800ad9a:	d902      	bls.n	800ada2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	82fb      	strh	r3, [r7, #22]
 800ada0:	e002      	b.n	800ada8 <http_write+0x94>
      } else {
        len /= 2;
 800ada2:	8afb      	ldrh	r3, [r7, #22]
 800ada4:	085b      	lsrs	r3, r3, #1
 800ada6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ada8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d102      	bne.n	800adb8 <http_write+0xa4>
 800adb2:	8afb      	ldrh	r3, [r7, #22]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d8da      	bhi.n	800ad6e <http_write+0x5a>

  if (err == ERR_OK) {
 800adb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8afa      	ldrh	r2, [r7, #22]
 800adc4:	801a      	strh	r2, [r3, #0]
 800adc6:	e002      	b.n	800adce <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800adce:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	0801afd4 	.word	0x0801afd4
 800ade0:	0801b00c 	.word	0x0801b00c
 800ade4:	0801b01c 	.word	0x0801b01c

0800ade8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800adf6:	2100      	movs	r1, #0
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f004 f909 	bl	800f010 <tcp_arg>
  altcp_recv(pcb, NULL);
 800adfe:	2100      	movs	r1, #0
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f004 f917 	bl	800f034 <tcp_recv>
  altcp_err(pcb, NULL);
 800ae06:	2100      	movs	r1, #0
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f004 f957 	bl	800f0bc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2100      	movs	r1, #0
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f004 f98c 	bl	800f130 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ae18:	2100      	movs	r1, #0
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f004 f92c 	bl	800f078 <tcp_sent>
  if (hs != NULL) {
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ae26:	68b8      	ldr	r0, [r7, #8]
 800ae28:	f7ff ff62 	bl	800acf0 <http_state_free>
  }

  if (abort_conn) {
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d004      	beq.n	800ae3c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f002 ff14 	bl	800dc60 <tcp_abort>
    return ERR_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e00f      	b.n	800ae5c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f002 fdc9 	bl	800d9d4 <tcp_close>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ae46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d004      	beq.n	800ae58 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ae4e:	2204      	movs	r2, #4
 800ae50:	4904      	ldr	r1, [pc, #16]	@ (800ae64 <http_close_or_abort_conn+0x7c>)
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f004 f96c 	bl	800f130 <tcp_poll>
  }
  return err;
 800ae58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	0800b52b 	.word	0x0800b52b

0800ae68 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ae72:	2200      	movs	r2, #0
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff ffb6 	bl	800ade8 <http_close_or_abort_conn>
 800ae7c:	4603      	mov	r3, r0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff ffe8 	bl	800ae68 <http_close_conn>
  }
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d105      	bne.n	800aebe <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ffe6 	bl	800ae86 <http_eof>
    return 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e016      	b.n	800aeec <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff fec6 	bl	800ac54 <fs_bytes_left>
 800aec8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dc05      	bgt.n	800aedc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff ffd7 	bl	800ae86 <http_eof>
    return 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	e007      	b.n	800aeec <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800aedc:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <http_check_eof+0x54>)
 800aede:	f240 429d 	movw	r2, #1181	@ 0x49d
 800aee2:	4905      	ldr	r1, [pc, #20]	@ (800aef8 <http_check_eof+0x58>)
 800aee4:	4805      	ldr	r0, [pc, #20]	@ (800aefc <http_check_eof+0x5c>)
 800aee6:	f00d fff5 	bl	8018ed4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800aeea:	2301      	movs	r3, #1
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	0801afd4 	.word	0x0801afd4
 800aef8:	0801b044 	.word	0x0801b044
 800aefc:	0801b01c 	.word	0x0801b01c

0800af00 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af16:	4293      	cmp	r3, r2
 800af18:	d803      	bhi.n	800af22 <http_send_data_nonssi+0x22>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af1e:	b29b      	uxth	r3, r3
 800af20:	e001      	b.n	800af26 <http_send_data_nonssi+0x26>
 800af22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af26:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	6999      	ldr	r1, [r3, #24]
 800af2c:	f107 020c 	add.w	r2, r7, #12
 800af30:	2300      	movs	r3, #0
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff feee 	bl	800ad14 <http_write>
 800af38:	4603      	mov	r3, r0
 800af3a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800af3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10d      	bne.n	800af60 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800af44:	2301      	movs	r3, #1
 800af46:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	89ba      	ldrh	r2, [r7, #12]
 800af4e:	441a      	add	r2, r3
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af58:	89ba      	ldrh	r2, [r7, #12]
 800af5a:	1a9a      	subs	r2, r3, r2
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800af60:	7bfb      	ldrb	r3, [r7, #15]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <http_send+0x18>
    return 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	e025      	b.n	800afce <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af86:	2b00      	cmp	r3, #0
 800af88:	d108      	bne.n	800af9c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff ff87 	bl	800aea0 <http_check_eof>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <http_send+0x32>
      return 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	e018      	b.n	800afce <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ffae 	bl	800af00 <http_send_data_nonssi>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10d      	bne.n	800afcc <http_send+0x62>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fe4d 	bl	800ac54 <fs_bytes_left>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dc05      	bgt.n	800afcc <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff ff5f 	bl	800ae86 <http_eof>
    return 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	e000      	b.n	800afce <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	4a1c      	ldr	r2, [pc, #112]	@ (800b058 <http_get_404_file+0x80>)
 800afe6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4619      	mov	r1, r3
 800aff0:	4610      	mov	r0, r2
 800aff2:	f7ff fde7 	bl	800abc4 <fs_open>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800affa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d024      	beq.n	800b04c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	4a15      	ldr	r2, [pc, #84]	@ (800b05c <http_get_404_file+0x84>)
 800b006:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4619      	mov	r1, r3
 800b010:	4610      	mov	r0, r2
 800b012:	f7ff fdd7 	bl	800abc4 <fs_open>
 800b016:	4603      	mov	r3, r0
 800b018:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d014      	beq.n	800b04c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	4a0e      	ldr	r2, [pc, #56]	@ (800b060 <http_get_404_file+0x88>)
 800b026:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7ff fdc7 	bl	800abc4 <fs_open>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]
        return NULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	e000      	b.n	800b04e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b04c:	687b      	ldr	r3, [r7, #4]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	0801b07c 	.word	0x0801b07c
 800b05c:	0801b088 	.word	0x0801b088
 800b060:	0801b094 	.word	0x0801b094

0800b064 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08e      	sub	sp, #56	@ 0x38
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <http_parse_request+0x24>
 800b07a:	4b65      	ldr	r3, [pc, #404]	@ (800b210 <http_parse_request+0x1ac>)
 800b07c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800b080:	4964      	ldr	r1, [pc, #400]	@ (800b214 <http_parse_request+0x1b0>)
 800b082:	4865      	ldr	r0, [pc, #404]	@ (800b218 <http_parse_request+0x1b4>)
 800b084:	f00d ff26 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <http_parse_request+0x38>
 800b08e:	4b60      	ldr	r3, [pc, #384]	@ (800b210 <http_parse_request+0x1ac>)
 800b090:	f240 72af 	movw	r2, #1967	@ 0x7af
 800b094:	4961      	ldr	r1, [pc, #388]	@ (800b21c <http_parse_request+0x1b8>)
 800b096:	4860      	ldr	r0, [pc, #384]	@ (800b218 <http_parse_request+0x1b4>)
 800b098:	f00d ff1c 	bl	8018ed4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <http_parse_request+0x48>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b0ac:	f06f 0307 	mvn.w	r3, #7
 800b0b0:	e0a9      	b.n	800b206 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d103      	bne.n	800b0c2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0be:	621a      	str	r2, [r3, #32]
 800b0c0:	e005      	b.n	800b0ce <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 f897 	bl	800d1fc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b0ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0d0:	f002 f86c 	bl	800d1ac <pbuf_ref>

  if (hs->req->next != NULL) {
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d012      	beq.n	800b104 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	891b      	ldrh	r3, [r3, #8]
 800b0e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	bf28      	it	cs
 800b0ec:	4613      	movcs	r3, r2
 800b0ee:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	6a18      	ldr	r0, [r3, #32]
 800b0f4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	4949      	ldr	r1, [pc, #292]	@ (800b220 <http_parse_request+0x1bc>)
 800b0fa:	f002 f9b7 	bl	800d46c <pbuf_copy_partial>
    data = httpd_req_buf;
 800b0fe:	4b48      	ldr	r3, [pc, #288]	@ (800b220 <http_parse_request+0x1bc>)
 800b100:	637b      	str	r3, [r7, #52]	@ 0x34
 800b102:	e005      	b.n	800b110 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	895b      	ldrh	r3, [r3, #10]
 800b10e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b110:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b112:	2b06      	cmp	r3, #6
 800b114:	d962      	bls.n	800b1dc <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b116:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b118:	461a      	mov	r2, r3
 800b11a:	4942      	ldr	r1, [pc, #264]	@ (800b224 <http_parse_request+0x1c0>)
 800b11c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b11e:	f000 fb99 	bl	800b854 <lwip_strnstr>
 800b122:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d058      	beq.n	800b1dc <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b12e:	2204      	movs	r2, #4
 800b130:	493d      	ldr	r1, [pc, #244]	@ (800b228 <http_parse_request+0x1c4>)
 800b132:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b134:	f00d ff9d 	bl	8019072 <strncmp>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d116      	bne.n	800b16c <http_parse_request+0x108>
        sp1 = data + 3;
 800b13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b140:	3303      	adds	r3, #3
 800b142:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	3301      	adds	r3, #1
 800b158:	8b7a      	ldrh	r2, [r7, #26]
 800b15a:	4934      	ldr	r1, [pc, #208]	@ (800b22c <http_parse_request+0x1c8>)
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fb79 	bl	800b854 <lwip_strnstr>
 800b162:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b166:	2b00      	cmp	r3, #0
 800b168:	d111      	bne.n	800b18e <http_parse_request+0x12a>
 800b16a:	e006      	b.n	800b17a <http_parse_request+0x116>
        data[4] = 0;
 800b16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16e:	3304      	adds	r3, #4
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b174:	f06f 030f 	mvn.w	r3, #15
 800b178:	e045      	b.n	800b206 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	3301      	adds	r3, #1
 800b17e:	8b7a      	ldrh	r2, [r7, #26]
 800b180:	4928      	ldr	r1, [pc, #160]	@ (800b224 <http_parse_request+0x1c0>)
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fb66 	bl	800b854 <lwip_strnstr>
 800b188:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800b18a:	2301      	movs	r3, #1
 800b18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	3301      	adds	r3, #1
 800b192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d01e      	beq.n	800b1dc <http_parse_request+0x178>
 800b19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d91a      	bls.n	800b1dc <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b1a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4921      	ldr	r1, [pc, #132]	@ (800b230 <http_parse_request+0x1cc>)
 800b1ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b1ae:	f000 fb51 	bl	800b854 <lwip_strnstr>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d011      	beq.n	800b1dc <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b1c4:	8b3b      	ldrh	r3, [r7, #24]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b1ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1d0:	6979      	ldr	r1, [r7, #20]
 800b1d2:	68b8      	ldr	r0, [r7, #8]
 800b1d4:	f000 f82e 	bl	800b234 <http_find_file>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	e014      	b.n	800b206 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 ffcb 	bl	800d17c <pbuf_clen>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	891b      	ldrh	r3, [r3, #8]
 800b1f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1f4:	d205      	bcs.n	800b202 <http_parse_request+0x19e>
 800b1f6:	8a7b      	ldrh	r3, [r7, #18]
 800b1f8:	2b05      	cmp	r3, #5
 800b1fa:	d802      	bhi.n	800b202 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b1fc:	f06f 0304 	mvn.w	r3, #4
 800b200:	e001      	b.n	800b206 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b202:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b206:	4618      	mov	r0, r3
 800b208:	3738      	adds	r7, #56	@ 0x38
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	0801afd4 	.word	0x0801afd4
 800b214:	0801b0a0 	.word	0x0801b0a0
 800b218:	0801b01c 	.word	0x0801b01c
 800b21c:	0801b0ac 	.word	0x0801b0ac
 800b220:	2000d3c0 	.word	0x2000d3c0
 800b224:	0801b0b8 	.word	0x0801b0b8
 800b228:	0801b0bc 	.word	0x0801b0bc
 800b22c:	0801b0c4 	.word	0x0801b0c4
 800b230:	0801b0c8 	.word	0x0801b0c8

0800b234 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b092      	sub	sp, #72	@ 0x48
 800b238:	af02      	add	r7, sp, #8
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800b244:	2300      	movs	r3, #0
 800b246:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4618      	mov	r0, r3
 800b252:	f7f4 ffd7 	bl	8000204 <strlen>
 800b256:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d06b      	beq.n	800b336 <http_find_file+0x102>
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	3b01      	subs	r3, #1
 800b264:	4413      	add	r3, r2
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b2f      	cmp	r3, #47	@ 0x2f
 800b26a:	d164      	bne.n	800b336 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b26c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b26e:	4a53      	ldr	r2, [pc, #332]	@ (800b3bc <http_find_file+0x188>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d102      	bne.n	800b27a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	2b01      	cmp	r3, #1
 800b278:	d15d      	bne.n	800b336 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	3b01      	subs	r3, #1
 800b27e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b280:	bf28      	it	cs
 800b282:	233f      	movcs	r3, #63	@ 0x3f
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00a      	beq.n	800b2a2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b290:	4619      	mov	r1, r3
 800b292:	484a      	ldr	r0, [pc, #296]	@ (800b3bc <http_find_file+0x188>)
 800b294:	f00e f81f 	bl	80192d6 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b298:	4a48      	ldr	r2, [pc, #288]	@ (800b3bc <http_find_file+0x188>)
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	4413      	add	r3, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2a6:	e043      	b.n	800b330 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d028      	beq.n	800b300 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800b2b4:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01e      	beq.n	800b2fa <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b2bc:	4a40      	ldr	r2, [pc, #256]	@ (800b3c0 <http_find_file+0x18c>)
 800b2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7f4 ff9d 	bl	8000204 <strlen>
 800b2ca:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b2cc:	69fa      	ldr	r2, [r7, #28]
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	bf28      	it	cs
 800b2d4:	4613      	movcs	r3, r2
 800b2d6:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2da:	4a38      	ldr	r2, [pc, #224]	@ (800b3bc <http_find_file+0x188>)
 800b2dc:	1898      	adds	r0, r3, r2
 800b2de:	4a38      	ldr	r2, [pc, #224]	@ (800b3c0 <http_find_file+0x18c>)
 800b2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	f00d fff4 	bl	80192d6 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	4a31      	ldr	r2, [pc, #196]	@ (800b3bc <http_find_file+0x188>)
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b2fa:	4b30      	ldr	r3, [pc, #192]	@ (800b3bc <http_find_file+0x188>)
 800b2fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2fe:	e004      	b.n	800b30a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b300:	4a2f      	ldr	r2, [pc, #188]	@ (800b3c0 <http_find_file+0x18c>)
 800b302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b308:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b30e:	4618      	mov	r0, r3
 800b310:	f7ff fc58 	bl	800abc4 <fs_open>
 800b314:	4603      	mov	r3, r0
 800b316:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <http_find_file+0xf6>
        uri = file_name;
 800b320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b322:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b328:	e005      	b.n	800b336 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32c:	3301      	adds	r3, #1
 800b32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b332:	2b04      	cmp	r3, #4
 800b334:	d9b8      	bls.n	800b2a8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d124      	bne.n	800b386 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	213f      	movs	r1, #63	@ 0x3f
 800b340:	4618      	mov	r0, r3
 800b342:	f00d fe89 	bl	8019058 <strchr>
 800b346:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800b348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d005      	beq.n	800b35a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
      params++;
 800b354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b356:	3301      	adds	r3, #1
 800b358:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	4611      	mov	r1, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fc2f 	bl	800abc4 <fs_open>
 800b366:	4603      	mov	r3, r0
 800b368:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <http_find_file+0x144>
      file = &hs->file_handle;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b376:	e006      	b.n	800b386 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b378:	f107 0308 	add.w	r3, r7, #8
 800b37c:	4619      	mov	r1, r3
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f7ff fe2a 	bl	800afd8 <http_get_404_file>
 800b384:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d106      	bne.n	800b39a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b38c:	f107 0308 	add.w	r3, r7, #8
 800b390:	4619      	mov	r1, r3
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fe20 	bl	800afd8 <http_get_404_file>
 800b398:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f000 f809 	bl	800b3c4 <http_init_file>
 800b3b2:	4603      	mov	r3, r0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3740      	adds	r7, #64	@ 0x40
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	2000d7c0 	.word	0x2000d7c0
 800b3c0:	08028034 	.word	0x08028034

0800b3c4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d05c      	beq.n	800b492 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <http_init_file+0x2a>
 800b3e0:	4b35      	ldr	r3, [pc, #212]	@ (800b4b8 <http_init_file+0xf4>)
 800b3e2:	f640 120b 	movw	r2, #2315	@ 0x90b
 800b3e6:	4935      	ldr	r1, [pc, #212]	@ (800b4bc <http_init_file+0xf8>)
 800b3e8:	4835      	ldr	r0, [pc, #212]	@ (800b4c0 <http_init_file+0xfc>)
 800b3ea:	f00d fd73 	bl	8018ed4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	da06      	bge.n	800b412 <http_init_file+0x4e>
 800b404:	4b2c      	ldr	r3, [pc, #176]	@ (800b4b8 <http_init_file+0xf4>)
 800b406:	f640 1234 	movw	r2, #2356	@ 0x934
 800b40a:	492e      	ldr	r1, [pc, #184]	@ (800b4c4 <http_init_file+0x100>)
 800b40c:	482c      	ldr	r0, [pc, #176]	@ (800b4c0 <http_init_file+0xfc>)
 800b40e:	f00d fd61 	bl	8018ed4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	461a      	mov	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	7c1b      	ldrb	r3, [r3, #16]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <http_init_file+0x7c>
 800b432:	4b21      	ldr	r3, [pc, #132]	@ (800b4b8 <http_init_file+0xf4>)
 800b434:	f640 1243 	movw	r2, #2371	@ 0x943
 800b438:	4923      	ldr	r1, [pc, #140]	@ (800b4c8 <http_init_file+0x104>)
 800b43a:	4821      	ldr	r0, [pc, #132]	@ (800b4c0 <http_init_file+0xfc>)
 800b43c:	f00d fd4a 	bl	8018ed4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d032      	beq.n	800b4ac <http_init_file+0xe8>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	7c1b      	ldrb	r3, [r3, #16]
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	2b00      	cmp	r3, #0
 800b452:	d02b      	beq.n	800b4ac <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6998      	ldr	r0, [r3, #24]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45c:	461a      	mov	r2, r3
 800b45e:	491b      	ldr	r1, [pc, #108]	@ (800b4cc <http_init_file+0x108>)
 800b460:	f000 f9f8 	bl	800b854 <lwip_strnstr>
 800b464:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01f      	beq.n	800b4ac <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	1d1a      	adds	r2, r3, #4
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	699a      	ldr	r2, [r3, #24]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	441a      	add	r2, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	1ad2      	subs	r2, r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b490:	e00c      	b.n	800b4ac <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	0801afd4 	.word	0x0801afd4
 800b4bc:	0801b0d0 	.word	0x0801b0d0
 800b4c0:	0801b01c 	.word	0x0801b01c
 800b4c4:	0801b0e4 	.word	0x0801b0e4
 800b4c8:	0801b104 	.word	0x0801b104
 800b4cc:	0801b0c8 	.word	0x0801b0c8

0800b4d0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <http_err+0x1c>
    http_state_free(hs);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fc02 	bl	800acf0 <http_state_free>
  }
}
 800b4ec:	bf00      	nop
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	4613      	mov	r3, r2
 800b500:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <http_sent+0x1c>
    return ERR_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	e008      	b.n	800b522 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800b518:	6979      	ldr	r1, [r7, #20]
 800b51a:	68b8      	ldr	r0, [r7, #8]
 800b51c:	f7ff fd25 	bl	800af6a <http_send>

  return ERR_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d107      	bne.n	800b54e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b53e:	2100      	movs	r1, #0
 800b540:	6838      	ldr	r0, [r7, #0]
 800b542:	f7ff fc91 	bl	800ae68 <http_close_conn>
 800b546:	4603      	mov	r3, r0
 800b548:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e021      	b.n	800b592 <http_poll+0x68>
  } else {
    hs->retries++;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b554:	3301      	adds	r3, #1
 800b556:	b2da      	uxtb	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b564:	2b04      	cmp	r3, #4
 800b566:	d105      	bne.n	800b574 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b568:	68f9      	ldr	r1, [r7, #12]
 800b56a:	6838      	ldr	r0, [r7, #0]
 800b56c:	f7ff fc7c 	bl	800ae68 <http_close_conn>
      return ERR_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	e00e      	b.n	800b592 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	695b      	ldr	r3, [r3, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b57c:	68f9      	ldr	r1, [r7, #12]
 800b57e:	6838      	ldr	r0, [r7, #0]
 800b580:	f7ff fcf3 	bl	800af6a <http_send>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b58a:	6838      	ldr	r0, [r7, #0]
 800b58c:	f007 fa66 	bl	8012a5c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b5ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d105      	bne.n	800b5c2 <http_recv+0x26>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <http_recv+0x26>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d111      	bne.n	800b5e6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d008      	beq.n	800b5da <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	891b      	ldrh	r3, [r3, #8]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	68b8      	ldr	r0, [r7, #8]
 800b5d0:	f002 fd20 	bl	800e014 <tcp_recved>
      pbuf_free(p);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 fd43 	bl	800d060 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b5da:	6979      	ldr	r1, [r7, #20]
 800b5dc:	68b8      	ldr	r0, [r7, #8]
 800b5de:	f7ff fc43 	bl	800ae68 <http_close_conn>
    return ERR_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e055      	b.n	800b692 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	891b      	ldrh	r3, [r3, #8]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	68b8      	ldr	r0, [r7, #8]
 800b5ee:	f002 fd11 	bl	800e014 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d147      	bne.n	800b68a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	6979      	ldr	r1, [r7, #20]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff fd30 	bl	800b064 <http_parse_request>
 800b604:	4603      	mov	r3, r0
 800b606:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d015      	beq.n	800b63c <http_recv+0xa0>
 800b610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b614:	f113 0f05 	cmn.w	r3, #5
 800b618:	d010      	beq.n	800b63c <http_recv+0xa0>
 800b61a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b61e:	f113 0f10 	cmn.w	r3, #16
 800b622:	d00b      	beq.n	800b63c <http_recv+0xa0>
 800b624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b628:	f113 0f08 	cmn.w	r3, #8
 800b62c:	d006      	beq.n	800b63c <http_recv+0xa0>
 800b62e:	4b1b      	ldr	r3, [pc, #108]	@ (800b69c <http_recv+0x100>)
 800b630:	f640 2204 	movw	r2, #2564	@ 0xa04
 800b634:	491a      	ldr	r1, [pc, #104]	@ (800b6a0 <http_recv+0x104>)
 800b636:	481b      	ldr	r0, [pc, #108]	@ (800b6a4 <http_recv+0x108>)
 800b638:	f00d fc4c 	bl	8018ed4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b63c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b640:	f113 0f05 	cmn.w	r3, #5
 800b644:	d00b      	beq.n	800b65e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d007      	beq.n	800b65e <http_recv+0xc2>
          pbuf_free(hs->req);
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	4618      	mov	r0, r3
 800b654:	f001 fd04 	bl	800d060 <pbuf_free>
          hs->req = NULL;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2200      	movs	r2, #0
 800b65c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 fcfe 	bl	800d060 <pbuf_free>
      if (parsed == ERR_OK) {
 800b664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d104      	bne.n	800b676 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b66c:	6979      	ldr	r1, [r7, #20]
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff fc7b 	bl	800af6a <http_send>
 800b674:	e00c      	b.n	800b690 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b67a:	f113 0f10 	cmn.w	r3, #16
 800b67e:	d107      	bne.n	800b690 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b680:	6979      	ldr	r1, [r7, #20]
 800b682:	68b8      	ldr	r0, [r7, #8]
 800b684:	f7ff fbf0 	bl	800ae68 <http_close_conn>
 800b688:	e002      	b.n	800b690 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f001 fce8 	bl	800d060 <pbuf_free>
    }
  }
  return ERR_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	0801afd4 	.word	0x0801afd4
 800b6a0:	0801b130 	.word	0x0801b130
 800b6a4:	0801b01c 	.word	0x0801b01c

0800b6a8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b6b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <http_accept+0x1c>
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <http_accept+0x22>
    return ERR_VAL;
 800b6c4:	f06f 0305 	mvn.w	r3, #5
 800b6c8:	e025      	b.n	800b716 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	68b8      	ldr	r0, [r7, #8]
 800b6ce:	f003 fa9f 	bl	800ec10 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b6d2:	f7ff fadb 	bl	800ac8c <http_state_alloc>
 800b6d6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b6de:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e2:	e018      	b.n	800b716 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b6ea:	6979      	ldr	r1, [r7, #20]
 800b6ec:	68b8      	ldr	r0, [r7, #8]
 800b6ee:	f003 fc8f 	bl	800f010 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b6f2:	490b      	ldr	r1, [pc, #44]	@ (800b720 <http_accept+0x78>)
 800b6f4:	68b8      	ldr	r0, [r7, #8]
 800b6f6:	f003 fc9d 	bl	800f034 <tcp_recv>
  altcp_err(pcb, http_err);
 800b6fa:	490a      	ldr	r1, [pc, #40]	@ (800b724 <http_accept+0x7c>)
 800b6fc:	68b8      	ldr	r0, [r7, #8]
 800b6fe:	f003 fcdd 	bl	800f0bc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b702:	2204      	movs	r2, #4
 800b704:	4908      	ldr	r1, [pc, #32]	@ (800b728 <http_accept+0x80>)
 800b706:	68b8      	ldr	r0, [r7, #8]
 800b708:	f003 fd12 	bl	800f130 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b70c:	4907      	ldr	r1, [pc, #28]	@ (800b72c <http_accept+0x84>)
 800b70e:	68b8      	ldr	r0, [r7, #8]
 800b710:	f003 fcb2 	bl	800f078 <tcp_sent>

  return ERR_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	0800b59d 	.word	0x0800b59d
 800b724:	0800b4d1 	.word	0x0800b4d1
 800b728:	0800b52b 	.word	0x0800b52b
 800b72c:	0800b4f5 	.word	0x0800b4f5

0800b730 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d029      	beq.n	800b796 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b742:	2101      	movs	r1, #1
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f003 fa63 	bl	800ec10 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b74a:	887b      	ldrh	r3, [r7, #2]
 800b74c:	461a      	mov	r2, r3
 800b74e:	4914      	ldr	r1, [pc, #80]	@ (800b7a0 <httpd_init_pcb+0x70>)
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f002 fa91 	bl	800dc78 <tcp_bind>
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d006      	beq.n	800b770 <httpd_init_pcb+0x40>
 800b762:	4b10      	ldr	r3, [pc, #64]	@ (800b7a4 <httpd_init_pcb+0x74>)
 800b764:	f640 2257 	movw	r2, #2647	@ 0xa57
 800b768:	490f      	ldr	r1, [pc, #60]	@ (800b7a8 <httpd_init_pcb+0x78>)
 800b76a:	4810      	ldr	r0, [pc, #64]	@ (800b7ac <httpd_init_pcb+0x7c>)
 800b76c:	f00d fbb2 	bl	8018ed4 <iprintf>
    pcb = altcp_listen(pcb);
 800b770:	21ff      	movs	r1, #255	@ 0xff
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f002 fb38 	bl	800dde8 <tcp_listen_with_backlog>
 800b778:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <httpd_init_pcb+0x5e>
 800b780:	4b08      	ldr	r3, [pc, #32]	@ (800b7a4 <httpd_init_pcb+0x74>)
 800b782:	f640 2259 	movw	r2, #2649	@ 0xa59
 800b786:	490a      	ldr	r1, [pc, #40]	@ (800b7b0 <httpd_init_pcb+0x80>)
 800b788:	4808      	ldr	r0, [pc, #32]	@ (800b7ac <httpd_init_pcb+0x7c>)
 800b78a:	f00d fba3 	bl	8018ed4 <iprintf>
    altcp_accept(pcb, http_accept);
 800b78e:	4909      	ldr	r1, [pc, #36]	@ (800b7b4 <httpd_init_pcb+0x84>)
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f003 fcb5 	bl	800f100 <tcp_accept>
  }
}
 800b796:	bf00      	nop
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	0802817c 	.word	0x0802817c
 800b7a4:	0801afd4 	.word	0x0801afd4
 800b7a8:	0801b15c 	.word	0x0801b15c
 800b7ac:	0801b01c 	.word	0x0801b01c
 800b7b0:	0801b178 	.word	0x0801b178
 800b7b4:	0800b6a9 	.word	0x0800b6a9

0800b7b8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b7be:	202e      	movs	r0, #46	@ 0x2e
 800b7c0:	f003 fc18 	bl	800eff4 <tcp_new_ip_type>
 800b7c4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d106      	bne.n	800b7da <httpd_init+0x22>
 800b7cc:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <httpd_init+0x34>)
 800b7ce:	f640 2272 	movw	r2, #2674	@ 0xa72
 800b7d2:	4907      	ldr	r1, [pc, #28]	@ (800b7f0 <httpd_init+0x38>)
 800b7d4:	4807      	ldr	r0, [pc, #28]	@ (800b7f4 <httpd_init+0x3c>)
 800b7d6:	f00d fb7d 	bl	8018ed4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b7da:	2150      	movs	r1, #80	@ 0x50
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ffa7 	bl	800b730 <httpd_init_pcb>
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	0801afd4 	.word	0x0801afd4
 800b7f0:	0801b198 	.word	0x0801b198
 800b7f4:	0801b01c 	.word	0x0801b01c

0800b7f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b802:	88fb      	ldrh	r3, [r7, #6]
 800b804:	021b      	lsls	r3, r3, #8
 800b806:	b21a      	sxth	r2, r3
 800b808:	88fb      	ldrh	r3, [r7, #6]
 800b80a:	0a1b      	lsrs	r3, r3, #8
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	b21b      	sxth	r3, r3
 800b810:	4313      	orrs	r3, r2
 800b812:	b21b      	sxth	r3, r3
 800b814:	b29b      	uxth	r3, r3
}
 800b816:	4618      	mov	r0, r3
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b822:	b480      	push	{r7}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	061a      	lsls	r2, r3, #24
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b836:	431a      	orrs	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	0a1b      	lsrs	r3, r3, #8
 800b83c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b840:	431a      	orrs	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	0e1b      	lsrs	r3, r3, #24
 800b846:	4313      	orrs	r3, r2
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b860:	68b8      	ldr	r0, [r7, #8]
 800b862:	f7f4 fccf 	bl	8000204 <strlen>
 800b866:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	e022      	b.n	800b8b8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	617b      	str	r3, [r7, #20]
 800b876:	e012      	b.n	800b89e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d109      	bne.n	800b898 <lwip_strnstr+0x44>
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	68b9      	ldr	r1, [r7, #8]
 800b888:	6978      	ldr	r0, [r7, #20]
 800b88a:	f00d fbf2 	bl	8019072 <strncmp>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	e00f      	b.n	800b8b8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	3301      	adds	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d007      	beq.n	800b8b6 <lwip_strnstr+0x62>
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	441a      	add	r2, r3
 800b8ac:	68f9      	ldr	r1, [r7, #12]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	440b      	add	r3, r1
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d9e0      	bls.n	800b878 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b8ca:	f00d f94b 	bl	8018b64 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b8ce:	f000 f8d5 	bl	800ba7c <mem_init>
  memp_init();
 800b8d2:	f000 fc31 	bl	800c138 <memp_init>
  pbuf_init();
  netif_init();
 800b8d6:	f000 fd3d 	bl	800c354 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b8da:	f008 f9af 	bl	8013c3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b8de:	f001 fe69 	bl	800d5b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b8e2:	f008 f8f1 	bl	8013ac8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b8fa:	4b05      	ldr	r3, [pc, #20]	@ (800b910 <ptr_to_mem+0x20>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	88fb      	ldrh	r3, [r7, #6]
 800b900:	4413      	add	r3, r2
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	2000de6c 	.word	0x2000de6c

0800b914 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b91c:	4b05      	ldr	r3, [pc, #20]	@ (800b934 <mem_to_ptr+0x20>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	b29b      	uxth	r3, r3
}
 800b926:	4618      	mov	r0, r3
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	2000de6c 	.word	0x2000de6c

0800b938 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b940:	4b45      	ldr	r3, [pc, #276]	@ (800ba58 <plug_holes+0x120>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	429a      	cmp	r2, r3
 800b948:	d206      	bcs.n	800b958 <plug_holes+0x20>
 800b94a:	4b44      	ldr	r3, [pc, #272]	@ (800ba5c <plug_holes+0x124>)
 800b94c:	f240 12df 	movw	r2, #479	@ 0x1df
 800b950:	4943      	ldr	r1, [pc, #268]	@ (800ba60 <plug_holes+0x128>)
 800b952:	4844      	ldr	r0, [pc, #272]	@ (800ba64 <plug_holes+0x12c>)
 800b954:	f00d fabe 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b958:	4b43      	ldr	r3, [pc, #268]	@ (800ba68 <plug_holes+0x130>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d306      	bcc.n	800b970 <plug_holes+0x38>
 800b962:	4b3e      	ldr	r3, [pc, #248]	@ (800ba5c <plug_holes+0x124>)
 800b964:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b968:	4940      	ldr	r1, [pc, #256]	@ (800ba6c <plug_holes+0x134>)
 800b96a:	483e      	ldr	r0, [pc, #248]	@ (800ba64 <plug_holes+0x12c>)
 800b96c:	f00d fab2 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	791b      	ldrb	r3, [r3, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d006      	beq.n	800b986 <plug_holes+0x4e>
 800b978:	4b38      	ldr	r3, [pc, #224]	@ (800ba5c <plug_holes+0x124>)
 800b97a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b97e:	493c      	ldr	r1, [pc, #240]	@ (800ba70 <plug_holes+0x138>)
 800b980:	4838      	ldr	r0, [pc, #224]	@ (800ba64 <plug_holes+0x12c>)
 800b982:	f00d faa7 	bl	8018ed4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b98e:	d906      	bls.n	800b99e <plug_holes+0x66>
 800b990:	4b32      	ldr	r3, [pc, #200]	@ (800ba5c <plug_holes+0x124>)
 800b992:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b996:	4937      	ldr	r1, [pc, #220]	@ (800ba74 <plug_holes+0x13c>)
 800b998:	4832      	ldr	r0, [pc, #200]	@ (800ba64 <plug_holes+0x12c>)
 800b99a:	f00d fa9b 	bl	8018ed4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff ffa4 	bl	800b8f0 <ptr_to_mem>
 800b9a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d024      	beq.n	800b9fc <plug_holes+0xc4>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	791b      	ldrb	r3, [r3, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d120      	bne.n	800b9fc <plug_holes+0xc4>
 800b9ba:	4b2b      	ldr	r3, [pc, #172]	@ (800ba68 <plug_holes+0x130>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d01b      	beq.n	800b9fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b9c4:	4b2c      	ldr	r3, [pc, #176]	@ (800ba78 <plug_holes+0x140>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d102      	bne.n	800b9d4 <plug_holes+0x9c>
      lfree = mem;
 800b9ce:	4a2a      	ldr	r2, [pc, #168]	@ (800ba78 <plug_holes+0x140>)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	881a      	ldrh	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b9e4:	d00a      	beq.n	800b9fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff ff80 	bl	800b8f0 <ptr_to_mem>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff ff8e 	bl	800b914 <mem_to_ptr>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	885b      	ldrh	r3, [r3, #2]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff ff75 	bl	800b8f0 <ptr_to_mem>
 800ba06:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d01f      	beq.n	800ba50 <plug_holes+0x118>
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	791b      	ldrb	r3, [r3, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d11b      	bne.n	800ba50 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba18:	4b17      	ldr	r3, [pc, #92]	@ (800ba78 <plug_holes+0x140>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d102      	bne.n	800ba28 <plug_holes+0xf0>
      lfree = pmem;
 800ba22:	4a15      	ldr	r2, [pc, #84]	@ (800ba78 <plug_holes+0x140>)
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	881a      	ldrh	r2, [r3, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba38:	d00a      	beq.n	800ba50 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff ff56 	bl	800b8f0 <ptr_to_mem>
 800ba44:	4604      	mov	r4, r0
 800ba46:	68b8      	ldr	r0, [r7, #8]
 800ba48:	f7ff ff64 	bl	800b914 <mem_to_ptr>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba50:	bf00      	nop
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd90      	pop	{r4, r7, pc}
 800ba58:	2000de6c 	.word	0x2000de6c
 800ba5c:	0801b1b4 	.word	0x0801b1b4
 800ba60:	0801b1e4 	.word	0x0801b1e4
 800ba64:	0801b1fc 	.word	0x0801b1fc
 800ba68:	2000de70 	.word	0x2000de70
 800ba6c:	0801b224 	.word	0x0801b224
 800ba70:	0801b240 	.word	0x0801b240
 800ba74:	0801b25c 	.word	0x0801b25c
 800ba78:	2000de78 	.word	0x2000de78

0800ba7c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba82:	4b1f      	ldr	r3, [pc, #124]	@ (800bb00 <mem_init+0x84>)
 800ba84:	3303      	adds	r3, #3
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4b1d      	ldr	r3, [pc, #116]	@ (800bb04 <mem_init+0x88>)
 800ba8e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba90:	4b1c      	ldr	r3, [pc, #112]	@ (800bb04 <mem_init+0x88>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800ba9c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800baaa:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800baae:	f7ff ff1f 	bl	800b8f0 <ptr_to_mem>
 800bab2:	4603      	mov	r3, r0
 800bab4:	4a14      	ldr	r2, [pc, #80]	@ (800bb08 <mem_init+0x8c>)
 800bab6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bab8:	4b13      	ldr	r3, [pc, #76]	@ (800bb08 <mem_init+0x8c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2201      	movs	r2, #1
 800babe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bac0:	4b11      	ldr	r3, [pc, #68]	@ (800bb08 <mem_init+0x8c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800bac8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800baca:	4b0f      	ldr	r3, [pc, #60]	@ (800bb08 <mem_init+0x8c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800bad2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bad4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb04 <mem_init+0x88>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a0c      	ldr	r2, [pc, #48]	@ (800bb0c <mem_init+0x90>)
 800bada:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800badc:	480c      	ldr	r0, [pc, #48]	@ (800bb10 <mem_init+0x94>)
 800bade:	f00d f84f 	bl	8018b80 <sys_mutex_new>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d006      	beq.n	800baf6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bae8:	4b0a      	ldr	r3, [pc, #40]	@ (800bb14 <mem_init+0x98>)
 800baea:	f240 221f 	movw	r2, #543	@ 0x21f
 800baee:	490a      	ldr	r1, [pc, #40]	@ (800bb18 <mem_init+0x9c>)
 800baf0:	480a      	ldr	r0, [pc, #40]	@ (800bb1c <mem_init+0xa0>)
 800baf2:	f00d f9ef 	bl	8018ed4 <iprintf>
  }
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	2000d818 	.word	0x2000d818
 800bb04:	2000de6c 	.word	0x2000de6c
 800bb08:	2000de70 	.word	0x2000de70
 800bb0c:	2000de78 	.word	0x2000de78
 800bb10:	2000de74 	.word	0x2000de74
 800bb14:	0801b1b4 	.word	0x0801b1b4
 800bb18:	0801b288 	.word	0x0801b288
 800bb1c:	0801b1fc 	.word	0x0801b1fc

0800bb20 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff fef3 	bl	800b914 <mem_to_ptr>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff feda 	bl	800b8f0 <ptr_to_mem>
 800bb3c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	885b      	ldrh	r3, [r3, #2]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fed4 	bl	800b8f0 <ptr_to_mem>
 800bb48:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bb52:	d818      	bhi.n	800bb86 <mem_link_valid+0x66>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	885b      	ldrh	r3, [r3, #2]
 800bb58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bb5c:	d813      	bhi.n	800bb86 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb62:	8afa      	ldrh	r2, [r7, #22]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d004      	beq.n	800bb72 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	8afa      	ldrh	r2, [r7, #22]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d109      	bne.n	800bb86 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb72:	4b08      	ldr	r3, [pc, #32]	@ (800bb94 <mem_link_valid+0x74>)
 800bb74:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d006      	beq.n	800bb8a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	885b      	ldrh	r3, [r3, #2]
 800bb80:	8afa      	ldrh	r2, [r7, #22]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d001      	beq.n	800bb8a <mem_link_valid+0x6a>
    return 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e000      	b.n	800bb8c <mem_link_valid+0x6c>
  }
  return 1;
 800bb8a:	2301      	movs	r3, #1
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	2000de70 	.word	0x2000de70

0800bb98 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d070      	beq.n	800bc88 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f003 0303 	and.w	r3, r3, #3
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00d      	beq.n	800bbcc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bbb0:	4b37      	ldr	r3, [pc, #220]	@ (800bc90 <mem_free+0xf8>)
 800bbb2:	f240 2273 	movw	r2, #627	@ 0x273
 800bbb6:	4937      	ldr	r1, [pc, #220]	@ (800bc94 <mem_free+0xfc>)
 800bbb8:	4837      	ldr	r0, [pc, #220]	@ (800bc98 <mem_free+0x100>)
 800bbba:	f00d f98b 	bl	8018ed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbbe:	f00d f83d 	bl	8018c3c <sys_arch_protect>
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f00d f847 	bl	8018c58 <sys_arch_unprotect>
    return;
 800bbca:	e05e      	b.n	800bc8a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3b08      	subs	r3, #8
 800bbd0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bbd2:	4b32      	ldr	r3, [pc, #200]	@ (800bc9c <mem_free+0x104>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69fa      	ldr	r2, [r7, #28]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d306      	bcc.n	800bbea <mem_free+0x52>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f103 020c 	add.w	r2, r3, #12
 800bbe2:	4b2f      	ldr	r3, [pc, #188]	@ (800bca0 <mem_free+0x108>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d90d      	bls.n	800bc06 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bbea:	4b29      	ldr	r3, [pc, #164]	@ (800bc90 <mem_free+0xf8>)
 800bbec:	f240 227f 	movw	r2, #639	@ 0x27f
 800bbf0:	492c      	ldr	r1, [pc, #176]	@ (800bca4 <mem_free+0x10c>)
 800bbf2:	4829      	ldr	r0, [pc, #164]	@ (800bc98 <mem_free+0x100>)
 800bbf4:	f00d f96e 	bl	8018ed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbf8:	f00d f820 	bl	8018c3c <sys_arch_protect>
 800bbfc:	6138      	str	r0, [r7, #16]
 800bbfe:	6938      	ldr	r0, [r7, #16]
 800bc00:	f00d f82a 	bl	8018c58 <sys_arch_unprotect>
    return;
 800bc04:	e041      	b.n	800bc8a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc06:	4828      	ldr	r0, [pc, #160]	@ (800bca8 <mem_free+0x110>)
 800bc08:	f00c ffd6 	bl	8018bb8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	791b      	ldrb	r3, [r3, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d110      	bne.n	800bc36 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc14:	4b1e      	ldr	r3, [pc, #120]	@ (800bc90 <mem_free+0xf8>)
 800bc16:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800bc1a:	4924      	ldr	r1, [pc, #144]	@ (800bcac <mem_free+0x114>)
 800bc1c:	481e      	ldr	r0, [pc, #120]	@ (800bc98 <mem_free+0x100>)
 800bc1e:	f00d f959 	bl	8018ed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc22:	4821      	ldr	r0, [pc, #132]	@ (800bca8 <mem_free+0x110>)
 800bc24:	f00c ffd7 	bl	8018bd6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc28:	f00d f808 	bl	8018c3c <sys_arch_protect>
 800bc2c:	6178      	str	r0, [r7, #20]
 800bc2e:	6978      	ldr	r0, [r7, #20]
 800bc30:	f00d f812 	bl	8018c58 <sys_arch_unprotect>
    return;
 800bc34:	e029      	b.n	800bc8a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bc36:	69f8      	ldr	r0, [r7, #28]
 800bc38:	f7ff ff72 	bl	800bb20 <mem_link_valid>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d110      	bne.n	800bc64 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc42:	4b13      	ldr	r3, [pc, #76]	@ (800bc90 <mem_free+0xf8>)
 800bc44:	f240 2295 	movw	r2, #661	@ 0x295
 800bc48:	4919      	ldr	r1, [pc, #100]	@ (800bcb0 <mem_free+0x118>)
 800bc4a:	4813      	ldr	r0, [pc, #76]	@ (800bc98 <mem_free+0x100>)
 800bc4c:	f00d f942 	bl	8018ed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc50:	4815      	ldr	r0, [pc, #84]	@ (800bca8 <mem_free+0x110>)
 800bc52:	f00c ffc0 	bl	8018bd6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc56:	f00c fff1 	bl	8018c3c <sys_arch_protect>
 800bc5a:	61b8      	str	r0, [r7, #24]
 800bc5c:	69b8      	ldr	r0, [r7, #24]
 800bc5e:	f00c fffb 	bl	8018c58 <sys_arch_unprotect>
    return;
 800bc62:	e012      	b.n	800bc8a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	2200      	movs	r2, #0
 800bc68:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bc6a:	4b12      	ldr	r3, [pc, #72]	@ (800bcb4 <mem_free+0x11c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	69fa      	ldr	r2, [r7, #28]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d202      	bcs.n	800bc7a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc74:	4a0f      	ldr	r2, [pc, #60]	@ (800bcb4 <mem_free+0x11c>)
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc7a:	69f8      	ldr	r0, [r7, #28]
 800bc7c:	f7ff fe5c 	bl	800b938 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc80:	4809      	ldr	r0, [pc, #36]	@ (800bca8 <mem_free+0x110>)
 800bc82:	f00c ffa8 	bl	8018bd6 <sys_mutex_unlock>
 800bc86:	e000      	b.n	800bc8a <mem_free+0xf2>
    return;
 800bc88:	bf00      	nop
}
 800bc8a:	3720      	adds	r7, #32
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	0801b1b4 	.word	0x0801b1b4
 800bc94:	0801b2a4 	.word	0x0801b2a4
 800bc98:	0801b1fc 	.word	0x0801b1fc
 800bc9c:	2000de6c 	.word	0x2000de6c
 800bca0:	2000de70 	.word	0x2000de70
 800bca4:	0801b2c8 	.word	0x0801b2c8
 800bca8:	2000de74 	.word	0x2000de74
 800bcac:	0801b2e4 	.word	0x0801b2e4
 800bcb0:	0801b30c 	.word	0x0801b30c
 800bcb4:	2000de78 	.word	0x2000de78

0800bcb8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bcc4:	887b      	ldrh	r3, [r7, #2]
 800bcc6:	3303      	adds	r3, #3
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	f023 0303 	bic.w	r3, r3, #3
 800bcce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bcd0:	8bfb      	ldrh	r3, [r7, #30]
 800bcd2:	2b0b      	cmp	r3, #11
 800bcd4:	d801      	bhi.n	800bcda <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bcda:	8bfb      	ldrh	r3, [r7, #30]
 800bcdc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bce0:	d803      	bhi.n	800bcea <mem_trim+0x32>
 800bce2:	8bfa      	ldrh	r2, [r7, #30]
 800bce4:	887b      	ldrh	r3, [r7, #2]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d201      	bcs.n	800bcee <mem_trim+0x36>
    return NULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	e0d8      	b.n	800bea0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bcee:	4b6e      	ldr	r3, [pc, #440]	@ (800bea8 <mem_trim+0x1f0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d304      	bcc.n	800bd02 <mem_trim+0x4a>
 800bcf8:	4b6c      	ldr	r3, [pc, #432]	@ (800beac <mem_trim+0x1f4>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d306      	bcc.n	800bd10 <mem_trim+0x58>
 800bd02:	4b6b      	ldr	r3, [pc, #428]	@ (800beb0 <mem_trim+0x1f8>)
 800bd04:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bd08:	496a      	ldr	r1, [pc, #424]	@ (800beb4 <mem_trim+0x1fc>)
 800bd0a:	486b      	ldr	r0, [pc, #428]	@ (800beb8 <mem_trim+0x200>)
 800bd0c:	f00d f8e2 	bl	8018ed4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd10:	4b65      	ldr	r3, [pc, #404]	@ (800bea8 <mem_trim+0x1f0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d304      	bcc.n	800bd24 <mem_trim+0x6c>
 800bd1a:	4b64      	ldr	r3, [pc, #400]	@ (800beac <mem_trim+0x1f4>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d307      	bcc.n	800bd34 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd24:	f00c ff8a 	bl	8018c3c <sys_arch_protect>
 800bd28:	60b8      	str	r0, [r7, #8]
 800bd2a:	68b8      	ldr	r0, [r7, #8]
 800bd2c:	f00c ff94 	bl	8018c58 <sys_arch_unprotect>
    return rmem;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	e0b5      	b.n	800bea0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	3b08      	subs	r3, #8
 800bd38:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd3a:	69b8      	ldr	r0, [r7, #24]
 800bd3c:	f7ff fdea 	bl	800b914 <mem_to_ptr>
 800bd40:	4603      	mov	r3, r0
 800bd42:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	881a      	ldrh	r2, [r3, #0]
 800bd48:	8afb      	ldrh	r3, [r7, #22]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3b08      	subs	r3, #8
 800bd50:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd52:	8bfa      	ldrh	r2, [r7, #30]
 800bd54:	8abb      	ldrh	r3, [r7, #20]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d906      	bls.n	800bd68 <mem_trim+0xb0>
 800bd5a:	4b55      	ldr	r3, [pc, #340]	@ (800beb0 <mem_trim+0x1f8>)
 800bd5c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bd60:	4956      	ldr	r1, [pc, #344]	@ (800bebc <mem_trim+0x204>)
 800bd62:	4855      	ldr	r0, [pc, #340]	@ (800beb8 <mem_trim+0x200>)
 800bd64:	f00d f8b6 	bl	8018ed4 <iprintf>
  if (newsize > size) {
 800bd68:	8bfa      	ldrh	r2, [r7, #30]
 800bd6a:	8abb      	ldrh	r3, [r7, #20]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d901      	bls.n	800bd74 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	e095      	b.n	800bea0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bd74:	8bfa      	ldrh	r2, [r7, #30]
 800bd76:	8abb      	ldrh	r3, [r7, #20]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d101      	bne.n	800bd80 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	e08f      	b.n	800bea0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd80:	484f      	ldr	r0, [pc, #316]	@ (800bec0 <mem_trim+0x208>)
 800bd82:	f00c ff19 	bl	8018bb8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff fdb0 	bl	800b8f0 <ptr_to_mem>
 800bd90:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	791b      	ldrb	r3, [r3, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d13f      	bne.n	800be1a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bda2:	d106      	bne.n	800bdb2 <mem_trim+0xfa>
 800bda4:	4b42      	ldr	r3, [pc, #264]	@ (800beb0 <mem_trim+0x1f8>)
 800bda6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bdaa:	4946      	ldr	r1, [pc, #280]	@ (800bec4 <mem_trim+0x20c>)
 800bdac:	4842      	ldr	r0, [pc, #264]	@ (800beb8 <mem_trim+0x200>)
 800bdae:	f00d f891 	bl	8018ed4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdb8:	8afa      	ldrh	r2, [r7, #22]
 800bdba:	8bfb      	ldrh	r3, [r7, #30]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bdc4:	4b40      	ldr	r3, [pc, #256]	@ (800bec8 <mem_trim+0x210>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d106      	bne.n	800bddc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bdce:	89fb      	ldrh	r3, [r7, #14]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fd8d 	bl	800b8f0 <ptr_to_mem>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4a3b      	ldr	r2, [pc, #236]	@ (800bec8 <mem_trim+0x210>)
 800bdda:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bddc:	89fb      	ldrh	r3, [r7, #14]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fd86 	bl	800b8f0 <ptr_to_mem>
 800bde4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2200      	movs	r2, #0
 800bdea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	89ba      	ldrh	r2, [r7, #12]
 800bdf0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	8afa      	ldrh	r2, [r7, #22]
 800bdf6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	89fa      	ldrh	r2, [r7, #14]
 800bdfc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be06:	d047      	beq.n	800be98 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	881b      	ldrh	r3, [r3, #0]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff fd6f 	bl	800b8f0 <ptr_to_mem>
 800be12:	4602      	mov	r2, r0
 800be14:	89fb      	ldrh	r3, [r7, #14]
 800be16:	8053      	strh	r3, [r2, #2]
 800be18:	e03e      	b.n	800be98 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be1a:	8bfb      	ldrh	r3, [r7, #30]
 800be1c:	f103 0214 	add.w	r2, r3, #20
 800be20:	8abb      	ldrh	r3, [r7, #20]
 800be22:	429a      	cmp	r2, r3
 800be24:	d838      	bhi.n	800be98 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be26:	8afa      	ldrh	r2, [r7, #22]
 800be28:	8bfb      	ldrh	r3, [r7, #30]
 800be2a:	4413      	add	r3, r2
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	3308      	adds	r3, #8
 800be30:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be3a:	d106      	bne.n	800be4a <mem_trim+0x192>
 800be3c:	4b1c      	ldr	r3, [pc, #112]	@ (800beb0 <mem_trim+0x1f8>)
 800be3e:	f240 3216 	movw	r2, #790	@ 0x316
 800be42:	4920      	ldr	r1, [pc, #128]	@ (800bec4 <mem_trim+0x20c>)
 800be44:	481c      	ldr	r0, [pc, #112]	@ (800beb8 <mem_trim+0x200>)
 800be46:	f00d f845 	bl	8018ed4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be4a:	89fb      	ldrh	r3, [r7, #14]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff fd4f 	bl	800b8f0 <ptr_to_mem>
 800be52:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be54:	4b1c      	ldr	r3, [pc, #112]	@ (800bec8 <mem_trim+0x210>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d202      	bcs.n	800be64 <mem_trim+0x1ac>
      lfree = mem2;
 800be5e:	4a1a      	ldr	r2, [pc, #104]	@ (800bec8 <mem_trim+0x210>)
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2200      	movs	r2, #0
 800be68:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	881a      	ldrh	r2, [r3, #0]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	8afa      	ldrh	r2, [r7, #22]
 800be76:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	89fa      	ldrh	r2, [r7, #14]
 800be7c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be86:	d007      	beq.n	800be98 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fd2f 	bl	800b8f0 <ptr_to_mem>
 800be92:	4602      	mov	r2, r0
 800be94:	89fb      	ldrh	r3, [r7, #14]
 800be96:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be98:	4809      	ldr	r0, [pc, #36]	@ (800bec0 <mem_trim+0x208>)
 800be9a:	f00c fe9c 	bl	8018bd6 <sys_mutex_unlock>
  return rmem;
 800be9e:	687b      	ldr	r3, [r7, #4]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	2000de6c 	.word	0x2000de6c
 800beac:	2000de70 	.word	0x2000de70
 800beb0:	0801b1b4 	.word	0x0801b1b4
 800beb4:	0801b340 	.word	0x0801b340
 800beb8:	0801b1fc 	.word	0x0801b1fc
 800bebc:	0801b358 	.word	0x0801b358
 800bec0:	2000de74 	.word	0x2000de74
 800bec4:	0801b378 	.word	0x0801b378
 800bec8:	2000de78 	.word	0x2000de78

0800becc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d101      	bne.n	800bee0 <mem_malloc+0x14>
    return NULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	e0e2      	b.n	800c0a6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bee0:	88fb      	ldrh	r3, [r7, #6]
 800bee2:	3303      	adds	r3, #3
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	f023 0303 	bic.w	r3, r3, #3
 800beea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800beec:	8bbb      	ldrh	r3, [r7, #28]
 800beee:	2b0b      	cmp	r3, #11
 800bef0:	d801      	bhi.n	800bef6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bef2:	230c      	movs	r3, #12
 800bef4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bef6:	8bbb      	ldrh	r3, [r7, #28]
 800bef8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800befc:	d803      	bhi.n	800bf06 <mem_malloc+0x3a>
 800befe:	8bba      	ldrh	r2, [r7, #28]
 800bf00:	88fb      	ldrh	r3, [r7, #6]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d201      	bcs.n	800bf0a <mem_malloc+0x3e>
    return NULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e0cd      	b.n	800c0a6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bf0a:	4869      	ldr	r0, [pc, #420]	@ (800c0b0 <mem_malloc+0x1e4>)
 800bf0c:	f00c fe54 	bl	8018bb8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf10:	4b68      	ldr	r3, [pc, #416]	@ (800c0b4 <mem_malloc+0x1e8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff fcfd 	bl	800b914 <mem_to_ptr>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	83fb      	strh	r3, [r7, #30]
 800bf1e:	e0b7      	b.n	800c090 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bf20:	8bfb      	ldrh	r3, [r7, #30]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff fce4 	bl	800b8f0 <ptr_to_mem>
 800bf28:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	791b      	ldrb	r3, [r3, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f040 80a7 	bne.w	800c082 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	8bfb      	ldrh	r3, [r7, #30]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	f1a3 0208 	sub.w	r2, r3, #8
 800bf42:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf44:	429a      	cmp	r2, r3
 800bf46:	f0c0 809c 	bcc.w	800c082 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	8bfb      	ldrh	r3, [r7, #30]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	f1a3 0208 	sub.w	r2, r3, #8
 800bf58:	8bbb      	ldrh	r3, [r7, #28]
 800bf5a:	3314      	adds	r3, #20
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d333      	bcc.n	800bfc8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf60:	8bfa      	ldrh	r2, [r7, #30]
 800bf62:	8bbb      	ldrh	r3, [r7, #28]
 800bf64:	4413      	add	r3, r2
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	3308      	adds	r3, #8
 800bf6a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bf6c:	8a7b      	ldrh	r3, [r7, #18]
 800bf6e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bf72:	d106      	bne.n	800bf82 <mem_malloc+0xb6>
 800bf74:	4b50      	ldr	r3, [pc, #320]	@ (800c0b8 <mem_malloc+0x1ec>)
 800bf76:	f240 3287 	movw	r2, #903	@ 0x387
 800bf7a:	4950      	ldr	r1, [pc, #320]	@ (800c0bc <mem_malloc+0x1f0>)
 800bf7c:	4850      	ldr	r0, [pc, #320]	@ (800c0c0 <mem_malloc+0x1f4>)
 800bf7e:	f00c ffa9 	bl	8018ed4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf82:	8a7b      	ldrh	r3, [r7, #18]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff fcb3 	bl	800b8f0 <ptr_to_mem>
 800bf8a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	881a      	ldrh	r2, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8bfa      	ldrh	r2, [r7, #30]
 800bf9e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	8a7a      	ldrh	r2, [r7, #18]
 800bfa4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bfb4:	d00b      	beq.n	800bfce <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fc98 	bl	800b8f0 <ptr_to_mem>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	8a7b      	ldrh	r3, [r7, #18]
 800bfc4:	8053      	strh	r3, [r2, #2]
 800bfc6:	e002      	b.n	800bfce <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bfce:	4b39      	ldr	r3, [pc, #228]	@ (800c0b4 <mem_malloc+0x1e8>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d127      	bne.n	800c028 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bfd8:	4b36      	ldr	r3, [pc, #216]	@ (800c0b4 <mem_malloc+0x1e8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bfde:	e005      	b.n	800bfec <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff fc83 	bl	800b8f0 <ptr_to_mem>
 800bfea:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	791b      	ldrb	r3, [r3, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <mem_malloc+0x132>
 800bff4:	4b33      	ldr	r3, [pc, #204]	@ (800c0c4 <mem_malloc+0x1f8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1f0      	bne.n	800bfe0 <mem_malloc+0x114>
          }
          lfree = cur;
 800bffe:	4a2d      	ldr	r2, [pc, #180]	@ (800c0b4 <mem_malloc+0x1e8>)
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c004:	4b2b      	ldr	r3, [pc, #172]	@ (800c0b4 <mem_malloc+0x1e8>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	4b2e      	ldr	r3, [pc, #184]	@ (800c0c4 <mem_malloc+0x1f8>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d00b      	beq.n	800c028 <mem_malloc+0x15c>
 800c010:	4b28      	ldr	r3, [pc, #160]	@ (800c0b4 <mem_malloc+0x1e8>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	791b      	ldrb	r3, [r3, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d006      	beq.n	800c028 <mem_malloc+0x15c>
 800c01a:	4b27      	ldr	r3, [pc, #156]	@ (800c0b8 <mem_malloc+0x1ec>)
 800c01c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c020:	4929      	ldr	r1, [pc, #164]	@ (800c0c8 <mem_malloc+0x1fc>)
 800c022:	4827      	ldr	r0, [pc, #156]	@ (800c0c0 <mem_malloc+0x1f4>)
 800c024:	f00c ff56 	bl	8018ed4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c028:	4821      	ldr	r0, [pc, #132]	@ (800c0b0 <mem_malloc+0x1e4>)
 800c02a:	f00c fdd4 	bl	8018bd6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c02e:	8bba      	ldrh	r2, [r7, #28]
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	4413      	add	r3, r2
 800c034:	3308      	adds	r3, #8
 800c036:	4a23      	ldr	r2, [pc, #140]	@ (800c0c4 <mem_malloc+0x1f8>)
 800c038:	6812      	ldr	r2, [r2, #0]
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d906      	bls.n	800c04c <mem_malloc+0x180>
 800c03e:	4b1e      	ldr	r3, [pc, #120]	@ (800c0b8 <mem_malloc+0x1ec>)
 800c040:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c044:	4921      	ldr	r1, [pc, #132]	@ (800c0cc <mem_malloc+0x200>)
 800c046:	481e      	ldr	r0, [pc, #120]	@ (800c0c0 <mem_malloc+0x1f4>)
 800c048:	f00c ff44 	bl	8018ed4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d006      	beq.n	800c064 <mem_malloc+0x198>
 800c056:	4b18      	ldr	r3, [pc, #96]	@ (800c0b8 <mem_malloc+0x1ec>)
 800c058:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c05c:	491c      	ldr	r1, [pc, #112]	@ (800c0d0 <mem_malloc+0x204>)
 800c05e:	4818      	ldr	r0, [pc, #96]	@ (800c0c0 <mem_malloc+0x1f4>)
 800c060:	f00c ff38 	bl	8018ed4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f003 0303 	and.w	r3, r3, #3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d006      	beq.n	800c07c <mem_malloc+0x1b0>
 800c06e:	4b12      	ldr	r3, [pc, #72]	@ (800c0b8 <mem_malloc+0x1ec>)
 800c070:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c074:	4917      	ldr	r1, [pc, #92]	@ (800c0d4 <mem_malloc+0x208>)
 800c076:	4812      	ldr	r0, [pc, #72]	@ (800c0c0 <mem_malloc+0x1f4>)
 800c078:	f00c ff2c 	bl	8018ed4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	3308      	adds	r3, #8
 800c080:	e011      	b.n	800c0a6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c082:	8bfb      	ldrh	r3, [r7, #30]
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff fc33 	bl	800b8f0 <ptr_to_mem>
 800c08a:	4603      	mov	r3, r0
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c090:	8bfa      	ldrh	r2, [r7, #30]
 800c092:	8bbb      	ldrh	r3, [r7, #28]
 800c094:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800c098:	429a      	cmp	r2, r3
 800c09a:	f4ff af41 	bcc.w	800bf20 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c09e:	4804      	ldr	r0, [pc, #16]	@ (800c0b0 <mem_malloc+0x1e4>)
 800c0a0:	f00c fd99 	bl	8018bd6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	2000de74 	.word	0x2000de74
 800c0b4:	2000de78 	.word	0x2000de78
 800c0b8:	0801b1b4 	.word	0x0801b1b4
 800c0bc:	0801b378 	.word	0x0801b378
 800c0c0:	0801b1fc 	.word	0x0801b1fc
 800c0c4:	2000de70 	.word	0x2000de70
 800c0c8:	0801b38c 	.word	0x0801b38c
 800c0cc:	0801b3a8 	.word	0x0801b3a8
 800c0d0:	0801b3d8 	.word	0x0801b3d8
 800c0d4:	0801b408 	.word	0x0801b408

0800c0d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	3303      	adds	r3, #3
 800c0ee:	f023 0303 	bic.w	r3, r3, #3
 800c0f2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e011      	b.n	800c11e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	461a      	mov	r2, r3
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	4413      	add	r3, r2
 800c116:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	885b      	ldrh	r3, [r3, #2]
 800c122:	461a      	mov	r2, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	4293      	cmp	r3, r2
 800c128:	dbe7      	blt.n	800c0fa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c12a:	bf00      	nop
 800c12c:	bf00      	nop
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c13e:	2300      	movs	r3, #0
 800c140:	80fb      	strh	r3, [r7, #6]
 800c142:	e009      	b.n	800c158 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c144:	88fb      	ldrh	r3, [r7, #6]
 800c146:	4a08      	ldr	r2, [pc, #32]	@ (800c168 <memp_init+0x30>)
 800c148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff ffc3 	bl	800c0d8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c152:	88fb      	ldrh	r3, [r7, #6]
 800c154:	3301      	adds	r3, #1
 800c156:	80fb      	strh	r3, [r7, #6]
 800c158:	88fb      	ldrh	r3, [r7, #6]
 800c15a:	2b0c      	cmp	r3, #12
 800c15c:	d9f2      	bls.n	800c144 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	080280f8 	.word	0x080280f8

0800c16c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c174:	f00c fd62 	bl	8018c3c <sys_arch_protect>
 800c178:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d015      	beq.n	800c1b4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	6812      	ldr	r2, [r2, #0]
 800c190:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	f003 0303 	and.w	r3, r3, #3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d006      	beq.n	800c1aa <do_memp_malloc_pool+0x3e>
 800c19c:	4b09      	ldr	r3, [pc, #36]	@ (800c1c4 <do_memp_malloc_pool+0x58>)
 800c19e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c1a2:	4909      	ldr	r1, [pc, #36]	@ (800c1c8 <do_memp_malloc_pool+0x5c>)
 800c1a4:	4809      	ldr	r0, [pc, #36]	@ (800c1cc <do_memp_malloc_pool+0x60>)
 800c1a6:	f00c fe95 	bl	8018ed4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f00c fd54 	bl	8018c58 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	e003      	b.n	800c1bc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f00c fd4f 	bl	8018c58 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	0801b42c 	.word	0x0801b42c
 800c1c8:	0801b45c 	.word	0x0801b45c
 800c1cc:	0801b480 	.word	0x0801b480

0800c1d0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <memp_malloc_pool+0x1c>
 800c1de:	4b0a      	ldr	r3, [pc, #40]	@ (800c208 <memp_malloc_pool+0x38>)
 800c1e0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c1e4:	4909      	ldr	r1, [pc, #36]	@ (800c20c <memp_malloc_pool+0x3c>)
 800c1e6:	480a      	ldr	r0, [pc, #40]	@ (800c210 <memp_malloc_pool+0x40>)
 800c1e8:	f00c fe74 	bl	8018ed4 <iprintf>
  if (desc == NULL) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <memp_malloc_pool+0x26>
    return NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e003      	b.n	800c1fe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7ff ffb8 	bl	800c16c <do_memp_malloc_pool>
 800c1fc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	0801b42c 	.word	0x0801b42c
 800c20c:	0801b4a8 	.word	0x0801b4a8
 800c210:	0801b480 	.word	0x0801b480

0800c214 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b0c      	cmp	r3, #12
 800c222:	d908      	bls.n	800c236 <memp_malloc+0x22>
 800c224:	4b0a      	ldr	r3, [pc, #40]	@ (800c250 <memp_malloc+0x3c>)
 800c226:	f240 1257 	movw	r2, #343	@ 0x157
 800c22a:	490a      	ldr	r1, [pc, #40]	@ (800c254 <memp_malloc+0x40>)
 800c22c:	480a      	ldr	r0, [pc, #40]	@ (800c258 <memp_malloc+0x44>)
 800c22e:	f00c fe51 	bl	8018ed4 <iprintf>
 800c232:	2300      	movs	r3, #0
 800c234:	e008      	b.n	800c248 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	4a08      	ldr	r2, [pc, #32]	@ (800c25c <memp_malloc+0x48>)
 800c23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff ff94 	bl	800c16c <do_memp_malloc_pool>
 800c244:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c246:	68fb      	ldr	r3, [r7, #12]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	0801b42c 	.word	0x0801b42c
 800c254:	0801b4bc 	.word	0x0801b4bc
 800c258:	0801b480 	.word	0x0801b480
 800c25c:	080280f8 	.word	0x080280f8

0800c260 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d006      	beq.n	800c282 <do_memp_free_pool+0x22>
 800c274:	4b0d      	ldr	r3, [pc, #52]	@ (800c2ac <do_memp_free_pool+0x4c>)
 800c276:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c27a:	490d      	ldr	r1, [pc, #52]	@ (800c2b0 <do_memp_free_pool+0x50>)
 800c27c:	480d      	ldr	r0, [pc, #52]	@ (800c2b4 <do_memp_free_pool+0x54>)
 800c27e:	f00c fe29 	bl	8018ed4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c286:	f00c fcd9 	bl	8018c3c <sys_arch_protect>
 800c28a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c29e:	68b8      	ldr	r0, [r7, #8]
 800c2a0:	f00c fcda 	bl	8018c58 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c2a4:	bf00      	nop
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	0801b42c 	.word	0x0801b42c
 800c2b0:	0801b4dc 	.word	0x0801b4dc
 800c2b4:	0801b480 	.word	0x0801b480

0800c2b8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <memp_free_pool+0x1e>
 800c2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f4 <memp_free_pool+0x3c>)
 800c2ca:	f240 1295 	movw	r2, #405	@ 0x195
 800c2ce:	490a      	ldr	r1, [pc, #40]	@ (800c2f8 <memp_free_pool+0x40>)
 800c2d0:	480a      	ldr	r0, [pc, #40]	@ (800c2fc <memp_free_pool+0x44>)
 800c2d2:	f00c fdff 	bl	8018ed4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <memp_free_pool+0x34>
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ffbb 	bl	800c260 <do_memp_free_pool>
 800c2ea:	e000      	b.n	800c2ee <memp_free_pool+0x36>
    return;
 800c2ec:	bf00      	nop
}
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	0801b42c 	.word	0x0801b42c
 800c2f8:	0801b4a8 	.word	0x0801b4a8
 800c2fc:	0801b480 	.word	0x0801b480

0800c300 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	6039      	str	r1, [r7, #0]
 800c30a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c30c:	79fb      	ldrb	r3, [r7, #7]
 800c30e:	2b0c      	cmp	r3, #12
 800c310:	d907      	bls.n	800c322 <memp_free+0x22>
 800c312:	4b0c      	ldr	r3, [pc, #48]	@ (800c344 <memp_free+0x44>)
 800c314:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c318:	490b      	ldr	r1, [pc, #44]	@ (800c348 <memp_free+0x48>)
 800c31a:	480c      	ldr	r0, [pc, #48]	@ (800c34c <memp_free+0x4c>)
 800c31c:	f00c fdda 	bl	8018ed4 <iprintf>
 800c320:	e00c      	b.n	800c33c <memp_free+0x3c>

  if (mem == NULL) {
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d008      	beq.n	800c33a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	4a09      	ldr	r2, [pc, #36]	@ (800c350 <memp_free+0x50>)
 800c32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff ff94 	bl	800c260 <do_memp_free_pool>
 800c338:	e000      	b.n	800c33c <memp_free+0x3c>
    return;
 800c33a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	0801b42c 	.word	0x0801b42c
 800c348:	0801b4fc 	.word	0x0801b4fc
 800c34c:	0801b480 	.word	0x0801b480
 800c350:	080280f8 	.word	0x080280f8

0800c354 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c354:	b480      	push	{r7}
 800c356:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c358:	bf00      	nop
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
	...

0800c364 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d108      	bne.n	800c38a <netif_add+0x26>
 800c378:	4b5b      	ldr	r3, [pc, #364]	@ (800c4e8 <netif_add+0x184>)
 800c37a:	f240 1227 	movw	r2, #295	@ 0x127
 800c37e:	495b      	ldr	r1, [pc, #364]	@ (800c4ec <netif_add+0x188>)
 800c380:	485b      	ldr	r0, [pc, #364]	@ (800c4f0 <netif_add+0x18c>)
 800c382:	f00c fda7 	bl	8018ed4 <iprintf>
 800c386:	2300      	movs	r3, #0
 800c388:	e0a9      	b.n	800c4de <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d108      	bne.n	800c3a2 <netif_add+0x3e>
 800c390:	4b55      	ldr	r3, [pc, #340]	@ (800c4e8 <netif_add+0x184>)
 800c392:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c396:	4957      	ldr	r1, [pc, #348]	@ (800c4f4 <netif_add+0x190>)
 800c398:	4855      	ldr	r0, [pc, #340]	@ (800c4f0 <netif_add+0x18c>)
 800c39a:	f00c fd9b 	bl	8018ed4 <iprintf>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e09d      	b.n	800c4de <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c3a8:	4b53      	ldr	r3, [pc, #332]	@ (800c4f8 <netif_add+0x194>)
 800c3aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c3b2:	4b51      	ldr	r3, [pc, #324]	@ (800c4f8 <netif_add+0x194>)
 800c3b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c3bc:	4b4e      	ldr	r3, [pc, #312]	@ (800c4f8 <netif_add+0x194>)
 800c3be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4a49      	ldr	r2, [pc, #292]	@ (800c4fc <netif_add+0x198>)
 800c3d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3324      	adds	r3, #36	@ 0x24
 800c3ea:	2204      	movs	r2, #4
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f00c fe0f 	bl	8019012 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6a3a      	ldr	r2, [r7, #32]
 800c3fe:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c400:	4b3f      	ldr	r3, [pc, #252]	@ (800c500 <netif_add+0x19c>)
 800c402:	781a      	ldrb	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c40e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f914 	bl	800c644 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	4798      	blx	r3
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <netif_add+0xc8>
    return NULL;
 800c428:	2300      	movs	r3, #0
 800c42a:	e058      	b.n	800c4de <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c432:	2bff      	cmp	r3, #255	@ 0xff
 800c434:	d103      	bne.n	800c43e <netif_add+0xda>
        netif->num = 0;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c442:	4b30      	ldr	r3, [pc, #192]	@ (800c504 <netif_add+0x1a0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	617b      	str	r3, [r7, #20]
 800c448:	e02b      	b.n	800c4a2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d106      	bne.n	800c460 <netif_add+0xfc>
 800c452:	4b25      	ldr	r3, [pc, #148]	@ (800c4e8 <netif_add+0x184>)
 800c454:	f240 128b 	movw	r2, #395	@ 0x18b
 800c458:	492b      	ldr	r1, [pc, #172]	@ (800c508 <netif_add+0x1a4>)
 800c45a:	4825      	ldr	r0, [pc, #148]	@ (800c4f0 <netif_add+0x18c>)
 800c45c:	f00c fd3a 	bl	8018ed4 <iprintf>
        num_netifs++;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	3301      	adds	r3, #1
 800c464:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2bff      	cmp	r3, #255	@ 0xff
 800c46a:	dd06      	ble.n	800c47a <netif_add+0x116>
 800c46c:	4b1e      	ldr	r3, [pc, #120]	@ (800c4e8 <netif_add+0x184>)
 800c46e:	f240 128d 	movw	r2, #397	@ 0x18d
 800c472:	4926      	ldr	r1, [pc, #152]	@ (800c50c <netif_add+0x1a8>)
 800c474:	481e      	ldr	r0, [pc, #120]	@ (800c4f0 <netif_add+0x18c>)
 800c476:	f00c fd2d 	bl	8018ed4 <iprintf>
        if (netif2->num == netif->num) {
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c486:	429a      	cmp	r2, r3
 800c488:	d108      	bne.n	800c49c <netif_add+0x138>
          netif->num++;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c490:	3301      	adds	r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800c49a:	e005      	b.n	800c4a8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1d0      	bne.n	800c44a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1be      	bne.n	800c42c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c4b4:	2bfe      	cmp	r3, #254	@ 0xfe
 800c4b6:	d103      	bne.n	800c4c0 <netif_add+0x15c>
    netif_num = 0;
 800c4b8:	4b11      	ldr	r3, [pc, #68]	@ (800c500 <netif_add+0x19c>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	701a      	strb	r2, [r3, #0]
 800c4be:	e006      	b.n	800c4ce <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c500 <netif_add+0x19c>)
 800c4cc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c504 <netif_add+0x1a0>)
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c4d6:	4a0b      	ldr	r2, [pc, #44]	@ (800c504 <netif_add+0x1a0>)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	0801b518 	.word	0x0801b518
 800c4ec:	0801b5ac 	.word	0x0801b5ac
 800c4f0:	0801b568 	.word	0x0801b568
 800c4f4:	0801b5c8 	.word	0x0801b5c8
 800c4f8:	0802817c 	.word	0x0802817c
 800c4fc:	0800c927 	.word	0x0800c927
 800c500:	20010f70 	.word	0x20010f70
 800c504:	20010f68 	.word	0x20010f68
 800c508:	0801b5ec 	.word	0x0801b5ec
 800c50c:	0801b600 	.word	0x0801b600

0800c510 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f002 ffad 	bl	800f47c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f008 f821 	bl	801456c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c52a:	bf00      	nop
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d106      	bne.n	800c554 <netif_do_set_ipaddr+0x20>
 800c546:	4b1d      	ldr	r3, [pc, #116]	@ (800c5bc <netif_do_set_ipaddr+0x88>)
 800c548:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c54c:	491c      	ldr	r1, [pc, #112]	@ (800c5c0 <netif_do_set_ipaddr+0x8c>)
 800c54e:	481d      	ldr	r0, [pc, #116]	@ (800c5c4 <netif_do_set_ipaddr+0x90>)
 800c550:	f00c fcc0 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <netif_do_set_ipaddr+0x34>
 800c55a:	4b18      	ldr	r3, [pc, #96]	@ (800c5bc <netif_do_set_ipaddr+0x88>)
 800c55c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c560:	4917      	ldr	r1, [pc, #92]	@ (800c5c0 <netif_do_set_ipaddr+0x8c>)
 800c562:	4818      	ldr	r0, [pc, #96]	@ (800c5c4 <netif_do_set_ipaddr+0x90>)
 800c564:	f00c fcb6 	bl	8018ed4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3304      	adds	r3, #4
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d01c      	beq.n	800c5b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3304      	adds	r3, #4
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c586:	f107 0314 	add.w	r3, r7, #20
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff ffbf 	bl	800c510 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <netif_do_set_ipaddr+0x6a>
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	e000      	b.n	800c5a0 <netif_do_set_ipaddr+0x6c>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 f8d2 	bl	800c750 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e000      	b.n	800c5b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0801b518 	.word	0x0801b518
 800c5c0:	0801b630 	.word	0x0801b630
 800c5c4:	0801b568 	.word	0x0801b568

0800c5c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3308      	adds	r3, #8
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d00a      	beq.n	800c5f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <netif_do_set_netmask+0x26>
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	e000      	b.n	800c5f0 <netif_do_set_netmask+0x28>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c606:	b480      	push	{r7}
 800c608:	b085      	sub	sp, #20
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	60b9      	str	r1, [r7, #8]
 800c610:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	330c      	adds	r3, #12
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d00a      	beq.n	800c636 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <netif_do_set_gw+0x26>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	e000      	b.n	800c62e <netif_do_set_gw+0x28>
 800c62c:	2300      	movs	r3, #0
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c632:	2301      	movs	r3, #1
 800c634:	e000      	b.n	800c638 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b088      	sub	sp, #32
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c660:	4b1c      	ldr	r3, [pc, #112]	@ (800c6d4 <netif_set_addr+0x90>)
 800c662:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c66a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6d4 <netif_set_addr+0x90>)
 800c66c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c674:	4b17      	ldr	r3, [pc, #92]	@ (800c6d4 <netif_set_addr+0x90>)
 800c676:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <netif_set_addr+0x42>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <netif_set_addr+0x46>
 800c686:	2301      	movs	r3, #1
 800c688:	e000      	b.n	800c68c <netif_set_addr+0x48>
 800c68a:	2300      	movs	r3, #0
 800c68c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d006      	beq.n	800c6a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c694:	f107 0310 	add.w	r3, r7, #16
 800c698:	461a      	mov	r2, r3
 800c69a:	68b9      	ldr	r1, [r7, #8]
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7ff ff49 	bl	800c534 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c6a2:	69fa      	ldr	r2, [r7, #28]
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f7ff ff8e 	bl	800c5c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff ffa8 	bl	800c606 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6bc:	f107 0310 	add.w	r3, r7, #16
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	68b9      	ldr	r1, [r7, #8]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff ff35 	bl	800c534 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c6ca:	bf00      	nop
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0802817c 	.word	0x0802817c

0800c6d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c6e0:	4a04      	ldr	r2, [pc, #16]	@ (800c6f4 <netif_set_default+0x1c>)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	20010f6c 	.word	0x20010f6c

0800c6f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d107      	bne.n	800c716 <netif_set_up+0x1e>
 800c706:	4b0f      	ldr	r3, [pc, #60]	@ (800c744 <netif_set_up+0x4c>)
 800c708:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c70c:	490e      	ldr	r1, [pc, #56]	@ (800c748 <netif_set_up+0x50>)
 800c70e:	480f      	ldr	r0, [pc, #60]	@ (800c74c <netif_set_up+0x54>)
 800c710:	f00c fbe0 	bl	8018ed4 <iprintf>
 800c714:	e013      	b.n	800c73e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10c      	bne.n	800c73e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c72a:	f043 0301 	orr.w	r3, r3, #1
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c736:	2103      	movs	r1, #3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f809 	bl	800c750 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	0801b518 	.word	0x0801b518
 800c748:	0801b6a0 	.word	0x0801b6a0
 800c74c:	0801b568 	.word	0x0801b568

0800c750 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <netif_issue_reports+0x20>
 800c762:	4b18      	ldr	r3, [pc, #96]	@ (800c7c4 <netif_issue_reports+0x74>)
 800c764:	f240 326d 	movw	r2, #877	@ 0x36d
 800c768:	4917      	ldr	r1, [pc, #92]	@ (800c7c8 <netif_issue_reports+0x78>)
 800c76a:	4818      	ldr	r0, [pc, #96]	@ (800c7cc <netif_issue_reports+0x7c>)
 800c76c:	f00c fbb2 	bl	8018ed4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c776:	f003 0304 	and.w	r3, r3, #4
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01e      	beq.n	800c7bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c784:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d017      	beq.n	800c7bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c78c:	78fb      	ldrb	r3, [r7, #3]
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d013      	beq.n	800c7be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3304      	adds	r3, #4
 800c79a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00e      	beq.n	800c7be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c7a6:	f003 0308 	and.w	r3, r3, #8
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d007      	beq.n	800c7be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f00a fcd3 	bl	8017160 <etharp_request>
 800c7ba:	e000      	b.n	800c7be <netif_issue_reports+0x6e>
    return;
 800c7bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	0801b518 	.word	0x0801b518
 800c7c8:	0801b6bc 	.word	0x0801b6bc
 800c7cc:	0801b568 	.word	0x0801b568

0800c7d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d107      	bne.n	800c7ee <netif_set_down+0x1e>
 800c7de:	4b12      	ldr	r3, [pc, #72]	@ (800c828 <netif_set_down+0x58>)
 800c7e0:	f240 329b 	movw	r2, #923	@ 0x39b
 800c7e4:	4911      	ldr	r1, [pc, #68]	@ (800c82c <netif_set_down+0x5c>)
 800c7e6:	4812      	ldr	r0, [pc, #72]	@ (800c830 <netif_set_down+0x60>)
 800c7e8:	f00c fb74 	bl	8018ed4 <iprintf>
 800c7ec:	e019      	b.n	800c822 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d012      	beq.n	800c822 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c802:	f023 0301 	bic.w	r3, r3, #1
 800c806:	b2da      	uxtb	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c814:	f003 0308 	and.w	r3, r3, #8
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f00a f859 	bl	80168d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	0801b518 	.word	0x0801b518
 800c82c:	0801b6e0 	.word	0x0801b6e0
 800c830:	0801b568 	.word	0x0801b568

0800c834 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d107      	bne.n	800c852 <netif_set_link_up+0x1e>
 800c842:	4b15      	ldr	r3, [pc, #84]	@ (800c898 <netif_set_link_up+0x64>)
 800c844:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c848:	4914      	ldr	r1, [pc, #80]	@ (800c89c <netif_set_link_up+0x68>)
 800c84a:	4815      	ldr	r0, [pc, #84]	@ (800c8a0 <netif_set_link_up+0x6c>)
 800c84c:	f00c fb42 	bl	8018ed4 <iprintf>
 800c850:	e01e      	b.n	800c890 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d117      	bne.n	800c890 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c866:	f043 0304 	orr.w	r3, r3, #4
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f008 faa4 	bl	8014dc0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c878:	2103      	movs	r1, #3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff ff68 	bl	800c750 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <netif_set_link_up+0x5c>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	0801b518 	.word	0x0801b518
 800c89c:	0801b700 	.word	0x0801b700
 800c8a0:	0801b568 	.word	0x0801b568

0800c8a4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d107      	bne.n	800c8c2 <netif_set_link_down+0x1e>
 800c8b2:	4b11      	ldr	r3, [pc, #68]	@ (800c8f8 <netif_set_link_down+0x54>)
 800c8b4:	f240 4206 	movw	r2, #1030	@ 0x406
 800c8b8:	4910      	ldr	r1, [pc, #64]	@ (800c8fc <netif_set_link_down+0x58>)
 800c8ba:	4811      	ldr	r0, [pc, #68]	@ (800c900 <netif_set_link_down+0x5c>)
 800c8bc:	f00c fb0a 	bl	8018ed4 <iprintf>
 800c8c0:	e017      	b.n	800c8f2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d010      	beq.n	800c8f2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8d6:	f023 0304 	bic.w	r3, r3, #4
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <netif_set_link_down+0x4e>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	69db      	ldr	r3, [r3, #28]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	0801b518 	.word	0x0801b518
 800c8fc:	0801b724 	.word	0x0801b724
 800c900:	0801b568 	.word	0x0801b568

0800c904 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	61da      	str	r2, [r3, #28]
  }
}
 800c91a:	bf00      	nop
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c926:	b480      	push	{r7}
 800c928:	b085      	sub	sp, #20
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	60f8      	str	r0, [r7, #12]
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c932:	f06f 030b 	mvn.w	r3, #11
}
 800c936:	4618      	mov	r0, r3
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
	...

0800c944 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c94e:	79fb      	ldrb	r3, [r7, #7]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d013      	beq.n	800c97c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c954:	4b0d      	ldr	r3, [pc, #52]	@ (800c98c <netif_get_by_index+0x48>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	e00c      	b.n	800c976 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c962:	3301      	adds	r3, #1
 800c964:	b2db      	uxtb	r3, r3
 800c966:	79fa      	ldrb	r2, [r7, #7]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d101      	bne.n	800c970 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	e006      	b.n	800c97e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1ef      	bne.n	800c95c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	20010f68 	.word	0x20010f68

0800c990 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c996:	f00c f951 	bl	8018c3c <sys_arch_protect>
 800c99a:	6038      	str	r0, [r7, #0]
 800c99c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d4 <pbuf_free_ooseq+0x44>)
 800c99e:	2200      	movs	r2, #0
 800c9a0:	701a      	strb	r2, [r3, #0]
 800c9a2:	6838      	ldr	r0, [r7, #0]
 800c9a4:	f00c f958 	bl	8018c58 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d8 <pbuf_free_ooseq+0x48>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	607b      	str	r3, [r7, #4]
 800c9ae:	e00a      	b.n	800c9c6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f002 fd9d 	bl	800f4f8 <tcp_free_ooseq>
      return;
 800c9be:	e005      	b.n	800c9cc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	607b      	str	r3, [r7, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1f1      	bne.n	800c9b0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20010f71 	.word	0x20010f71
 800c9d8:	20010f80 	.word	0x20010f80

0800c9dc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c9e4:	f7ff ffd4 	bl	800c990 <pbuf_free_ooseq>
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c9f6:	f00c f921 	bl	8018c3c <sys_arch_protect>
 800c9fa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800ca3c <pbuf_pool_is_empty+0x4c>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ca02:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <pbuf_pool_is_empty+0x4c>)
 800ca04:	2201      	movs	r2, #1
 800ca06:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f00c f925 	bl	8018c58 <sys_arch_unprotect>

  if (!queued) {
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10f      	bne.n	800ca34 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ca14:	2100      	movs	r1, #0
 800ca16:	480a      	ldr	r0, [pc, #40]	@ (800ca40 <pbuf_pool_is_empty+0x50>)
 800ca18:	f7fe f834 	bl	800aa84 <tcpip_try_callback>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d008      	beq.n	800ca34 <pbuf_pool_is_empty+0x44>
 800ca22:	f00c f90b 	bl	8018c3c <sys_arch_protect>
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	4b04      	ldr	r3, [pc, #16]	@ (800ca3c <pbuf_pool_is_empty+0x4c>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	701a      	strb	r2, [r3, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f00c f912 	bl	8018c58 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	20010f71 	.word	0x20010f71
 800ca40:	0800c9dd 	.word	0x0800c9dd

0800ca44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	4611      	mov	r1, r2
 800ca50:	461a      	mov	r2, r3
 800ca52:	460b      	mov	r3, r1
 800ca54:	80fb      	strh	r3, [r7, #6]
 800ca56:	4613      	mov	r3, r2
 800ca58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	88fa      	ldrh	r2, [r7, #6]
 800ca6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	88ba      	ldrh	r2, [r7, #4]
 800ca70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ca72:	8b3b      	ldrh	r3, [r7, #24]
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	7f3a      	ldrb	r2, [r7, #28]
 800ca7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2201      	movs	r2, #1
 800ca84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	73da      	strb	r2, [r3, #15]
}
 800ca8c:	bf00      	nop
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08c      	sub	sp, #48	@ 0x30
 800ca9c:	af02      	add	r7, sp, #8
 800ca9e:	4603      	mov	r3, r0
 800caa0:	71fb      	strb	r3, [r7, #7]
 800caa2:	460b      	mov	r3, r1
 800caa4:	80bb      	strh	r3, [r7, #4]
 800caa6:	4613      	mov	r3, r2
 800caa8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800caaa:	79fb      	ldrb	r3, [r7, #7]
 800caac:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800caae:	887b      	ldrh	r3, [r7, #2]
 800cab0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cab4:	d07f      	beq.n	800cbb6 <pbuf_alloc+0x11e>
 800cab6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800caba:	f300 80c8 	bgt.w	800cc4e <pbuf_alloc+0x1b6>
 800cabe:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cac2:	d010      	beq.n	800cae6 <pbuf_alloc+0x4e>
 800cac4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cac8:	f300 80c1 	bgt.w	800cc4e <pbuf_alloc+0x1b6>
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d002      	beq.n	800cad6 <pbuf_alloc+0x3e>
 800cad0:	2b41      	cmp	r3, #65	@ 0x41
 800cad2:	f040 80bc 	bne.w	800cc4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cad6:	887a      	ldrh	r2, [r7, #2]
 800cad8:	88bb      	ldrh	r3, [r7, #4]
 800cada:	4619      	mov	r1, r3
 800cadc:	2000      	movs	r0, #0
 800cade:	f000 f8d1 	bl	800cc84 <pbuf_alloc_reference>
 800cae2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cae4:	e0bd      	b.n	800cc62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800caea:	2300      	movs	r3, #0
 800caec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800caee:	88bb      	ldrh	r3, [r7, #4]
 800caf0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800caf2:	200c      	movs	r0, #12
 800caf4:	f7ff fb8e 	bl	800c214 <memp_malloc>
 800caf8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d109      	bne.n	800cb14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cb00:	f7ff ff76 	bl	800c9f0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d002      	beq.n	800cb10 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cb0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb0c:	f000 faa8 	bl	800d060 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	e0a7      	b.n	800cc64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cb14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb16:	3303      	adds	r3, #3
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	f023 0303 	bic.w	r3, r3, #3
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	8b7a      	ldrh	r2, [r7, #26]
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	bf28      	it	cs
 800cb2c:	4613      	movcs	r3, r2
 800cb2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cb30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb32:	3310      	adds	r3, #16
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	4413      	add	r3, r2
 800cb38:	3303      	adds	r3, #3
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	4618      	mov	r0, r3
 800cb40:	89f9      	ldrh	r1, [r7, #14]
 800cb42:	8b7a      	ldrh	r2, [r7, #26]
 800cb44:	2300      	movs	r3, #0
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	887b      	ldrh	r3, [r7, #2]
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4601      	mov	r1, r0
 800cb50:	6938      	ldr	r0, [r7, #16]
 800cb52:	f7ff ff77 	bl	800ca44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f003 0303 	and.w	r3, r3, #3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d006      	beq.n	800cb70 <pbuf_alloc+0xd8>
 800cb62:	4b42      	ldr	r3, [pc, #264]	@ (800cc6c <pbuf_alloc+0x1d4>)
 800cb64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb68:	4941      	ldr	r1, [pc, #260]	@ (800cc70 <pbuf_alloc+0x1d8>)
 800cb6a:	4842      	ldr	r0, [pc, #264]	@ (800cc74 <pbuf_alloc+0x1dc>)
 800cb6c:	f00c f9b2 	bl	8018ed4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cb70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb72:	3303      	adds	r3, #3
 800cb74:	f023 0303 	bic.w	r3, r3, #3
 800cb78:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800cb7c:	d106      	bne.n	800cb8c <pbuf_alloc+0xf4>
 800cb7e:	4b3b      	ldr	r3, [pc, #236]	@ (800cc6c <pbuf_alloc+0x1d4>)
 800cb80:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800cb84:	493c      	ldr	r1, [pc, #240]	@ (800cc78 <pbuf_alloc+0x1e0>)
 800cb86:	483b      	ldr	r0, [pc, #236]	@ (800cc74 <pbuf_alloc+0x1dc>)
 800cb88:	f00c f9a4 	bl	8018ed4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d102      	bne.n	800cb98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb96:	e002      	b.n	800cb9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cba2:	8b7a      	ldrh	r2, [r7, #26]
 800cba4:	89fb      	ldrh	r3, [r7, #14]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800cbae:	8b7b      	ldrh	r3, [r7, #26]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d19e      	bne.n	800caf2 <pbuf_alloc+0x5a>
      break;
 800cbb4:	e055      	b.n	800cc62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cbb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbb8:	3303      	adds	r3, #3
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	f023 0303 	bic.w	r3, r3, #3
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	88bb      	ldrh	r3, [r7, #4]
 800cbc4:	3303      	adds	r3, #3
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	f023 0303 	bic.w	r3, r3, #3
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	4413      	add	r3, r2
 800cbd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cbd2:	8b3b      	ldrh	r3, [r7, #24]
 800cbd4:	3310      	adds	r3, #16
 800cbd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbd8:	8b3a      	ldrh	r2, [r7, #24]
 800cbda:	88bb      	ldrh	r3, [r7, #4]
 800cbdc:	3303      	adds	r3, #3
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d306      	bcc.n	800cbf4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cbe6:	8afa      	ldrh	r2, [r7, #22]
 800cbe8:	88bb      	ldrh	r3, [r7, #4]
 800cbea:	3303      	adds	r3, #3
 800cbec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d201      	bcs.n	800cbf8 <pbuf_alloc+0x160>
        return NULL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e035      	b.n	800cc64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cbf8:	8afb      	ldrh	r3, [r7, #22]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7ff f966 	bl	800becc <mem_malloc>
 800cc00:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800cc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d101      	bne.n	800cc0c <pbuf_alloc+0x174>
        return NULL;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	e02b      	b.n	800cc64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cc0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc0e:	3310      	adds	r3, #16
 800cc10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc12:	4413      	add	r3, r2
 800cc14:	3303      	adds	r3, #3
 800cc16:	f023 0303 	bic.w	r3, r3, #3
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	88b9      	ldrh	r1, [r7, #4]
 800cc1e:	88ba      	ldrh	r2, [r7, #4]
 800cc20:	2300      	movs	r3, #0
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	887b      	ldrh	r3, [r7, #2]
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc2e:	f7ff ff09 	bl	800ca44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f003 0303 	and.w	r3, r3, #3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d010      	beq.n	800cc60 <pbuf_alloc+0x1c8>
 800cc3e:	4b0b      	ldr	r3, [pc, #44]	@ (800cc6c <pbuf_alloc+0x1d4>)
 800cc40:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cc44:	490d      	ldr	r1, [pc, #52]	@ (800cc7c <pbuf_alloc+0x1e4>)
 800cc46:	480b      	ldr	r0, [pc, #44]	@ (800cc74 <pbuf_alloc+0x1dc>)
 800cc48:	f00c f944 	bl	8018ed4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cc4c:	e008      	b.n	800cc60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc4e:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <pbuf_alloc+0x1d4>)
 800cc50:	f240 1227 	movw	r2, #295	@ 0x127
 800cc54:	490a      	ldr	r1, [pc, #40]	@ (800cc80 <pbuf_alloc+0x1e8>)
 800cc56:	4807      	ldr	r0, [pc, #28]	@ (800cc74 <pbuf_alloc+0x1dc>)
 800cc58:	f00c f93c 	bl	8018ed4 <iprintf>
      return NULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e001      	b.n	800cc64 <pbuf_alloc+0x1cc>
      break;
 800cc60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3728      	adds	r7, #40	@ 0x28
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	0801b748 	.word	0x0801b748
 800cc70:	0801b778 	.word	0x0801b778
 800cc74:	0801b7a8 	.word	0x0801b7a8
 800cc78:	0801b7d0 	.word	0x0801b7d0
 800cc7c:	0801b804 	.word	0x0801b804
 800cc80:	0801b830 	.word	0x0801b830

0800cc84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af02      	add	r7, sp, #8
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	807b      	strh	r3, [r7, #2]
 800cc90:	4613      	mov	r3, r2
 800cc92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cc94:	883b      	ldrh	r3, [r7, #0]
 800cc96:	2b41      	cmp	r3, #65	@ 0x41
 800cc98:	d009      	beq.n	800ccae <pbuf_alloc_reference+0x2a>
 800cc9a:	883b      	ldrh	r3, [r7, #0]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d006      	beq.n	800ccae <pbuf_alloc_reference+0x2a>
 800cca0:	4b0f      	ldr	r3, [pc, #60]	@ (800cce0 <pbuf_alloc_reference+0x5c>)
 800cca2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cca6:	490f      	ldr	r1, [pc, #60]	@ (800cce4 <pbuf_alloc_reference+0x60>)
 800cca8:	480f      	ldr	r0, [pc, #60]	@ (800cce8 <pbuf_alloc_reference+0x64>)
 800ccaa:	f00c f913 	bl	8018ed4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ccae:	200b      	movs	r0, #11
 800ccb0:	f7ff fab0 	bl	800c214 <memp_malloc>
 800ccb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e00b      	b.n	800ccd8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ccc0:	8879      	ldrh	r1, [r7, #2]
 800ccc2:	887a      	ldrh	r2, [r7, #2]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	883b      	ldrh	r3, [r7, #0]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	460b      	mov	r3, r1
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7ff feb7 	bl	800ca44 <pbuf_init_alloced_pbuf>
  return p;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	0801b748 	.word	0x0801b748
 800cce4:	0801b84c 	.word	0x0801b84c
 800cce8:	0801b7a8 	.word	0x0801b7a8

0800ccec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af02      	add	r7, sp, #8
 800ccf2:	607b      	str	r3, [r7, #4]
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73fb      	strb	r3, [r7, #15]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	81bb      	strh	r3, [r7, #12]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cd04:	8a7b      	ldrh	r3, [r7, #18]
 800cd06:	3303      	adds	r3, #3
 800cd08:	f023 0203 	bic.w	r2, r3, #3
 800cd0c:	89bb      	ldrh	r3, [r7, #12]
 800cd0e:	441a      	add	r2, r3
 800cd10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d901      	bls.n	800cd1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e018      	b.n	800cd4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d007      	beq.n	800cd30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cd20:	8a7b      	ldrh	r3, [r7, #18]
 800cd22:	3303      	adds	r3, #3
 800cd24:	f023 0303 	bic.w	r3, r3, #3
 800cd28:	6a3a      	ldr	r2, [r7, #32]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	e001      	b.n	800cd34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cd30:	2300      	movs	r3, #0
 800cd32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	89b9      	ldrh	r1, [r7, #12]
 800cd38:	89ba      	ldrh	r2, [r7, #12]
 800cd3a:	2302      	movs	r3, #2
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	897b      	ldrh	r3, [r7, #10]
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	460b      	mov	r3, r1
 800cd44:	6979      	ldr	r1, [r7, #20]
 800cd46:	f7ff fe7d 	bl	800ca44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cd4a:	687b      	ldr	r3, [r7, #4]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d106      	bne.n	800cd74 <pbuf_realloc+0x20>
 800cd66:	4b3a      	ldr	r3, [pc, #232]	@ (800ce50 <pbuf_realloc+0xfc>)
 800cd68:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cd6c:	4939      	ldr	r1, [pc, #228]	@ (800ce54 <pbuf_realloc+0x100>)
 800cd6e:	483a      	ldr	r0, [pc, #232]	@ (800ce58 <pbuf_realloc+0x104>)
 800cd70:	f00c f8b0 	bl	8018ed4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	891b      	ldrh	r3, [r3, #8]
 800cd78:	887a      	ldrh	r2, [r7, #2]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d263      	bcs.n	800ce46 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	891a      	ldrh	r2, [r3, #8]
 800cd82:	887b      	ldrh	r3, [r7, #2]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cd88:	887b      	ldrh	r3, [r7, #2]
 800cd8a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cd90:	e018      	b.n	800cdc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	895b      	ldrh	r3, [r3, #10]
 800cd96:	897a      	ldrh	r2, [r7, #10]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	891a      	ldrh	r2, [r3, #8]
 800cda0:	893b      	ldrh	r3, [r7, #8]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <pbuf_realloc+0x70>
 800cdb6:	4b26      	ldr	r3, [pc, #152]	@ (800ce50 <pbuf_realloc+0xfc>)
 800cdb8:	f240 12af 	movw	r2, #431	@ 0x1af
 800cdbc:	4927      	ldr	r1, [pc, #156]	@ (800ce5c <pbuf_realloc+0x108>)
 800cdbe:	4826      	ldr	r0, [pc, #152]	@ (800ce58 <pbuf_realloc+0x104>)
 800cdc0:	f00c f888 	bl	8018ed4 <iprintf>
  while (rem_len > q->len) {
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	895b      	ldrh	r3, [r3, #10]
 800cdc8:	897a      	ldrh	r2, [r7, #10]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d8e1      	bhi.n	800cd92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	7b1b      	ldrb	r3, [r3, #12]
 800cdd2:	f003 030f 	and.w	r3, r3, #15
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d121      	bne.n	800ce1e <pbuf_realloc+0xca>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	895b      	ldrh	r3, [r3, #10]
 800cdde:	897a      	ldrh	r2, [r7, #10]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d01c      	beq.n	800ce1e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	7b5b      	ldrb	r3, [r3, #13]
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d116      	bne.n	800ce1e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	897b      	ldrh	r3, [r7, #10]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	4619      	mov	r1, r3
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f7fe ff58 	bl	800bcb8 <mem_trim>
 800ce08:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <pbuf_realloc+0xca>
 800ce10:	4b0f      	ldr	r3, [pc, #60]	@ (800ce50 <pbuf_realloc+0xfc>)
 800ce12:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ce16:	4912      	ldr	r1, [pc, #72]	@ (800ce60 <pbuf_realloc+0x10c>)
 800ce18:	480f      	ldr	r0, [pc, #60]	@ (800ce58 <pbuf_realloc+0x104>)
 800ce1a:	f00c f85b 	bl	8018ed4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	897a      	ldrh	r2, [r7, #10]
 800ce22:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	895a      	ldrh	r2, [r3, #10]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d004      	beq.n	800ce3e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 f911 	bl	800d060 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	e000      	b.n	800ce48 <pbuf_realloc+0xf4>
    return;
 800ce46:	bf00      	nop

}
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	0801b748 	.word	0x0801b748
 800ce54:	0801b860 	.word	0x0801b860
 800ce58:	0801b7a8 	.word	0x0801b7a8
 800ce5c:	0801b878 	.word	0x0801b878
 800ce60:	0801b890 	.word	0x0801b890

0800ce64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d106      	bne.n	800ce86 <pbuf_add_header_impl+0x22>
 800ce78:	4b2b      	ldr	r3, [pc, #172]	@ (800cf28 <pbuf_add_header_impl+0xc4>)
 800ce7a:	f240 12df 	movw	r2, #479	@ 0x1df
 800ce7e:	492b      	ldr	r1, [pc, #172]	@ (800cf2c <pbuf_add_header_impl+0xc8>)
 800ce80:	482b      	ldr	r0, [pc, #172]	@ (800cf30 <pbuf_add_header_impl+0xcc>)
 800ce82:	f00c f827 	bl	8018ed4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <pbuf_add_header_impl+0x30>
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce92:	d301      	bcc.n	800ce98 <pbuf_add_header_impl+0x34>
    return 1;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e043      	b.n	800cf20 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <pbuf_add_header_impl+0x3e>
    return 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e03e      	b.n	800cf20 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	891a      	ldrh	r2, [r3, #8]
 800ceaa:	8a7b      	ldrh	r3, [r7, #18]
 800ceac:	4413      	add	r3, r2
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	8a7a      	ldrh	r2, [r7, #18]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d901      	bls.n	800ceba <pbuf_add_header_impl+0x56>
    return 1;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e032      	b.n	800cf20 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	7b1b      	ldrb	r3, [r3, #12]
 800cebe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cec0:	8a3b      	ldrh	r3, [r7, #16]
 800cec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00c      	beq.n	800cee4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	425b      	negs	r3, r3
 800ced2:	4413      	add	r3, r2
 800ced4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3310      	adds	r3, #16
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d20d      	bcs.n	800cefc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e01d      	b.n	800cf20 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d006      	beq.n	800cef8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	425b      	negs	r3, r3
 800cef2:	4413      	add	r3, r2
 800cef4:	617b      	str	r3, [r7, #20]
 800cef6:	e001      	b.n	800cefc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e011      	b.n	800cf20 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	697a      	ldr	r2, [r7, #20]
 800cf00:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	895a      	ldrh	r2, [r3, #10]
 800cf06:	8a7b      	ldrh	r3, [r7, #18]
 800cf08:	4413      	add	r3, r2
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	891a      	ldrh	r2, [r3, #8]
 800cf14:	8a7b      	ldrh	r3, [r7, #18]
 800cf16:	4413      	add	r3, r2
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	811a      	strh	r2, [r3, #8]


  return 0;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	0801b748 	.word	0x0801b748
 800cf2c:	0801b8ac 	.word	0x0801b8ac
 800cf30:	0801b7a8 	.word	0x0801b7a8

0800cf34 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cf3e:	2200      	movs	r2, #0
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff ff8e 	bl	800ce64 <pbuf_add_header_impl>
 800cf48:	4603      	mov	r3, r0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <pbuf_remove_header+0x1e>
 800cf64:	4b20      	ldr	r3, [pc, #128]	@ (800cfe8 <pbuf_remove_header+0x94>)
 800cf66:	f240 224b 	movw	r2, #587	@ 0x24b
 800cf6a:	4920      	ldr	r1, [pc, #128]	@ (800cfec <pbuf_remove_header+0x98>)
 800cf6c:	4820      	ldr	r0, [pc, #128]	@ (800cff0 <pbuf_remove_header+0x9c>)
 800cf6e:	f00b ffb1 	bl	8018ed4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d003      	beq.n	800cf80 <pbuf_remove_header+0x2c>
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf7e:	d301      	bcc.n	800cf84 <pbuf_remove_header+0x30>
    return 1;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e02c      	b.n	800cfde <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <pbuf_remove_header+0x3a>
    return 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	e027      	b.n	800cfde <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	895b      	ldrh	r3, [r3, #10]
 800cf96:	89fa      	ldrh	r2, [r7, #14]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d908      	bls.n	800cfae <pbuf_remove_header+0x5a>
 800cf9c:	4b12      	ldr	r3, [pc, #72]	@ (800cfe8 <pbuf_remove_header+0x94>)
 800cf9e:	f240 2255 	movw	r2, #597	@ 0x255
 800cfa2:	4914      	ldr	r1, [pc, #80]	@ (800cff4 <pbuf_remove_header+0xa0>)
 800cfa4:	4812      	ldr	r0, [pc, #72]	@ (800cff0 <pbuf_remove_header+0x9c>)
 800cfa6:	f00b ff95 	bl	8018ed4 <iprintf>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e017      	b.n	800cfde <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685a      	ldr	r2, [r3, #4]
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	441a      	add	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	895a      	ldrh	r2, [r3, #10]
 800cfc4:	89fb      	ldrh	r3, [r7, #14]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	891a      	ldrh	r2, [r3, #8]
 800cfd2:	89fb      	ldrh	r3, [r7, #14]
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	0801b748 	.word	0x0801b748
 800cfec:	0801b8ac 	.word	0x0801b8ac
 800cff0:	0801b7a8 	.word	0x0801b7a8
 800cff4:	0801b8b8 	.word	0x0801b8b8

0800cff8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	460b      	mov	r3, r1
 800d002:	807b      	strh	r3, [r7, #2]
 800d004:	4613      	mov	r3, r2
 800d006:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d008:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	da08      	bge.n	800d022 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d010:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d014:	425b      	negs	r3, r3
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff ff9b 	bl	800cf54 <pbuf_remove_header>
 800d01e:	4603      	mov	r3, r0
 800d020:	e007      	b.n	800d032 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d026:	787a      	ldrb	r2, [r7, #1]
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff ff1a 	bl	800ce64 <pbuf_add_header_impl>
 800d030:	4603      	mov	r3, r0
  }
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b082      	sub	sp, #8
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	460b      	mov	r3, r1
 800d044:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d04a:	2201      	movs	r2, #1
 800d04c:	4619      	mov	r1, r3
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7ff ffd2 	bl	800cff8 <pbuf_header_impl>
 800d054:	4603      	mov	r3, r0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b088      	sub	sp, #32
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10b      	bne.n	800d086 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d106      	bne.n	800d082 <pbuf_free+0x22>
 800d074:	4b3b      	ldr	r3, [pc, #236]	@ (800d164 <pbuf_free+0x104>)
 800d076:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d07a:	493b      	ldr	r1, [pc, #236]	@ (800d168 <pbuf_free+0x108>)
 800d07c:	483b      	ldr	r0, [pc, #236]	@ (800d16c <pbuf_free+0x10c>)
 800d07e:	f00b ff29 	bl	8018ed4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d082:	2300      	movs	r3, #0
 800d084:	e069      	b.n	800d15a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d08a:	e062      	b.n	800d152 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d08c:	f00b fdd6 	bl	8018c3c <sys_arch_protect>
 800d090:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	7b9b      	ldrb	r3, [r3, #14]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d106      	bne.n	800d0a8 <pbuf_free+0x48>
 800d09a:	4b32      	ldr	r3, [pc, #200]	@ (800d164 <pbuf_free+0x104>)
 800d09c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d0a0:	4933      	ldr	r1, [pc, #204]	@ (800d170 <pbuf_free+0x110>)
 800d0a2:	4832      	ldr	r0, [pc, #200]	@ (800d16c <pbuf_free+0x10c>)
 800d0a4:	f00b ff16 	bl	8018ed4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	7b9b      	ldrb	r3, [r3, #14]
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	739a      	strb	r2, [r3, #14]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7b9b      	ldrb	r3, [r3, #14]
 800d0b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d0ba:	69b8      	ldr	r0, [r7, #24]
 800d0bc:	f00b fdcc 	bl	8018c58 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d0c0:	7dfb      	ldrb	r3, [r7, #23]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d143      	bne.n	800d14e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7b1b      	ldrb	r3, [r3, #12]
 800d0d0:	f003 030f 	and.w	r3, r3, #15
 800d0d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7b5b      	ldrb	r3, [r3, #13]
 800d0da:	f003 0302 	and.w	r3, r3, #2
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d011      	beq.n	800d106 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d106      	bne.n	800d0fc <pbuf_free+0x9c>
 800d0ee:	4b1d      	ldr	r3, [pc, #116]	@ (800d164 <pbuf_free+0x104>)
 800d0f0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d0f4:	491f      	ldr	r1, [pc, #124]	@ (800d174 <pbuf_free+0x114>)
 800d0f6:	481d      	ldr	r0, [pc, #116]	@ (800d16c <pbuf_free+0x10c>)
 800d0f8:	f00b feec 	bl	8018ed4 <iprintf>
        pc->custom_free_function(p);
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	4798      	blx	r3
 800d104:	e01d      	b.n	800d142 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d104      	bne.n	800d116 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d10c:	6879      	ldr	r1, [r7, #4]
 800d10e:	200c      	movs	r0, #12
 800d110:	f7ff f8f6 	bl	800c300 <memp_free>
 800d114:	e015      	b.n	800d142 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d104      	bne.n	800d126 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d11c:	6879      	ldr	r1, [r7, #4]
 800d11e:	200b      	movs	r0, #11
 800d120:	f7ff f8ee 	bl	800c300 <memp_free>
 800d124:	e00d      	b.n	800d142 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d103      	bne.n	800d134 <pbuf_free+0xd4>
          mem_free(p);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7fe fd33 	bl	800bb98 <mem_free>
 800d132:	e006      	b.n	800d142 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d134:	4b0b      	ldr	r3, [pc, #44]	@ (800d164 <pbuf_free+0x104>)
 800d136:	f240 320f 	movw	r2, #783	@ 0x30f
 800d13a:	490f      	ldr	r1, [pc, #60]	@ (800d178 <pbuf_free+0x118>)
 800d13c:	480b      	ldr	r0, [pc, #44]	@ (800d16c <pbuf_free+0x10c>)
 800d13e:	f00b fec9 	bl	8018ed4 <iprintf>
        }
      }
      count++;
 800d142:	7ffb      	ldrb	r3, [r7, #31]
 800d144:	3301      	adds	r3, #1
 800d146:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	607b      	str	r3, [r7, #4]
 800d14c:	e001      	b.n	800d152 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d199      	bne.n	800d08c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d158:	7ffb      	ldrb	r3, [r7, #31]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3720      	adds	r7, #32
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	0801b748 	.word	0x0801b748
 800d168:	0801b8ac 	.word	0x0801b8ac
 800d16c:	0801b7a8 	.word	0x0801b7a8
 800d170:	0801b8d8 	.word	0x0801b8d8
 800d174:	0801b8f0 	.word	0x0801b8f0
 800d178:	0801b914 	.word	0x0801b914

0800d17c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d188:	e005      	b.n	800d196 <pbuf_clen+0x1a>
    ++len;
 800d18a:	89fb      	ldrh	r3, [r7, #14]
 800d18c:	3301      	adds	r3, #1
 800d18e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f6      	bne.n	800d18a <pbuf_clen+0xe>
  }
  return len;
 800d19c:	89fb      	ldrh	r3, [r7, #14]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
	...

0800d1ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d016      	beq.n	800d1e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d1ba:	f00b fd3f 	bl	8018c3c <sys_arch_protect>
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	7b9b      	ldrb	r3, [r3, #14]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	739a      	strb	r2, [r3, #14]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f00b fd43 	bl	8018c58 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	7b9b      	ldrb	r3, [r3, #14]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <pbuf_ref+0x3c>
 800d1da:	4b05      	ldr	r3, [pc, #20]	@ (800d1f0 <pbuf_ref+0x44>)
 800d1dc:	f240 3242 	movw	r2, #834	@ 0x342
 800d1e0:	4904      	ldr	r1, [pc, #16]	@ (800d1f4 <pbuf_ref+0x48>)
 800d1e2:	4805      	ldr	r0, [pc, #20]	@ (800d1f8 <pbuf_ref+0x4c>)
 800d1e4:	f00b fe76 	bl	8018ed4 <iprintf>
  }
}
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	0801b748 	.word	0x0801b748
 800d1f4:	0801b928 	.word	0x0801b928
 800d1f8:	0801b7a8 	.word	0x0801b7a8

0800d1fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <pbuf_cat+0x16>
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d107      	bne.n	800d222 <pbuf_cat+0x26>
 800d212:	4b20      	ldr	r3, [pc, #128]	@ (800d294 <pbuf_cat+0x98>)
 800d214:	f240 3259 	movw	r2, #857	@ 0x359
 800d218:	491f      	ldr	r1, [pc, #124]	@ (800d298 <pbuf_cat+0x9c>)
 800d21a:	4820      	ldr	r0, [pc, #128]	@ (800d29c <pbuf_cat+0xa0>)
 800d21c:	f00b fe5a 	bl	8018ed4 <iprintf>
 800d220:	e034      	b.n	800d28c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	e00a      	b.n	800d23e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	891a      	ldrh	r2, [r3, #8]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	891b      	ldrh	r3, [r3, #8]
 800d230:	4413      	add	r3, r2
 800d232:	b29a      	uxth	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1f0      	bne.n	800d228 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	891a      	ldrh	r2, [r3, #8]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	895b      	ldrh	r3, [r3, #10]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d006      	beq.n	800d260 <pbuf_cat+0x64>
 800d252:	4b10      	ldr	r3, [pc, #64]	@ (800d294 <pbuf_cat+0x98>)
 800d254:	f240 3262 	movw	r2, #866	@ 0x362
 800d258:	4911      	ldr	r1, [pc, #68]	@ (800d2a0 <pbuf_cat+0xa4>)
 800d25a:	4810      	ldr	r0, [pc, #64]	@ (800d29c <pbuf_cat+0xa0>)
 800d25c:	f00b fe3a 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d006      	beq.n	800d276 <pbuf_cat+0x7a>
 800d268:	4b0a      	ldr	r3, [pc, #40]	@ (800d294 <pbuf_cat+0x98>)
 800d26a:	f240 3263 	movw	r2, #867	@ 0x363
 800d26e:	490d      	ldr	r1, [pc, #52]	@ (800d2a4 <pbuf_cat+0xa8>)
 800d270:	480a      	ldr	r0, [pc, #40]	@ (800d29c <pbuf_cat+0xa0>)
 800d272:	f00b fe2f 	bl	8018ed4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	891a      	ldrh	r2, [r3, #8]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	4413      	add	r3, r2
 800d280:	b29a      	uxth	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	0801b748 	.word	0x0801b748
 800d298:	0801b93c 	.word	0x0801b93c
 800d29c:	0801b7a8 	.word	0x0801b7a8
 800d2a0:	0801b974 	.word	0x0801b974
 800d2a4:	0801b9a4 	.word	0x0801b9a4

0800d2a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ffa1 	bl	800d1fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d2ba:	6838      	ldr	r0, [r7, #0]
 800d2bc:	f7ff ff76 	bl	800d1ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d2c0:	bf00      	nop
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d008      	beq.n	800d2f2 <pbuf_copy+0x2a>
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <pbuf_copy+0x2a>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	891a      	ldrh	r2, [r3, #8]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	891b      	ldrh	r3, [r3, #8]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d209      	bcs.n	800d306 <pbuf_copy+0x3e>
 800d2f2:	4b57      	ldr	r3, [pc, #348]	@ (800d450 <pbuf_copy+0x188>)
 800d2f4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d2f8:	4956      	ldr	r1, [pc, #344]	@ (800d454 <pbuf_copy+0x18c>)
 800d2fa:	4857      	ldr	r0, [pc, #348]	@ (800d458 <pbuf_copy+0x190>)
 800d2fc:	f00b fdea 	bl	8018ed4 <iprintf>
 800d300:	f06f 030f 	mvn.w	r3, #15
 800d304:	e09f      	b.n	800d446 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	895b      	ldrh	r3, [r3, #10]
 800d30a:	461a      	mov	r2, r3
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	1ad2      	subs	r2, r2, r3
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	895b      	ldrh	r3, [r3, #10]
 800d314:	4619      	mov	r1, r3
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	1acb      	subs	r3, r1, r3
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d306      	bcc.n	800d32c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	895b      	ldrh	r3, [r3, #10]
 800d322:	461a      	mov	r2, r3
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	e005      	b.n	800d338 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	895b      	ldrh	r3, [r3, #10]
 800d330:	461a      	mov	r2, r3
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	18d0      	adds	r0, r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	4413      	add	r3, r2
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	4619      	mov	r1, r3
 800d34c:	f00b ffc3 	bl	80192d6 <memcpy>
    offset_to += len;
 800d350:	697a      	ldr	r2, [r7, #20]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	4413      	add	r3, r2
 800d356:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	4413      	add	r3, r2
 800d35e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	895b      	ldrh	r3, [r3, #10]
 800d364:	461a      	mov	r2, r3
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	4293      	cmp	r3, r2
 800d36a:	d906      	bls.n	800d37a <pbuf_copy+0xb2>
 800d36c:	4b38      	ldr	r3, [pc, #224]	@ (800d450 <pbuf_copy+0x188>)
 800d36e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d372:	493a      	ldr	r1, [pc, #232]	@ (800d45c <pbuf_copy+0x194>)
 800d374:	4838      	ldr	r0, [pc, #224]	@ (800d458 <pbuf_copy+0x190>)
 800d376:	f00b fdad 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	895b      	ldrh	r3, [r3, #10]
 800d37e:	461a      	mov	r2, r3
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	4293      	cmp	r3, r2
 800d384:	d906      	bls.n	800d394 <pbuf_copy+0xcc>
 800d386:	4b32      	ldr	r3, [pc, #200]	@ (800d450 <pbuf_copy+0x188>)
 800d388:	f240 32da 	movw	r2, #986	@ 0x3da
 800d38c:	4934      	ldr	r1, [pc, #208]	@ (800d460 <pbuf_copy+0x198>)
 800d38e:	4832      	ldr	r0, [pc, #200]	@ (800d458 <pbuf_copy+0x190>)
 800d390:	f00b fda0 	bl	8018ed4 <iprintf>
    if (offset_from >= p_from->len) {
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	461a      	mov	r2, r3
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d304      	bcc.n	800d3aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	895b      	ldrh	r3, [r3, #10]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d114      	bne.n	800d3e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10c      	bne.n	800d3e0 <pbuf_copy+0x118>
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d009      	beq.n	800d3e0 <pbuf_copy+0x118>
 800d3cc:	4b20      	ldr	r3, [pc, #128]	@ (800d450 <pbuf_copy+0x188>)
 800d3ce:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d3d2:	4924      	ldr	r1, [pc, #144]	@ (800d464 <pbuf_copy+0x19c>)
 800d3d4:	4820      	ldr	r0, [pc, #128]	@ (800d458 <pbuf_copy+0x190>)
 800d3d6:	f00b fd7d 	bl	8018ed4 <iprintf>
 800d3da:	f06f 030f 	mvn.w	r3, #15
 800d3de:	e032      	b.n	800d446 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d013      	beq.n	800d40e <pbuf_copy+0x146>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	895a      	ldrh	r2, [r3, #10]
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	891b      	ldrh	r3, [r3, #8]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d10d      	bne.n	800d40e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d009      	beq.n	800d40e <pbuf_copy+0x146>
 800d3fa:	4b15      	ldr	r3, [pc, #84]	@ (800d450 <pbuf_copy+0x188>)
 800d3fc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d400:	4919      	ldr	r1, [pc, #100]	@ (800d468 <pbuf_copy+0x1a0>)
 800d402:	4815      	ldr	r0, [pc, #84]	@ (800d458 <pbuf_copy+0x190>)
 800d404:	f00b fd66 	bl	8018ed4 <iprintf>
 800d408:	f06f 0305 	mvn.w	r3, #5
 800d40c:	e01b      	b.n	800d446 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d013      	beq.n	800d43c <pbuf_copy+0x174>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	895a      	ldrh	r2, [r3, #10]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	891b      	ldrh	r3, [r3, #8]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d10d      	bne.n	800d43c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <pbuf_copy+0x174>
 800d428:	4b09      	ldr	r3, [pc, #36]	@ (800d450 <pbuf_copy+0x188>)
 800d42a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d42e:	490e      	ldr	r1, [pc, #56]	@ (800d468 <pbuf_copy+0x1a0>)
 800d430:	4809      	ldr	r0, [pc, #36]	@ (800d458 <pbuf_copy+0x190>)
 800d432:	f00b fd4f 	bl	8018ed4 <iprintf>
 800d436:	f06f 0305 	mvn.w	r3, #5
 800d43a:	e004      	b.n	800d446 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f47f af61 	bne.w	800d306 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	0801b748 	.word	0x0801b748
 800d454:	0801b9f0 	.word	0x0801b9f0
 800d458:	0801b7a8 	.word	0x0801b7a8
 800d45c:	0801ba20 	.word	0x0801ba20
 800d460:	0801ba38 	.word	0x0801ba38
 800d464:	0801ba54 	.word	0x0801ba54
 800d468:	0801ba64 	.word	0x0801ba64

0800d46c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4611      	mov	r1, r2
 800d478:	461a      	mov	r2, r3
 800d47a:	460b      	mov	r3, r1
 800d47c:	80fb      	strh	r3, [r7, #6]
 800d47e:	4613      	mov	r3, r2
 800d480:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d108      	bne.n	800d4a2 <pbuf_copy_partial+0x36>
 800d490:	4b2b      	ldr	r3, [pc, #172]	@ (800d540 <pbuf_copy_partial+0xd4>)
 800d492:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d496:	492b      	ldr	r1, [pc, #172]	@ (800d544 <pbuf_copy_partial+0xd8>)
 800d498:	482b      	ldr	r0, [pc, #172]	@ (800d548 <pbuf_copy_partial+0xdc>)
 800d49a:	f00b fd1b 	bl	8018ed4 <iprintf>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e04a      	b.n	800d538 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d108      	bne.n	800d4ba <pbuf_copy_partial+0x4e>
 800d4a8:	4b25      	ldr	r3, [pc, #148]	@ (800d540 <pbuf_copy_partial+0xd4>)
 800d4aa:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d4ae:	4927      	ldr	r1, [pc, #156]	@ (800d54c <pbuf_copy_partial+0xe0>)
 800d4b0:	4825      	ldr	r0, [pc, #148]	@ (800d548 <pbuf_copy_partial+0xdc>)
 800d4b2:	f00b fd0f 	bl	8018ed4 <iprintf>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e03e      	b.n	800d538 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	61fb      	str	r3, [r7, #28]
 800d4be:	e034      	b.n	800d52a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d4c0:	88bb      	ldrh	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00a      	beq.n	800d4dc <pbuf_copy_partial+0x70>
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	895b      	ldrh	r3, [r3, #10]
 800d4ca:	88ba      	ldrh	r2, [r7, #4]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d305      	bcc.n	800d4dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	895b      	ldrh	r3, [r3, #10]
 800d4d4:	88ba      	ldrh	r2, [r7, #4]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	80bb      	strh	r3, [r7, #4]
 800d4da:	e023      	b.n	800d524 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	895a      	ldrh	r2, [r3, #10]
 800d4e0:	88bb      	ldrh	r3, [r7, #4]
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d4e6:	8b3a      	ldrh	r2, [r7, #24]
 800d4e8:	88fb      	ldrh	r3, [r7, #6]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d901      	bls.n	800d4f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d4ee:	88fb      	ldrh	r3, [r7, #6]
 800d4f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d4f2:	8b7b      	ldrh	r3, [r7, #26]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	18d0      	adds	r0, r2, r3
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	88bb      	ldrh	r3, [r7, #4]
 800d4fe:	4413      	add	r3, r2
 800d500:	8b3a      	ldrh	r2, [r7, #24]
 800d502:	4619      	mov	r1, r3
 800d504:	f00b fee7 	bl	80192d6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d508:	8afa      	ldrh	r2, [r7, #22]
 800d50a:	8b3b      	ldrh	r3, [r7, #24]
 800d50c:	4413      	add	r3, r2
 800d50e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d510:	8b7a      	ldrh	r2, [r7, #26]
 800d512:	8b3b      	ldrh	r3, [r7, #24]
 800d514:	4413      	add	r3, r2
 800d516:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	8b3b      	ldrh	r3, [r7, #24]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	61fb      	str	r3, [r7, #28]
 800d52a:	88fb      	ldrh	r3, [r7, #6]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <pbuf_copy_partial+0xca>
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1c4      	bne.n	800d4c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d536:	8afb      	ldrh	r3, [r7, #22]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3720      	adds	r7, #32
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	0801b748 	.word	0x0801b748
 800d544:	0801ba90 	.word	0x0801ba90
 800d548:	0801b7a8 	.word	0x0801b7a8
 800d54c:	0801bab0 	.word	0x0801bab0

0800d550 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	4603      	mov	r3, r0
 800d558:	603a      	str	r2, [r7, #0]
 800d55a:	71fb      	strb	r3, [r7, #7]
 800d55c:	460b      	mov	r3, r1
 800d55e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	8919      	ldrh	r1, [r3, #8]
 800d564:	88ba      	ldrh	r2, [r7, #4]
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	4618      	mov	r0, r3
 800d56a:	f7ff fa95 	bl	800ca98 <pbuf_alloc>
 800d56e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d101      	bne.n	800d57a <pbuf_clone+0x2a>
    return NULL;
 800d576:	2300      	movs	r3, #0
 800d578:	e011      	b.n	800d59e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d57a:	6839      	ldr	r1, [r7, #0]
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff fea3 	bl	800d2c8 <pbuf_copy>
 800d582:	4603      	mov	r3, r0
 800d584:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d586:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <pbuf_clone+0x4c>
 800d58e:	4b06      	ldr	r3, [pc, #24]	@ (800d5a8 <pbuf_clone+0x58>)
 800d590:	f240 5224 	movw	r2, #1316	@ 0x524
 800d594:	4905      	ldr	r1, [pc, #20]	@ (800d5ac <pbuf_clone+0x5c>)
 800d596:	4806      	ldr	r0, [pc, #24]	@ (800d5b0 <pbuf_clone+0x60>)
 800d598:	f00b fc9c 	bl	8018ed4 <iprintf>
  return q;
 800d59c:	68fb      	ldr	r3, [r7, #12]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	0801b748 	.word	0x0801b748
 800d5ac:	0801bbbc 	.word	0x0801bbbc
 800d5b0:	0801b7a8 	.word	0x0801b7a8

0800d5b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d5b8:	f00b fb8c 	bl	8018cd4 <rand>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	4b01      	ldr	r3, [pc, #4]	@ (800d5d4 <tcp_init+0x20>)
 800d5ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d5d0:	bf00      	nop
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20000024 	.word	0x20000024

0800d5d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d105      	bne.n	800d5f4 <tcp_free+0x1c>
 800d5e8:	4b06      	ldr	r3, [pc, #24]	@ (800d604 <tcp_free+0x2c>)
 800d5ea:	22d4      	movs	r2, #212	@ 0xd4
 800d5ec:	4906      	ldr	r1, [pc, #24]	@ (800d608 <tcp_free+0x30>)
 800d5ee:	4807      	ldr	r0, [pc, #28]	@ (800d60c <tcp_free+0x34>)
 800d5f0:	f00b fc70 	bl	8018ed4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d5f4:	6879      	ldr	r1, [r7, #4]
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	f7fe fe82 	bl	800c300 <memp_free>
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	0801bc48 	.word	0x0801bc48
 800d608:	0801bc78 	.word	0x0801bc78
 800d60c:	0801bc8c 	.word	0x0801bc8c

0800d610 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d105      	bne.n	800d62c <tcp_free_listen+0x1c>
 800d620:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <tcp_free_listen+0x2c>)
 800d622:	22df      	movs	r2, #223	@ 0xdf
 800d624:	4906      	ldr	r1, [pc, #24]	@ (800d640 <tcp_free_listen+0x30>)
 800d626:	4807      	ldr	r0, [pc, #28]	@ (800d644 <tcp_free_listen+0x34>)
 800d628:	f00b fc54 	bl	8018ed4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	2002      	movs	r0, #2
 800d630:	f7fe fe66 	bl	800c300 <memp_free>
}
 800d634:	bf00      	nop
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	0801bc48 	.word	0x0801bc48
 800d640:	0801bcb4 	.word	0x0801bcb4
 800d644:	0801bc8c 	.word	0x0801bc8c

0800d648 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d64c:	f001 f9d2 	bl	800e9f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d650:	4b07      	ldr	r3, [pc, #28]	@ (800d670 <tcp_tmr+0x28>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	b2da      	uxtb	r2, r3
 800d658:	4b05      	ldr	r3, [pc, #20]	@ (800d670 <tcp_tmr+0x28>)
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	4b04      	ldr	r3, [pc, #16]	@ (800d670 <tcp_tmr+0x28>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d668:	f000 fe82 	bl	800e370 <tcp_slowtmr>
  }
}
 800d66c:	bf00      	nop
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	20010f89 	.word	0x20010f89

0800d674 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d105      	bne.n	800d690 <tcp_remove_listener+0x1c>
 800d684:	4b0d      	ldr	r3, [pc, #52]	@ (800d6bc <tcp_remove_listener+0x48>)
 800d686:	22ff      	movs	r2, #255	@ 0xff
 800d688:	490d      	ldr	r1, [pc, #52]	@ (800d6c0 <tcp_remove_listener+0x4c>)
 800d68a:	480e      	ldr	r0, [pc, #56]	@ (800d6c4 <tcp_remove_listener+0x50>)
 800d68c:	f00b fc22 	bl	8018ed4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	e00a      	b.n	800d6ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d102      	bne.n	800d6a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1f1      	bne.n	800d696 <tcp_remove_listener+0x22>
    }
  }
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	0801bc48 	.word	0x0801bc48
 800d6c0:	0801bcd0 	.word	0x0801bcd0
 800d6c4:	0801bc8c 	.word	0x0801bc8c

0800d6c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d106      	bne.n	800d6e4 <tcp_listen_closed+0x1c>
 800d6d6:	4b14      	ldr	r3, [pc, #80]	@ (800d728 <tcp_listen_closed+0x60>)
 800d6d8:	f240 1211 	movw	r2, #273	@ 0x111
 800d6dc:	4913      	ldr	r1, [pc, #76]	@ (800d72c <tcp_listen_closed+0x64>)
 800d6de:	4814      	ldr	r0, [pc, #80]	@ (800d730 <tcp_listen_closed+0x68>)
 800d6e0:	f00b fbf8 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d006      	beq.n	800d6fa <tcp_listen_closed+0x32>
 800d6ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d728 <tcp_listen_closed+0x60>)
 800d6ee:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d6f2:	4910      	ldr	r1, [pc, #64]	@ (800d734 <tcp_listen_closed+0x6c>)
 800d6f4:	480e      	ldr	r0, [pc, #56]	@ (800d730 <tcp_listen_closed+0x68>)
 800d6f6:	f00b fbed 	bl	8018ed4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	e00b      	b.n	800d718 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d700:	4a0d      	ldr	r2, [pc, #52]	@ (800d738 <tcp_listen_closed+0x70>)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff ffb1 	bl	800d674 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3301      	adds	r3, #1
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d9f0      	bls.n	800d700 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d71e:	bf00      	nop
 800d720:	bf00      	nop
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	0801bc48 	.word	0x0801bc48
 800d72c:	0801bcf8 	.word	0x0801bcf8
 800d730:	0801bc8c 	.word	0x0801bc8c
 800d734:	0801bd04 	.word	0x0801bd04
 800d738:	08028144 	.word	0x08028144

0800d73c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d73c:	b5b0      	push	{r4, r5, r7, lr}
 800d73e:	b088      	sub	sp, #32
 800d740:	af04      	add	r7, sp, #16
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	460b      	mov	r3, r1
 800d746:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_close_shutdown+0x20>
 800d74e:	4b63      	ldr	r3, [pc, #396]	@ (800d8dc <tcp_close_shutdown+0x1a0>)
 800d750:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d754:	4962      	ldr	r1, [pc, #392]	@ (800d8e0 <tcp_close_shutdown+0x1a4>)
 800d756:	4863      	ldr	r0, [pc, #396]	@ (800d8e4 <tcp_close_shutdown+0x1a8>)
 800d758:	f00b fbbc 	bl	8018ed4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d75c:	78fb      	ldrb	r3, [r7, #3]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d066      	beq.n	800d830 <tcp_close_shutdown+0xf4>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	7d1b      	ldrb	r3, [r3, #20]
 800d766:	2b04      	cmp	r3, #4
 800d768:	d003      	beq.n	800d772 <tcp_close_shutdown+0x36>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	7d1b      	ldrb	r3, [r3, #20]
 800d76e:	2b07      	cmp	r3, #7
 800d770:	d15e      	bne.n	800d830 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d776:	2b00      	cmp	r3, #0
 800d778:	d104      	bne.n	800d784 <tcp_close_shutdown+0x48>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d77e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d782:	d055      	beq.n	800d830 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	8b5b      	ldrh	r3, [r3, #26]
 800d788:	f003 0310 	and.w	r3, r3, #16
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d106      	bne.n	800d79e <tcp_close_shutdown+0x62>
 800d790:	4b52      	ldr	r3, [pc, #328]	@ (800d8dc <tcp_close_shutdown+0x1a0>)
 800d792:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d796:	4954      	ldr	r1, [pc, #336]	@ (800d8e8 <tcp_close_shutdown+0x1ac>)
 800d798:	4852      	ldr	r0, [pc, #328]	@ (800d8e4 <tcp_close_shutdown+0x1a8>)
 800d79a:	f00b fb9b 	bl	8018ed4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d7a6:	687d      	ldr	r5, [r7, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	8ad2      	ldrh	r2, [r2, #22]
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	8b09      	ldrh	r1, [r1, #24]
 800d7b4:	9102      	str	r1, [sp, #8]
 800d7b6:	9201      	str	r2, [sp, #4]
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	462b      	mov	r3, r5
 800d7bc:	4622      	mov	r2, r4
 800d7be:	4601      	mov	r1, r0
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f005 feff 	bl	80135c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f001 fce2 	bl	800f190 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d7cc:	4b47      	ldr	r3, [pc, #284]	@ (800d8ec <tcp_close_shutdown+0x1b0>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d105      	bne.n	800d7e2 <tcp_close_shutdown+0xa6>
 800d7d6:	4b45      	ldr	r3, [pc, #276]	@ (800d8ec <tcp_close_shutdown+0x1b0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	4a43      	ldr	r2, [pc, #268]	@ (800d8ec <tcp_close_shutdown+0x1b0>)
 800d7de:	6013      	str	r3, [r2, #0]
 800d7e0:	e013      	b.n	800d80a <tcp_close_shutdown+0xce>
 800d7e2:	4b42      	ldr	r3, [pc, #264]	@ (800d8ec <tcp_close_shutdown+0x1b0>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	e00c      	b.n	800d804 <tcp_close_shutdown+0xc8>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d104      	bne.n	800d7fe <tcp_close_shutdown+0xc2>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68da      	ldr	r2, [r3, #12]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	60da      	str	r2, [r3, #12]
 800d7fc:	e005      	b.n	800d80a <tcp_close_shutdown+0xce>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1ef      	bne.n	800d7ea <tcp_close_shutdown+0xae>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	60da      	str	r2, [r3, #12]
 800d810:	4b37      	ldr	r3, [pc, #220]	@ (800d8f0 <tcp_close_shutdown+0x1b4>)
 800d812:	2201      	movs	r2, #1
 800d814:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d816:	4b37      	ldr	r3, [pc, #220]	@ (800d8f4 <tcp_close_shutdown+0x1b8>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d102      	bne.n	800d826 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d820:	f004 f976 	bl	8011b10 <tcp_trigger_input_pcb_close>
 800d824:	e002      	b.n	800d82c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff fed6 	bl	800d5d8 <tcp_free>
      }
      return ERR_OK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	e050      	b.n	800d8d2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	7d1b      	ldrb	r3, [r3, #20]
 800d834:	2b02      	cmp	r3, #2
 800d836:	d03b      	beq.n	800d8b0 <tcp_close_shutdown+0x174>
 800d838:	2b02      	cmp	r3, #2
 800d83a:	dc44      	bgt.n	800d8c6 <tcp_close_shutdown+0x18a>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <tcp_close_shutdown+0x10a>
 800d840:	2b01      	cmp	r3, #1
 800d842:	d02a      	beq.n	800d89a <tcp_close_shutdown+0x15e>
 800d844:	e03f      	b.n	800d8c6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	8adb      	ldrh	r3, [r3, #22]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d021      	beq.n	800d892 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d84e:	4b2a      	ldr	r3, [pc, #168]	@ (800d8f8 <tcp_close_shutdown+0x1bc>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	429a      	cmp	r2, r3
 800d856:	d105      	bne.n	800d864 <tcp_close_shutdown+0x128>
 800d858:	4b27      	ldr	r3, [pc, #156]	@ (800d8f8 <tcp_close_shutdown+0x1bc>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	4a26      	ldr	r2, [pc, #152]	@ (800d8f8 <tcp_close_shutdown+0x1bc>)
 800d860:	6013      	str	r3, [r2, #0]
 800d862:	e013      	b.n	800d88c <tcp_close_shutdown+0x150>
 800d864:	4b24      	ldr	r3, [pc, #144]	@ (800d8f8 <tcp_close_shutdown+0x1bc>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	60bb      	str	r3, [r7, #8]
 800d86a:	e00c      	b.n	800d886 <tcp_close_shutdown+0x14a>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	429a      	cmp	r2, r3
 800d874:	d104      	bne.n	800d880 <tcp_close_shutdown+0x144>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68da      	ldr	r2, [r3, #12]
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	60da      	str	r2, [r3, #12]
 800d87e:	e005      	b.n	800d88c <tcp_close_shutdown+0x150>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	60bb      	str	r3, [r7, #8]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1ef      	bne.n	800d86c <tcp_close_shutdown+0x130>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff fea0 	bl	800d5d8 <tcp_free>
      break;
 800d898:	e01a      	b.n	800d8d0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff ff14 	bl	800d6c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d8a0:	6879      	ldr	r1, [r7, #4]
 800d8a2:	4816      	ldr	r0, [pc, #88]	@ (800d8fc <tcp_close_shutdown+0x1c0>)
 800d8a4:	f001 fcc4 	bl	800f230 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff feb1 	bl	800d610 <tcp_free_listen>
      break;
 800d8ae:	e00f      	b.n	800d8d0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d8b0:	6879      	ldr	r1, [r7, #4]
 800d8b2:	480e      	ldr	r0, [pc, #56]	@ (800d8ec <tcp_close_shutdown+0x1b0>)
 800d8b4:	f001 fcbc 	bl	800f230 <tcp_pcb_remove>
 800d8b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d8f0 <tcp_close_shutdown+0x1b4>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7ff fe8a 	bl	800d5d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d8c4:	e004      	b.n	800d8d0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 f81a 	bl	800d900 <tcp_close_shutdown_fin>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	e000      	b.n	800d8d2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	0801bc48 	.word	0x0801bc48
 800d8e0:	0801bd1c 	.word	0x0801bd1c
 800d8e4:	0801bc8c 	.word	0x0801bc8c
 800d8e8:	0801bd3c 	.word	0x0801bd3c
 800d8ec:	20010f80 	.word	0x20010f80
 800d8f0:	20010f88 	.word	0x20010f88
 800d8f4:	20010fc0 	.word	0x20010fc0
 800d8f8:	20010f78 	.word	0x20010f78
 800d8fc:	20010f7c 	.word	0x20010f7c

0800d900 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <tcp_close_shutdown_fin+0x1c>
 800d90e:	4b2e      	ldr	r3, [pc, #184]	@ (800d9c8 <tcp_close_shutdown_fin+0xc8>)
 800d910:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d914:	492d      	ldr	r1, [pc, #180]	@ (800d9cc <tcp_close_shutdown_fin+0xcc>)
 800d916:	482e      	ldr	r0, [pc, #184]	@ (800d9d0 <tcp_close_shutdown_fin+0xd0>)
 800d918:	f00b fadc 	bl	8018ed4 <iprintf>

  switch (pcb->state) {
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7d1b      	ldrb	r3, [r3, #20]
 800d920:	2b07      	cmp	r3, #7
 800d922:	d020      	beq.n	800d966 <tcp_close_shutdown_fin+0x66>
 800d924:	2b07      	cmp	r3, #7
 800d926:	dc2b      	bgt.n	800d980 <tcp_close_shutdown_fin+0x80>
 800d928:	2b03      	cmp	r3, #3
 800d92a:	d002      	beq.n	800d932 <tcp_close_shutdown_fin+0x32>
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d00d      	beq.n	800d94c <tcp_close_shutdown_fin+0x4c>
 800d930:	e026      	b.n	800d980 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f004 ff54 	bl	80127e0 <tcp_send_fin>
 800d938:	4603      	mov	r3, r0
 800d93a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d11f      	bne.n	800d984 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2205      	movs	r2, #5
 800d948:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d94a:	e01b      	b.n	800d984 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f004 ff47 	bl	80127e0 <tcp_send_fin>
 800d952:	4603      	mov	r3, r0
 800d954:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d114      	bne.n	800d988 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2205      	movs	r2, #5
 800d962:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d964:	e010      	b.n	800d988 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f004 ff3a 	bl	80127e0 <tcp_send_fin>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d109      	bne.n	800d98c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2209      	movs	r2, #9
 800d97c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d97e:	e005      	b.n	800d98c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d980:	2300      	movs	r3, #0
 800d982:	e01c      	b.n	800d9be <tcp_close_shutdown_fin+0xbe>
      break;
 800d984:	bf00      	nop
 800d986:	e002      	b.n	800d98e <tcp_close_shutdown_fin+0x8e>
      break;
 800d988:	bf00      	nop
 800d98a:	e000      	b.n	800d98e <tcp_close_shutdown_fin+0x8e>
      break;
 800d98c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d103      	bne.n	800d99e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f005 f860 	bl	8012a5c <tcp_output>
 800d99c:	e00d      	b.n	800d9ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a6:	d108      	bne.n	800d9ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	8b5b      	ldrh	r3, [r3, #26]
 800d9ac:	f043 0308 	orr.w	r3, r3, #8
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e001      	b.n	800d9be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	0801bc48 	.word	0x0801bc48
 800d9cc:	0801bcf8 	.word	0x0801bcf8
 800d9d0:	0801bc8c 	.word	0x0801bc8c

0800d9d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d109      	bne.n	800d9f6 <tcp_close+0x22>
 800d9e2:	4b0f      	ldr	r3, [pc, #60]	@ (800da20 <tcp_close+0x4c>)
 800d9e4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d9e8:	490e      	ldr	r1, [pc, #56]	@ (800da24 <tcp_close+0x50>)
 800d9ea:	480f      	ldr	r0, [pc, #60]	@ (800da28 <tcp_close+0x54>)
 800d9ec:	f00b fa72 	bl	8018ed4 <iprintf>
 800d9f0:	f06f 030f 	mvn.w	r3, #15
 800d9f4:	e00f      	b.n	800da16 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7d1b      	ldrb	r3, [r3, #20]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d006      	beq.n	800da0c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	8b5b      	ldrh	r3, [r3, #26]
 800da02:	f043 0310 	orr.w	r3, r3, #16
 800da06:	b29a      	uxth	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800da0c:	2101      	movs	r1, #1
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7ff fe94 	bl	800d73c <tcp_close_shutdown>
 800da14:	4603      	mov	r3, r0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	0801bc48 	.word	0x0801bc48
 800da24:	0801bd58 	.word	0x0801bd58
 800da28:	0801bc8c 	.word	0x0801bc8c

0800da2c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d109      	bne.n	800da52 <tcp_shutdown+0x26>
 800da3e:	4b26      	ldr	r3, [pc, #152]	@ (800dad8 <tcp_shutdown+0xac>)
 800da40:	f240 2207 	movw	r2, #519	@ 0x207
 800da44:	4925      	ldr	r1, [pc, #148]	@ (800dadc <tcp_shutdown+0xb0>)
 800da46:	4826      	ldr	r0, [pc, #152]	@ (800dae0 <tcp_shutdown+0xb4>)
 800da48:	f00b fa44 	bl	8018ed4 <iprintf>
 800da4c:	f06f 030f 	mvn.w	r3, #15
 800da50:	e03d      	b.n	800dace <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	7d1b      	ldrb	r3, [r3, #20]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d102      	bne.n	800da60 <tcp_shutdown+0x34>
    return ERR_CONN;
 800da5a:	f06f 030a 	mvn.w	r3, #10
 800da5e:	e036      	b.n	800dace <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d01b      	beq.n	800da9e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	8b5b      	ldrh	r3, [r3, #26]
 800da6a:	f043 0310 	orr.w	r3, r3, #16
 800da6e:	b29a      	uxth	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800da7a:	2101      	movs	r1, #1
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff fe5d 	bl	800d73c <tcp_close_shutdown>
 800da82:	4603      	mov	r3, r0
 800da84:	e023      	b.n	800dace <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d007      	beq.n	800da9e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fae4 	bl	800d060 <pbuf_free>
      pcb->refused_data = NULL;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2200      	movs	r2, #0
 800da9c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d013      	beq.n	800dacc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	7d1b      	ldrb	r3, [r3, #20]
 800daa8:	2b04      	cmp	r3, #4
 800daaa:	dc02      	bgt.n	800dab2 <tcp_shutdown+0x86>
 800daac:	2b03      	cmp	r3, #3
 800daae:	da02      	bge.n	800dab6 <tcp_shutdown+0x8a>
 800dab0:	e009      	b.n	800dac6 <tcp_shutdown+0x9a>
 800dab2:	2b07      	cmp	r3, #7
 800dab4:	d107      	bne.n	800dac6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	4619      	mov	r1, r3
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff fe3d 	bl	800d73c <tcp_close_shutdown>
 800dac2:	4603      	mov	r3, r0
 800dac4:	e003      	b.n	800dace <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dac6:	f06f 030a 	mvn.w	r3, #10
 800daca:	e000      	b.n	800dace <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	0801bc48 	.word	0x0801bc48
 800dadc:	0801bd70 	.word	0x0801bd70
 800dae0:	0801bc8c 	.word	0x0801bc8c

0800dae4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08e      	sub	sp, #56	@ 0x38
 800dae8:	af04      	add	r7, sp, #16
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d107      	bne.n	800db04 <tcp_abandon+0x20>
 800daf4:	4b52      	ldr	r3, [pc, #328]	@ (800dc40 <tcp_abandon+0x15c>)
 800daf6:	f240 223d 	movw	r2, #573	@ 0x23d
 800dafa:	4952      	ldr	r1, [pc, #328]	@ (800dc44 <tcp_abandon+0x160>)
 800dafc:	4852      	ldr	r0, [pc, #328]	@ (800dc48 <tcp_abandon+0x164>)
 800dafe:	f00b f9e9 	bl	8018ed4 <iprintf>
 800db02:	e099      	b.n	800dc38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7d1b      	ldrb	r3, [r3, #20]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d106      	bne.n	800db1a <tcp_abandon+0x36>
 800db0c:	4b4c      	ldr	r3, [pc, #304]	@ (800dc40 <tcp_abandon+0x15c>)
 800db0e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800db12:	494e      	ldr	r1, [pc, #312]	@ (800dc4c <tcp_abandon+0x168>)
 800db14:	484c      	ldr	r0, [pc, #304]	@ (800dc48 <tcp_abandon+0x164>)
 800db16:	f00b f9dd 	bl	8018ed4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	7d1b      	ldrb	r3, [r3, #20]
 800db1e:	2b0a      	cmp	r3, #10
 800db20:	d107      	bne.n	800db32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800db22:	6879      	ldr	r1, [r7, #4]
 800db24:	484a      	ldr	r0, [pc, #296]	@ (800dc50 <tcp_abandon+0x16c>)
 800db26:	f001 fb83 	bl	800f230 <tcp_pcb_remove>
    tcp_free(pcb);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7ff fd54 	bl	800d5d8 <tcp_free>
 800db30:	e082      	b.n	800dc38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d126      	bne.n	800dbaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	8adb      	ldrh	r3, [r3, #22]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d02e      	beq.n	800dbc2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db64:	4b3b      	ldr	r3, [pc, #236]	@ (800dc54 <tcp_abandon+0x170>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d105      	bne.n	800db7a <tcp_abandon+0x96>
 800db6e:	4b39      	ldr	r3, [pc, #228]	@ (800dc54 <tcp_abandon+0x170>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	4a37      	ldr	r2, [pc, #220]	@ (800dc54 <tcp_abandon+0x170>)
 800db76:	6013      	str	r3, [r2, #0]
 800db78:	e013      	b.n	800dba2 <tcp_abandon+0xbe>
 800db7a:	4b36      	ldr	r3, [pc, #216]	@ (800dc54 <tcp_abandon+0x170>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	e00c      	b.n	800db9c <tcp_abandon+0xb8>
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d104      	bne.n	800db96 <tcp_abandon+0xb2>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	60da      	str	r2, [r3, #12]
 800db94:	e005      	b.n	800dba2 <tcp_abandon+0xbe>
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	61fb      	str	r3, [r7, #28]
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1ef      	bne.n	800db82 <tcp_abandon+0x9e>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	60da      	str	r2, [r3, #12]
 800dba8:	e00b      	b.n	800dbc2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	8adb      	ldrh	r3, [r3, #22]
 800dbb2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	4828      	ldr	r0, [pc, #160]	@ (800dc58 <tcp_abandon+0x174>)
 800dbb8:	f001 fb3a 	bl	800f230 <tcp_pcb_remove>
 800dbbc:	4b27      	ldr	r3, [pc, #156]	@ (800dc5c <tcp_abandon+0x178>)
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d004      	beq.n	800dbd4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fff0 	bl	800ebb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d004      	beq.n	800dbe6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f000 ffe7 	bl	800ebb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d004      	beq.n	800dbf8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 ffde 	bl	800ebb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00e      	beq.n	800dc1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	3304      	adds	r3, #4
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	8b12      	ldrh	r2, [r2, #24]
 800dc08:	9202      	str	r2, [sp, #8]
 800dc0a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dc0c:	9201      	str	r2, [sp, #4]
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	460b      	mov	r3, r1
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	69b9      	ldr	r1, [r7, #24]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f005 fcd4 	bl	80135c4 <tcp_rst>
    }
    last_state = pcb->state;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff fcd8 	bl	800d5d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d004      	beq.n	800dc38 <tcp_abandon+0x154>
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f06f 010c 	mvn.w	r1, #12
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	4798      	blx	r3
  }
}
 800dc38:	3728      	adds	r7, #40	@ 0x28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	0801bc48 	.word	0x0801bc48
 800dc44:	0801bd8c 	.word	0x0801bd8c
 800dc48:	0801bc8c 	.word	0x0801bc8c
 800dc4c:	0801bda8 	.word	0x0801bda8
 800dc50:	20010f84 	.word	0x20010f84
 800dc54:	20010f78 	.word	0x20010f78
 800dc58:	20010f80 	.word	0x20010f80
 800dc5c:	20010f88 	.word	0x20010f88

0800dc60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dc68:	2101      	movs	r1, #1
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff ff3a 	bl	800dae4 <tcp_abandon>
}
 800dc70:	bf00      	nop
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	4613      	mov	r3, r2
 800dc84:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dc86:	2304      	movs	r3, #4
 800dc88:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dc90:	4b3e      	ldr	r3, [pc, #248]	@ (800dd8c <tcp_bind+0x114>)
 800dc92:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d109      	bne.n	800dcae <tcp_bind+0x36>
 800dc9a:	4b3d      	ldr	r3, [pc, #244]	@ (800dd90 <tcp_bind+0x118>)
 800dc9c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800dca0:	493c      	ldr	r1, [pc, #240]	@ (800dd94 <tcp_bind+0x11c>)
 800dca2:	483d      	ldr	r0, [pc, #244]	@ (800dd98 <tcp_bind+0x120>)
 800dca4:	f00b f916 	bl	8018ed4 <iprintf>
 800dca8:	f06f 030f 	mvn.w	r3, #15
 800dcac:	e06a      	b.n	800dd84 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	7d1b      	ldrb	r3, [r3, #20]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d009      	beq.n	800dcca <tcp_bind+0x52>
 800dcb6:	4b36      	ldr	r3, [pc, #216]	@ (800dd90 <tcp_bind+0x118>)
 800dcb8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800dcbc:	4937      	ldr	r1, [pc, #220]	@ (800dd9c <tcp_bind+0x124>)
 800dcbe:	4836      	ldr	r0, [pc, #216]	@ (800dd98 <tcp_bind+0x120>)
 800dcc0:	f00b f908 	bl	8018ed4 <iprintf>
 800dcc4:	f06f 0305 	mvn.w	r3, #5
 800dcc8:	e05c      	b.n	800dd84 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dcca:	88fb      	ldrh	r3, [r7, #6]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d109      	bne.n	800dce4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dcd0:	f000 f9f0 	bl	800e0b4 <tcp_new_port>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dcd8:	88fb      	ldrh	r3, [r7, #6]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d135      	bne.n	800dd4a <tcp_bind+0xd2>
      return ERR_BUF;
 800dcde:	f06f 0301 	mvn.w	r3, #1
 800dce2:	e04f      	b.n	800dd84 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dce4:	2300      	movs	r3, #0
 800dce6:	61fb      	str	r3, [r7, #28]
 800dce8:	e02b      	b.n	800dd42 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dcea:	4a2d      	ldr	r2, [pc, #180]	@ (800dda0 <tcp_bind+0x128>)
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	61bb      	str	r3, [r7, #24]
 800dcf6:	e01e      	b.n	800dd36 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	8adb      	ldrh	r3, [r3, #22]
 800dcfc:	88fa      	ldrh	r2, [r7, #6]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d116      	bne.n	800dd30 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dd02:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d010      	beq.n	800dd2a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00c      	beq.n	800dd2a <tcp_bind+0xb2>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d009      	beq.n	800dd2a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d005      	beq.n	800dd2a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d102      	bne.n	800dd30 <tcp_bind+0xb8>
              return ERR_USE;
 800dd2a:	f06f 0307 	mvn.w	r3, #7
 800dd2e:	e029      	b.n	800dd84 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	61bb      	str	r3, [r7, #24]
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1dd      	bne.n	800dcf8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	61fb      	str	r3, [r7, #28]
 800dd42:	69fa      	ldr	r2, [r7, #28]
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	dbcf      	blt.n	800dcea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00c      	beq.n	800dd6a <tcp_bind+0xf2>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d008      	beq.n	800dd6a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <tcp_bind+0xec>
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	e000      	b.n	800dd66 <tcp_bind+0xee>
 800dd64:	2300      	movs	r3, #0
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	88fa      	ldrh	r2, [r7, #6]
 800dd6e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dd70:	4b0c      	ldr	r3, [pc, #48]	@ (800dda4 <tcp_bind+0x12c>)
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	60da      	str	r2, [r3, #12]
 800dd78:	4a0a      	ldr	r2, [pc, #40]	@ (800dda4 <tcp_bind+0x12c>)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6013      	str	r3, [r2, #0]
 800dd7e:	f005 fde3 	bl	8013948 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3720      	adds	r7, #32
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	0802817c 	.word	0x0802817c
 800dd90:	0801bc48 	.word	0x0801bc48
 800dd94:	0801bddc 	.word	0x0801bddc
 800dd98:	0801bc8c 	.word	0x0801bc8c
 800dd9c:	0801bdf4 	.word	0x0801bdf4
 800dda0:	08028144 	.word	0x08028144
 800dda4:	20010f78 	.word	0x20010f78

0800dda8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d106      	bne.n	800ddca <tcp_accept_null+0x22>
 800ddbc:	4b07      	ldr	r3, [pc, #28]	@ (800dddc <tcp_accept_null+0x34>)
 800ddbe:	f240 320f 	movw	r2, #783	@ 0x30f
 800ddc2:	4907      	ldr	r1, [pc, #28]	@ (800dde0 <tcp_accept_null+0x38>)
 800ddc4:	4807      	ldr	r0, [pc, #28]	@ (800dde4 <tcp_accept_null+0x3c>)
 800ddc6:	f00b f885 	bl	8018ed4 <iprintf>

  tcp_abort(pcb);
 800ddca:	68b8      	ldr	r0, [r7, #8]
 800ddcc:	f7ff ff48 	bl	800dc60 <tcp_abort>

  return ERR_ABRT;
 800ddd0:	f06f 030c 	mvn.w	r3, #12
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	0801bc48 	.word	0x0801bc48
 800dde0:	0801be1c 	.word	0x0801be1c
 800dde4:	0801bc8c 	.word	0x0801bc8c

0800dde8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f806 	bl	800de0c <tcp_listen_with_backlog_and_err>
 800de00:	4603      	mov	r3, r0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b088      	sub	sp, #32
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	460b      	mov	r3, r1
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800de1a:	2300      	movs	r3, #0
 800de1c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d109      	bne.n	800de38 <tcp_listen_with_backlog_and_err+0x2c>
 800de24:	4b47      	ldr	r3, [pc, #284]	@ (800df44 <tcp_listen_with_backlog_and_err+0x138>)
 800de26:	f240 3259 	movw	r2, #857	@ 0x359
 800de2a:	4947      	ldr	r1, [pc, #284]	@ (800df48 <tcp_listen_with_backlog_and_err+0x13c>)
 800de2c:	4847      	ldr	r0, [pc, #284]	@ (800df4c <tcp_listen_with_backlog_and_err+0x140>)
 800de2e:	f00b f851 	bl	8018ed4 <iprintf>
 800de32:	23f0      	movs	r3, #240	@ 0xf0
 800de34:	76fb      	strb	r3, [r7, #27]
 800de36:	e079      	b.n	800df2c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	7d1b      	ldrb	r3, [r3, #20]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d009      	beq.n	800de54 <tcp_listen_with_backlog_and_err+0x48>
 800de40:	4b40      	ldr	r3, [pc, #256]	@ (800df44 <tcp_listen_with_backlog_and_err+0x138>)
 800de42:	f240 325a 	movw	r2, #858	@ 0x35a
 800de46:	4942      	ldr	r1, [pc, #264]	@ (800df50 <tcp_listen_with_backlog_and_err+0x144>)
 800de48:	4840      	ldr	r0, [pc, #256]	@ (800df4c <tcp_listen_with_backlog_and_err+0x140>)
 800de4a:	f00b f843 	bl	8018ed4 <iprintf>
 800de4e:	23f1      	movs	r3, #241	@ 0xf1
 800de50:	76fb      	strb	r3, [r7, #27]
 800de52:	e06b      	b.n	800df2c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	7d1b      	ldrb	r3, [r3, #20]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d104      	bne.n	800de66 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800de60:	23f7      	movs	r3, #247	@ 0xf7
 800de62:	76fb      	strb	r3, [r7, #27]
    goto done;
 800de64:	e062      	b.n	800df2c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800de66:	2002      	movs	r0, #2
 800de68:	f7fe f9d4 	bl	800c214 <memp_malloc>
 800de6c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800de74:	23ff      	movs	r3, #255	@ 0xff
 800de76:	76fb      	strb	r3, [r7, #27]
    goto done;
 800de78:	e058      	b.n	800df2c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	691a      	ldr	r2, [r3, #16]
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	8ada      	ldrh	r2, [r3, #22]
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	2201      	movs	r2, #1
 800de8e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	7d5a      	ldrb	r2, [r3, #21]
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	7a5a      	ldrb	r2, [r3, #9]
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2200      	movs	r2, #0
 800dea4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	7ada      	ldrb	r2, [r3, #11]
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	7a9a      	ldrb	r2, [r3, #10]
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	8adb      	ldrh	r3, [r3, #22]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d021      	beq.n	800df0a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dec6:	4b23      	ldr	r3, [pc, #140]	@ (800df54 <tcp_listen_with_backlog_and_err+0x148>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	429a      	cmp	r2, r3
 800dece:	d105      	bne.n	800dedc <tcp_listen_with_backlog_and_err+0xd0>
 800ded0:	4b20      	ldr	r3, [pc, #128]	@ (800df54 <tcp_listen_with_backlog_and_err+0x148>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	4a1f      	ldr	r2, [pc, #124]	@ (800df54 <tcp_listen_with_backlog_and_err+0x148>)
 800ded8:	6013      	str	r3, [r2, #0]
 800deda:	e013      	b.n	800df04 <tcp_listen_with_backlog_and_err+0xf8>
 800dedc:	4b1d      	ldr	r3, [pc, #116]	@ (800df54 <tcp_listen_with_backlog_and_err+0x148>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e00c      	b.n	800defe <tcp_listen_with_backlog_and_err+0xf2>
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	429a      	cmp	r2, r3
 800deec:	d104      	bne.n	800def8 <tcp_listen_with_backlog_and_err+0xec>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	68da      	ldr	r2, [r3, #12]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	60da      	str	r2, [r3, #12]
 800def6:	e005      	b.n	800df04 <tcp_listen_with_backlog_and_err+0xf8>
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1ef      	bne.n	800dee4 <tcp_listen_with_backlog_and_err+0xd8>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7ff fb64 	bl	800d5d8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	4a11      	ldr	r2, [pc, #68]	@ (800df58 <tcp_listen_with_backlog_and_err+0x14c>)
 800df14:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800df16:	4b11      	ldr	r3, [pc, #68]	@ (800df5c <tcp_listen_with_backlog_and_err+0x150>)
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	60da      	str	r2, [r3, #12]
 800df1e:	4a0f      	ldr	r2, [pc, #60]	@ (800df5c <tcp_listen_with_backlog_and_err+0x150>)
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	f005 fd10 	bl	8013948 <tcp_timer_needed>
  res = ERR_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7efa      	ldrb	r2, [r7, #27]
 800df36:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800df38:	69fb      	ldr	r3, [r7, #28]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3720      	adds	r7, #32
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	0801bc48 	.word	0x0801bc48
 800df48:	0801be3c 	.word	0x0801be3c
 800df4c:	0801bc8c 	.word	0x0801bc8c
 800df50:	0801be6c 	.word	0x0801be6c
 800df54:	20010f78 	.word	0x20010f78
 800df58:	0800dda9 	.word	0x0800dda9
 800df5c:	20010f7c 	.word	0x20010f7c

0800df60 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d106      	bne.n	800df7c <tcp_update_rcv_ann_wnd+0x1c>
 800df6e:	4b25      	ldr	r3, [pc, #148]	@ (800e004 <tcp_update_rcv_ann_wnd+0xa4>)
 800df70:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800df74:	4924      	ldr	r1, [pc, #144]	@ (800e008 <tcp_update_rcv_ann_wnd+0xa8>)
 800df76:	4825      	ldr	r0, [pc, #148]	@ (800e00c <tcp_update_rcv_ann_wnd+0xac>)
 800df78:	f00a ffac 	bl	8018ed4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800df84:	4413      	add	r3, r2
 800df86:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800df90:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800df94:	bf28      	it	cs
 800df96:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800df9a:	b292      	uxth	r2, r2
 800df9c:	4413      	add	r3, r2
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	db08      	blt.n	800dfb8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	e020      	b.n	800dffa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	dd03      	ble.n	800dfce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dfcc:	e014      	b.n	800dff8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfe0:	d306      	bcc.n	800dff0 <tcp_update_rcv_ann_wnd+0x90>
 800dfe2:	4b08      	ldr	r3, [pc, #32]	@ (800e004 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfe4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800dfe8:	4909      	ldr	r1, [pc, #36]	@ (800e010 <tcp_update_rcv_ann_wnd+0xb0>)
 800dfea:	4808      	ldr	r0, [pc, #32]	@ (800e00c <tcp_update_rcv_ann_wnd+0xac>)
 800dfec:	f00a ff72 	bl	8018ed4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800dff8:	2300      	movs	r3, #0
  }
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	0801bc48 	.word	0x0801bc48
 800e008:	0801bea4 	.word	0x0801bea4
 800e00c:	0801bc8c 	.word	0x0801bc8c
 800e010:	0801bec8 	.word	0x0801bec8

0800e014 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d107      	bne.n	800e036 <tcp_recved+0x22>
 800e026:	4b1f      	ldr	r3, [pc, #124]	@ (800e0a4 <tcp_recved+0x90>)
 800e028:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e02c:	491e      	ldr	r1, [pc, #120]	@ (800e0a8 <tcp_recved+0x94>)
 800e02e:	481f      	ldr	r0, [pc, #124]	@ (800e0ac <tcp_recved+0x98>)
 800e030:	f00a ff50 	bl	8018ed4 <iprintf>
 800e034:	e032      	b.n	800e09c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	7d1b      	ldrb	r3, [r3, #20]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d106      	bne.n	800e04c <tcp_recved+0x38>
 800e03e:	4b19      	ldr	r3, [pc, #100]	@ (800e0a4 <tcp_recved+0x90>)
 800e040:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e044:	491a      	ldr	r1, [pc, #104]	@ (800e0b0 <tcp_recved+0x9c>)
 800e046:	4819      	ldr	r0, [pc, #100]	@ (800e0ac <tcp_recved+0x98>)
 800e048:	f00a ff44 	bl	8018ed4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e050:	887b      	ldrh	r3, [r7, #2]
 800e052:	4413      	add	r3, r2
 800e054:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e056:	89fb      	ldrh	r3, [r7, #14]
 800e058:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e05c:	d804      	bhi.n	800e068 <tcp_recved+0x54>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e062:	89fa      	ldrh	r2, [r7, #14]
 800e064:	429a      	cmp	r2, r3
 800e066:	d204      	bcs.n	800e072 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e06e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e070:	e002      	b.n	800e078 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	89fa      	ldrh	r2, [r7, #14]
 800e076:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7ff ff71 	bl	800df60 <tcp_update_rcv_ann_wnd>
 800e07e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e086:	d309      	bcc.n	800e09c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	8b5b      	ldrh	r3, [r3, #26]
 800e08c:	f043 0302 	orr.w	r3, r3, #2
 800e090:	b29a      	uxth	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f004 fce0 	bl	8012a5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e09c:	3710      	adds	r7, #16
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	0801bc48 	.word	0x0801bc48
 800e0a8:	0801bee4 	.word	0x0801bee4
 800e0ac:	0801bc8c 	.word	0x0801bc8c
 800e0b0:	0801befc 	.word	0x0801befc

0800e0b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e0be:	4b1e      	ldr	r3, [pc, #120]	@ (800e138 <tcp_new_port+0x84>)
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	4b1c      	ldr	r3, [pc, #112]	@ (800e138 <tcp_new_port+0x84>)
 800e0c8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800e138 <tcp_new_port+0x84>)
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d103      	bne.n	800e0de <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e0d6:	4b18      	ldr	r3, [pc, #96]	@ (800e138 <tcp_new_port+0x84>)
 800e0d8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e0dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e0de:	2300      	movs	r3, #0
 800e0e0:	71fb      	strb	r3, [r7, #7]
 800e0e2:	e01e      	b.n	800e122 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	4a15      	ldr	r2, [pc, #84]	@ (800e13c <tcp_new_port+0x88>)
 800e0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	e011      	b.n	800e116 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	8ada      	ldrh	r2, [r3, #22]
 800e0f6:	4b10      	ldr	r3, [pc, #64]	@ (800e138 <tcp_new_port+0x84>)
 800e0f8:	881b      	ldrh	r3, [r3, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d108      	bne.n	800e110 <tcp_new_port+0x5c>
        n++;
 800e0fe:	88bb      	ldrh	r3, [r7, #4]
 800e100:	3301      	adds	r3, #1
 800e102:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e104:	88bb      	ldrh	r3, [r7, #4]
 800e106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e10a:	d3d8      	bcc.n	800e0be <tcp_new_port+0xa>
          return 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	e00d      	b.n	800e12c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	603b      	str	r3, [r7, #0]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1ea      	bne.n	800e0f2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	3301      	adds	r3, #1
 800e120:	71fb      	strb	r3, [r7, #7]
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	2b03      	cmp	r3, #3
 800e126:	d9dd      	bls.n	800e0e4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e128:	4b03      	ldr	r3, [pc, #12]	@ (800e138 <tcp_new_port+0x84>)
 800e12a:	881b      	ldrh	r3, [r3, #0]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	20000024 	.word	0x20000024
 800e13c:	08028144 	.word	0x08028144

0800e140 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08a      	sub	sp, #40	@ 0x28
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	603b      	str	r3, [r7, #0]
 800e14c:	4613      	mov	r3, r2
 800e14e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e150:	2300      	movs	r3, #0
 800e152:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d109      	bne.n	800e16e <tcp_connect+0x2e>
 800e15a:	4b7d      	ldr	r3, [pc, #500]	@ (800e350 <tcp_connect+0x210>)
 800e15c:	f240 4235 	movw	r2, #1077	@ 0x435
 800e160:	497c      	ldr	r1, [pc, #496]	@ (800e354 <tcp_connect+0x214>)
 800e162:	487d      	ldr	r0, [pc, #500]	@ (800e358 <tcp_connect+0x218>)
 800e164:	f00a feb6 	bl	8018ed4 <iprintf>
 800e168:	f06f 030f 	mvn.w	r3, #15
 800e16c:	e0ec      	b.n	800e348 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d109      	bne.n	800e188 <tcp_connect+0x48>
 800e174:	4b76      	ldr	r3, [pc, #472]	@ (800e350 <tcp_connect+0x210>)
 800e176:	f240 4236 	movw	r2, #1078	@ 0x436
 800e17a:	4978      	ldr	r1, [pc, #480]	@ (800e35c <tcp_connect+0x21c>)
 800e17c:	4876      	ldr	r0, [pc, #472]	@ (800e358 <tcp_connect+0x218>)
 800e17e:	f00a fea9 	bl	8018ed4 <iprintf>
 800e182:	f06f 030f 	mvn.w	r3, #15
 800e186:	e0df      	b.n	800e348 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d009      	beq.n	800e1a4 <tcp_connect+0x64>
 800e190:	4b6f      	ldr	r3, [pc, #444]	@ (800e350 <tcp_connect+0x210>)
 800e192:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800e196:	4972      	ldr	r1, [pc, #456]	@ (800e360 <tcp_connect+0x220>)
 800e198:	486f      	ldr	r0, [pc, #444]	@ (800e358 <tcp_connect+0x218>)
 800e19a:	f00a fe9b 	bl	8018ed4 <iprintf>
 800e19e:	f06f 0309 	mvn.w	r3, #9
 800e1a2:	e0d1      	b.n	800e348 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d002      	beq.n	800e1b0 <tcp_connect+0x70>
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	e000      	b.n	800e1b2 <tcp_connect+0x72>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	88fa      	ldrh	r2, [r7, #6]
 800e1ba:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	7a1b      	ldrb	r3, [r3, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	7a1b      	ldrb	r3, [r3, #8]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fe fbbb 	bl	800c944 <netif_get_by_index>
 800e1ce:	6278      	str	r0, [r7, #36]	@ 0x24
 800e1d0:	e005      	b.n	800e1de <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	3304      	adds	r3, #4
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f009 f962 	bl	80174a0 <ip4_route>
 800e1dc:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800e1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e1e4:	f06f 0303 	mvn.w	r3, #3
 800e1e8:	e0ae      	b.n	800e348 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d003      	beq.n	800e1f8 <tcp_connect+0xb8>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d111      	bne.n	800e21c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d002      	beq.n	800e204 <tcp_connect+0xc4>
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	3304      	adds	r3, #4
 800e202:	e000      	b.n	800e206 <tcp_connect+0xc6>
 800e204:	2300      	movs	r3, #0
 800e206:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d102      	bne.n	800e214 <tcp_connect+0xd4>
      return ERR_RTE;
 800e20e:	f06f 0303 	mvn.w	r3, #3
 800e212:	e099      	b.n	800e348 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	8adb      	ldrh	r3, [r3, #22]
 800e220:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	8adb      	ldrh	r3, [r3, #22]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d10c      	bne.n	800e244 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e22a:	f7ff ff43 	bl	800e0b4 <tcp_new_port>
 800e22e:	4603      	mov	r3, r0
 800e230:	461a      	mov	r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	8adb      	ldrh	r3, [r3, #22]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <tcp_connect+0x104>
      return ERR_BUF;
 800e23e:	f06f 0301 	mvn.w	r3, #1
 800e242:	e081      	b.n	800e348 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f001 f887 	bl	800f358 <tcp_next_iss>
 800e24a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	1e5a      	subs	r2, r3, #1
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	1e5a      	subs	r2, r3, #1
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	1e5a      	subs	r2, r3, #1
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e276:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e28e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e298:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2a6:	f001 f87d 	bl	800f3a4 <tcp_eff_send_mss_netif>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e2c2:	2102      	movs	r1, #2
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f004 fadb 	bl	8012880 <tcp_enqueue_flags>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e2ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d136      	bne.n	800e344 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2202      	movs	r2, #2
 800e2da:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e2dc:	8b7b      	ldrh	r3, [r7, #26]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d021      	beq.n	800e326 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e2e2:	4b20      	ldr	r3, [pc, #128]	@ (800e364 <tcp_connect+0x224>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d105      	bne.n	800e2f8 <tcp_connect+0x1b8>
 800e2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800e364 <tcp_connect+0x224>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	4a1c      	ldr	r2, [pc, #112]	@ (800e364 <tcp_connect+0x224>)
 800e2f4:	6013      	str	r3, [r2, #0]
 800e2f6:	e013      	b.n	800e320 <tcp_connect+0x1e0>
 800e2f8:	4b1a      	ldr	r3, [pc, #104]	@ (800e364 <tcp_connect+0x224>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	623b      	str	r3, [r7, #32]
 800e2fe:	e00c      	b.n	800e31a <tcp_connect+0x1da>
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	429a      	cmp	r2, r3
 800e308:	d104      	bne.n	800e314 <tcp_connect+0x1d4>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	68da      	ldr	r2, [r3, #12]
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	60da      	str	r2, [r3, #12]
 800e312:	e005      	b.n	800e320 <tcp_connect+0x1e0>
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	623b      	str	r3, [r7, #32]
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1ef      	bne.n	800e300 <tcp_connect+0x1c0>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e326:	4b10      	ldr	r3, [pc, #64]	@ (800e368 <tcp_connect+0x228>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	4a0e      	ldr	r2, [pc, #56]	@ (800e368 <tcp_connect+0x228>)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	f005 fb08 	bl	8013948 <tcp_timer_needed>
 800e338:	4b0c      	ldr	r3, [pc, #48]	@ (800e36c <tcp_connect+0x22c>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f004 fb8c 	bl	8012a5c <tcp_output>
  }
  return ret;
 800e344:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3728      	adds	r7, #40	@ 0x28
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	0801bc48 	.word	0x0801bc48
 800e354:	0801bf24 	.word	0x0801bf24
 800e358:	0801bc8c 	.word	0x0801bc8c
 800e35c:	0801bf40 	.word	0x0801bf40
 800e360:	0801bf5c 	.word	0x0801bf5c
 800e364:	20010f78 	.word	0x20010f78
 800e368:	20010f80 	.word	0x20010f80
 800e36c:	20010f88 	.word	0x20010f88

0800e370 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e370:	b5b0      	push	{r4, r5, r7, lr}
 800e372:	b090      	sub	sp, #64	@ 0x40
 800e374:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e37c:	4b95      	ldr	r3, [pc, #596]	@ (800e5d4 <tcp_slowtmr+0x264>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3301      	adds	r3, #1
 800e382:	4a94      	ldr	r2, [pc, #592]	@ (800e5d4 <tcp_slowtmr+0x264>)
 800e384:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e386:	4b94      	ldr	r3, [pc, #592]	@ (800e5d8 <tcp_slowtmr+0x268>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	3301      	adds	r3, #1
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	4b92      	ldr	r3, [pc, #584]	@ (800e5d8 <tcp_slowtmr+0x268>)
 800e390:	701a      	strb	r2, [r3, #0]
 800e392:	e000      	b.n	800e396 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e394:	bf00      	nop
  prev = NULL;
 800e396:	2300      	movs	r3, #0
 800e398:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e39a:	4b90      	ldr	r3, [pc, #576]	@ (800e5dc <tcp_slowtmr+0x26c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e3a0:	e29f      	b.n	800e8e2 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a4:	7d1b      	ldrb	r3, [r3, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d106      	bne.n	800e3b8 <tcp_slowtmr+0x48>
 800e3aa:	4b8d      	ldr	r3, [pc, #564]	@ (800e5e0 <tcp_slowtmr+0x270>)
 800e3ac:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e3b0:	498c      	ldr	r1, [pc, #560]	@ (800e5e4 <tcp_slowtmr+0x274>)
 800e3b2:	488d      	ldr	r0, [pc, #564]	@ (800e5e8 <tcp_slowtmr+0x278>)
 800e3b4:	f00a fd8e 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ba:	7d1b      	ldrb	r3, [r3, #20]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d106      	bne.n	800e3ce <tcp_slowtmr+0x5e>
 800e3c0:	4b87      	ldr	r3, [pc, #540]	@ (800e5e0 <tcp_slowtmr+0x270>)
 800e3c2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e3c6:	4989      	ldr	r1, [pc, #548]	@ (800e5ec <tcp_slowtmr+0x27c>)
 800e3c8:	4887      	ldr	r0, [pc, #540]	@ (800e5e8 <tcp_slowtmr+0x278>)
 800e3ca:	f00a fd83 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d0:	7d1b      	ldrb	r3, [r3, #20]
 800e3d2:	2b0a      	cmp	r3, #10
 800e3d4:	d106      	bne.n	800e3e4 <tcp_slowtmr+0x74>
 800e3d6:	4b82      	ldr	r3, [pc, #520]	@ (800e5e0 <tcp_slowtmr+0x270>)
 800e3d8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e3dc:	4984      	ldr	r1, [pc, #528]	@ (800e5f0 <tcp_slowtmr+0x280>)
 800e3de:	4882      	ldr	r0, [pc, #520]	@ (800e5e8 <tcp_slowtmr+0x278>)
 800e3e0:	f00a fd78 	bl	8018ed4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e6:	7f9a      	ldrb	r2, [r3, #30]
 800e3e8:	4b7b      	ldr	r3, [pc, #492]	@ (800e5d8 <tcp_slowtmr+0x268>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d105      	bne.n	800e3fc <tcp_slowtmr+0x8c>
      prev = pcb;
 800e3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e3fa:	e272      	b.n	800e8e2 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800e3fc:	4b76      	ldr	r3, [pc, #472]	@ (800e5d8 <tcp_slowtmr+0x268>)
 800e3fe:	781a      	ldrb	r2, [r3, #0]
 800e400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e402:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e412:	7d1b      	ldrb	r3, [r3, #20]
 800e414:	2b02      	cmp	r3, #2
 800e416:	d10a      	bne.n	800e42e <tcp_slowtmr+0xbe>
 800e418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e41e:	2b05      	cmp	r3, #5
 800e420:	d905      	bls.n	800e42e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e426:	3301      	adds	r3, #1
 800e428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e42c:	e11e      	b.n	800e66c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e434:	2b0b      	cmp	r3, #11
 800e436:	d905      	bls.n	800e444 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e43c:	3301      	adds	r3, #1
 800e43e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e442:	e113      	b.n	800e66c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e446:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d075      	beq.n	800e53a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e452:	2b00      	cmp	r3, #0
 800e454:	d006      	beq.n	800e464 <tcp_slowtmr+0xf4>
 800e456:	4b62      	ldr	r3, [pc, #392]	@ (800e5e0 <tcp_slowtmr+0x270>)
 800e458:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e45c:	4965      	ldr	r1, [pc, #404]	@ (800e5f4 <tcp_slowtmr+0x284>)
 800e45e:	4862      	ldr	r0, [pc, #392]	@ (800e5e8 <tcp_slowtmr+0x278>)
 800e460:	f00a fd38 	bl	8018ed4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d106      	bne.n	800e47a <tcp_slowtmr+0x10a>
 800e46c:	4b5c      	ldr	r3, [pc, #368]	@ (800e5e0 <tcp_slowtmr+0x270>)
 800e46e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e472:	4961      	ldr	r1, [pc, #388]	@ (800e5f8 <tcp_slowtmr+0x288>)
 800e474:	485c      	ldr	r0, [pc, #368]	@ (800e5e8 <tcp_slowtmr+0x278>)
 800e476:	f00a fd2d 	bl	8018ed4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e480:	2b0b      	cmp	r3, #11
 800e482:	d905      	bls.n	800e490 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e488:	3301      	adds	r3, #1
 800e48a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e48e:	e0ed      	b.n	800e66c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e492:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e496:	3b01      	subs	r3, #1
 800e498:	4a58      	ldr	r2, [pc, #352]	@ (800e5fc <tcp_slowtmr+0x28c>)
 800e49a:	5cd3      	ldrb	r3, [r2, r3]
 800e49c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e4a4:	7c7a      	ldrb	r2, [r7, #17]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d907      	bls.n	800e4ba <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e4c0:	7c7a      	ldrb	r2, [r7, #17]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	f200 80d2 	bhi.w	800e66c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d108      	bne.n	800e4e8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e4d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4d8:	f005 f968 	bl	80137ac <tcp_zero_window_probe>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d014      	beq.n	800e50c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	623b      	str	r3, [r7, #32]
 800e4e6:	e011      	b.n	800e50c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4f2:	f004 f82d 	bl	8012550 <tcp_split_unsent_seg>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d107      	bne.n	800e50c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e4fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4fe:	f004 faad 	bl	8012a5c <tcp_output>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d101      	bne.n	800e50c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 80ac 	beq.w	800e66c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e516:	2200      	movs	r2, #0
 800e518:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e522:	2b06      	cmp	r3, #6
 800e524:	f200 80a2 	bhi.w	800e66c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e52e:	3301      	adds	r3, #1
 800e530:	b2da      	uxtb	r2, r3
 800e532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e534:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e538:	e098      	b.n	800e66c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e540:	2b00      	cmp	r3, #0
 800e542:	db0f      	blt.n	800e564 <tcp_slowtmr+0x1f4>
 800e544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e546:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e54a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e54e:	4293      	cmp	r3, r2
 800e550:	d008      	beq.n	800e564 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e558:	b29b      	uxth	r3, r3
 800e55a:	3301      	adds	r3, #1
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	b21a      	sxth	r2, r3
 800e560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e562:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e566:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e570:	429a      	cmp	r2, r3
 800e572:	db7b      	blt.n	800e66c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e576:	f004 fd65 	bl	8013044 <tcp_rexmit_rto_prepare>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <tcp_slowtmr+0x220>
 800e580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e584:	2b00      	cmp	r3, #0
 800e586:	d171      	bne.n	800e66c <tcp_slowtmr+0x2fc>
 800e588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d06d      	beq.n	800e66c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e592:	7d1b      	ldrb	r3, [r3, #20]
 800e594:	2b02      	cmp	r3, #2
 800e596:	d03a      	beq.n	800e60e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e59e:	2b0c      	cmp	r3, #12
 800e5a0:	bf28      	it	cs
 800e5a2:	230c      	movcs	r3, #12
 800e5a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e5ac:	10db      	asrs	r3, r3, #3
 800e5ae:	b21b      	sxth	r3, r3
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e5b8:	4413      	add	r3, r2
 800e5ba:	7efa      	ldrb	r2, [r7, #27]
 800e5bc:	4910      	ldr	r1, [pc, #64]	@ (800e600 <tcp_slowtmr+0x290>)
 800e5be:	5c8a      	ldrb	r2, [r1, r2]
 800e5c0:	4093      	lsls	r3, r2
 800e5c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	dc1a      	bgt.n	800e604 <tcp_slowtmr+0x294>
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	b21a      	sxth	r2, r3
 800e5d2:	e019      	b.n	800e608 <tcp_slowtmr+0x298>
 800e5d4:	20010f74 	.word	0x20010f74
 800e5d8:	20010f8a 	.word	0x20010f8a
 800e5dc:	20010f80 	.word	0x20010f80
 800e5e0:	0801bc48 	.word	0x0801bc48
 800e5e4:	0801bf8c 	.word	0x0801bf8c
 800e5e8:	0801bc8c 	.word	0x0801bc8c
 800e5ec:	0801bfb8 	.word	0x0801bfb8
 800e5f0:	0801bfe4 	.word	0x0801bfe4
 800e5f4:	0801c014 	.word	0x0801c014
 800e5f8:	0801c048 	.word	0x0801c048
 800e5fc:	0802813c 	.word	0x0802813c
 800e600:	0802812c 	.word	0x0802812c
 800e604:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e610:	2200      	movs	r2, #0
 800e612:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e620:	4293      	cmp	r3, r2
 800e622:	bf28      	it	cs
 800e624:	4613      	movcs	r3, r2
 800e626:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e628:	8a7b      	ldrh	r3, [r7, #18]
 800e62a:	085b      	lsrs	r3, r3, #1
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e630:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e636:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	b29b      	uxth	r3, r3
 800e642:	429a      	cmp	r2, r3
 800e644:	d206      	bcs.n	800e654 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e656:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e660:	2200      	movs	r2, #0
 800e662:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e668:	f004 fd5c 	bl	8013124 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e66e:	7d1b      	ldrb	r3, [r3, #20]
 800e670:	2b06      	cmp	r3, #6
 800e672:	d111      	bne.n	800e698 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e676:	8b5b      	ldrh	r3, [r3, #26]
 800e678:	f003 0310 	and.w	r3, r3, #16
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00b      	beq.n	800e698 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e680:	4b9d      	ldr	r3, [pc, #628]	@ (800e8f8 <tcp_slowtmr+0x588>)
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e686:	6a1b      	ldr	r3, [r3, #32]
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	2b28      	cmp	r3, #40	@ 0x28
 800e68c:	d904      	bls.n	800e698 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e68e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e692:	3301      	adds	r3, #1
 800e694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69a:	7a5b      	ldrb	r3, [r3, #9]
 800e69c:	f003 0308 	and.w	r3, r3, #8
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d04c      	beq.n	800e73e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800e6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6a8:	2b04      	cmp	r3, #4
 800e6aa:	d003      	beq.n	800e6b4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e6b0:	2b07      	cmp	r3, #7
 800e6b2:	d144      	bne.n	800e73e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6b4:	4b90      	ldr	r3, [pc, #576]	@ (800e8f8 <tcp_slowtmr+0x588>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6c4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800e6c8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800e6cc:	498b      	ldr	r1, [pc, #556]	@ (800e8fc <tcp_slowtmr+0x58c>)
 800e6ce:	fba1 1303 	umull	r1, r3, r1, r3
 800e6d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d90a      	bls.n	800e6ee <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800e6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6dc:	3301      	adds	r3, #1
 800e6de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e6e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e6ec:	e027      	b.n	800e73e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6ee:	4b82      	ldr	r3, [pc, #520]	@ (800e8f8 <tcp_slowtmr+0x588>)
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e700:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e704:	4618      	mov	r0, r3
 800e706:	4b7e      	ldr	r3, [pc, #504]	@ (800e900 <tcp_slowtmr+0x590>)
 800e708:	fb00 f303 	mul.w	r3, r0, r3
 800e70c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e70e:	497b      	ldr	r1, [pc, #492]	@ (800e8fc <tcp_slowtmr+0x58c>)
 800e710:	fba1 1303 	umull	r1, r3, r1, r3
 800e714:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e716:	429a      	cmp	r2, r3
 800e718:	d911      	bls.n	800e73e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800e71a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e71c:	f005 f806 	bl	801372c <tcp_keepalive>
 800e720:	4603      	mov	r3, r0
 800e722:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e726:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d107      	bne.n	800e73e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800e72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e730:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e734:	3301      	adds	r3, #1
 800e736:	b2da      	uxtb	r2, r3
 800e738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e742:	2b00      	cmp	r3, #0
 800e744:	d011      	beq.n	800e76a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e746:	4b6c      	ldr	r3, [pc, #432]	@ (800e8f8 <tcp_slowtmr+0x588>)
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e752:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e756:	4619      	mov	r1, r3
 800e758:	460b      	mov	r3, r1
 800e75a:	005b      	lsls	r3, r3, #1
 800e75c:	440b      	add	r3, r1
 800e75e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e760:	429a      	cmp	r2, r3
 800e762:	d302      	bcc.n	800e76a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800e764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e766:	f000 fec7 	bl	800f4f8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76c:	7d1b      	ldrb	r3, [r3, #20]
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d10b      	bne.n	800e78a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e772:	4b61      	ldr	r3, [pc, #388]	@ (800e8f8 <tcp_slowtmr+0x588>)
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	2b28      	cmp	r3, #40	@ 0x28
 800e77e:	d904      	bls.n	800e78a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800e780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e784:	3301      	adds	r3, #1
 800e786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e78c:	7d1b      	ldrb	r3, [r3, #20]
 800e78e:	2b09      	cmp	r3, #9
 800e790:	d10b      	bne.n	800e7aa <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e792:	4b59      	ldr	r3, [pc, #356]	@ (800e8f8 <tcp_slowtmr+0x588>)
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e798:	6a1b      	ldr	r3, [r3, #32]
 800e79a:	1ad3      	subs	r3, r2, r3
 800e79c:	2bf0      	cmp	r3, #240	@ 0xf0
 800e79e:	d904      	bls.n	800e7aa <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800e7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d060      	beq.n	800e874 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800e7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7b8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e7ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e7bc:	f000 fce8 	bl	800f190 <tcp_pcb_purge>
      if (prev != NULL) {
 800e7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d010      	beq.n	800e7e8 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e7c6:	4b4f      	ldr	r3, [pc, #316]	@ (800e904 <tcp_slowtmr+0x594>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d106      	bne.n	800e7de <tcp_slowtmr+0x46e>
 800e7d0:	4b4d      	ldr	r3, [pc, #308]	@ (800e908 <tcp_slowtmr+0x598>)
 800e7d2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e7d6:	494d      	ldr	r1, [pc, #308]	@ (800e90c <tcp_slowtmr+0x59c>)
 800e7d8:	484d      	ldr	r0, [pc, #308]	@ (800e910 <tcp_slowtmr+0x5a0>)
 800e7da:	f00a fb7b 	bl	8018ed4 <iprintf>
        prev->next = pcb->next;
 800e7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e0:	68da      	ldr	r2, [r3, #12]
 800e7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e4:	60da      	str	r2, [r3, #12]
 800e7e6:	e00f      	b.n	800e808 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e7e8:	4b46      	ldr	r3, [pc, #280]	@ (800e904 <tcp_slowtmr+0x594>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d006      	beq.n	800e800 <tcp_slowtmr+0x490>
 800e7f2:	4b45      	ldr	r3, [pc, #276]	@ (800e908 <tcp_slowtmr+0x598>)
 800e7f4:	f240 5271 	movw	r2, #1393	@ 0x571
 800e7f8:	4946      	ldr	r1, [pc, #280]	@ (800e914 <tcp_slowtmr+0x5a4>)
 800e7fa:	4845      	ldr	r0, [pc, #276]	@ (800e910 <tcp_slowtmr+0x5a0>)
 800e7fc:	f00a fb6a 	bl	8018ed4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	4a3f      	ldr	r2, [pc, #252]	@ (800e904 <tcp_slowtmr+0x594>)
 800e806:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d013      	beq.n	800e838 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e812:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e816:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e818:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81c:	3304      	adds	r3, #4
 800e81e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e820:	8ad2      	ldrh	r2, [r2, #22]
 800e822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e824:	8b09      	ldrh	r1, [r1, #24]
 800e826:	9102      	str	r1, [sp, #8]
 800e828:	9201      	str	r2, [sp, #4]
 800e82a:	9300      	str	r3, [sp, #0]
 800e82c:	462b      	mov	r3, r5
 800e82e:	4622      	mov	r2, r4
 800e830:	4601      	mov	r1, r0
 800e832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e834:	f004 fec6 	bl	80135c4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e840:	7d1b      	ldrb	r3, [r3, #20]
 800e842:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e846:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e84e:	6838      	ldr	r0, [r7, #0]
 800e850:	f7fe fec2 	bl	800d5d8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e854:	4b30      	ldr	r3, [pc, #192]	@ (800e918 <tcp_slowtmr+0x5a8>)
 800e856:	2200      	movs	r2, #0
 800e858:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d004      	beq.n	800e86a <tcp_slowtmr+0x4fa>
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f06f 010c 	mvn.w	r1, #12
 800e866:	68b8      	ldr	r0, [r7, #8]
 800e868:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e86a:	4b2b      	ldr	r3, [pc, #172]	@ (800e918 <tcp_slowtmr+0x5a8>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d037      	beq.n	800e8e2 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800e872:	e590      	b.n	800e396 <tcp_slowtmr+0x26>
      prev = pcb;
 800e874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e876:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e880:	7f1b      	ldrb	r3, [r3, #28]
 800e882:	3301      	adds	r3, #1
 800e884:	b2da      	uxtb	r2, r3
 800e886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e888:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88c:	7f1a      	ldrb	r2, [r3, #28]
 800e88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e890:	7f5b      	ldrb	r3, [r3, #29]
 800e892:	429a      	cmp	r2, r3
 800e894:	d325      	bcc.n	800e8e2 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800e896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e898:	2200      	movs	r2, #0
 800e89a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e89c:	4b1e      	ldr	r3, [pc, #120]	@ (800e918 <tcp_slowtmr+0x5a8>)
 800e89e:	2200      	movs	r2, #0
 800e8a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00b      	beq.n	800e8c4 <tcp_slowtmr+0x554>
 800e8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8b4:	6912      	ldr	r2, [r2, #16]
 800e8b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	4798      	blx	r3
 800e8bc:	4603      	mov	r3, r0
 800e8be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e8c2:	e002      	b.n	800e8ca <tcp_slowtmr+0x55a>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e8ca:	4b13      	ldr	r3, [pc, #76]	@ (800e918 <tcp_slowtmr+0x5a8>)
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f47f ad60 	bne.w	800e394 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e8d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800e8dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8de:	f004 f8bd 	bl	8012a5c <tcp_output>
  while (pcb != NULL) {
 800e8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f47f ad5c 	bne.w	800e3a2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e91c <tcp_slowtmr+0x5ac>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e8f4:	e067      	b.n	800e9c6 <tcp_slowtmr+0x656>
 800e8f6:	bf00      	nop
 800e8f8:	20010f74 	.word	0x20010f74
 800e8fc:	10624dd3 	.word	0x10624dd3
 800e900:	000124f8 	.word	0x000124f8
 800e904:	20010f80 	.word	0x20010f80
 800e908:	0801bc48 	.word	0x0801bc48
 800e90c:	0801c080 	.word	0x0801c080
 800e910:	0801bc8c 	.word	0x0801bc8c
 800e914:	0801c0ac 	.word	0x0801c0ac
 800e918:	20010f88 	.word	0x20010f88
 800e91c:	20010f84 	.word	0x20010f84
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e922:	7d1b      	ldrb	r3, [r3, #20]
 800e924:	2b0a      	cmp	r3, #10
 800e926:	d006      	beq.n	800e936 <tcp_slowtmr+0x5c6>
 800e928:	4b2b      	ldr	r3, [pc, #172]	@ (800e9d8 <tcp_slowtmr+0x668>)
 800e92a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e92e:	492b      	ldr	r1, [pc, #172]	@ (800e9dc <tcp_slowtmr+0x66c>)
 800e930:	482b      	ldr	r0, [pc, #172]	@ (800e9e0 <tcp_slowtmr+0x670>)
 800e932:	f00a facf 	bl	8018ed4 <iprintf>
    pcb_remove = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e93c:	4b29      	ldr	r3, [pc, #164]	@ (800e9e4 <tcp_slowtmr+0x674>)
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e942:	6a1b      	ldr	r3, [r3, #32]
 800e944:	1ad3      	subs	r3, r2, r3
 800e946:	2bf0      	cmp	r3, #240	@ 0xf0
 800e948:	d904      	bls.n	800e954 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e94e:	3301      	adds	r3, #1
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d02f      	beq.n	800e9bc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e95c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e95e:	f000 fc17 	bl	800f190 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e964:	2b00      	cmp	r3, #0
 800e966:	d010      	beq.n	800e98a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e968:	4b1f      	ldr	r3, [pc, #124]	@ (800e9e8 <tcp_slowtmr+0x678>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e96e:	429a      	cmp	r2, r3
 800e970:	d106      	bne.n	800e980 <tcp_slowtmr+0x610>
 800e972:	4b19      	ldr	r3, [pc, #100]	@ (800e9d8 <tcp_slowtmr+0x668>)
 800e974:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e978:	491c      	ldr	r1, [pc, #112]	@ (800e9ec <tcp_slowtmr+0x67c>)
 800e97a:	4819      	ldr	r0, [pc, #100]	@ (800e9e0 <tcp_slowtmr+0x670>)
 800e97c:	f00a faaa 	bl	8018ed4 <iprintf>
        prev->next = pcb->next;
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e986:	60da      	str	r2, [r3, #12]
 800e988:	e00f      	b.n	800e9aa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e98a:	4b17      	ldr	r3, [pc, #92]	@ (800e9e8 <tcp_slowtmr+0x678>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e990:	429a      	cmp	r2, r3
 800e992:	d006      	beq.n	800e9a2 <tcp_slowtmr+0x632>
 800e994:	4b10      	ldr	r3, [pc, #64]	@ (800e9d8 <tcp_slowtmr+0x668>)
 800e996:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e99a:	4915      	ldr	r1, [pc, #84]	@ (800e9f0 <tcp_slowtmr+0x680>)
 800e99c:	4810      	ldr	r0, [pc, #64]	@ (800e9e0 <tcp_slowtmr+0x670>)
 800e99e:	f00a fa99 	bl	8018ed4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	4a10      	ldr	r2, [pc, #64]	@ (800e9e8 <tcp_slowtmr+0x678>)
 800e9a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e9b4:	69f8      	ldr	r0, [r7, #28]
 800e9b6:	f7fe fe0f 	bl	800d5d8 <tcp_free>
 800e9ba:	e004      	b.n	800e9c6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1a9      	bne.n	800e920 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e9cc:	bf00      	nop
 800e9ce:	bf00      	nop
 800e9d0:	3730      	adds	r7, #48	@ 0x30
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	0801bc48 	.word	0x0801bc48
 800e9dc:	0801c0d8 	.word	0x0801c0d8
 800e9e0:	0801bc8c 	.word	0x0801bc8c
 800e9e4:	20010f74 	.word	0x20010f74
 800e9e8:	20010f84 	.word	0x20010f84
 800e9ec:	0801c108 	.word	0x0801c108
 800e9f0:	0801c130 	.word	0x0801c130

0800e9f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800eab0 <tcp_fasttmr+0xbc>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	4b2b      	ldr	r3, [pc, #172]	@ (800eab0 <tcp_fasttmr+0xbc>)
 800ea04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea06:	4b2b      	ldr	r3, [pc, #172]	@ (800eab4 <tcp_fasttmr+0xc0>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea0c:	e048      	b.n	800eaa0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7f9a      	ldrb	r2, [r3, #30]
 800ea12:	4b27      	ldr	r3, [pc, #156]	@ (800eab0 <tcp_fasttmr+0xbc>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d03f      	beq.n	800ea9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea1a:	4b25      	ldr	r3, [pc, #148]	@ (800eab0 <tcp_fasttmr+0xbc>)
 800ea1c:	781a      	ldrb	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	8b5b      	ldrh	r3, [r3, #26]
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d010      	beq.n	800ea50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	8b5b      	ldrh	r3, [r3, #26]
 800ea32:	f043 0302 	orr.w	r3, r3, #2
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f004 f80d 	bl	8012a5c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	8b5b      	ldrh	r3, [r3, #26]
 800ea46:	f023 0303 	bic.w	r3, r3, #3
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	8b5b      	ldrh	r3, [r3, #26]
 800ea54:	f003 0308 	and.w	r3, r3, #8
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d009      	beq.n	800ea70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	8b5b      	ldrh	r3, [r3, #26]
 800ea60:	f023 0308 	bic.w	r3, r3, #8
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7fe ff48 	bl	800d900 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00a      	beq.n	800ea94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ea7e:	4b0e      	ldr	r3, [pc, #56]	@ (800eab8 <tcp_fasttmr+0xc4>)
 800ea80:	2200      	movs	r2, #0
 800ea82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f819 	bl	800eabc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ea8a:	4b0b      	ldr	r3, [pc, #44]	@ (800eab8 <tcp_fasttmr+0xc4>)
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d000      	beq.n	800ea94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ea92:	e7b8      	b.n	800ea06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	607b      	str	r3, [r7, #4]
 800ea98:	e002      	b.n	800eaa0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1b3      	bne.n	800ea0e <tcp_fasttmr+0x1a>
    }
  }
}
 800eaa6:	bf00      	nop
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20010f8a 	.word	0x20010f8a
 800eab4:	20010f80 	.word	0x20010f80
 800eab8:	20010f88 	.word	0x20010f88

0800eabc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d109      	bne.n	800eade <tcp_process_refused_data+0x22>
 800eaca:	4b37      	ldr	r3, [pc, #220]	@ (800eba8 <tcp_process_refused_data+0xec>)
 800eacc:	f240 6209 	movw	r2, #1545	@ 0x609
 800ead0:	4936      	ldr	r1, [pc, #216]	@ (800ebac <tcp_process_refused_data+0xf0>)
 800ead2:	4837      	ldr	r0, [pc, #220]	@ (800ebb0 <tcp_process_refused_data+0xf4>)
 800ead4:	f00a f9fe 	bl	8018ed4 <iprintf>
 800ead8:	f06f 030f 	mvn.w	r3, #15
 800eadc:	e060      	b.n	800eba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eae2:	7b5b      	ldrb	r3, [r3, #13]
 800eae4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eaea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00b      	beq.n	800eb14 <tcp_process_refused_data+0x58>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6918      	ldr	r0, [r3, #16]
 800eb06:	2300      	movs	r3, #0
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	6879      	ldr	r1, [r7, #4]
 800eb0c:	47a0      	blx	r4
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73fb      	strb	r3, [r7, #15]
 800eb12:	e007      	b.n	800eb24 <tcp_process_refused_data+0x68>
 800eb14:	2300      	movs	r3, #0
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	f000 f8c2 	bl	800eca4 <tcp_recv_null>
 800eb20:	4603      	mov	r3, r0
 800eb22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d12a      	bne.n	800eb82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
 800eb2e:	f003 0320 	and.w	r3, r3, #32
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d033      	beq.n	800eb9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800eb3e:	d005      	beq.n	800eb4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb44:	3301      	adds	r3, #1
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00b      	beq.n	800eb6e <tcp_process_refused_data+0xb2>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6918      	ldr	r0, [r3, #16]
 800eb60:	2300      	movs	r3, #0
 800eb62:	2200      	movs	r2, #0
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	47a0      	blx	r4
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73fb      	strb	r3, [r7, #15]
 800eb6c:	e001      	b.n	800eb72 <tcp_process_refused_data+0xb6>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eb72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb76:	f113 0f0d 	cmn.w	r3, #13
 800eb7a:	d110      	bne.n	800eb9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eb7c:	f06f 030c 	mvn.w	r3, #12
 800eb80:	e00e      	b.n	800eba0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800eb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb86:	f113 0f0d 	cmn.w	r3, #13
 800eb8a:	d102      	bne.n	800eb92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eb8c:	f06f 030c 	mvn.w	r3, #12
 800eb90:	e006      	b.n	800eba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800eb98:	f06f 0304 	mvn.w	r3, #4
 800eb9c:	e000      	b.n	800eba0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd90      	pop	{r4, r7, pc}
 800eba8:	0801bc48 	.word	0x0801bc48
 800ebac:	0801c158 	.word	0x0801c158
 800ebb0:	0801bc8c 	.word	0x0801bc8c

0800ebb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ebbc:	e007      	b.n	800ebce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f80a 	bl	800ebde <tcp_seg_free>
    seg = next;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1f4      	bne.n	800ebbe <tcp_segs_free+0xa>
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	bf00      	nop
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b082      	sub	sp, #8
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00c      	beq.n	800ec06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d004      	beq.n	800ebfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fe fa31 	bl	800d060 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	2003      	movs	r0, #3
 800ec02:	f7fd fb7d 	bl	800c300 <memp_free>
  }
}
 800ec06:	bf00      	nop
 800ec08:	3708      	adds	r7, #8
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d107      	bne.n	800ec32 <tcp_setprio+0x22>
 800ec22:	4b07      	ldr	r3, [pc, #28]	@ (800ec40 <tcp_setprio+0x30>)
 800ec24:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800ec28:	4906      	ldr	r1, [pc, #24]	@ (800ec44 <tcp_setprio+0x34>)
 800ec2a:	4807      	ldr	r0, [pc, #28]	@ (800ec48 <tcp_setprio+0x38>)
 800ec2c:	f00a f952 	bl	8018ed4 <iprintf>
 800ec30:	e002      	b.n	800ec38 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	78fa      	ldrb	r2, [r7, #3]
 800ec36:	755a      	strb	r2, [r3, #21]
}
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	0801bc48 	.word	0x0801bc48
 800ec44:	0801c180 	.word	0x0801c180
 800ec48:	0801bc8c 	.word	0x0801bc8c

0800ec4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d106      	bne.n	800ec68 <tcp_seg_copy+0x1c>
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec98 <tcp_seg_copy+0x4c>)
 800ec5c:	f240 6282 	movw	r2, #1666	@ 0x682
 800ec60:	490e      	ldr	r1, [pc, #56]	@ (800ec9c <tcp_seg_copy+0x50>)
 800ec62:	480f      	ldr	r0, [pc, #60]	@ (800eca0 <tcp_seg_copy+0x54>)
 800ec64:	f00a f936 	bl	8018ed4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec68:	2003      	movs	r0, #3
 800ec6a:	f7fd fad3 	bl	800c214 <memp_malloc>
 800ec6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d101      	bne.n	800ec7a <tcp_seg_copy+0x2e>
    return NULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e00a      	b.n	800ec90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec7a:	2210      	movs	r2, #16
 800ec7c:	6879      	ldr	r1, [r7, #4]
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f00a fb29 	bl	80192d6 <memcpy>
  pbuf_ref(cseg->p);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe fa8f 	bl	800d1ac <pbuf_ref>
  return cseg;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	0801bc48 	.word	0x0801bc48
 800ec9c:	0801c19c 	.word	0x0801c19c
 800eca0:	0801bc8c 	.word	0x0801bc8c

0800eca4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d109      	bne.n	800eccc <tcp_recv_null+0x28>
 800ecb8:	4b12      	ldr	r3, [pc, #72]	@ (800ed04 <tcp_recv_null+0x60>)
 800ecba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ecbe:	4912      	ldr	r1, [pc, #72]	@ (800ed08 <tcp_recv_null+0x64>)
 800ecc0:	4812      	ldr	r0, [pc, #72]	@ (800ed0c <tcp_recv_null+0x68>)
 800ecc2:	f00a f907 	bl	8018ed4 <iprintf>
 800ecc6:	f06f 030f 	mvn.w	r3, #15
 800ecca:	e016      	b.n	800ecfa <tcp_recv_null+0x56>

  if (p != NULL) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	891b      	ldrh	r3, [r3, #8]
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	68b8      	ldr	r0, [r7, #8]
 800ecda:	f7ff f99b 	bl	800e014 <tcp_recved>
    pbuf_free(p);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f7fe f9be 	bl	800d060 <pbuf_free>
 800ece4:	e008      	b.n	800ecf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ece6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d104      	bne.n	800ecf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ecee:	68b8      	ldr	r0, [r7, #8]
 800ecf0:	f7fe fe70 	bl	800d9d4 <tcp_close>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	e000      	b.n	800ecfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	0801bc48 	.word	0x0801bc48
 800ed08:	0801c1b8 	.word	0x0801c1b8
 800ed0c:	0801bc8c 	.word	0x0801bc8c

0800ed10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	db01      	blt.n	800ed26 <tcp_kill_prio+0x16>
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	e000      	b.n	800ed28 <tcp_kill_prio+0x18>
 800ed26:	237f      	movs	r3, #127	@ 0x7f
 800ed28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed2a:	7afb      	ldrb	r3, [r7, #11]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d034      	beq.n	800ed9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed30:	7afb      	ldrb	r3, [r7, #11]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed3e:	4b19      	ldr	r3, [pc, #100]	@ (800eda4 <tcp_kill_prio+0x94>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	e01f      	b.n	800ed86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	7d5b      	ldrb	r3, [r3, #21]
 800ed4a:	7afa      	ldrb	r2, [r7, #11]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d80c      	bhi.n	800ed6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed54:	7afa      	ldrb	r2, [r7, #11]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d112      	bne.n	800ed80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed5a:	4b13      	ldr	r3, [pc, #76]	@ (800eda8 <tcp_kill_prio+0x98>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d80a      	bhi.n	800ed80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eda8 <tcp_kill_prio+0x98>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	6a1b      	ldr	r3, [r3, #32]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	7d5b      	ldrb	r3, [r3, #21]
 800ed7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1dc      	bne.n	800ed46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d004      	beq.n	800ed9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed92:	6938      	ldr	r0, [r7, #16]
 800ed94:	f7fe ff64 	bl	800dc60 <tcp_abort>
 800ed98:	e000      	b.n	800ed9c <tcp_kill_prio+0x8c>
    return;
 800ed9a:	bf00      	nop
  }
}
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	20010f80 	.word	0x20010f80
 800eda8:	20010f74 	.word	0x20010f74

0800edac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edb6:	79fb      	ldrb	r3, [r7, #7]
 800edb8:	2b08      	cmp	r3, #8
 800edba:	d009      	beq.n	800edd0 <tcp_kill_state+0x24>
 800edbc:	79fb      	ldrb	r3, [r7, #7]
 800edbe:	2b09      	cmp	r3, #9
 800edc0:	d006      	beq.n	800edd0 <tcp_kill_state+0x24>
 800edc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee2c <tcp_kill_state+0x80>)
 800edc4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800edc8:	4919      	ldr	r1, [pc, #100]	@ (800ee30 <tcp_kill_state+0x84>)
 800edca:	481a      	ldr	r0, [pc, #104]	@ (800ee34 <tcp_kill_state+0x88>)
 800edcc:	f00a f882 	bl	8018ed4 <iprintf>

  inactivity = 0;
 800edd0:	2300      	movs	r3, #0
 800edd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edd4:	2300      	movs	r3, #0
 800edd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edd8:	4b17      	ldr	r3, [pc, #92]	@ (800ee38 <tcp_kill_state+0x8c>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	617b      	str	r3, [r7, #20]
 800edde:	e017      	b.n	800ee10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	79fa      	ldrb	r2, [r7, #7]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d10f      	bne.n	800ee0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edea:	4b14      	ldr	r3, [pc, #80]	@ (800ee3c <tcp_kill_state+0x90>)
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d807      	bhi.n	800ee0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800edfa:	4b10      	ldr	r3, [pc, #64]	@ (800ee3c <tcp_kill_state+0x90>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1e4      	bne.n	800ede0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	6938      	ldr	r0, [r7, #16]
 800ee20:	f7fe fe60 	bl	800dae4 <tcp_abandon>
  }
}
 800ee24:	bf00      	nop
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	0801bc48 	.word	0x0801bc48
 800ee30:	0801c1d4 	.word	0x0801c1d4
 800ee34:	0801bc8c 	.word	0x0801bc8c
 800ee38:	20010f80 	.word	0x20010f80
 800ee3c:	20010f74 	.word	0x20010f74

0800ee40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee46:	2300      	movs	r3, #0
 800ee48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee4e:	4b12      	ldr	r3, [pc, #72]	@ (800ee98 <tcp_kill_timewait+0x58>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	e012      	b.n	800ee7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee56:	4b11      	ldr	r3, [pc, #68]	@ (800ee9c <tcp_kill_timewait+0x5c>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d807      	bhi.n	800ee76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee66:	4b0d      	ldr	r3, [pc, #52]	@ (800ee9c <tcp_kill_timewait+0x5c>)
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6a1b      	ldr	r3, [r3, #32]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1e9      	bne.n	800ee56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee88:	68b8      	ldr	r0, [r7, #8]
 800ee8a:	f7fe fee9 	bl	800dc60 <tcp_abort>
  }
}
 800ee8e:	bf00      	nop
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	20010f84 	.word	0x20010f84
 800ee9c:	20010f74 	.word	0x20010f74

0800eea0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eea6:	4b10      	ldr	r3, [pc, #64]	@ (800eee8 <tcp_handle_closepend+0x48>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeac:	e014      	b.n	800eed8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8b5b      	ldrh	r3, [r3, #26]
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d009      	beq.n	800eed4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	8b5b      	ldrh	r3, [r3, #26]
 800eec4:	f023 0308 	bic.w	r3, r3, #8
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7fe fd16 	bl	800d900 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1e7      	bne.n	800eeae <tcp_handle_closepend+0xe>
  }
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20010f80 	.word	0x20010f80

0800eeec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eef6:	2001      	movs	r0, #1
 800eef8:	f7fd f98c 	bl	800c214 <memp_malloc>
 800eefc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d126      	bne.n	800ef52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef04:	f7ff ffcc 	bl	800eea0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef08:	f7ff ff9a 	bl	800ee40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef0c:	2001      	movs	r0, #1
 800ef0e:	f7fd f981 	bl	800c214 <memp_malloc>
 800ef12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d11b      	bne.n	800ef52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef1a:	2009      	movs	r0, #9
 800ef1c:	f7ff ff46 	bl	800edac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef20:	2001      	movs	r0, #1
 800ef22:	f7fd f977 	bl	800c214 <memp_malloc>
 800ef26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d111      	bne.n	800ef52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef2e:	2008      	movs	r0, #8
 800ef30:	f7ff ff3c 	bl	800edac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef34:	2001      	movs	r0, #1
 800ef36:	f7fd f96d 	bl	800c214 <memp_malloc>
 800ef3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d107      	bne.n	800ef52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef42:	79fb      	ldrb	r3, [r7, #7]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff fee3 	bl	800ed10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	f7fd f962 	bl	800c214 <memp_malloc>
 800ef50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d03f      	beq.n	800efd8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef58:	229c      	movs	r2, #156	@ 0x9c
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f00a f858 	bl	8019012 <memset>
    pcb->prio = prio;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	79fa      	ldrb	r2, [r7, #7]
 800ef66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ef6e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ef78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	22ff      	movs	r2, #255	@ 0xff
 800ef86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ef8e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2206      	movs	r2, #6
 800ef94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2206      	movs	r2, #6
 800ef9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efa4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2201      	movs	r2, #1
 800efaa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800efae:	4b0d      	ldr	r3, [pc, #52]	@ (800efe4 <tcp_alloc+0xf8>)
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800efb6:	4b0c      	ldr	r3, [pc, #48]	@ (800efe8 <tcp_alloc+0xfc>)
 800efb8:	781a      	ldrb	r2, [r3, #0]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800efc4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4a08      	ldr	r2, [pc, #32]	@ (800efec <tcp_alloc+0x100>)
 800efcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	4a07      	ldr	r2, [pc, #28]	@ (800eff0 <tcp_alloc+0x104>)
 800efd4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800efd8:	68fb      	ldr	r3, [r7, #12]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20010f74 	.word	0x20010f74
 800efe8:	20010f8a 	.word	0x20010f8a
 800efec:	0800eca5 	.word	0x0800eca5
 800eff0:	006ddd00 	.word	0x006ddd00

0800eff4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	4603      	mov	r3, r0
 800effc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800effe:	2040      	movs	r0, #64	@ 0x40
 800f000:	f7ff ff74 	bl	800eeec <tcp_alloc>
 800f004:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f006:	68fb      	ldr	r3, [r7, #12]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	611a      	str	r2, [r3, #16]
  }
}
 800f026:	bf00      	nop
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
	...

0800f034 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00e      	beq.n	800f062 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	7d1b      	ldrb	r3, [r3, #20]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d106      	bne.n	800f05a <tcp_recv+0x26>
 800f04c:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <tcp_recv+0x38>)
 800f04e:	f240 72df 	movw	r2, #2015	@ 0x7df
 800f052:	4907      	ldr	r1, [pc, #28]	@ (800f070 <tcp_recv+0x3c>)
 800f054:	4807      	ldr	r0, [pc, #28]	@ (800f074 <tcp_recv+0x40>)
 800f056:	f009 ff3d 	bl	8018ed4 <iprintf>
    pcb->recv = recv;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800f062:	bf00      	nop
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	0801bc48 	.word	0x0801bc48
 800f070:	0801c1e4 	.word	0x0801c1e4
 800f074:	0801bc8c 	.word	0x0801bc8c

0800f078 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00e      	beq.n	800f0a6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	7d1b      	ldrb	r3, [r3, #20]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d106      	bne.n	800f09e <tcp_sent+0x26>
 800f090:	4b07      	ldr	r3, [pc, #28]	@ (800f0b0 <tcp_sent+0x38>)
 800f092:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800f096:	4907      	ldr	r1, [pc, #28]	@ (800f0b4 <tcp_sent+0x3c>)
 800f098:	4807      	ldr	r0, [pc, #28]	@ (800f0b8 <tcp_sent+0x40>)
 800f09a:	f009 ff1b 	bl	8018ed4 <iprintf>
    pcb->sent = sent;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	683a      	ldr	r2, [r7, #0]
 800f0a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800f0a6:	bf00      	nop
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801bc48 	.word	0x0801bc48
 800f0b4:	0801c20c 	.word	0x0801c20c
 800f0b8:	0801bc8c 	.word	0x0801bc8c

0800f0bc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00e      	beq.n	800f0ea <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	7d1b      	ldrb	r3, [r3, #20]
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d106      	bne.n	800f0e2 <tcp_err+0x26>
 800f0d4:	4b07      	ldr	r3, [pc, #28]	@ (800f0f4 <tcp_err+0x38>)
 800f0d6:	f640 020d 	movw	r2, #2061	@ 0x80d
 800f0da:	4907      	ldr	r1, [pc, #28]	@ (800f0f8 <tcp_err+0x3c>)
 800f0dc:	4807      	ldr	r0, [pc, #28]	@ (800f0fc <tcp_err+0x40>)
 800f0de:	f009 fef9 	bl	8018ed4 <iprintf>
    pcb->errf = err;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	683a      	ldr	r2, [r7, #0]
 800f0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800f0ea:	bf00      	nop
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	0801bc48 	.word	0x0801bc48
 800f0f8:	0801c234 	.word	0x0801c234
 800f0fc:	0801bc8c 	.word	0x0801bc8c

0800f100 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d008      	beq.n	800f122 <tcp_accept+0x22>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	7d1b      	ldrb	r3, [r3, #20]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d104      	bne.n	800f122 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	619a      	str	r2, [r3, #24]
  }
}
 800f122:	bf00      	nop
 800f124:	3714      	adds	r7, #20
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
	...

0800f130 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	4613      	mov	r3, r2
 800f13c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d107      	bne.n	800f154 <tcp_poll+0x24>
 800f144:	4b0e      	ldr	r3, [pc, #56]	@ (800f180 <tcp_poll+0x50>)
 800f146:	f640 023d 	movw	r2, #2109	@ 0x83d
 800f14a:	490e      	ldr	r1, [pc, #56]	@ (800f184 <tcp_poll+0x54>)
 800f14c:	480e      	ldr	r0, [pc, #56]	@ (800f188 <tcp_poll+0x58>)
 800f14e:	f009 fec1 	bl	8018ed4 <iprintf>
 800f152:	e011      	b.n	800f178 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	7d1b      	ldrb	r3, [r3, #20]
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d106      	bne.n	800f16a <tcp_poll+0x3a>
 800f15c:	4b08      	ldr	r3, [pc, #32]	@ (800f180 <tcp_poll+0x50>)
 800f15e:	f640 023e 	movw	r2, #2110	@ 0x83e
 800f162:	490a      	ldr	r1, [pc, #40]	@ (800f18c <tcp_poll+0x5c>)
 800f164:	4808      	ldr	r0, [pc, #32]	@ (800f188 <tcp_poll+0x58>)
 800f166:	f009 feb5 	bl	8018ed4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	79fa      	ldrb	r2, [r7, #7]
 800f176:	775a      	strb	r2, [r3, #29]
}
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	0801bc48 	.word	0x0801bc48
 800f184:	0801c25c 	.word	0x0801c25c
 800f188:	0801bc8c 	.word	0x0801bc8c
 800f18c:	0801c274 	.word	0x0801c274

0800f190 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d107      	bne.n	800f1ae <tcp_pcb_purge+0x1e>
 800f19e:	4b21      	ldr	r3, [pc, #132]	@ (800f224 <tcp_pcb_purge+0x94>)
 800f1a0:	f640 0251 	movw	r2, #2129	@ 0x851
 800f1a4:	4920      	ldr	r1, [pc, #128]	@ (800f228 <tcp_pcb_purge+0x98>)
 800f1a6:	4821      	ldr	r0, [pc, #132]	@ (800f22c <tcp_pcb_purge+0x9c>)
 800f1a8:	f009 fe94 	bl	8018ed4 <iprintf>
 800f1ac:	e037      	b.n	800f21e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7d1b      	ldrb	r3, [r3, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d033      	beq.n	800f21e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1ba:	2b0a      	cmp	r3, #10
 800f1bc:	d02f      	beq.n	800f21e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d02b      	beq.n	800f21e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d007      	beq.n	800f1de <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fd ff44 	bl	800d060 <pbuf_free>
      pcb->refused_data = NULL;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f986 	bl	800f4f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1f2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff fcdb 	bl	800ebb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fcd6 	bl	800ebb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	0801bc48 	.word	0x0801bc48
 800f228:	0801c294 	.word	0x0801c294
 800f22c:	0801bc8c 	.word	0x0801bc8c

0800f230 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d106      	bne.n	800f24e <tcp_pcb_remove+0x1e>
 800f240:	4b3e      	ldr	r3, [pc, #248]	@ (800f33c <tcp_pcb_remove+0x10c>)
 800f242:	f640 0283 	movw	r2, #2179	@ 0x883
 800f246:	493e      	ldr	r1, [pc, #248]	@ (800f340 <tcp_pcb_remove+0x110>)
 800f248:	483e      	ldr	r0, [pc, #248]	@ (800f344 <tcp_pcb_remove+0x114>)
 800f24a:	f009 fe43 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <tcp_pcb_remove+0x32>
 800f254:	4b39      	ldr	r3, [pc, #228]	@ (800f33c <tcp_pcb_remove+0x10c>)
 800f256:	f640 0284 	movw	r2, #2180	@ 0x884
 800f25a:	493b      	ldr	r1, [pc, #236]	@ (800f348 <tcp_pcb_remove+0x118>)
 800f25c:	4839      	ldr	r0, [pc, #228]	@ (800f344 <tcp_pcb_remove+0x114>)
 800f25e:	f009 fe39 	bl	8018ed4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d105      	bne.n	800f278 <tcp_pcb_remove+0x48>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68da      	ldr	r2, [r3, #12]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	601a      	str	r2, [r3, #0]
 800f276:	e013      	b.n	800f2a0 <tcp_pcb_remove+0x70>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	60fb      	str	r3, [r7, #12]
 800f27e:	e00c      	b.n	800f29a <tcp_pcb_remove+0x6a>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	683a      	ldr	r2, [r7, #0]
 800f286:	429a      	cmp	r2, r3
 800f288:	d104      	bne.n	800f294 <tcp_pcb_remove+0x64>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	68da      	ldr	r2, [r3, #12]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	60da      	str	r2, [r3, #12]
 800f292:	e005      	b.n	800f2a0 <tcp_pcb_remove+0x70>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1ef      	bne.n	800f280 <tcp_pcb_remove+0x50>
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2a6:	6838      	ldr	r0, [r7, #0]
 800f2a8:	f7ff ff72 	bl	800f190 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	7d1b      	ldrb	r3, [r3, #20]
 800f2b0:	2b0a      	cmp	r3, #10
 800f2b2:	d013      	beq.n	800f2dc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d00f      	beq.n	800f2dc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	8b5b      	ldrh	r3, [r3, #26]
 800f2c0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d009      	beq.n	800f2dc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	8b5b      	ldrh	r3, [r3, #26]
 800f2cc:	f043 0302 	orr.w	r3, r3, #2
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2d6:	6838      	ldr	r0, [r7, #0]
 800f2d8:	f003 fbc0 	bl	8012a5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	7d1b      	ldrb	r3, [r3, #20]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d020      	beq.n	800f326 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d006      	beq.n	800f2fa <tcp_pcb_remove+0xca>
 800f2ec:	4b13      	ldr	r3, [pc, #76]	@ (800f33c <tcp_pcb_remove+0x10c>)
 800f2ee:	f640 0293 	movw	r2, #2195	@ 0x893
 800f2f2:	4916      	ldr	r1, [pc, #88]	@ (800f34c <tcp_pcb_remove+0x11c>)
 800f2f4:	4813      	ldr	r0, [pc, #76]	@ (800f344 <tcp_pcb_remove+0x114>)
 800f2f6:	f009 fded 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d006      	beq.n	800f310 <tcp_pcb_remove+0xe0>
 800f302:	4b0e      	ldr	r3, [pc, #56]	@ (800f33c <tcp_pcb_remove+0x10c>)
 800f304:	f640 0294 	movw	r2, #2196	@ 0x894
 800f308:	4911      	ldr	r1, [pc, #68]	@ (800f350 <tcp_pcb_remove+0x120>)
 800f30a:	480e      	ldr	r0, [pc, #56]	@ (800f344 <tcp_pcb_remove+0x114>)
 800f30c:	f009 fde2 	bl	8018ed4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f314:	2b00      	cmp	r3, #0
 800f316:	d006      	beq.n	800f326 <tcp_pcb_remove+0xf6>
 800f318:	4b08      	ldr	r3, [pc, #32]	@ (800f33c <tcp_pcb_remove+0x10c>)
 800f31a:	f640 0296 	movw	r2, #2198	@ 0x896
 800f31e:	490d      	ldr	r1, [pc, #52]	@ (800f354 <tcp_pcb_remove+0x124>)
 800f320:	4808      	ldr	r0, [pc, #32]	@ (800f344 <tcp_pcb_remove+0x114>)
 800f322:	f009 fdd7 	bl	8018ed4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2200      	movs	r2, #0
 800f32a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	2200      	movs	r2, #0
 800f330:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f332:	bf00      	nop
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	0801bc48 	.word	0x0801bc48
 800f340:	0801c2b0 	.word	0x0801c2b0
 800f344:	0801bc8c 	.word	0x0801bc8c
 800f348:	0801c2cc 	.word	0x0801c2cc
 800f34c:	0801c2ec 	.word	0x0801c2ec
 800f350:	0801c304 	.word	0x0801c304
 800f354:	0801c320 	.word	0x0801c320

0800f358 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <tcp_next_iss+0x1c>
 800f366:	4b0a      	ldr	r3, [pc, #40]	@ (800f390 <tcp_next_iss+0x38>)
 800f368:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f36c:	4909      	ldr	r1, [pc, #36]	@ (800f394 <tcp_next_iss+0x3c>)
 800f36e:	480a      	ldr	r0, [pc, #40]	@ (800f398 <tcp_next_iss+0x40>)
 800f370:	f009 fdb0 	bl	8018ed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f374:	4b09      	ldr	r3, [pc, #36]	@ (800f39c <tcp_next_iss+0x44>)
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	4b09      	ldr	r3, [pc, #36]	@ (800f3a0 <tcp_next_iss+0x48>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4413      	add	r3, r2
 800f37e:	4a07      	ldr	r2, [pc, #28]	@ (800f39c <tcp_next_iss+0x44>)
 800f380:	6013      	str	r3, [r2, #0]
  return iss;
 800f382:	4b06      	ldr	r3, [pc, #24]	@ (800f39c <tcp_next_iss+0x44>)
 800f384:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	0801bc48 	.word	0x0801bc48
 800f394:	0801c338 	.word	0x0801c338
 800f398:	0801bc8c 	.word	0x0801bc8c
 800f39c:	20000028 	.word	0x20000028
 800f3a0:	20010f74 	.word	0x20010f74

0800f3a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
 800f3b0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d106      	bne.n	800f3c6 <tcp_eff_send_mss_netif+0x22>
 800f3b8:	4b14      	ldr	r3, [pc, #80]	@ (800f40c <tcp_eff_send_mss_netif+0x68>)
 800f3ba:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f3be:	4914      	ldr	r1, [pc, #80]	@ (800f410 <tcp_eff_send_mss_netif+0x6c>)
 800f3c0:	4814      	ldr	r0, [pc, #80]	@ (800f414 <tcp_eff_send_mss_netif+0x70>)
 800f3c2:	f009 fd87 	bl	8018ed4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3cc:	89fb      	ldrh	r3, [r7, #14]
 800f3ce:	e019      	b.n	800f404 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3d6:	8afb      	ldrh	r3, [r7, #22]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d012      	beq.n	800f402 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f3dc:	2328      	movs	r3, #40	@ 0x28
 800f3de:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f3e0:	8afa      	ldrh	r2, [r7, #22]
 800f3e2:	8abb      	ldrh	r3, [r7, #20]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d904      	bls.n	800f3f2 <tcp_eff_send_mss_netif+0x4e>
 800f3e8:	8afa      	ldrh	r2, [r7, #22]
 800f3ea:	8abb      	ldrh	r3, [r7, #20]
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	e000      	b.n	800f3f4 <tcp_eff_send_mss_netif+0x50>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f3f6:	8a7a      	ldrh	r2, [r7, #18]
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	bf28      	it	cs
 800f3fe:	4613      	movcs	r3, r2
 800f400:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f402:	89fb      	ldrh	r3, [r7, #14]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	0801bc48 	.word	0x0801bc48
 800f410:	0801c354 	.word	0x0801c354
 800f414:	0801bc8c 	.word	0x0801bc8c

0800f418 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d119      	bne.n	800f460 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f42c:	4b10      	ldr	r3, [pc, #64]	@ (800f470 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f42e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f432:	4910      	ldr	r1, [pc, #64]	@ (800f474 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f434:	4810      	ldr	r0, [pc, #64]	@ (800f478 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f436:	f009 fd4d 	bl	8018ed4 <iprintf>

  while (pcb != NULL) {
 800f43a:	e011      	b.n	800f460 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	429a      	cmp	r2, r3
 800f446:	d108      	bne.n	800f45a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7fe fc06 	bl	800dc60 <tcp_abort>
      pcb = next;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	60fb      	str	r3, [r7, #12]
 800f458:	e002      	b.n	800f460 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d1ea      	bne.n	800f43c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f466:	bf00      	nop
 800f468:	bf00      	nop
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	0801bc48 	.word	0x0801bc48
 800f474:	0801c37c 	.word	0x0801c37c
 800f478:	0801bc8c 	.word	0x0801bc8c

0800f47c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d02a      	beq.n	800f4e2 <tcp_netif_ip_addr_changed+0x66>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d026      	beq.n	800f4e2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f494:	4b15      	ldr	r3, [pc, #84]	@ (800f4ec <tcp_netif_ip_addr_changed+0x70>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4619      	mov	r1, r3
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff ffbc 	bl	800f418 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4a0:	4b13      	ldr	r3, [pc, #76]	@ (800f4f0 <tcp_netif_ip_addr_changed+0x74>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff ffb6 	bl	800f418 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d017      	beq.n	800f4e2 <tcp_netif_ip_addr_changed+0x66>
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d013      	beq.n	800f4e2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800f4f4 <tcp_netif_ip_addr_changed+0x78>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	60fb      	str	r3, [r7, #12]
 800f4c0:	e00c      	b.n	800f4dc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d103      	bne.n	800f4d6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1ef      	bne.n	800f4c2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f4e2:	bf00      	nop
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	20010f80 	.word	0x20010f80
 800f4f0:	20010f78 	.word	0x20010f78
 800f4f4:	20010f7c 	.word	0x20010f7c

0800f4f8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f504:	2b00      	cmp	r3, #0
 800f506:	d007      	beq.n	800f518 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff fb51 	bl	800ebb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b08d      	sub	sp, #52	@ 0x34
 800f524:	af04      	add	r7, sp, #16
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d105      	bne.n	800f53c <tcp_input+0x1c>
 800f530:	4b9b      	ldr	r3, [pc, #620]	@ (800f7a0 <tcp_input+0x280>)
 800f532:	2283      	movs	r2, #131	@ 0x83
 800f534:	499b      	ldr	r1, [pc, #620]	@ (800f7a4 <tcp_input+0x284>)
 800f536:	489c      	ldr	r0, [pc, #624]	@ (800f7a8 <tcp_input+0x288>)
 800f538:	f009 fccc 	bl	8018ed4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	4a9a      	ldr	r2, [pc, #616]	@ (800f7ac <tcp_input+0x28c>)
 800f542:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	895b      	ldrh	r3, [r3, #10]
 800f548:	2b13      	cmp	r3, #19
 800f54a:	f240 83d1 	bls.w	800fcf0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f54e:	4b98      	ldr	r3, [pc, #608]	@ (800f7b0 <tcp_input+0x290>)
 800f550:	695b      	ldr	r3, [r3, #20]
 800f552:	4a97      	ldr	r2, [pc, #604]	@ (800f7b0 <tcp_input+0x290>)
 800f554:	6812      	ldr	r2, [r2, #0]
 800f556:	4611      	mov	r1, r2
 800f558:	4618      	mov	r0, r3
 800f55a:	f008 fa55 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	f040 83c7 	bne.w	800fcf4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f566:	4b92      	ldr	r3, [pc, #584]	@ (800f7b0 <tcp_input+0x290>)
 800f568:	695b      	ldr	r3, [r3, #20]
 800f56a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f56e:	2be0      	cmp	r3, #224	@ 0xe0
 800f570:	f000 83c0 	beq.w	800fcf4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f574:	4b8d      	ldr	r3, [pc, #564]	@ (800f7ac <tcp_input+0x28c>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	899b      	ldrh	r3, [r3, #12]
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fc f93b 	bl	800b7f8 <lwip_htons>
 800f582:	4603      	mov	r3, r0
 800f584:	0b1b      	lsrs	r3, r3, #12
 800f586:	b29b      	uxth	r3, r3
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f58e:	7cbb      	ldrb	r3, [r7, #18]
 800f590:	2b13      	cmp	r3, #19
 800f592:	f240 83b1 	bls.w	800fcf8 <tcp_input+0x7d8>
 800f596:	7cbb      	ldrb	r3, [r7, #18]
 800f598:	b29a      	uxth	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	891b      	ldrh	r3, [r3, #8]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	f200 83aa 	bhi.w	800fcf8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5a4:	7cbb      	ldrb	r3, [r7, #18]
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	3b14      	subs	r3, #20
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	4b81      	ldr	r3, [pc, #516]	@ (800f7b4 <tcp_input+0x294>)
 800f5ae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5b0:	4b81      	ldr	r3, [pc, #516]	@ (800f7b8 <tcp_input+0x298>)
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	895a      	ldrh	r2, [r3, #10]
 800f5ba:	7cbb      	ldrb	r3, [r7, #18]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d309      	bcc.n	800f5d6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5c2:	4b7c      	ldr	r3, [pc, #496]	@ (800f7b4 <tcp_input+0x294>)
 800f5c4:	881a      	ldrh	r2, [r3, #0]
 800f5c6:	4b7d      	ldr	r3, [pc, #500]	@ (800f7bc <tcp_input+0x29c>)
 800f5c8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5ca:	7cbb      	ldrb	r3, [r7, #18]
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7fd fcc0 	bl	800cf54 <pbuf_remove_header>
 800f5d4:	e04e      	b.n	800f674 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <tcp_input+0xca>
 800f5de:	4b70      	ldr	r3, [pc, #448]	@ (800f7a0 <tcp_input+0x280>)
 800f5e0:	22c2      	movs	r2, #194	@ 0xc2
 800f5e2:	4977      	ldr	r1, [pc, #476]	@ (800f7c0 <tcp_input+0x2a0>)
 800f5e4:	4870      	ldr	r0, [pc, #448]	@ (800f7a8 <tcp_input+0x288>)
 800f5e6:	f009 fc75 	bl	8018ed4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f5ea:	2114      	movs	r1, #20
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7fd fcb1 	bl	800cf54 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	895a      	ldrh	r2, [r3, #10]
 800f5f6:	4b71      	ldr	r3, [pc, #452]	@ (800f7bc <tcp_input+0x29c>)
 800f5f8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5fa:	4b6e      	ldr	r3, [pc, #440]	@ (800f7b4 <tcp_input+0x294>)
 800f5fc:	881a      	ldrh	r2, [r3, #0]
 800f5fe:	4b6f      	ldr	r3, [pc, #444]	@ (800f7bc <tcp_input+0x29c>)
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f606:	4b6d      	ldr	r3, [pc, #436]	@ (800f7bc <tcp_input+0x29c>)
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	4619      	mov	r1, r3
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7fd fca1 	bl	800cf54 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	895b      	ldrh	r3, [r3, #10]
 800f618:	8a3a      	ldrh	r2, [r7, #16]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	f200 836e 	bhi.w	800fcfc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	4a64      	ldr	r2, [pc, #400]	@ (800f7b8 <tcp_input+0x298>)
 800f628:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	8a3a      	ldrh	r2, [r7, #16]
 800f630:	4611      	mov	r1, r2
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd fc8e 	bl	800cf54 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	891a      	ldrh	r2, [r3, #8]
 800f63c:	8a3b      	ldrh	r3, [r7, #16]
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	b29a      	uxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	895b      	ldrh	r3, [r3, #10]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d005      	beq.n	800f65a <tcp_input+0x13a>
 800f64e:	4b54      	ldr	r3, [pc, #336]	@ (800f7a0 <tcp_input+0x280>)
 800f650:	22df      	movs	r2, #223	@ 0xdf
 800f652:	495c      	ldr	r1, [pc, #368]	@ (800f7c4 <tcp_input+0x2a4>)
 800f654:	4854      	ldr	r0, [pc, #336]	@ (800f7a8 <tcp_input+0x288>)
 800f656:	f009 fc3d 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	891a      	ldrh	r2, [r3, #8]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	891b      	ldrh	r3, [r3, #8]
 800f664:	429a      	cmp	r2, r3
 800f666:	d005      	beq.n	800f674 <tcp_input+0x154>
 800f668:	4b4d      	ldr	r3, [pc, #308]	@ (800f7a0 <tcp_input+0x280>)
 800f66a:	22e0      	movs	r2, #224	@ 0xe0
 800f66c:	4956      	ldr	r1, [pc, #344]	@ (800f7c8 <tcp_input+0x2a8>)
 800f66e:	484e      	ldr	r0, [pc, #312]	@ (800f7a8 <tcp_input+0x288>)
 800f670:	f009 fc30 	bl	8018ed4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f674:	4b4d      	ldr	r3, [pc, #308]	@ (800f7ac <tcp_input+0x28c>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	4a4b      	ldr	r2, [pc, #300]	@ (800f7ac <tcp_input+0x28c>)
 800f67e:	6814      	ldr	r4, [r2, #0]
 800f680:	4618      	mov	r0, r3
 800f682:	f7fc f8b9 	bl	800b7f8 <lwip_htons>
 800f686:	4603      	mov	r3, r0
 800f688:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f68a:	4b48      	ldr	r3, [pc, #288]	@ (800f7ac <tcp_input+0x28c>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	885b      	ldrh	r3, [r3, #2]
 800f690:	b29b      	uxth	r3, r3
 800f692:	4a46      	ldr	r2, [pc, #280]	@ (800f7ac <tcp_input+0x28c>)
 800f694:	6814      	ldr	r4, [r2, #0]
 800f696:	4618      	mov	r0, r3
 800f698:	f7fc f8ae 	bl	800b7f8 <lwip_htons>
 800f69c:	4603      	mov	r3, r0
 800f69e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6a0:	4b42      	ldr	r3, [pc, #264]	@ (800f7ac <tcp_input+0x28c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	4a41      	ldr	r2, [pc, #260]	@ (800f7ac <tcp_input+0x28c>)
 800f6a8:	6814      	ldr	r4, [r2, #0]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fc f8b9 	bl	800b822 <lwip_htonl>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	6063      	str	r3, [r4, #4]
 800f6b4:	6863      	ldr	r3, [r4, #4]
 800f6b6:	4a45      	ldr	r2, [pc, #276]	@ (800f7cc <tcp_input+0x2ac>)
 800f6b8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6ba:	4b3c      	ldr	r3, [pc, #240]	@ (800f7ac <tcp_input+0x28c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	4a3a      	ldr	r2, [pc, #232]	@ (800f7ac <tcp_input+0x28c>)
 800f6c2:	6814      	ldr	r4, [r2, #0]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fc f8ac 	bl	800b822 <lwip_htonl>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	60a3      	str	r3, [r4, #8]
 800f6ce:	68a3      	ldr	r3, [r4, #8]
 800f6d0:	4a3f      	ldr	r2, [pc, #252]	@ (800f7d0 <tcp_input+0x2b0>)
 800f6d2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6d4:	4b35      	ldr	r3, [pc, #212]	@ (800f7ac <tcp_input+0x28c>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	89db      	ldrh	r3, [r3, #14]
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	4a33      	ldr	r2, [pc, #204]	@ (800f7ac <tcp_input+0x28c>)
 800f6de:	6814      	ldr	r4, [r2, #0]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fc f889 	bl	800b7f8 <lwip_htons>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6ea:	4b30      	ldr	r3, [pc, #192]	@ (800f7ac <tcp_input+0x28c>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	899b      	ldrh	r3, [r3, #12]
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fc f880 	bl	800b7f8 <lwip_htons>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f700:	b2da      	uxtb	r2, r3
 800f702:	4b34      	ldr	r3, [pc, #208]	@ (800f7d4 <tcp_input+0x2b4>)
 800f704:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	891a      	ldrh	r2, [r3, #8]
 800f70a:	4b33      	ldr	r3, [pc, #204]	@ (800f7d8 <tcp_input+0x2b8>)
 800f70c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f70e:	4b31      	ldr	r3, [pc, #196]	@ (800f7d4 <tcp_input+0x2b4>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	f003 0303 	and.w	r3, r3, #3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00c      	beq.n	800f734 <tcp_input+0x214>
    tcplen++;
 800f71a:	4b2f      	ldr	r3, [pc, #188]	@ (800f7d8 <tcp_input+0x2b8>)
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	3301      	adds	r3, #1
 800f720:	b29a      	uxth	r2, r3
 800f722:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d8 <tcp_input+0x2b8>)
 800f724:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	891a      	ldrh	r2, [r3, #8]
 800f72a:	4b2b      	ldr	r3, [pc, #172]	@ (800f7d8 <tcp_input+0x2b8>)
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	429a      	cmp	r2, r3
 800f730:	f200 82e6 	bhi.w	800fd00 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f734:	2300      	movs	r3, #0
 800f736:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f738:	4b28      	ldr	r3, [pc, #160]	@ (800f7dc <tcp_input+0x2bc>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	61fb      	str	r3, [r7, #28]
 800f73e:	e09d      	b.n	800f87c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	7d1b      	ldrb	r3, [r3, #20]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d105      	bne.n	800f754 <tcp_input+0x234>
 800f748:	4b15      	ldr	r3, [pc, #84]	@ (800f7a0 <tcp_input+0x280>)
 800f74a:	22fb      	movs	r2, #251	@ 0xfb
 800f74c:	4924      	ldr	r1, [pc, #144]	@ (800f7e0 <tcp_input+0x2c0>)
 800f74e:	4816      	ldr	r0, [pc, #88]	@ (800f7a8 <tcp_input+0x288>)
 800f750:	f009 fbc0 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	7d1b      	ldrb	r3, [r3, #20]
 800f758:	2b0a      	cmp	r3, #10
 800f75a:	d105      	bne.n	800f768 <tcp_input+0x248>
 800f75c:	4b10      	ldr	r3, [pc, #64]	@ (800f7a0 <tcp_input+0x280>)
 800f75e:	22fc      	movs	r2, #252	@ 0xfc
 800f760:	4920      	ldr	r1, [pc, #128]	@ (800f7e4 <tcp_input+0x2c4>)
 800f762:	4811      	ldr	r0, [pc, #68]	@ (800f7a8 <tcp_input+0x288>)
 800f764:	f009 fbb6 	bl	8018ed4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	7d1b      	ldrb	r3, [r3, #20]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d105      	bne.n	800f77c <tcp_input+0x25c>
 800f770:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a0 <tcp_input+0x280>)
 800f772:	22fd      	movs	r2, #253	@ 0xfd
 800f774:	491c      	ldr	r1, [pc, #112]	@ (800f7e8 <tcp_input+0x2c8>)
 800f776:	480c      	ldr	r0, [pc, #48]	@ (800f7a8 <tcp_input+0x288>)
 800f778:	f009 fbac 	bl	8018ed4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	7a1b      	ldrb	r3, [r3, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d033      	beq.n	800f7ec <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	7a1a      	ldrb	r2, [r3, #8]
 800f788:	4b09      	ldr	r3, [pc, #36]	@ (800f7b0 <tcp_input+0x290>)
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f790:	3301      	adds	r3, #1
 800f792:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f794:	429a      	cmp	r2, r3
 800f796:	d029      	beq.n	800f7ec <tcp_input+0x2cc>
      prev = pcb;
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	61bb      	str	r3, [r7, #24]
      continue;
 800f79c:	e06b      	b.n	800f876 <tcp_input+0x356>
 800f79e:	bf00      	nop
 800f7a0:	0801c3b0 	.word	0x0801c3b0
 800f7a4:	0801c3e4 	.word	0x0801c3e4
 800f7a8:	0801c3fc 	.word	0x0801c3fc
 800f7ac:	20010f9c 	.word	0x20010f9c
 800f7b0:	2000d800 	.word	0x2000d800
 800f7b4:	20010fa0 	.word	0x20010fa0
 800f7b8:	20010fa4 	.word	0x20010fa4
 800f7bc:	20010fa2 	.word	0x20010fa2
 800f7c0:	0801c424 	.word	0x0801c424
 800f7c4:	0801c434 	.word	0x0801c434
 800f7c8:	0801c440 	.word	0x0801c440
 800f7cc:	20010fac 	.word	0x20010fac
 800f7d0:	20010fb0 	.word	0x20010fb0
 800f7d4:	20010fb8 	.word	0x20010fb8
 800f7d8:	20010fb6 	.word	0x20010fb6
 800f7dc:	20010f80 	.word	0x20010f80
 800f7e0:	0801c460 	.word	0x0801c460
 800f7e4:	0801c488 	.word	0x0801c488
 800f7e8:	0801c4b4 	.word	0x0801c4b4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	8b1a      	ldrh	r2, [r3, #24]
 800f7f0:	4b72      	ldr	r3, [pc, #456]	@ (800f9bc <tcp_input+0x49c>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d13a      	bne.n	800f872 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	8ada      	ldrh	r2, [r3, #22]
 800f800:	4b6e      	ldr	r3, [pc, #440]	@ (800f9bc <tcp_input+0x49c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	885b      	ldrh	r3, [r3, #2]
 800f806:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f808:	429a      	cmp	r2, r3
 800f80a:	d132      	bne.n	800f872 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	685a      	ldr	r2, [r3, #4]
 800f810:	4b6b      	ldr	r3, [pc, #428]	@ (800f9c0 <tcp_input+0x4a0>)
 800f812:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f814:	429a      	cmp	r2, r3
 800f816:	d12c      	bne.n	800f872 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	4b68      	ldr	r3, [pc, #416]	@ (800f9c0 <tcp_input+0x4a0>)
 800f81e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f820:	429a      	cmp	r2, r3
 800f822:	d126      	bne.n	800f872 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	69fa      	ldr	r2, [r7, #28]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d106      	bne.n	800f83c <tcp_input+0x31c>
 800f82e:	4b65      	ldr	r3, [pc, #404]	@ (800f9c4 <tcp_input+0x4a4>)
 800f830:	f240 120d 	movw	r2, #269	@ 0x10d
 800f834:	4964      	ldr	r1, [pc, #400]	@ (800f9c8 <tcp_input+0x4a8>)
 800f836:	4865      	ldr	r0, [pc, #404]	@ (800f9cc <tcp_input+0x4ac>)
 800f838:	f009 fb4c 	bl	8018ed4 <iprintf>
      if (prev != NULL) {
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00a      	beq.n	800f858 <tcp_input+0x338>
        prev->next = pcb->next;
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	68da      	ldr	r2, [r3, #12]
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f84a:	4b61      	ldr	r3, [pc, #388]	@ (800f9d0 <tcp_input+0x4b0>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f852:	4a5f      	ldr	r2, [pc, #380]	@ (800f9d0 <tcp_input+0x4b0>)
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	69fa      	ldr	r2, [r7, #28]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d111      	bne.n	800f886 <tcp_input+0x366>
 800f862:	4b58      	ldr	r3, [pc, #352]	@ (800f9c4 <tcp_input+0x4a4>)
 800f864:	f240 1215 	movw	r2, #277	@ 0x115
 800f868:	495a      	ldr	r1, [pc, #360]	@ (800f9d4 <tcp_input+0x4b4>)
 800f86a:	4858      	ldr	r0, [pc, #352]	@ (800f9cc <tcp_input+0x4ac>)
 800f86c:	f009 fb32 	bl	8018ed4 <iprintf>
      break;
 800f870:	e009      	b.n	800f886 <tcp_input+0x366>
    }
    prev = pcb;
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	61fb      	str	r3, [r7, #28]
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f47f af5e 	bne.w	800f740 <tcp_input+0x220>
 800f884:	e000      	b.n	800f888 <tcp_input+0x368>
      break;
 800f886:	bf00      	nop
  }

  if (pcb == NULL) {
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f040 80aa 	bne.w	800f9e4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f890:	4b51      	ldr	r3, [pc, #324]	@ (800f9d8 <tcp_input+0x4b8>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	61fb      	str	r3, [r7, #28]
 800f896:	e03f      	b.n	800f918 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	7d1b      	ldrb	r3, [r3, #20]
 800f89c:	2b0a      	cmp	r3, #10
 800f89e:	d006      	beq.n	800f8ae <tcp_input+0x38e>
 800f8a0:	4b48      	ldr	r3, [pc, #288]	@ (800f9c4 <tcp_input+0x4a4>)
 800f8a2:	f240 121f 	movw	r2, #287	@ 0x11f
 800f8a6:	494d      	ldr	r1, [pc, #308]	@ (800f9dc <tcp_input+0x4bc>)
 800f8a8:	4848      	ldr	r0, [pc, #288]	@ (800f9cc <tcp_input+0x4ac>)
 800f8aa:	f009 fb13 	bl	8018ed4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	7a1b      	ldrb	r3, [r3, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d009      	beq.n	800f8ca <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	7a1a      	ldrb	r2, [r3, #8]
 800f8ba:	4b41      	ldr	r3, [pc, #260]	@ (800f9c0 <tcp_input+0x4a0>)
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d122      	bne.n	800f910 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8ca:	69fb      	ldr	r3, [r7, #28]
 800f8cc:	8b1a      	ldrh	r2, [r3, #24]
 800f8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800f9bc <tcp_input+0x49c>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d11b      	bne.n	800f912 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	8ada      	ldrh	r2, [r3, #22]
 800f8de:	4b37      	ldr	r3, [pc, #220]	@ (800f9bc <tcp_input+0x49c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	885b      	ldrh	r3, [r3, #2]
 800f8e4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d113      	bne.n	800f912 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8ea:	69fb      	ldr	r3, [r7, #28]
 800f8ec:	685a      	ldr	r2, [r3, #4]
 800f8ee:	4b34      	ldr	r3, [pc, #208]	@ (800f9c0 <tcp_input+0x4a0>)
 800f8f0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d10d      	bne.n	800f912 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	4b31      	ldr	r3, [pc, #196]	@ (800f9c0 <tcp_input+0x4a0>)
 800f8fc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d107      	bne.n	800f912 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f902:	69f8      	ldr	r0, [r7, #28]
 800f904:	f000 fb56 	bl	800ffb4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7fd fba9 	bl	800d060 <pbuf_free>
        return;
 800f90e:	e1fd      	b.n	800fd0c <tcp_input+0x7ec>
        continue;
 800f910:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	61fb      	str	r3, [r7, #28]
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1bc      	bne.n	800f898 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f91e:	2300      	movs	r3, #0
 800f920:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f922:	4b2f      	ldr	r3, [pc, #188]	@ (800f9e0 <tcp_input+0x4c0>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	617b      	str	r3, [r7, #20]
 800f928:	e02a      	b.n	800f980 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	7a1b      	ldrb	r3, [r3, #8]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00c      	beq.n	800f94c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	7a1a      	ldrb	r2, [r3, #8]
 800f936:	4b22      	ldr	r3, [pc, #136]	@ (800f9c0 <tcp_input+0x4a0>)
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f93e:	3301      	adds	r3, #1
 800f940:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f942:	429a      	cmp	r2, r3
 800f944:	d002      	beq.n	800f94c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	61bb      	str	r3, [r7, #24]
        continue;
 800f94a:	e016      	b.n	800f97a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	8ada      	ldrh	r2, [r3, #22]
 800f950:	4b1a      	ldr	r3, [pc, #104]	@ (800f9bc <tcp_input+0x49c>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	885b      	ldrh	r3, [r3, #2]
 800f956:	b29b      	uxth	r3, r3
 800f958:	429a      	cmp	r2, r3
 800f95a:	d10c      	bne.n	800f976 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	4b17      	ldr	r3, [pc, #92]	@ (800f9c0 <tcp_input+0x4a0>)
 800f962:	695b      	ldr	r3, [r3, #20]
 800f964:	429a      	cmp	r2, r3
 800f966:	d00f      	beq.n	800f988 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00d      	beq.n	800f98a <tcp_input+0x46a>
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	617b      	str	r3, [r7, #20]
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d1d1      	bne.n	800f92a <tcp_input+0x40a>
 800f986:	e000      	b.n	800f98a <tcp_input+0x46a>
            break;
 800f988:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d029      	beq.n	800f9e4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00a      	beq.n	800f9ac <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	68da      	ldr	r2, [r3, #12]
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f99e:	4b10      	ldr	r3, [pc, #64]	@ (800f9e0 <tcp_input+0x4c0>)
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9a6:	4a0e      	ldr	r2, [pc, #56]	@ (800f9e0 <tcp_input+0x4c0>)
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9ac:	6978      	ldr	r0, [r7, #20]
 800f9ae:	f000 fa03 	bl	800fdb8 <tcp_listen_input>
      }
      pbuf_free(p);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7fd fb54 	bl	800d060 <pbuf_free>
      return;
 800f9b8:	e1a8      	b.n	800fd0c <tcp_input+0x7ec>
 800f9ba:	bf00      	nop
 800f9bc:	20010f9c 	.word	0x20010f9c
 800f9c0:	2000d800 	.word	0x2000d800
 800f9c4:	0801c3b0 	.word	0x0801c3b0
 800f9c8:	0801c4dc 	.word	0x0801c4dc
 800f9cc:	0801c3fc 	.word	0x0801c3fc
 800f9d0:	20010f80 	.word	0x20010f80
 800f9d4:	0801c508 	.word	0x0801c508
 800f9d8:	20010f84 	.word	0x20010f84
 800f9dc:	0801c534 	.word	0x0801c534
 800f9e0:	20010f7c 	.word	0x20010f7c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 8158 	beq.w	800fc9c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f9ec:	4b95      	ldr	r3, [pc, #596]	@ (800fc44 <tcp_input+0x724>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	891a      	ldrh	r2, [r3, #8]
 800f9f6:	4b93      	ldr	r3, [pc, #588]	@ (800fc44 <tcp_input+0x724>)
 800f9f8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f9fa:	4a92      	ldr	r2, [pc, #584]	@ (800fc44 <tcp_input+0x724>)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa00:	4b91      	ldr	r3, [pc, #580]	@ (800fc48 <tcp_input+0x728>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a8f      	ldr	r2, [pc, #572]	@ (800fc44 <tcp_input+0x724>)
 800fa06:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa08:	4b90      	ldr	r3, [pc, #576]	@ (800fc4c <tcp_input+0x72c>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa0e:	4b90      	ldr	r3, [pc, #576]	@ (800fc50 <tcp_input+0x730>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa14:	4b8f      	ldr	r3, [pc, #572]	@ (800fc54 <tcp_input+0x734>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa1a:	4b8f      	ldr	r3, [pc, #572]	@ (800fc58 <tcp_input+0x738>)
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f003 0308 	and.w	r3, r3, #8
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d006      	beq.n	800fa34 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	7b5b      	ldrb	r3, [r3, #13]
 800fa2a:	f043 0301 	orr.w	r3, r3, #1
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d017      	beq.n	800fa6c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa3c:	69f8      	ldr	r0, [r7, #28]
 800fa3e:	f7ff f83d 	bl	800eabc <tcp_process_refused_data>
 800fa42:	4603      	mov	r3, r0
 800fa44:	f113 0f0d 	cmn.w	r3, #13
 800fa48:	d007      	beq.n	800fa5a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00c      	beq.n	800fa6c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa52:	4b82      	ldr	r3, [pc, #520]	@ (800fc5c <tcp_input+0x73c>)
 800fa54:	881b      	ldrh	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d008      	beq.n	800fa6c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f040 80e3 	bne.w	800fc2a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa64:	69f8      	ldr	r0, [r7, #28]
 800fa66:	f003 fdff 	bl	8013668 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa6a:	e0de      	b.n	800fc2a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fa6c:	4a7c      	ldr	r2, [pc, #496]	@ (800fc60 <tcp_input+0x740>)
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa72:	69f8      	ldr	r0, [r7, #28]
 800fa74:	f000 fb18 	bl	80100a8 <tcp_process>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa80:	f113 0f0d 	cmn.w	r3, #13
 800fa84:	f000 80d3 	beq.w	800fc2e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fa88:	4b71      	ldr	r3, [pc, #452]	@ (800fc50 <tcp_input+0x730>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	f003 0308 	and.w	r3, r3, #8
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d015      	beq.n	800fac0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d008      	beq.n	800fab0 <tcp_input+0x590>
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faa4:	69fa      	ldr	r2, [r7, #28]
 800faa6:	6912      	ldr	r2, [r2, #16]
 800faa8:	f06f 010d 	mvn.w	r1, #13
 800faac:	4610      	mov	r0, r2
 800faae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fab0:	69f9      	ldr	r1, [r7, #28]
 800fab2:	486c      	ldr	r0, [pc, #432]	@ (800fc64 <tcp_input+0x744>)
 800fab4:	f7ff fbbc 	bl	800f230 <tcp_pcb_remove>
        tcp_free(pcb);
 800fab8:	69f8      	ldr	r0, [r7, #28]
 800faba:	f7fd fd8d 	bl	800d5d8 <tcp_free>
 800fabe:	e0da      	b.n	800fc76 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fac4:	4b63      	ldr	r3, [pc, #396]	@ (800fc54 <tcp_input+0x734>)
 800fac6:	881b      	ldrh	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d01d      	beq.n	800fb08 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800facc:	4b61      	ldr	r3, [pc, #388]	@ (800fc54 <tcp_input+0x734>)
 800face:	881b      	ldrh	r3, [r3, #0]
 800fad0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00a      	beq.n	800faf2 <tcp_input+0x5d2>
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fae2:	69fa      	ldr	r2, [r7, #28]
 800fae4:	6910      	ldr	r0, [r2, #16]
 800fae6:	89fa      	ldrh	r2, [r7, #14]
 800fae8:	69f9      	ldr	r1, [r7, #28]
 800faea:	4798      	blx	r3
 800faec:	4603      	mov	r3, r0
 800faee:	74fb      	strb	r3, [r7, #19]
 800faf0:	e001      	b.n	800faf6 <tcp_input+0x5d6>
 800faf2:	2300      	movs	r3, #0
 800faf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800faf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fafa:	f113 0f0d 	cmn.w	r3, #13
 800fafe:	f000 8098 	beq.w	800fc32 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb02:	4b54      	ldr	r3, [pc, #336]	@ (800fc54 <tcp_input+0x734>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb08:	69f8      	ldr	r0, [r7, #28]
 800fb0a:	f000 f915 	bl	800fd38 <tcp_input_delayed_close>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f040 8090 	bne.w	800fc36 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb16:	4b4d      	ldr	r3, [pc, #308]	@ (800fc4c <tcp_input+0x72c>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d041      	beq.n	800fba2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d006      	beq.n	800fb34 <tcp_input+0x614>
 800fb26:	4b50      	ldr	r3, [pc, #320]	@ (800fc68 <tcp_input+0x748>)
 800fb28:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fb2c:	494f      	ldr	r1, [pc, #316]	@ (800fc6c <tcp_input+0x74c>)
 800fb2e:	4850      	ldr	r0, [pc, #320]	@ (800fc70 <tcp_input+0x750>)
 800fb30:	f009 f9d0 	bl	8018ed4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	8b5b      	ldrh	r3, [r3, #26]
 800fb38:	f003 0310 	and.w	r3, r3, #16
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d008      	beq.n	800fb52 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb40:	4b42      	ldr	r3, [pc, #264]	@ (800fc4c <tcp_input+0x72c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fd fa8b 	bl	800d060 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb4a:	69f8      	ldr	r0, [r7, #28]
 800fb4c:	f7fe f888 	bl	800dc60 <tcp_abort>
            goto aborted;
 800fb50:	e091      	b.n	800fc76 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00c      	beq.n	800fb76 <tcp_input+0x656>
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	6918      	ldr	r0, [r3, #16]
 800fb66:	4b39      	ldr	r3, [pc, #228]	@ (800fc4c <tcp_input+0x72c>)
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	69f9      	ldr	r1, [r7, #28]
 800fb6e:	47a0      	blx	r4
 800fb70:	4603      	mov	r3, r0
 800fb72:	74fb      	strb	r3, [r7, #19]
 800fb74:	e008      	b.n	800fb88 <tcp_input+0x668>
 800fb76:	4b35      	ldr	r3, [pc, #212]	@ (800fc4c <tcp_input+0x72c>)
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	69f9      	ldr	r1, [r7, #28]
 800fb7e:	2000      	movs	r0, #0
 800fb80:	f7ff f890 	bl	800eca4 <tcp_recv_null>
 800fb84:	4603      	mov	r3, r0
 800fb86:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb8c:	f113 0f0d 	cmn.w	r3, #13
 800fb90:	d053      	beq.n	800fc3a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d003      	beq.n	800fba2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb9a:	4b2c      	ldr	r3, [pc, #176]	@ (800fc4c <tcp_input+0x72c>)
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fba2:	4b2b      	ldr	r3, [pc, #172]	@ (800fc50 <tcp_input+0x730>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	f003 0320 	and.w	r3, r3, #32
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d030      	beq.n	800fc10 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d009      	beq.n	800fbca <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbba:	7b5a      	ldrb	r2, [r3, #13]
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbc0:	f042 0220 	orr.w	r2, r2, #32
 800fbc4:	b2d2      	uxtb	r2, r2
 800fbc6:	735a      	strb	r2, [r3, #13]
 800fbc8:	e022      	b.n	800fc10 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fbd2:	d005      	beq.n	800fbe0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbd8:	3301      	adds	r3, #1
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00b      	beq.n	800fc02 <tcp_input+0x6e2>
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	6918      	ldr	r0, [r3, #16]
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	69f9      	ldr	r1, [r7, #28]
 800fbfa:	47a0      	blx	r4
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	74fb      	strb	r3, [r7, #19]
 800fc00:	e001      	b.n	800fc06 <tcp_input+0x6e6>
 800fc02:	2300      	movs	r3, #0
 800fc04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc0a:	f113 0f0d 	cmn.w	r3, #13
 800fc0e:	d016      	beq.n	800fc3e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc10:	4b13      	ldr	r3, [pc, #76]	@ (800fc60 <tcp_input+0x740>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc16:	69f8      	ldr	r0, [r7, #28]
 800fc18:	f000 f88e 	bl	800fd38 <tcp_input_delayed_close>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d128      	bne.n	800fc74 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc22:	69f8      	ldr	r0, [r7, #28]
 800fc24:	f002 ff1a 	bl	8012a5c <tcp_output>
 800fc28:	e025      	b.n	800fc76 <tcp_input+0x756>
        goto aborted;
 800fc2a:	bf00      	nop
 800fc2c:	e023      	b.n	800fc76 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc2e:	bf00      	nop
 800fc30:	e021      	b.n	800fc76 <tcp_input+0x756>
              goto aborted;
 800fc32:	bf00      	nop
 800fc34:	e01f      	b.n	800fc76 <tcp_input+0x756>
          goto aborted;
 800fc36:	bf00      	nop
 800fc38:	e01d      	b.n	800fc76 <tcp_input+0x756>
            goto aborted;
 800fc3a:	bf00      	nop
 800fc3c:	e01b      	b.n	800fc76 <tcp_input+0x756>
              goto aborted;
 800fc3e:	bf00      	nop
 800fc40:	e019      	b.n	800fc76 <tcp_input+0x756>
 800fc42:	bf00      	nop
 800fc44:	20010f8c 	.word	0x20010f8c
 800fc48:	20010f9c 	.word	0x20010f9c
 800fc4c:	20010fbc 	.word	0x20010fbc
 800fc50:	20010fb9 	.word	0x20010fb9
 800fc54:	20010fb4 	.word	0x20010fb4
 800fc58:	20010fb8 	.word	0x20010fb8
 800fc5c:	20010fb6 	.word	0x20010fb6
 800fc60:	20010fc0 	.word	0x20010fc0
 800fc64:	20010f80 	.word	0x20010f80
 800fc68:	0801c3b0 	.word	0x0801c3b0
 800fc6c:	0801c564 	.word	0x0801c564
 800fc70:	0801c3fc 	.word	0x0801c3fc
          goto aborted;
 800fc74:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc76:	4b27      	ldr	r3, [pc, #156]	@ (800fd14 <tcp_input+0x7f4>)
 800fc78:	2200      	movs	r2, #0
 800fc7a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc7c:	4b26      	ldr	r3, [pc, #152]	@ (800fd18 <tcp_input+0x7f8>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc82:	4b26      	ldr	r3, [pc, #152]	@ (800fd1c <tcp_input+0x7fc>)
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d03f      	beq.n	800fd0a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fc8a:	4b24      	ldr	r3, [pc, #144]	@ (800fd1c <tcp_input+0x7fc>)
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fd f9e6 	bl	800d060 <pbuf_free>
      inseg.p = NULL;
 800fc94:	4b21      	ldr	r3, [pc, #132]	@ (800fd1c <tcp_input+0x7fc>)
 800fc96:	2200      	movs	r2, #0
 800fc98:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc9a:	e036      	b.n	800fd0a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fc9c:	4b20      	ldr	r3, [pc, #128]	@ (800fd20 <tcp_input+0x800>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	899b      	ldrh	r3, [r3, #12]
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fb fda7 	bl	800b7f8 <lwip_htons>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	f003 0304 	and.w	r3, r3, #4
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d118      	bne.n	800fce8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb6:	4b1b      	ldr	r3, [pc, #108]	@ (800fd24 <tcp_input+0x804>)
 800fcb8:	6819      	ldr	r1, [r3, #0]
 800fcba:	4b1b      	ldr	r3, [pc, #108]	@ (800fd28 <tcp_input+0x808>)
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	4b1a      	ldr	r3, [pc, #104]	@ (800fd2c <tcp_input+0x80c>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcc6:	4b16      	ldr	r3, [pc, #88]	@ (800fd20 <tcp_input+0x800>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcca:	885b      	ldrh	r3, [r3, #2]
 800fccc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcce:	4a14      	ldr	r2, [pc, #80]	@ (800fd20 <tcp_input+0x800>)
 800fcd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd2:	8812      	ldrh	r2, [r2, #0]
 800fcd4:	b292      	uxth	r2, r2
 800fcd6:	9202      	str	r2, [sp, #8]
 800fcd8:	9301      	str	r3, [sp, #4]
 800fcda:	4b15      	ldr	r3, [pc, #84]	@ (800fd30 <tcp_input+0x810>)
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	4b15      	ldr	r3, [pc, #84]	@ (800fd34 <tcp_input+0x814>)
 800fce0:	4602      	mov	r2, r0
 800fce2:	2000      	movs	r0, #0
 800fce4:	f003 fc6e 	bl	80135c4 <tcp_rst>
    pbuf_free(p);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7fd f9b9 	bl	800d060 <pbuf_free>
  return;
 800fcee:	e00c      	b.n	800fd0a <tcp_input+0x7ea>
    goto dropped;
 800fcf0:	bf00      	nop
 800fcf2:	e006      	b.n	800fd02 <tcp_input+0x7e2>
    goto dropped;
 800fcf4:	bf00      	nop
 800fcf6:	e004      	b.n	800fd02 <tcp_input+0x7e2>
    goto dropped;
 800fcf8:	bf00      	nop
 800fcfa:	e002      	b.n	800fd02 <tcp_input+0x7e2>
      goto dropped;
 800fcfc:	bf00      	nop
 800fcfe:	e000      	b.n	800fd02 <tcp_input+0x7e2>
      goto dropped;
 800fd00:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7fd f9ac 	bl	800d060 <pbuf_free>
 800fd08:	e000      	b.n	800fd0c <tcp_input+0x7ec>
  return;
 800fd0a:	bf00      	nop
}
 800fd0c:	3724      	adds	r7, #36	@ 0x24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd90      	pop	{r4, r7, pc}
 800fd12:	bf00      	nop
 800fd14:	20010fc0 	.word	0x20010fc0
 800fd18:	20010fbc 	.word	0x20010fbc
 800fd1c:	20010f8c 	.word	0x20010f8c
 800fd20:	20010f9c 	.word	0x20010f9c
 800fd24:	20010fb0 	.word	0x20010fb0
 800fd28:	20010fb6 	.word	0x20010fb6
 800fd2c:	20010fac 	.word	0x20010fac
 800fd30:	2000d810 	.word	0x2000d810
 800fd34:	2000d814 	.word	0x2000d814

0800fd38 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d106      	bne.n	800fd54 <tcp_input_delayed_close+0x1c>
 800fd46:	4b17      	ldr	r3, [pc, #92]	@ (800fda4 <tcp_input_delayed_close+0x6c>)
 800fd48:	f240 225a 	movw	r2, #602	@ 0x25a
 800fd4c:	4916      	ldr	r1, [pc, #88]	@ (800fda8 <tcp_input_delayed_close+0x70>)
 800fd4e:	4817      	ldr	r0, [pc, #92]	@ (800fdac <tcp_input_delayed_close+0x74>)
 800fd50:	f009 f8c0 	bl	8018ed4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd54:	4b16      	ldr	r3, [pc, #88]	@ (800fdb0 <tcp_input_delayed_close+0x78>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	f003 0310 	and.w	r3, r3, #16
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d01c      	beq.n	800fd9a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	8b5b      	ldrh	r3, [r3, #26]
 800fd64:	f003 0310 	and.w	r3, r3, #16
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10d      	bne.n	800fd88 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d008      	beq.n	800fd88 <tcp_input_delayed_close+0x50>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	6912      	ldr	r2, [r2, #16]
 800fd80:	f06f 010e 	mvn.w	r1, #14
 800fd84:	4610      	mov	r0, r2
 800fd86:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd88:	6879      	ldr	r1, [r7, #4]
 800fd8a:	480a      	ldr	r0, [pc, #40]	@ (800fdb4 <tcp_input_delayed_close+0x7c>)
 800fd8c:	f7ff fa50 	bl	800f230 <tcp_pcb_remove>
    tcp_free(pcb);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f7fd fc21 	bl	800d5d8 <tcp_free>
    return 1;
 800fd96:	2301      	movs	r3, #1
 800fd98:	e000      	b.n	800fd9c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	0801c3b0 	.word	0x0801c3b0
 800fda8:	0801c580 	.word	0x0801c580
 800fdac:	0801c3fc 	.word	0x0801c3fc
 800fdb0:	20010fb9 	.word	0x20010fb9
 800fdb4:	20010f80 	.word	0x20010f80

0800fdb8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdb8:	b590      	push	{r4, r7, lr}
 800fdba:	b08b      	sub	sp, #44	@ 0x2c
 800fdbc:	af04      	add	r7, sp, #16
 800fdbe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fdc0:	4b6f      	ldr	r3, [pc, #444]	@ (800ff80 <tcp_listen_input+0x1c8>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	f003 0304 	and.w	r3, r3, #4
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f040 80d2 	bne.w	800ff72 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d106      	bne.n	800fde2 <tcp_listen_input+0x2a>
 800fdd4:	4b6b      	ldr	r3, [pc, #428]	@ (800ff84 <tcp_listen_input+0x1cc>)
 800fdd6:	f240 2281 	movw	r2, #641	@ 0x281
 800fdda:	496b      	ldr	r1, [pc, #428]	@ (800ff88 <tcp_listen_input+0x1d0>)
 800fddc:	486b      	ldr	r0, [pc, #428]	@ (800ff8c <tcp_listen_input+0x1d4>)
 800fdde:	f009 f879 	bl	8018ed4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fde2:	4b67      	ldr	r3, [pc, #412]	@ (800ff80 <tcp_listen_input+0x1c8>)
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	f003 0310 	and.w	r3, r3, #16
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d019      	beq.n	800fe22 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdee:	4b68      	ldr	r3, [pc, #416]	@ (800ff90 <tcp_listen_input+0x1d8>)
 800fdf0:	6819      	ldr	r1, [r3, #0]
 800fdf2:	4b68      	ldr	r3, [pc, #416]	@ (800ff94 <tcp_listen_input+0x1dc>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	4b67      	ldr	r3, [pc, #412]	@ (800ff98 <tcp_listen_input+0x1e0>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdfe:	4b67      	ldr	r3, [pc, #412]	@ (800ff9c <tcp_listen_input+0x1e4>)
 800fe00:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe02:	885b      	ldrh	r3, [r3, #2]
 800fe04:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe06:	4a65      	ldr	r2, [pc, #404]	@ (800ff9c <tcp_listen_input+0x1e4>)
 800fe08:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe0a:	8812      	ldrh	r2, [r2, #0]
 800fe0c:	b292      	uxth	r2, r2
 800fe0e:	9202      	str	r2, [sp, #8]
 800fe10:	9301      	str	r3, [sp, #4]
 800fe12:	4b63      	ldr	r3, [pc, #396]	@ (800ffa0 <tcp_listen_input+0x1e8>)
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	4b63      	ldr	r3, [pc, #396]	@ (800ffa4 <tcp_listen_input+0x1ec>)
 800fe18:	4602      	mov	r2, r0
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f003 fbd2 	bl	80135c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe20:	e0a9      	b.n	800ff76 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe22:	4b57      	ldr	r3, [pc, #348]	@ (800ff80 <tcp_listen_input+0x1c8>)
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	f003 0302 	and.w	r3, r3, #2
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f000 80a3 	beq.w	800ff76 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	7d5b      	ldrb	r3, [r3, #21]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff f859 	bl	800eeec <tcp_alloc>
 800fe3a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d111      	bne.n	800fe66 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	699b      	ldr	r3, [r3, #24]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00a      	beq.n	800fe60 <tcp_listen_input+0xa8>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	699b      	ldr	r3, [r3, #24]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	6910      	ldr	r0, [r2, #16]
 800fe52:	f04f 32ff 	mov.w	r2, #4294967295
 800fe56:	2100      	movs	r1, #0
 800fe58:	4798      	blx	r3
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	73bb      	strb	r3, [r7, #14]
      return;
 800fe5e:	e08b      	b.n	800ff78 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe60:	23f0      	movs	r3, #240	@ 0xf0
 800fe62:	73bb      	strb	r3, [r7, #14]
      return;
 800fe64:	e088      	b.n	800ff78 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe66:	4b50      	ldr	r3, [pc, #320]	@ (800ffa8 <tcp_listen_input+0x1f0>)
 800fe68:	695a      	ldr	r2, [r3, #20]
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe6e:	4b4e      	ldr	r3, [pc, #312]	@ (800ffa8 <tcp_listen_input+0x1f0>)
 800fe70:	691a      	ldr	r2, [r3, #16]
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	8ada      	ldrh	r2, [r3, #22]
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe7e:	4b47      	ldr	r3, [pc, #284]	@ (800ff9c <tcp_listen_input+0x1e4>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2203      	movs	r2, #3
 800fe8e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe90:	4b41      	ldr	r3, [pc, #260]	@ (800ff98 <tcp_listen_input+0x1e0>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fea2:	6978      	ldr	r0, [r7, #20]
 800fea4:	f7ff fa58 	bl	800f358 <tcp_next_iss>
 800fea8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	693a      	ldr	r2, [r7, #16]
 800feae:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	693a      	ldr	r2, [r7, #16]
 800fec0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fec2:	4b35      	ldr	r3, [pc, #212]	@ (800ff98 <tcp_listen_input+0x1e0>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	1e5a      	subs	r2, r3, #1
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	691a      	ldr	r2, [r3, #16]
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	7a5b      	ldrb	r3, [r3, #9]
 800fede:	f003 030c 	and.w	r3, r3, #12
 800fee2:	b2da      	uxtb	r2, r3
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	7a1a      	ldrb	r2, [r3, #8]
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fef0:	4b2e      	ldr	r3, [pc, #184]	@ (800ffac <tcp_listen_input+0x1f4>)
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	60da      	str	r2, [r3, #12]
 800fef8:	4a2c      	ldr	r2, [pc, #176]	@ (800ffac <tcp_listen_input+0x1f4>)
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	f003 fd23 	bl	8013948 <tcp_timer_needed>
 800ff02:	4b2b      	ldr	r3, [pc, #172]	@ (800ffb0 <tcp_listen_input+0x1f8>)
 800ff04:	2201      	movs	r2, #1
 800ff06:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff08:	6978      	ldr	r0, [r7, #20]
 800ff0a:	f001 fd8b 	bl	8011a24 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff0e:	4b23      	ldr	r3, [pc, #140]	@ (800ff9c <tcp_listen_input+0x1e4>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	89db      	ldrh	r3, [r3, #14]
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	3304      	adds	r3, #4
 800ff30:	4618      	mov	r0, r3
 800ff32:	f007 fab5 	bl	80174a0 <ip4_route>
 800ff36:	4601      	mov	r1, r0
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	3304      	adds	r3, #4
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f7ff fa30 	bl	800f3a4 <tcp_eff_send_mss_netif>
 800ff44:	4603      	mov	r3, r0
 800ff46:	461a      	mov	r2, r3
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff4c:	2112      	movs	r1, #18
 800ff4e:	6978      	ldr	r0, [r7, #20]
 800ff50:	f002 fc96 	bl	8012880 <tcp_enqueue_flags>
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d004      	beq.n	800ff6a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff60:	2100      	movs	r1, #0
 800ff62:	6978      	ldr	r0, [r7, #20]
 800ff64:	f7fd fdbe 	bl	800dae4 <tcp_abandon>
      return;
 800ff68:	e006      	b.n	800ff78 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff6a:	6978      	ldr	r0, [r7, #20]
 800ff6c:	f002 fd76 	bl	8012a5c <tcp_output>
  return;
 800ff70:	e001      	b.n	800ff76 <tcp_listen_input+0x1be>
    return;
 800ff72:	bf00      	nop
 800ff74:	e000      	b.n	800ff78 <tcp_listen_input+0x1c0>
  return;
 800ff76:	bf00      	nop
}
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd90      	pop	{r4, r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	20010fb8 	.word	0x20010fb8
 800ff84:	0801c3b0 	.word	0x0801c3b0
 800ff88:	0801c5a8 	.word	0x0801c5a8
 800ff8c:	0801c3fc 	.word	0x0801c3fc
 800ff90:	20010fb0 	.word	0x20010fb0
 800ff94:	20010fb6 	.word	0x20010fb6
 800ff98:	20010fac 	.word	0x20010fac
 800ff9c:	20010f9c 	.word	0x20010f9c
 800ffa0:	2000d810 	.word	0x2000d810
 800ffa4:	2000d814 	.word	0x2000d814
 800ffa8:	2000d800 	.word	0x2000d800
 800ffac:	20010f80 	.word	0x20010f80
 800ffb0:	20010f88 	.word	0x20010f88

0800ffb4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b086      	sub	sp, #24
 800ffb8:	af04      	add	r7, sp, #16
 800ffba:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffbc:	4b2f      	ldr	r3, [pc, #188]	@ (801007c <tcp_timewait_input+0xc8>)
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	f003 0304 	and.w	r3, r3, #4
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d153      	bne.n	8010070 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d106      	bne.n	800ffdc <tcp_timewait_input+0x28>
 800ffce:	4b2c      	ldr	r3, [pc, #176]	@ (8010080 <tcp_timewait_input+0xcc>)
 800ffd0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ffd4:	492b      	ldr	r1, [pc, #172]	@ (8010084 <tcp_timewait_input+0xd0>)
 800ffd6:	482c      	ldr	r0, [pc, #176]	@ (8010088 <tcp_timewait_input+0xd4>)
 800ffd8:	f008 ff7c 	bl	8018ed4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ffdc:	4b27      	ldr	r3, [pc, #156]	@ (801007c <tcp_timewait_input+0xc8>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 0302 	and.w	r3, r3, #2
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d02a      	beq.n	801003e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffe8:	4b28      	ldr	r3, [pc, #160]	@ (801008c <tcp_timewait_input+0xd8>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	db2d      	blt.n	8010052 <tcp_timewait_input+0x9e>
 800fff6:	4b25      	ldr	r3, [pc, #148]	@ (801008c <tcp_timewait_input+0xd8>)
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010002:	440b      	add	r3, r1
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	dc23      	bgt.n	8010052 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801000a:	4b21      	ldr	r3, [pc, #132]	@ (8010090 <tcp_timewait_input+0xdc>)
 801000c:	6819      	ldr	r1, [r3, #0]
 801000e:	4b21      	ldr	r3, [pc, #132]	@ (8010094 <tcp_timewait_input+0xe0>)
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	4b1d      	ldr	r3, [pc, #116]	@ (801008c <tcp_timewait_input+0xd8>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001a:	4b1f      	ldr	r3, [pc, #124]	@ (8010098 <tcp_timewait_input+0xe4>)
 801001c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001e:	885b      	ldrh	r3, [r3, #2]
 8010020:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010022:	4a1d      	ldr	r2, [pc, #116]	@ (8010098 <tcp_timewait_input+0xe4>)
 8010024:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010026:	8812      	ldrh	r2, [r2, #0]
 8010028:	b292      	uxth	r2, r2
 801002a:	9202      	str	r2, [sp, #8]
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	4b1b      	ldr	r3, [pc, #108]	@ (801009c <tcp_timewait_input+0xe8>)
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	4b1b      	ldr	r3, [pc, #108]	@ (80100a0 <tcp_timewait_input+0xec>)
 8010034:	4602      	mov	r2, r0
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f003 fac4 	bl	80135c4 <tcp_rst>
      return;
 801003c:	e01b      	b.n	8010076 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801003e:	4b0f      	ldr	r3, [pc, #60]	@ (801007c <tcp_timewait_input+0xc8>)
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 0301 	and.w	r3, r3, #1
 8010046:	2b00      	cmp	r3, #0
 8010048:	d003      	beq.n	8010052 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801004a:	4b16      	ldr	r3, [pc, #88]	@ (80100a4 <tcp_timewait_input+0xf0>)
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010052:	4b10      	ldr	r3, [pc, #64]	@ (8010094 <tcp_timewait_input+0xe0>)
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00c      	beq.n	8010074 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	8b5b      	ldrh	r3, [r3, #26]
 801005e:	f043 0302 	orr.w	r3, r3, #2
 8010062:	b29a      	uxth	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f002 fcf7 	bl	8012a5c <tcp_output>
  }
  return;
 801006e:	e001      	b.n	8010074 <tcp_timewait_input+0xc0>
    return;
 8010070:	bf00      	nop
 8010072:	e000      	b.n	8010076 <tcp_timewait_input+0xc2>
  return;
 8010074:	bf00      	nop
}
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	20010fb8 	.word	0x20010fb8
 8010080:	0801c3b0 	.word	0x0801c3b0
 8010084:	0801c5c8 	.word	0x0801c5c8
 8010088:	0801c3fc 	.word	0x0801c3fc
 801008c:	20010fac 	.word	0x20010fac
 8010090:	20010fb0 	.word	0x20010fb0
 8010094:	20010fb6 	.word	0x20010fb6
 8010098:	20010f9c 	.word	0x20010f9c
 801009c:	2000d810 	.word	0x2000d810
 80100a0:	2000d814 	.word	0x2000d814
 80100a4:	20010f74 	.word	0x20010f74

080100a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100a8:	b590      	push	{r4, r7, lr}
 80100aa:	b08d      	sub	sp, #52	@ 0x34
 80100ac:	af04      	add	r7, sp, #16
 80100ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100b0:	2300      	movs	r3, #0
 80100b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d106      	bne.n	80100cc <tcp_process+0x24>
 80100be:	4b9d      	ldr	r3, [pc, #628]	@ (8010334 <tcp_process+0x28c>)
 80100c0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80100c4:	499c      	ldr	r1, [pc, #624]	@ (8010338 <tcp_process+0x290>)
 80100c6:	489d      	ldr	r0, [pc, #628]	@ (801033c <tcp_process+0x294>)
 80100c8:	f008 ff04 	bl	8018ed4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100cc:	4b9c      	ldr	r3, [pc, #624]	@ (8010340 <tcp_process+0x298>)
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	f003 0304 	and.w	r3, r3, #4
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d04e      	beq.n	8010176 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	7d1b      	ldrb	r3, [r3, #20]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d108      	bne.n	80100f2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80100e4:	4b97      	ldr	r3, [pc, #604]	@ (8010344 <tcp_process+0x29c>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d123      	bne.n	8010134 <tcp_process+0x8c>
        acceptable = 1;
 80100ec:	2301      	movs	r3, #1
 80100ee:	76fb      	strb	r3, [r7, #27]
 80100f0:	e020      	b.n	8010134 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100f6:	4b94      	ldr	r3, [pc, #592]	@ (8010348 <tcp_process+0x2a0>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d102      	bne.n	8010104 <tcp_process+0x5c>
        acceptable = 1;
 80100fe:	2301      	movs	r3, #1
 8010100:	76fb      	strb	r3, [r7, #27]
 8010102:	e017      	b.n	8010134 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010104:	4b90      	ldr	r3, [pc, #576]	@ (8010348 <tcp_process+0x2a0>)
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	2b00      	cmp	r3, #0
 8010110:	db10      	blt.n	8010134 <tcp_process+0x8c>
 8010112:	4b8d      	ldr	r3, [pc, #564]	@ (8010348 <tcp_process+0x2a0>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801011e:	440b      	add	r3, r1
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	dc06      	bgt.n	8010134 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	8b5b      	ldrh	r3, [r3, #26]
 801012a:	f043 0302 	orr.w	r3, r3, #2
 801012e:	b29a      	uxth	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010134:	7efb      	ldrb	r3, [r7, #27]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d01b      	beq.n	8010172 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	7d1b      	ldrb	r3, [r3, #20]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <tcp_process+0xa8>
 8010142:	4b7c      	ldr	r3, [pc, #496]	@ (8010334 <tcp_process+0x28c>)
 8010144:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010148:	4980      	ldr	r1, [pc, #512]	@ (801034c <tcp_process+0x2a4>)
 801014a:	487c      	ldr	r0, [pc, #496]	@ (801033c <tcp_process+0x294>)
 801014c:	f008 fec2 	bl	8018ed4 <iprintf>
      recv_flags |= TF_RESET;
 8010150:	4b7f      	ldr	r3, [pc, #508]	@ (8010350 <tcp_process+0x2a8>)
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	f043 0308 	orr.w	r3, r3, #8
 8010158:	b2da      	uxtb	r2, r3
 801015a:	4b7d      	ldr	r3, [pc, #500]	@ (8010350 <tcp_process+0x2a8>)
 801015c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8b5b      	ldrh	r3, [r3, #26]
 8010162:	f023 0301 	bic.w	r3, r3, #1
 8010166:	b29a      	uxth	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801016c:	f06f 030d 	mvn.w	r3, #13
 8010170:	e37a      	b.n	8010868 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	e378      	b.n	8010868 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010176:	4b72      	ldr	r3, [pc, #456]	@ (8010340 <tcp_process+0x298>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	f003 0302 	and.w	r3, r3, #2
 801017e:	2b00      	cmp	r3, #0
 8010180:	d010      	beq.n	80101a4 <tcp_process+0xfc>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	7d1b      	ldrb	r3, [r3, #20]
 8010186:	2b02      	cmp	r3, #2
 8010188:	d00c      	beq.n	80101a4 <tcp_process+0xfc>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	7d1b      	ldrb	r3, [r3, #20]
 801018e:	2b03      	cmp	r3, #3
 8010190:	d008      	beq.n	80101a4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	8b5b      	ldrh	r3, [r3, #26]
 8010196:	f043 0302 	orr.w	r3, r3, #2
 801019a:	b29a      	uxth	r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	e361      	b.n	8010868 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8b5b      	ldrh	r3, [r3, #26]
 80101a8:	f003 0310 	and.w	r3, r3, #16
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d103      	bne.n	80101b8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101b0:	4b68      	ldr	r3, [pc, #416]	@ (8010354 <tcp_process+0x2ac>)
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f001 fc2b 	bl	8011a24 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	7d1b      	ldrb	r3, [r3, #20]
 80101d2:	3b02      	subs	r3, #2
 80101d4:	2b07      	cmp	r3, #7
 80101d6:	f200 8337 	bhi.w	8010848 <tcp_process+0x7a0>
 80101da:	a201      	add	r2, pc, #4	@ (adr r2, 80101e0 <tcp_process+0x138>)
 80101dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e0:	08010201 	.word	0x08010201
 80101e4:	08010431 	.word	0x08010431
 80101e8:	080105a9 	.word	0x080105a9
 80101ec:	080105d3 	.word	0x080105d3
 80101f0:	080106f7 	.word	0x080106f7
 80101f4:	080105a9 	.word	0x080105a9
 80101f8:	08010783 	.word	0x08010783
 80101fc:	08010813 	.word	0x08010813
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010200:	4b4f      	ldr	r3, [pc, #316]	@ (8010340 <tcp_process+0x298>)
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	f003 0310 	and.w	r3, r3, #16
 8010208:	2b00      	cmp	r3, #0
 801020a:	f000 80e4 	beq.w	80103d6 <tcp_process+0x32e>
 801020e:	4b4c      	ldr	r3, [pc, #304]	@ (8010340 <tcp_process+0x298>)
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	f003 0302 	and.w	r3, r3, #2
 8010216:	2b00      	cmp	r3, #0
 8010218:	f000 80dd 	beq.w	80103d6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010220:	1c5a      	adds	r2, r3, #1
 8010222:	4b48      	ldr	r3, [pc, #288]	@ (8010344 <tcp_process+0x29c>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	429a      	cmp	r2, r3
 8010228:	f040 80d5 	bne.w	80103d6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801022c:	4b46      	ldr	r3, [pc, #280]	@ (8010348 <tcp_process+0x2a0>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	1c5a      	adds	r2, r3, #1
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801023e:	4b41      	ldr	r3, [pc, #260]	@ (8010344 <tcp_process+0x29c>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010246:	4b44      	ldr	r3, [pc, #272]	@ (8010358 <tcp_process+0x2b0>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	89db      	ldrh	r3, [r3, #14]
 801024c:	b29a      	uxth	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010260:	4b39      	ldr	r3, [pc, #228]	@ (8010348 <tcp_process+0x2a0>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	1e5a      	subs	r2, r3, #1
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2204      	movs	r2, #4
 801026e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3304      	adds	r3, #4
 8010278:	4618      	mov	r0, r3
 801027a:	f007 f911 	bl	80174a0 <ip4_route>
 801027e:	4601      	mov	r1, r0
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	3304      	adds	r3, #4
 8010284:	461a      	mov	r2, r3
 8010286:	4620      	mov	r0, r4
 8010288:	f7ff f88c 	bl	800f3a4 <tcp_eff_send_mss_netif>
 801028c:	4603      	mov	r3, r0
 801028e:	461a      	mov	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010298:	009a      	lsls	r2, r3, #2
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801029e:	005b      	lsls	r3, r3, #1
 80102a0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80102a4:	428b      	cmp	r3, r1
 80102a6:	bf38      	it	cc
 80102a8:	460b      	movcc	r3, r1
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d204      	bcs.n	80102b8 <tcp_process+0x210>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	e00d      	b.n	80102d4 <tcp_process+0x22c>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	f241 121c 	movw	r2, #4380	@ 0x111c
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d904      	bls.n	80102d0 <tcp_process+0x228>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102ca:	005b      	lsls	r3, r3, #1
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	e001      	b.n	80102d4 <tcp_process+0x22c>
 80102d0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d106      	bne.n	80102f2 <tcp_process+0x24a>
 80102e4:	4b13      	ldr	r3, [pc, #76]	@ (8010334 <tcp_process+0x28c>)
 80102e6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80102ea:	491c      	ldr	r1, [pc, #112]	@ (801035c <tcp_process+0x2b4>)
 80102ec:	4813      	ldr	r0, [pc, #76]	@ (801033c <tcp_process+0x294>)
 80102ee:	f008 fdf1 	bl	8018ed4 <iprintf>
        --pcb->snd_queuelen;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102f8:	3b01      	subs	r3, #1
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010306:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d12a      	bne.n	8010364 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010312:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <tcp_process+0x280>
 801031a:	4b06      	ldr	r3, [pc, #24]	@ (8010334 <tcp_process+0x28c>)
 801031c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010320:	490f      	ldr	r1, [pc, #60]	@ (8010360 <tcp_process+0x2b8>)
 8010322:	4806      	ldr	r0, [pc, #24]	@ (801033c <tcp_process+0x294>)
 8010324:	f008 fdd6 	bl	8018ed4 <iprintf>
          pcb->unsent = rseg->next;
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010330:	e01c      	b.n	801036c <tcp_process+0x2c4>
 8010332:	bf00      	nop
 8010334:	0801c3b0 	.word	0x0801c3b0
 8010338:	0801c5e8 	.word	0x0801c5e8
 801033c:	0801c3fc 	.word	0x0801c3fc
 8010340:	20010fb8 	.word	0x20010fb8
 8010344:	20010fb0 	.word	0x20010fb0
 8010348:	20010fac 	.word	0x20010fac
 801034c:	0801c604 	.word	0x0801c604
 8010350:	20010fb9 	.word	0x20010fb9
 8010354:	20010f74 	.word	0x20010f74
 8010358:	20010f9c 	.word	0x20010f9c
 801035c:	0801c624 	.word	0x0801c624
 8010360:	0801c63c 	.word	0x0801c63c
        } else {
          pcb->unacked = rseg->next;
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801036c:	69f8      	ldr	r0, [r7, #28]
 801036e:	f7fe fc36 	bl	800ebde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010376:	2b00      	cmp	r3, #0
 8010378:	d104      	bne.n	8010384 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010380:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010382:	e006      	b.n	8010392 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00a      	beq.n	80103b2 <tcp_process+0x30a>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	6910      	ldr	r0, [r2, #16]
 80103a6:	2200      	movs	r2, #0
 80103a8:	6879      	ldr	r1, [r7, #4]
 80103aa:	4798      	blx	r3
 80103ac:	4603      	mov	r3, r0
 80103ae:	76bb      	strb	r3, [r7, #26]
 80103b0:	e001      	b.n	80103b6 <tcp_process+0x30e>
 80103b2:	2300      	movs	r3, #0
 80103b4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103ba:	f113 0f0d 	cmn.w	r3, #13
 80103be:	d102      	bne.n	80103c6 <tcp_process+0x31e>
          return ERR_ABRT;
 80103c0:	f06f 030c 	mvn.w	r3, #12
 80103c4:	e250      	b.n	8010868 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8b5b      	ldrh	r3, [r3, #26]
 80103ca:	f043 0302 	orr.w	r3, r3, #2
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103d4:	e23a      	b.n	801084c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103d6:	4b98      	ldr	r3, [pc, #608]	@ (8010638 <tcp_process+0x590>)
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	f003 0310 	and.w	r3, r3, #16
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 8234 	beq.w	801084c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e4:	4b95      	ldr	r3, [pc, #596]	@ (801063c <tcp_process+0x594>)
 80103e6:	6819      	ldr	r1, [r3, #0]
 80103e8:	4b95      	ldr	r3, [pc, #596]	@ (8010640 <tcp_process+0x598>)
 80103ea:	881b      	ldrh	r3, [r3, #0]
 80103ec:	461a      	mov	r2, r3
 80103ee:	4b95      	ldr	r3, [pc, #596]	@ (8010644 <tcp_process+0x59c>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f4:	4b94      	ldr	r3, [pc, #592]	@ (8010648 <tcp_process+0x5a0>)
 80103f6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f8:	885b      	ldrh	r3, [r3, #2]
 80103fa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103fc:	4a92      	ldr	r2, [pc, #584]	@ (8010648 <tcp_process+0x5a0>)
 80103fe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010400:	8812      	ldrh	r2, [r2, #0]
 8010402:	b292      	uxth	r2, r2
 8010404:	9202      	str	r2, [sp, #8]
 8010406:	9301      	str	r3, [sp, #4]
 8010408:	4b90      	ldr	r3, [pc, #576]	@ (801064c <tcp_process+0x5a4>)
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	4b90      	ldr	r3, [pc, #576]	@ (8010650 <tcp_process+0x5a8>)
 801040e:	4602      	mov	r2, r0
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f003 f8d7 	bl	80135c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801041c:	2b05      	cmp	r3, #5
 801041e:	f200 8215 	bhi.w	801084c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f002 fea3 	bl	8013174 <tcp_rexmit_rto>
      break;
 801042e:	e20d      	b.n	801084c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010430:	4b81      	ldr	r3, [pc, #516]	@ (8010638 <tcp_process+0x590>)
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 0310 	and.w	r3, r3, #16
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 80a1 	beq.w	8010580 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801043e:	4b7f      	ldr	r3, [pc, #508]	@ (801063c <tcp_process+0x594>)
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	3b01      	subs	r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	db7e      	blt.n	801054c <tcp_process+0x4a4>
 801044e:	4b7b      	ldr	r3, [pc, #492]	@ (801063c <tcp_process+0x594>)
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	2b00      	cmp	r3, #0
 801045a:	dc77      	bgt.n	801054c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2204      	movs	r2, #4
 8010460:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010466:	2b00      	cmp	r3, #0
 8010468:	d102      	bne.n	8010470 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801046a:	23fa      	movs	r3, #250	@ 0xfa
 801046c:	76bb      	strb	r3, [r7, #26]
 801046e:	e01d      	b.n	80104ac <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d106      	bne.n	8010488 <tcp_process+0x3e0>
 801047a:	4b76      	ldr	r3, [pc, #472]	@ (8010654 <tcp_process+0x5ac>)
 801047c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010480:	4975      	ldr	r1, [pc, #468]	@ (8010658 <tcp_process+0x5b0>)
 8010482:	4876      	ldr	r0, [pc, #472]	@ (801065c <tcp_process+0x5b4>)
 8010484:	f008 fd26 	bl	8018ed4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801048c:	699b      	ldr	r3, [r3, #24]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00a      	beq.n	80104a8 <tcp_process+0x400>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010496:	699b      	ldr	r3, [r3, #24]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	6910      	ldr	r0, [r2, #16]
 801049c:	2200      	movs	r2, #0
 801049e:	6879      	ldr	r1, [r7, #4]
 80104a0:	4798      	blx	r3
 80104a2:	4603      	mov	r3, r0
 80104a4:	76bb      	strb	r3, [r7, #26]
 80104a6:	e001      	b.n	80104ac <tcp_process+0x404>
 80104a8:	23f0      	movs	r3, #240	@ 0xf0
 80104aa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d00a      	beq.n	80104ca <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b8:	f113 0f0d 	cmn.w	r3, #13
 80104bc:	d002      	beq.n	80104c4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7fd fbce 	bl	800dc60 <tcp_abort>
            }
            return ERR_ABRT;
 80104c4:	f06f 030c 	mvn.w	r3, #12
 80104c8:	e1ce      	b.n	8010868 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fae0 	bl	8010a90 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104d0:	4b63      	ldr	r3, [pc, #396]	@ (8010660 <tcp_process+0x5b8>)
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d005      	beq.n	80104e4 <tcp_process+0x43c>
            recv_acked--;
 80104d8:	4b61      	ldr	r3, [pc, #388]	@ (8010660 <tcp_process+0x5b8>)
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	3b01      	subs	r3, #1
 80104de:	b29a      	uxth	r2, r3
 80104e0:	4b5f      	ldr	r3, [pc, #380]	@ (8010660 <tcp_process+0x5b8>)
 80104e2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104e8:	009a      	lsls	r2, r3, #2
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80104f4:	428b      	cmp	r3, r1
 80104f6:	bf38      	it	cc
 80104f8:	460b      	movcc	r3, r1
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d204      	bcs.n	8010508 <tcp_process+0x460>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	b29b      	uxth	r3, r3
 8010506:	e00d      	b.n	8010524 <tcp_process+0x47c>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010512:	4293      	cmp	r3, r2
 8010514:	d904      	bls.n	8010520 <tcp_process+0x478>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	b29b      	uxth	r3, r3
 801051e:	e001      	b.n	8010524 <tcp_process+0x47c>
 8010520:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801052a:	4b4e      	ldr	r3, [pc, #312]	@ (8010664 <tcp_process+0x5bc>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	f003 0320 	and.w	r3, r3, #32
 8010532:	2b00      	cmp	r3, #0
 8010534:	d037      	beq.n	80105a6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8b5b      	ldrh	r3, [r3, #26]
 801053a:	f043 0302 	orr.w	r3, r3, #2
 801053e:	b29a      	uxth	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2207      	movs	r2, #7
 8010548:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801054a:	e02c      	b.n	80105a6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801054c:	4b3b      	ldr	r3, [pc, #236]	@ (801063c <tcp_process+0x594>)
 801054e:	6819      	ldr	r1, [r3, #0]
 8010550:	4b3b      	ldr	r3, [pc, #236]	@ (8010640 <tcp_process+0x598>)
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	461a      	mov	r2, r3
 8010556:	4b3b      	ldr	r3, [pc, #236]	@ (8010644 <tcp_process+0x59c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801055c:	4b3a      	ldr	r3, [pc, #232]	@ (8010648 <tcp_process+0x5a0>)
 801055e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010560:	885b      	ldrh	r3, [r3, #2]
 8010562:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010564:	4a38      	ldr	r2, [pc, #224]	@ (8010648 <tcp_process+0x5a0>)
 8010566:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010568:	8812      	ldrh	r2, [r2, #0]
 801056a:	b292      	uxth	r2, r2
 801056c:	9202      	str	r2, [sp, #8]
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	4b36      	ldr	r3, [pc, #216]	@ (801064c <tcp_process+0x5a4>)
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	4b36      	ldr	r3, [pc, #216]	@ (8010650 <tcp_process+0x5a8>)
 8010576:	4602      	mov	r2, r0
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f003 f823 	bl	80135c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801057e:	e167      	b.n	8010850 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010580:	4b2d      	ldr	r3, [pc, #180]	@ (8010638 <tcp_process+0x590>)
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	f003 0302 	and.w	r3, r3, #2
 8010588:	2b00      	cmp	r3, #0
 801058a:	f000 8161 	beq.w	8010850 <tcp_process+0x7a8>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010592:	1e5a      	subs	r2, r3, #1
 8010594:	4b2b      	ldr	r3, [pc, #172]	@ (8010644 <tcp_process+0x59c>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	f040 8159 	bne.w	8010850 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f002 fe0a 	bl	80131b8 <tcp_rexmit>
      break;
 80105a4:	e154      	b.n	8010850 <tcp_process+0x7a8>
 80105a6:	e153      	b.n	8010850 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 fa71 	bl	8010a90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105ae:	4b2d      	ldr	r3, [pc, #180]	@ (8010664 <tcp_process+0x5bc>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0320 	and.w	r3, r3, #32
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 814c 	beq.w	8010854 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	8b5b      	ldrh	r3, [r3, #26]
 80105c0:	f043 0302 	orr.w	r3, r3, #2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2207      	movs	r2, #7
 80105ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105d0:	e140      	b.n	8010854 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 fa5c 	bl	8010a90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105d8:	4b22      	ldr	r3, [pc, #136]	@ (8010664 <tcp_process+0x5bc>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	f003 0320 	and.w	r3, r3, #32
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d071      	beq.n	80106c8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105e4:	4b14      	ldr	r3, [pc, #80]	@ (8010638 <tcp_process+0x590>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 0310 	and.w	r3, r3, #16
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d060      	beq.n	80106b2 <tcp_process+0x60a>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105f4:	4b11      	ldr	r3, [pc, #68]	@ (801063c <tcp_process+0x594>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d15a      	bne.n	80106b2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010600:	2b00      	cmp	r3, #0
 8010602:	d156      	bne.n	80106b2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8b5b      	ldrh	r3, [r3, #26]
 8010608:	f043 0302 	orr.w	r3, r3, #2
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7fe fdbc 	bl	800f190 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010618:	4b13      	ldr	r3, [pc, #76]	@ (8010668 <tcp_process+0x5c0>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	429a      	cmp	r2, r3
 8010620:	d105      	bne.n	801062e <tcp_process+0x586>
 8010622:	4b11      	ldr	r3, [pc, #68]	@ (8010668 <tcp_process+0x5c0>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	4a0f      	ldr	r2, [pc, #60]	@ (8010668 <tcp_process+0x5c0>)
 801062a:	6013      	str	r3, [r2, #0]
 801062c:	e02e      	b.n	801068c <tcp_process+0x5e4>
 801062e:	4b0e      	ldr	r3, [pc, #56]	@ (8010668 <tcp_process+0x5c0>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	e027      	b.n	8010686 <tcp_process+0x5de>
 8010636:	bf00      	nop
 8010638:	20010fb8 	.word	0x20010fb8
 801063c:	20010fb0 	.word	0x20010fb0
 8010640:	20010fb6 	.word	0x20010fb6
 8010644:	20010fac 	.word	0x20010fac
 8010648:	20010f9c 	.word	0x20010f9c
 801064c:	2000d810 	.word	0x2000d810
 8010650:	2000d814 	.word	0x2000d814
 8010654:	0801c3b0 	.word	0x0801c3b0
 8010658:	0801c650 	.word	0x0801c650
 801065c:	0801c3fc 	.word	0x0801c3fc
 8010660:	20010fb4 	.word	0x20010fb4
 8010664:	20010fb9 	.word	0x20010fb9
 8010668:	20010f80 	.word	0x20010f80
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	429a      	cmp	r2, r3
 8010674:	d104      	bne.n	8010680 <tcp_process+0x5d8>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	68da      	ldr	r2, [r3, #12]
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	60da      	str	r2, [r3, #12]
 801067e:	e005      	b.n	801068c <tcp_process+0x5e4>
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	617b      	str	r3, [r7, #20]
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1ef      	bne.n	801066c <tcp_process+0x5c4>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	60da      	str	r2, [r3, #12]
 8010692:	4b77      	ldr	r3, [pc, #476]	@ (8010870 <tcp_process+0x7c8>)
 8010694:	2201      	movs	r2, #1
 8010696:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	220a      	movs	r2, #10
 801069c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801069e:	4b75      	ldr	r3, [pc, #468]	@ (8010874 <tcp_process+0x7cc>)
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	60da      	str	r2, [r3, #12]
 80106a6:	4a73      	ldr	r2, [pc, #460]	@ (8010874 <tcp_process+0x7cc>)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6013      	str	r3, [r2, #0]
 80106ac:	f003 f94c 	bl	8013948 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106b0:	e0d2      	b.n	8010858 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	8b5b      	ldrh	r3, [r3, #26]
 80106b6:	f043 0302 	orr.w	r3, r3, #2
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2208      	movs	r2, #8
 80106c4:	751a      	strb	r2, [r3, #20]
      break;
 80106c6:	e0c7      	b.n	8010858 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106c8:	4b6b      	ldr	r3, [pc, #428]	@ (8010878 <tcp_process+0x7d0>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 0310 	and.w	r3, r3, #16
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 80c1 	beq.w	8010858 <tcp_process+0x7b0>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106da:	4b68      	ldr	r3, [pc, #416]	@ (801087c <tcp_process+0x7d4>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	429a      	cmp	r2, r3
 80106e0:	f040 80ba 	bne.w	8010858 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f040 80b5 	bne.w	8010858 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2206      	movs	r2, #6
 80106f2:	751a      	strb	r2, [r3, #20]
      break;
 80106f4:	e0b0      	b.n	8010858 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 f9ca 	bl	8010a90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106fc:	4b60      	ldr	r3, [pc, #384]	@ (8010880 <tcp_process+0x7d8>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	f003 0320 	and.w	r3, r3, #32
 8010704:	2b00      	cmp	r3, #0
 8010706:	f000 80a9 	beq.w	801085c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	8b5b      	ldrh	r3, [r3, #26]
 801070e:	f043 0302 	orr.w	r3, r3, #2
 8010712:	b29a      	uxth	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7fe fd39 	bl	800f190 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801071e:	4b59      	ldr	r3, [pc, #356]	@ (8010884 <tcp_process+0x7dc>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	429a      	cmp	r2, r3
 8010726:	d105      	bne.n	8010734 <tcp_process+0x68c>
 8010728:	4b56      	ldr	r3, [pc, #344]	@ (8010884 <tcp_process+0x7dc>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	4a55      	ldr	r2, [pc, #340]	@ (8010884 <tcp_process+0x7dc>)
 8010730:	6013      	str	r3, [r2, #0]
 8010732:	e013      	b.n	801075c <tcp_process+0x6b4>
 8010734:	4b53      	ldr	r3, [pc, #332]	@ (8010884 <tcp_process+0x7dc>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	613b      	str	r3, [r7, #16]
 801073a:	e00c      	b.n	8010756 <tcp_process+0x6ae>
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	429a      	cmp	r2, r3
 8010744:	d104      	bne.n	8010750 <tcp_process+0x6a8>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68da      	ldr	r2, [r3, #12]
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	60da      	str	r2, [r3, #12]
 801074e:	e005      	b.n	801075c <tcp_process+0x6b4>
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	613b      	str	r3, [r7, #16]
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1ef      	bne.n	801073c <tcp_process+0x694>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	60da      	str	r2, [r3, #12]
 8010762:	4b43      	ldr	r3, [pc, #268]	@ (8010870 <tcp_process+0x7c8>)
 8010764:	2201      	movs	r2, #1
 8010766:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	220a      	movs	r2, #10
 801076c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801076e:	4b41      	ldr	r3, [pc, #260]	@ (8010874 <tcp_process+0x7cc>)
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	60da      	str	r2, [r3, #12]
 8010776:	4a3f      	ldr	r2, [pc, #252]	@ (8010874 <tcp_process+0x7cc>)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6013      	str	r3, [r2, #0]
 801077c:	f003 f8e4 	bl	8013948 <tcp_timer_needed>
      }
      break;
 8010780:	e06c      	b.n	801085c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f000 f984 	bl	8010a90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010788:	4b3b      	ldr	r3, [pc, #236]	@ (8010878 <tcp_process+0x7d0>)
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	f003 0310 	and.w	r3, r3, #16
 8010790:	2b00      	cmp	r3, #0
 8010792:	d065      	beq.n	8010860 <tcp_process+0x7b8>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010798:	4b38      	ldr	r3, [pc, #224]	@ (801087c <tcp_process+0x7d4>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	429a      	cmp	r2, r3
 801079e:	d15f      	bne.n	8010860 <tcp_process+0x7b8>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d15b      	bne.n	8010860 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7fe fcf1 	bl	800f190 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107ae:	4b35      	ldr	r3, [pc, #212]	@ (8010884 <tcp_process+0x7dc>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d105      	bne.n	80107c4 <tcp_process+0x71c>
 80107b8:	4b32      	ldr	r3, [pc, #200]	@ (8010884 <tcp_process+0x7dc>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	4a31      	ldr	r2, [pc, #196]	@ (8010884 <tcp_process+0x7dc>)
 80107c0:	6013      	str	r3, [r2, #0]
 80107c2:	e013      	b.n	80107ec <tcp_process+0x744>
 80107c4:	4b2f      	ldr	r3, [pc, #188]	@ (8010884 <tcp_process+0x7dc>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	60fb      	str	r3, [r7, #12]
 80107ca:	e00c      	b.n	80107e6 <tcp_process+0x73e>
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d104      	bne.n	80107e0 <tcp_process+0x738>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	68da      	ldr	r2, [r3, #12]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	60da      	str	r2, [r3, #12]
 80107de:	e005      	b.n	80107ec <tcp_process+0x744>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	60fb      	str	r3, [r7, #12]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1ef      	bne.n	80107cc <tcp_process+0x724>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	60da      	str	r2, [r3, #12]
 80107f2:	4b1f      	ldr	r3, [pc, #124]	@ (8010870 <tcp_process+0x7c8>)
 80107f4:	2201      	movs	r2, #1
 80107f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	220a      	movs	r2, #10
 80107fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107fe:	4b1d      	ldr	r3, [pc, #116]	@ (8010874 <tcp_process+0x7cc>)
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	60da      	str	r2, [r3, #12]
 8010806:	4a1b      	ldr	r2, [pc, #108]	@ (8010874 <tcp_process+0x7cc>)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	f003 f89c 	bl	8013948 <tcp_timer_needed>
      }
      break;
 8010810:	e026      	b.n	8010860 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f93c 	bl	8010a90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010818:	4b17      	ldr	r3, [pc, #92]	@ (8010878 <tcp_process+0x7d0>)
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	f003 0310 	and.w	r3, r3, #16
 8010820:	2b00      	cmp	r3, #0
 8010822:	d01f      	beq.n	8010864 <tcp_process+0x7bc>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010828:	4b14      	ldr	r3, [pc, #80]	@ (801087c <tcp_process+0x7d4>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	429a      	cmp	r2, r3
 801082e:	d119      	bne.n	8010864 <tcp_process+0x7bc>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d115      	bne.n	8010864 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010838:	4b11      	ldr	r3, [pc, #68]	@ (8010880 <tcp_process+0x7d8>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f043 0310 	orr.w	r3, r3, #16
 8010840:	b2da      	uxtb	r2, r3
 8010842:	4b0f      	ldr	r3, [pc, #60]	@ (8010880 <tcp_process+0x7d8>)
 8010844:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010846:	e00d      	b.n	8010864 <tcp_process+0x7bc>
    default:
      break;
 8010848:	bf00      	nop
 801084a:	e00c      	b.n	8010866 <tcp_process+0x7be>
      break;
 801084c:	bf00      	nop
 801084e:	e00a      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010850:	bf00      	nop
 8010852:	e008      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010854:	bf00      	nop
 8010856:	e006      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010858:	bf00      	nop
 801085a:	e004      	b.n	8010866 <tcp_process+0x7be>
      break;
 801085c:	bf00      	nop
 801085e:	e002      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010860:	bf00      	nop
 8010862:	e000      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010864:	bf00      	nop
  }
  return ERR_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3724      	adds	r7, #36	@ 0x24
 801086c:	46bd      	mov	sp, r7
 801086e:	bd90      	pop	{r4, r7, pc}
 8010870:	20010f88 	.word	0x20010f88
 8010874:	20010f84 	.word	0x20010f84
 8010878:	20010fb8 	.word	0x20010fb8
 801087c:	20010fb0 	.word	0x20010fb0
 8010880:	20010fb9 	.word	0x20010fb9
 8010884:	20010f80 	.word	0x20010f80

08010888 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010888:	b590      	push	{r4, r7, lr}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d106      	bne.n	80108a6 <tcp_oos_insert_segment+0x1e>
 8010898:	4b3b      	ldr	r3, [pc, #236]	@ (8010988 <tcp_oos_insert_segment+0x100>)
 801089a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801089e:	493b      	ldr	r1, [pc, #236]	@ (801098c <tcp_oos_insert_segment+0x104>)
 80108a0:	483b      	ldr	r0, [pc, #236]	@ (8010990 <tcp_oos_insert_segment+0x108>)
 80108a2:	f008 fb17 	bl	8018ed4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	899b      	ldrh	r3, [r3, #12]
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fa ffa2 	bl	800b7f8 <lwip_htons>
 80108b4:	4603      	mov	r3, r0
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	f003 0301 	and.w	r3, r3, #1
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d028      	beq.n	8010912 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108c0:	6838      	ldr	r0, [r7, #0]
 80108c2:	f7fe f977 	bl	800ebb4 <tcp_segs_free>
    next = NULL;
 80108c6:	2300      	movs	r3, #0
 80108c8:	603b      	str	r3, [r7, #0]
 80108ca:	e056      	b.n	801097a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	899b      	ldrh	r3, [r3, #12]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fa ff8f 	bl	800b7f8 <lwip_htons>
 80108da:	4603      	mov	r3, r0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00d      	beq.n	8010902 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	899b      	ldrh	r3, [r3, #12]
 80108ec:	b29c      	uxth	r4, r3
 80108ee:	2001      	movs	r0, #1
 80108f0:	f7fa ff82 	bl	800b7f8 <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	461a      	mov	r2, r3
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	4322      	orrs	r2, r4
 80108fe:	b292      	uxth	r2, r2
 8010900:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f7fe f966 	bl	800ebde <tcp_seg_free>
    while (next &&
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00e      	beq.n	8010936 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	891b      	ldrh	r3, [r3, #8]
 801091c:	461a      	mov	r2, r3
 801091e:	4b1d      	ldr	r3, [pc, #116]	@ (8010994 <tcp_oos_insert_segment+0x10c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	441a      	add	r2, r3
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	6839      	ldr	r1, [r7, #0]
 801092c:	8909      	ldrh	r1, [r1, #8]
 801092e:	440b      	add	r3, r1
 8010930:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010932:	2b00      	cmp	r3, #0
 8010934:	daca      	bge.n	80108cc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d01e      	beq.n	801097a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	461a      	mov	r2, r3
 8010942:	4b14      	ldr	r3, [pc, #80]	@ (8010994 <tcp_oos_insert_segment+0x10c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	441a      	add	r2, r3
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010950:	2b00      	cmp	r3, #0
 8010952:	dd12      	ble.n	801097a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	b29a      	uxth	r2, r3
 801095c:	4b0d      	ldr	r3, [pc, #52]	@ (8010994 <tcp_oos_insert_segment+0x10c>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	b29b      	uxth	r3, r3
 8010962:	1ad3      	subs	r3, r2, r3
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	891b      	ldrh	r3, [r3, #8]
 8010972:	4619      	mov	r1, r3
 8010974:	4610      	mov	r0, r2
 8010976:	f7fc f9ed 	bl	800cd54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	601a      	str	r2, [r3, #0]
}
 8010980:	bf00      	nop
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	bd90      	pop	{r4, r7, pc}
 8010988:	0801c3b0 	.word	0x0801c3b0
 801098c:	0801c670 	.word	0x0801c670
 8010990:	0801c3fc 	.word	0x0801c3fc
 8010994:	20010fac 	.word	0x20010fac

08010998 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010998:	b5b0      	push	{r4, r5, r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109a6:	e03e      	b.n	8010a26 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fc fbe0 	bl	800d17c <pbuf_clen>
 80109bc:	4603      	mov	r3, r0
 80109be:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80109c6:	8a7a      	ldrh	r2, [r7, #18]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d906      	bls.n	80109da <tcp_free_acked_segments+0x42>
 80109cc:	4b2a      	ldr	r3, [pc, #168]	@ (8010a78 <tcp_free_acked_segments+0xe0>)
 80109ce:	f240 4257 	movw	r2, #1111	@ 0x457
 80109d2:	492a      	ldr	r1, [pc, #168]	@ (8010a7c <tcp_free_acked_segments+0xe4>)
 80109d4:	482a      	ldr	r0, [pc, #168]	@ (8010a80 <tcp_free_acked_segments+0xe8>)
 80109d6:	f008 fa7d 	bl	8018ed4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80109e0:	8a7b      	ldrh	r3, [r7, #18]
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	891a      	ldrh	r2, [r3, #8]
 80109f0:	4b24      	ldr	r3, [pc, #144]	@ (8010a84 <tcp_free_acked_segments+0xec>)
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	4413      	add	r3, r2
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	4b22      	ldr	r3, [pc, #136]	@ (8010a84 <tcp_free_acked_segments+0xec>)
 80109fa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80109fc:	6978      	ldr	r0, [r7, #20]
 80109fe:	f7fe f8ee 	bl	800ebde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00c      	beq.n	8010a26 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d109      	bne.n	8010a26 <tcp_free_acked_segments+0x8e>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d106      	bne.n	8010a26 <tcp_free_acked_segments+0x8e>
 8010a18:	4b17      	ldr	r3, [pc, #92]	@ (8010a78 <tcp_free_acked_segments+0xe0>)
 8010a1a:	f240 4261 	movw	r2, #1121	@ 0x461
 8010a1e:	491a      	ldr	r1, [pc, #104]	@ (8010a88 <tcp_free_acked_segments+0xf0>)
 8010a20:	4817      	ldr	r0, [pc, #92]	@ (8010a80 <tcp_free_acked_segments+0xe8>)
 8010a22:	f008 fa57 	bl	8018ed4 <iprintf>
  while (seg_list != NULL &&
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d020      	beq.n	8010a6e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fa fef5 	bl	800b822 <lwip_htonl>
 8010a38:	4604      	mov	r4, r0
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	891b      	ldrh	r3, [r3, #8]
 8010a3e:	461d      	mov	r5, r3
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	899b      	ldrh	r3, [r3, #12]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fa fed5 	bl	800b7f8 <lwip_htons>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	f003 0303 	and.w	r3, r3, #3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <tcp_free_acked_segments+0xc6>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <tcp_free_acked_segments+0xc8>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	442b      	add	r3, r5
 8010a62:	18e2      	adds	r2, r4, r3
 8010a64:	4b09      	ldr	r3, [pc, #36]	@ (8010a8c <tcp_free_acked_segments+0xf4>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	dd9c      	ble.n	80109a8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bdb0      	pop	{r4, r5, r7, pc}
 8010a78:	0801c3b0 	.word	0x0801c3b0
 8010a7c:	0801c698 	.word	0x0801c698
 8010a80:	0801c3fc 	.word	0x0801c3fc
 8010a84:	20010fb4 	.word	0x20010fb4
 8010a88:	0801c6c0 	.word	0x0801c6c0
 8010a8c:	20010fb0 	.word	0x20010fb0

08010a90 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010a90:	b5b0      	push	{r4, r5, r7, lr}
 8010a92:	b094      	sub	sp, #80	@ 0x50
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <tcp_receive+0x20>
 8010aa2:	4b91      	ldr	r3, [pc, #580]	@ (8010ce8 <tcp_receive+0x258>)
 8010aa4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010aa8:	4990      	ldr	r1, [pc, #576]	@ (8010cec <tcp_receive+0x25c>)
 8010aaa:	4891      	ldr	r0, [pc, #580]	@ (8010cf0 <tcp_receive+0x260>)
 8010aac:	f008 fa12 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7d1b      	ldrb	r3, [r3, #20]
 8010ab4:	2b03      	cmp	r3, #3
 8010ab6:	d806      	bhi.n	8010ac6 <tcp_receive+0x36>
 8010ab8:	4b8b      	ldr	r3, [pc, #556]	@ (8010ce8 <tcp_receive+0x258>)
 8010aba:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010abe:	498d      	ldr	r1, [pc, #564]	@ (8010cf4 <tcp_receive+0x264>)
 8010ac0:	488b      	ldr	r0, [pc, #556]	@ (8010cf0 <tcp_receive+0x260>)
 8010ac2:	f008 fa07 	bl	8018ed4 <iprintf>

  if (flags & TCP_ACK) {
 8010ac6:	4b8c      	ldr	r3, [pc, #560]	@ (8010cf8 <tcp_receive+0x268>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	f003 0310 	and.w	r3, r3, #16
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 8264 	beq.w	8010f9c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ada:	461a      	mov	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ae0:	4413      	add	r3, r2
 8010ae2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ae8:	4b84      	ldr	r3, [pc, #528]	@ (8010cfc <tcp_receive+0x26c>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	db1b      	blt.n	8010b2a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010af6:	4b81      	ldr	r3, [pc, #516]	@ (8010cfc <tcp_receive+0x26c>)
 8010af8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d106      	bne.n	8010b0c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010b02:	4b7f      	ldr	r3, [pc, #508]	@ (8010d00 <tcp_receive+0x270>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	db0e      	blt.n	8010b2a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010b10:	4b7b      	ldr	r3, [pc, #492]	@ (8010d00 <tcp_receive+0x270>)
 8010b12:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d125      	bne.n	8010b64 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b18:	4b7a      	ldr	r3, [pc, #488]	@ (8010d04 <tcp_receive+0x274>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	89db      	ldrh	r3, [r3, #14]
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d91c      	bls.n	8010b64 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b2a:	4b76      	ldr	r3, [pc, #472]	@ (8010d04 <tcp_receive+0x274>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	89db      	ldrh	r3, [r3, #14]
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d205      	bcs.n	8010b54 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b54:	4b69      	ldr	r3, [pc, #420]	@ (8010cfc <tcp_receive+0x26c>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010b5c:	4b68      	ldr	r3, [pc, #416]	@ (8010d00 <tcp_receive+0x270>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b64:	4b66      	ldr	r3, [pc, #408]	@ (8010d00 <tcp_receive+0x270>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	dc58      	bgt.n	8010c24 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b72:	4b65      	ldr	r3, [pc, #404]	@ (8010d08 <tcp_receive+0x278>)
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d14b      	bne.n	8010c12 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010b84:	4413      	add	r3, r2
 8010b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d142      	bne.n	8010c12 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	db3d      	blt.n	8010c12 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010b9a:	4b59      	ldr	r3, [pc, #356]	@ (8010d00 <tcp_receive+0x270>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d137      	bne.n	8010c12 <tcp_receive+0x182>
              found_dupack = 1;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bac:	2bff      	cmp	r3, #255	@ 0xff
 8010bae:	d007      	beq.n	8010bc0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bc6:	2b03      	cmp	r3, #3
 8010bc8:	d91b      	bls.n	8010c02 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bd4:	4413      	add	r3, r2
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d30a      	bcc.n	8010bf8 <tcp_receive+0x168>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bec:	4413      	add	r3, r2
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010bf6:	e004      	b.n	8010c02 <tcp_receive+0x172>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	d902      	bls.n	8010c12 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f002 fb3f 	bl	8013290 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f040 8161 	bne.w	8010edc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010c22:	e15b      	b.n	8010edc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c24:	4b36      	ldr	r3, [pc, #216]	@ (8010d00 <tcp_receive+0x270>)
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f2c0 814e 	blt.w	8010ed2 <tcp_receive+0x442>
 8010c36:	4b32      	ldr	r3, [pc, #200]	@ (8010d00 <tcp_receive+0x270>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f300 8146 	bgt.w	8010ed2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8b5b      	ldrh	r3, [r3, #26]
 8010c4a:	f003 0304 	and.w	r3, r3, #4
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d010      	beq.n	8010c74 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8b5b      	ldrh	r3, [r3, #26]
 8010c56:	f023 0304 	bic.w	r3, r3, #4
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010c82:	10db      	asrs	r3, r3, #3
 8010c84:	b21b      	sxth	r3, r3
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4413      	add	r3, r2
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	b21a      	sxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010c9c:	4b18      	ldr	r3, [pc, #96]	@ (8010d00 <tcp_receive+0x270>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010cb4:	4b12      	ldr	r3, [pc, #72]	@ (8010d00 <tcp_receive+0x270>)
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	7d1b      	ldrb	r3, [r3, #20]
 8010cc0:	2b03      	cmp	r3, #3
 8010cc2:	f240 8097 	bls.w	8010df4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d245      	bcs.n	8010d62 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8b5b      	ldrh	r3, [r3, #26]
 8010cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d014      	beq.n	8010d0c <tcp_receive+0x27c>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e013      	b.n	8010d0e <tcp_receive+0x27e>
 8010ce6:	bf00      	nop
 8010ce8:	0801c3b0 	.word	0x0801c3b0
 8010cec:	0801c6e0 	.word	0x0801c6e0
 8010cf0:	0801c3fc 	.word	0x0801c3fc
 8010cf4:	0801c6fc 	.word	0x0801c6fc
 8010cf8:	20010fb8 	.word	0x20010fb8
 8010cfc:	20010fac 	.word	0x20010fac
 8010d00:	20010fb0 	.word	0x20010fb0
 8010d04:	20010f9c 	.word	0x20010f9c
 8010d08:	20010fb6 	.word	0x20010fb6
 8010d0c:	2302      	movs	r3, #2
 8010d0e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d1c:	fb12 f303 	smulbb	r3, r2, r3
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010d24:	4293      	cmp	r3, r2
 8010d26:	bf28      	it	cs
 8010d28:	4613      	movcs	r3, r2
 8010d2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010d32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010d34:	4413      	add	r3, r2
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d309      	bcc.n	8010d56 <tcp_receive+0x2c6>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010d48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010d4a:	4413      	add	r3, r2
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010d54:	e04e      	b.n	8010df4 <tcp_receive+0x364>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010d60:	e048      	b.n	8010df4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010d68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d6a:	4413      	add	r3, r2
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d309      	bcc.n	8010d8c <tcp_receive+0x2fc>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010d7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d80:	4413      	add	r3, r2
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010d8a:	e004      	b.n	8010d96 <tcp_receive+0x306>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d326      	bcc.n	8010df4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010db2:	1ad3      	subs	r3, r2, r3
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010dc6:	4413      	add	r3, r2
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d30a      	bcc.n	8010dea <tcp_receive+0x35a>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010dde:	4413      	add	r3, r2
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010de8:	e004      	b.n	8010df4 <tcp_receive+0x364>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010df0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dfc:	4a98      	ldr	r2, [pc, #608]	@ (8011060 <tcp_receive+0x5d0>)
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7ff fdca 	bl	8010998 <tcp_free_acked_segments>
 8010e04:	4602      	mov	r2, r0
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e12:	4a94      	ldr	r2, [pc, #592]	@ (8011064 <tcp_receive+0x5d4>)
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff fdbf 	bl	8010998 <tcp_free_acked_segments>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d104      	bne.n	8010e32 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e2e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010e30:	e002      	b.n	8010e38 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d103      	bne.n	8010e4e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010e54:	4b84      	ldr	r3, [pc, #528]	@ (8011068 <tcp_receive+0x5d8>)
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	4413      	add	r3, r2
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	8b5b      	ldrh	r3, [r3, #26]
 8010e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d035      	beq.n	8010eda <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d118      	bne.n	8010ea8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00c      	beq.n	8010e98 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fa fcc9 	bl	800b822 <lwip_htonl>
 8010e90:	4603      	mov	r3, r0
 8010e92:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	dc20      	bgt.n	8010eda <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	8b5b      	ldrh	r3, [r3, #26]
 8010e9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ea6:	e018      	b.n	8010eda <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fa fcb4 	bl	800b822 <lwip_htonl>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	1ae3      	subs	r3, r4, r3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	dc0b      	bgt.n	8010eda <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8b5b      	ldrh	r3, [r3, #26]
 8010ec6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ed0:	e003      	b.n	8010eda <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f002 fbc8 	bl	8013668 <tcp_send_empty_ack>
 8010ed8:	e000      	b.n	8010edc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010eda:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d05b      	beq.n	8010f9c <tcp_receive+0x50c>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ee8:	4b60      	ldr	r3, [pc, #384]	@ (801106c <tcp_receive+0x5dc>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	da54      	bge.n	8010f9c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8011070 <tcp_receive+0x5e0>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f06:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010f10:	10db      	asrs	r3, r3, #3
 8010f12:	b21b      	sxth	r3, r3
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010f2a:	4413      	add	r3, r2
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	b21a      	sxth	r2, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010f34:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	da05      	bge.n	8010f48 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010f40:	425b      	negs	r3, r3
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010f52:	109b      	asrs	r3, r3, #2
 8010f54:	b21b      	sxth	r3, r3
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010f6c:	4413      	add	r3, r2
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	b21a      	sxth	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010f7c:	10db      	asrs	r3, r3, #3
 8010f7e:	b21b      	sxth	r3, r3
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	4413      	add	r3, r2
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	b21a      	sxth	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010f9c:	4b35      	ldr	r3, [pc, #212]	@ (8011074 <tcp_receive+0x5e4>)
 8010f9e:	881b      	ldrh	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 84df 	beq.w	8011964 <tcp_receive+0xed4>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	7d1b      	ldrb	r3, [r3, #20]
 8010faa:	2b06      	cmp	r3, #6
 8010fac:	f200 84da 	bhi.w	8011964 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fb4:	4b30      	ldr	r3, [pc, #192]	@ (8011078 <tcp_receive+0x5e8>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	f2c0 808f 	blt.w	80110e0 <tcp_receive+0x650>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8011074 <tcp_receive+0x5e4>)
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	4619      	mov	r1, r3
 8010fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8011078 <tcp_receive+0x5e8>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	440b      	add	r3, r1
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	f300 8082 	bgt.w	80110e0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010fdc:	4b27      	ldr	r3, [pc, #156]	@ (801107c <tcp_receive+0x5ec>)
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fe6:	4b24      	ldr	r3, [pc, #144]	@ (8011078 <tcp_receive+0x5e8>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010fee:	4b23      	ldr	r3, [pc, #140]	@ (801107c <tcp_receive+0x5ec>)
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_receive+0x574>
 8010ff6:	4b22      	ldr	r3, [pc, #136]	@ (8011080 <tcp_receive+0x5f0>)
 8010ff8:	f240 5294 	movw	r2, #1428	@ 0x594
 8010ffc:	4921      	ldr	r1, [pc, #132]	@ (8011084 <tcp_receive+0x5f4>)
 8010ffe:	4822      	ldr	r0, [pc, #136]	@ (8011088 <tcp_receive+0x5f8>)
 8011000:	f007 ff68 	bl	8018ed4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011006:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801100a:	4293      	cmp	r3, r2
 801100c:	d906      	bls.n	801101c <tcp_receive+0x58c>
 801100e:	4b1c      	ldr	r3, [pc, #112]	@ (8011080 <tcp_receive+0x5f0>)
 8011010:	f240 5295 	movw	r2, #1429	@ 0x595
 8011014:	491d      	ldr	r1, [pc, #116]	@ (801108c <tcp_receive+0x5fc>)
 8011016:	481c      	ldr	r0, [pc, #112]	@ (8011088 <tcp_receive+0x5f8>)
 8011018:	f007 ff5c 	bl	8018ed4 <iprintf>
      off = (u16_t)off32;
 801101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011022:	4b16      	ldr	r3, [pc, #88]	@ (801107c <tcp_receive+0x5ec>)
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	891b      	ldrh	r3, [r3, #8]
 8011028:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801102c:	429a      	cmp	r2, r3
 801102e:	d906      	bls.n	801103e <tcp_receive+0x5ae>
 8011030:	4b13      	ldr	r3, [pc, #76]	@ (8011080 <tcp_receive+0x5f0>)
 8011032:	f240 5297 	movw	r2, #1431	@ 0x597
 8011036:	4916      	ldr	r1, [pc, #88]	@ (8011090 <tcp_receive+0x600>)
 8011038:	4813      	ldr	r0, [pc, #76]	@ (8011088 <tcp_receive+0x5f8>)
 801103a:	f007 ff4b 	bl	8018ed4 <iprintf>
      inseg.len -= off;
 801103e:	4b0f      	ldr	r3, [pc, #60]	@ (801107c <tcp_receive+0x5ec>)
 8011040:	891a      	ldrh	r2, [r3, #8]
 8011042:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	b29a      	uxth	r2, r3
 801104a:	4b0c      	ldr	r3, [pc, #48]	@ (801107c <tcp_receive+0x5ec>)
 801104c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801104e:	4b0b      	ldr	r3, [pc, #44]	@ (801107c <tcp_receive+0x5ec>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	891a      	ldrh	r2, [r3, #8]
 8011054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801105c:	e02a      	b.n	80110b4 <tcp_receive+0x624>
 801105e:	bf00      	nop
 8011060:	0801c718 	.word	0x0801c718
 8011064:	0801c720 	.word	0x0801c720
 8011068:	20010fb4 	.word	0x20010fb4
 801106c:	20010fb0 	.word	0x20010fb0
 8011070:	20010f74 	.word	0x20010f74
 8011074:	20010fb6 	.word	0x20010fb6
 8011078:	20010fac 	.word	0x20010fac
 801107c:	20010f8c 	.word	0x20010f8c
 8011080:	0801c3b0 	.word	0x0801c3b0
 8011084:	0801c728 	.word	0x0801c728
 8011088:	0801c3fc 	.word	0x0801c3fc
 801108c:	0801c738 	.word	0x0801c738
 8011090:	0801c748 	.word	0x0801c748
        off -= p->len;
 8011094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011096:	895b      	ldrh	r3, [r3, #10]
 8011098:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801109c:	1ad3      	subs	r3, r2, r3
 801109e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80110a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80110a6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110aa:	2200      	movs	r2, #0
 80110ac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80110b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110b6:	895b      	ldrh	r3, [r3, #10]
 80110b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80110bc:	429a      	cmp	r2, r3
 80110be:	d8e9      	bhi.n	8011094 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80110c4:	4619      	mov	r1, r3
 80110c6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80110c8:	f7fb ff44 	bl	800cf54 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110d0:	4a90      	ldr	r2, [pc, #576]	@ (8011314 <tcp_receive+0x884>)
 80110d2:	6013      	str	r3, [r2, #0]
 80110d4:	4b90      	ldr	r3, [pc, #576]	@ (8011318 <tcp_receive+0x888>)
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	4a8e      	ldr	r2, [pc, #568]	@ (8011314 <tcp_receive+0x884>)
 80110da:	6812      	ldr	r2, [r2, #0]
 80110dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80110de:	e00d      	b.n	80110fc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80110e0:	4b8c      	ldr	r3, [pc, #560]	@ (8011314 <tcp_receive+0x884>)
 80110e2:	681a      	ldr	r2, [r3, #0]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	da06      	bge.n	80110fc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	8b5b      	ldrh	r3, [r3, #26]
 80110f2:	f043 0302 	orr.w	r3, r3, #2
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110fc:	4b85      	ldr	r3, [pc, #532]	@ (8011314 <tcp_receive+0x884>)
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	f2c0 8427 	blt.w	801195a <tcp_receive+0xeca>
 801110c:	4b81      	ldr	r3, [pc, #516]	@ (8011314 <tcp_receive+0x884>)
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011114:	6879      	ldr	r1, [r7, #4]
 8011116:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011118:	440b      	add	r3, r1
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	3301      	adds	r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	f300 841b 	bgt.w	801195a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011128:	4b7a      	ldr	r3, [pc, #488]	@ (8011314 <tcp_receive+0x884>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	429a      	cmp	r2, r3
 801112e:	f040 8298 	bne.w	8011662 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011132:	4b79      	ldr	r3, [pc, #484]	@ (8011318 <tcp_receive+0x888>)
 8011134:	891c      	ldrh	r4, [r3, #8]
 8011136:	4b78      	ldr	r3, [pc, #480]	@ (8011318 <tcp_receive+0x888>)
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	899b      	ldrh	r3, [r3, #12]
 801113c:	b29b      	uxth	r3, r3
 801113e:	4618      	mov	r0, r3
 8011140:	f7fa fb5a 	bl	800b7f8 <lwip_htons>
 8011144:	4603      	mov	r3, r0
 8011146:	b2db      	uxtb	r3, r3
 8011148:	f003 0303 	and.w	r3, r3, #3
 801114c:	2b00      	cmp	r3, #0
 801114e:	d001      	beq.n	8011154 <tcp_receive+0x6c4>
 8011150:	2301      	movs	r3, #1
 8011152:	e000      	b.n	8011156 <tcp_receive+0x6c6>
 8011154:	2300      	movs	r3, #0
 8011156:	4423      	add	r3, r4
 8011158:	b29a      	uxth	r2, r3
 801115a:	4b70      	ldr	r3, [pc, #448]	@ (801131c <tcp_receive+0x88c>)
 801115c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011162:	4b6e      	ldr	r3, [pc, #440]	@ (801131c <tcp_receive+0x88c>)
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	429a      	cmp	r2, r3
 8011168:	d274      	bcs.n	8011254 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801116a:	4b6b      	ldr	r3, [pc, #428]	@ (8011318 <tcp_receive+0x888>)
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	899b      	ldrh	r3, [r3, #12]
 8011170:	b29b      	uxth	r3, r3
 8011172:	4618      	mov	r0, r3
 8011174:	f7fa fb40 	bl	800b7f8 <lwip_htons>
 8011178:	4603      	mov	r3, r0
 801117a:	b2db      	uxtb	r3, r3
 801117c:	f003 0301 	and.w	r3, r3, #1
 8011180:	2b00      	cmp	r3, #0
 8011182:	d01e      	beq.n	80111c2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011184:	4b64      	ldr	r3, [pc, #400]	@ (8011318 <tcp_receive+0x888>)
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	899b      	ldrh	r3, [r3, #12]
 801118a:	b29b      	uxth	r3, r3
 801118c:	b21b      	sxth	r3, r3
 801118e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011192:	b21c      	sxth	r4, r3
 8011194:	4b60      	ldr	r3, [pc, #384]	@ (8011318 <tcp_receive+0x888>)
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	899b      	ldrh	r3, [r3, #12]
 801119a:	b29b      	uxth	r3, r3
 801119c:	4618      	mov	r0, r3
 801119e:	f7fa fb2b 	bl	800b7f8 <lwip_htons>
 80111a2:	4603      	mov	r3, r0
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7fa fb23 	bl	800b7f8 <lwip_htons>
 80111b2:	4603      	mov	r3, r0
 80111b4:	b21b      	sxth	r3, r3
 80111b6:	4323      	orrs	r3, r4
 80111b8:	b21a      	sxth	r2, r3
 80111ba:	4b57      	ldr	r3, [pc, #348]	@ (8011318 <tcp_receive+0x888>)
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	b292      	uxth	r2, r2
 80111c0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80111c6:	4b54      	ldr	r3, [pc, #336]	@ (8011318 <tcp_receive+0x888>)
 80111c8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111ca:	4b53      	ldr	r3, [pc, #332]	@ (8011318 <tcp_receive+0x888>)
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fa fb10 	bl	800b7f8 <lwip_htons>
 80111d8:	4603      	mov	r3, r0
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	f003 0302 	and.w	r3, r3, #2
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d005      	beq.n	80111f0 <tcp_receive+0x760>
            inseg.len -= 1;
 80111e4:	4b4c      	ldr	r3, [pc, #304]	@ (8011318 <tcp_receive+0x888>)
 80111e6:	891b      	ldrh	r3, [r3, #8]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	4b4a      	ldr	r3, [pc, #296]	@ (8011318 <tcp_receive+0x888>)
 80111ee:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80111f0:	4b49      	ldr	r3, [pc, #292]	@ (8011318 <tcp_receive+0x888>)
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	4a48      	ldr	r2, [pc, #288]	@ (8011318 <tcp_receive+0x888>)
 80111f6:	8912      	ldrh	r2, [r2, #8]
 80111f8:	4611      	mov	r1, r2
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fb fdaa 	bl	800cd54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011200:	4b45      	ldr	r3, [pc, #276]	@ (8011318 <tcp_receive+0x888>)
 8011202:	891c      	ldrh	r4, [r3, #8]
 8011204:	4b44      	ldr	r3, [pc, #272]	@ (8011318 <tcp_receive+0x888>)
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	899b      	ldrh	r3, [r3, #12]
 801120a:	b29b      	uxth	r3, r3
 801120c:	4618      	mov	r0, r3
 801120e:	f7fa faf3 	bl	800b7f8 <lwip_htons>
 8011212:	4603      	mov	r3, r0
 8011214:	b2db      	uxtb	r3, r3
 8011216:	f003 0303 	and.w	r3, r3, #3
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <tcp_receive+0x792>
 801121e:	2301      	movs	r3, #1
 8011220:	e000      	b.n	8011224 <tcp_receive+0x794>
 8011222:	2300      	movs	r3, #0
 8011224:	4423      	add	r3, r4
 8011226:	b29a      	uxth	r2, r3
 8011228:	4b3c      	ldr	r3, [pc, #240]	@ (801131c <tcp_receive+0x88c>)
 801122a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801122c:	4b3b      	ldr	r3, [pc, #236]	@ (801131c <tcp_receive+0x88c>)
 801122e:	881b      	ldrh	r3, [r3, #0]
 8011230:	461a      	mov	r2, r3
 8011232:	4b38      	ldr	r3, [pc, #224]	@ (8011314 <tcp_receive+0x884>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	441a      	add	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801123c:	6879      	ldr	r1, [r7, #4]
 801123e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011240:	440b      	add	r3, r1
 8011242:	429a      	cmp	r2, r3
 8011244:	d006      	beq.n	8011254 <tcp_receive+0x7c4>
 8011246:	4b36      	ldr	r3, [pc, #216]	@ (8011320 <tcp_receive+0x890>)
 8011248:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801124c:	4935      	ldr	r1, [pc, #212]	@ (8011324 <tcp_receive+0x894>)
 801124e:	4836      	ldr	r0, [pc, #216]	@ (8011328 <tcp_receive+0x898>)
 8011250:	f007 fe40 	bl	8018ed4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011258:	2b00      	cmp	r3, #0
 801125a:	f000 80e6 	beq.w	801142a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801125e:	4b2e      	ldr	r3, [pc, #184]	@ (8011318 <tcp_receive+0x888>)
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	899b      	ldrh	r3, [r3, #12]
 8011264:	b29b      	uxth	r3, r3
 8011266:	4618      	mov	r0, r3
 8011268:	f7fa fac6 	bl	800b7f8 <lwip_htons>
 801126c:	4603      	mov	r3, r0
 801126e:	b2db      	uxtb	r3, r3
 8011270:	f003 0301 	and.w	r3, r3, #1
 8011274:	2b00      	cmp	r3, #0
 8011276:	d010      	beq.n	801129a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011278:	e00a      	b.n	8011290 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801127e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	f7fd fca7 	bl	800ebde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1f0      	bne.n	801127a <tcp_receive+0x7ea>
 8011298:	e0c7      	b.n	801142a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80112a0:	e051      	b.n	8011346 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	899b      	ldrh	r3, [r3, #12]
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fa faa4 	bl	800b7f8 <lwip_htons>
 80112b0:	4603      	mov	r3, r0
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d03c      	beq.n	8011336 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112bc:	4b16      	ldr	r3, [pc, #88]	@ (8011318 <tcp_receive+0x888>)
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	899b      	ldrh	r3, [r3, #12]
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fa fa97 	bl	800b7f8 <lwip_htons>
 80112ca:	4603      	mov	r3, r0
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d12f      	bne.n	8011336 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112d6:	4b10      	ldr	r3, [pc, #64]	@ (8011318 <tcp_receive+0x888>)
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	899b      	ldrh	r3, [r3, #12]
 80112dc:	b29c      	uxth	r4, r3
 80112de:	2001      	movs	r0, #1
 80112e0:	f7fa fa8a 	bl	800b7f8 <lwip_htons>
 80112e4:	4603      	mov	r3, r0
 80112e6:	461a      	mov	r2, r3
 80112e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011318 <tcp_receive+0x888>)
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	4322      	orrs	r2, r4
 80112ee:	b292      	uxth	r2, r2
 80112f0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80112f2:	4b09      	ldr	r3, [pc, #36]	@ (8011318 <tcp_receive+0x888>)
 80112f4:	891c      	ldrh	r4, [r3, #8]
 80112f6:	4b08      	ldr	r3, [pc, #32]	@ (8011318 <tcp_receive+0x888>)
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	899b      	ldrh	r3, [r3, #12]
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fa fa7a 	bl	800b7f8 <lwip_htons>
 8011304:	4603      	mov	r3, r0
 8011306:	b2db      	uxtb	r3, r3
 8011308:	f003 0303 	and.w	r3, r3, #3
 801130c:	2b00      	cmp	r3, #0
 801130e:	d00d      	beq.n	801132c <tcp_receive+0x89c>
 8011310:	2301      	movs	r3, #1
 8011312:	e00c      	b.n	801132e <tcp_receive+0x89e>
 8011314:	20010fac 	.word	0x20010fac
 8011318:	20010f8c 	.word	0x20010f8c
 801131c:	20010fb6 	.word	0x20010fb6
 8011320:	0801c3b0 	.word	0x0801c3b0
 8011324:	0801c758 	.word	0x0801c758
 8011328:	0801c3fc 	.word	0x0801c3fc
 801132c:	2300      	movs	r3, #0
 801132e:	4423      	add	r3, r4
 8011330:	b29a      	uxth	r2, r3
 8011332:	4b98      	ldr	r3, [pc, #608]	@ (8011594 <tcp_receive+0xb04>)
 8011334:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011338:	613b      	str	r3, [r7, #16]
              next = next->next;
 801133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011340:	6938      	ldr	r0, [r7, #16]
 8011342:	f7fd fc4c 	bl	800ebde <tcp_seg_free>
            while (next &&
 8011346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00e      	beq.n	801136a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801134c:	4b91      	ldr	r3, [pc, #580]	@ (8011594 <tcp_receive+0xb04>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	461a      	mov	r2, r3
 8011352:	4b91      	ldr	r3, [pc, #580]	@ (8011598 <tcp_receive+0xb08>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	441a      	add	r2, r3
 8011358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011360:	8909      	ldrh	r1, [r1, #8]
 8011362:	440b      	add	r3, r1
 8011364:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011366:	2b00      	cmp	r3, #0
 8011368:	da9b      	bge.n	80112a2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801136a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801136c:	2b00      	cmp	r3, #0
 801136e:	d059      	beq.n	8011424 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011370:	4b88      	ldr	r3, [pc, #544]	@ (8011594 <tcp_receive+0xb04>)
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	461a      	mov	r2, r3
 8011376:	4b88      	ldr	r3, [pc, #544]	@ (8011598 <tcp_receive+0xb08>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	441a      	add	r2, r3
 801137c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011384:	2b00      	cmp	r3, #0
 8011386:	dd4d      	ble.n	8011424 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	b29a      	uxth	r2, r3
 8011390:	4b81      	ldr	r3, [pc, #516]	@ (8011598 <tcp_receive+0xb08>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	b29b      	uxth	r3, r3
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b80      	ldr	r3, [pc, #512]	@ (801159c <tcp_receive+0xb0c>)
 801139c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801139e:	4b7f      	ldr	r3, [pc, #508]	@ (801159c <tcp_receive+0xb0c>)
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	899b      	ldrh	r3, [r3, #12]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fa fa26 	bl	800b7f8 <lwip_htons>
 80113ac:	4603      	mov	r3, r0
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	f003 0302 	and.w	r3, r3, #2
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d005      	beq.n	80113c4 <tcp_receive+0x934>
                inseg.len -= 1;
 80113b8:	4b78      	ldr	r3, [pc, #480]	@ (801159c <tcp_receive+0xb0c>)
 80113ba:	891b      	ldrh	r3, [r3, #8]
 80113bc:	3b01      	subs	r3, #1
 80113be:	b29a      	uxth	r2, r3
 80113c0:	4b76      	ldr	r3, [pc, #472]	@ (801159c <tcp_receive+0xb0c>)
 80113c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113c4:	4b75      	ldr	r3, [pc, #468]	@ (801159c <tcp_receive+0xb0c>)
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	4a74      	ldr	r2, [pc, #464]	@ (801159c <tcp_receive+0xb0c>)
 80113ca:	8912      	ldrh	r2, [r2, #8]
 80113cc:	4611      	mov	r1, r2
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fb fcc0 	bl	800cd54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113d4:	4b71      	ldr	r3, [pc, #452]	@ (801159c <tcp_receive+0xb0c>)
 80113d6:	891c      	ldrh	r4, [r3, #8]
 80113d8:	4b70      	ldr	r3, [pc, #448]	@ (801159c <tcp_receive+0xb0c>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fa fa09 	bl	800b7f8 <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	f003 0303 	and.w	r3, r3, #3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <tcp_receive+0x966>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e000      	b.n	80113f8 <tcp_receive+0x968>
 80113f6:	2300      	movs	r3, #0
 80113f8:	4423      	add	r3, r4
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	4b65      	ldr	r3, [pc, #404]	@ (8011594 <tcp_receive+0xb04>)
 80113fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011400:	4b64      	ldr	r3, [pc, #400]	@ (8011594 <tcp_receive+0xb04>)
 8011402:	881b      	ldrh	r3, [r3, #0]
 8011404:	461a      	mov	r2, r3
 8011406:	4b64      	ldr	r3, [pc, #400]	@ (8011598 <tcp_receive+0xb08>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	441a      	add	r2, r3
 801140c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	429a      	cmp	r2, r3
 8011414:	d006      	beq.n	8011424 <tcp_receive+0x994>
 8011416:	4b62      	ldr	r3, [pc, #392]	@ (80115a0 <tcp_receive+0xb10>)
 8011418:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801141c:	4961      	ldr	r1, [pc, #388]	@ (80115a4 <tcp_receive+0xb14>)
 801141e:	4862      	ldr	r0, [pc, #392]	@ (80115a8 <tcp_receive+0xb18>)
 8011420:	f007 fd58 	bl	8018ed4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011428:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801142a:	4b5a      	ldr	r3, [pc, #360]	@ (8011594 <tcp_receive+0xb04>)
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	461a      	mov	r2, r3
 8011430:	4b59      	ldr	r3, [pc, #356]	@ (8011598 <tcp_receive+0xb08>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	441a      	add	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801143e:	4b55      	ldr	r3, [pc, #340]	@ (8011594 <tcp_receive+0xb04>)
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	429a      	cmp	r2, r3
 8011444:	d206      	bcs.n	8011454 <tcp_receive+0x9c4>
 8011446:	4b56      	ldr	r3, [pc, #344]	@ (80115a0 <tcp_receive+0xb10>)
 8011448:	f240 6207 	movw	r2, #1543	@ 0x607
 801144c:	4957      	ldr	r1, [pc, #348]	@ (80115ac <tcp_receive+0xb1c>)
 801144e:	4856      	ldr	r0, [pc, #344]	@ (80115a8 <tcp_receive+0xb18>)
 8011450:	f007 fd40 	bl	8018ed4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011458:	4b4e      	ldr	r3, [pc, #312]	@ (8011594 <tcp_receive+0xb04>)
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7fc fd7b 	bl	800df60 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801146a:	4b4c      	ldr	r3, [pc, #304]	@ (801159c <tcp_receive+0xb0c>)
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	891b      	ldrh	r3, [r3, #8]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d006      	beq.n	8011482 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011474:	4b49      	ldr	r3, [pc, #292]	@ (801159c <tcp_receive+0xb0c>)
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	4a4d      	ldr	r2, [pc, #308]	@ (80115b0 <tcp_receive+0xb20>)
 801147a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801147c:	4b47      	ldr	r3, [pc, #284]	@ (801159c <tcp_receive+0xb0c>)
 801147e:	2200      	movs	r2, #0
 8011480:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011482:	4b46      	ldr	r3, [pc, #280]	@ (801159c <tcp_receive+0xb0c>)
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	899b      	ldrh	r3, [r3, #12]
 8011488:	b29b      	uxth	r3, r3
 801148a:	4618      	mov	r0, r3
 801148c:	f7fa f9b4 	bl	800b7f8 <lwip_htons>
 8011490:	4603      	mov	r3, r0
 8011492:	b2db      	uxtb	r3, r3
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 80b8 	beq.w	801160e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801149e:	4b45      	ldr	r3, [pc, #276]	@ (80115b4 <tcp_receive+0xb24>)
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	f043 0320 	orr.w	r3, r3, #32
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	4b42      	ldr	r3, [pc, #264]	@ (80115b4 <tcp_receive+0xb24>)
 80114aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114ac:	e0af      	b.n	801160e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	4a36      	ldr	r2, [pc, #216]	@ (8011598 <tcp_receive+0xb08>)
 80114be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	891b      	ldrh	r3, [r3, #8]
 80114c4:	461c      	mov	r4, r3
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	899b      	ldrh	r3, [r3, #12]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fa f992 	bl	800b7f8 <lwip_htons>
 80114d4:	4603      	mov	r3, r0
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	f003 0303 	and.w	r3, r3, #3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <tcp_receive+0xa54>
 80114e0:	2301      	movs	r3, #1
 80114e2:	e000      	b.n	80114e6 <tcp_receive+0xa56>
 80114e4:	2300      	movs	r3, #0
 80114e6:	191a      	adds	r2, r3, r4
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114ec:	441a      	add	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114f6:	461c      	mov	r4, r3
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	891b      	ldrh	r3, [r3, #8]
 80114fc:	461d      	mov	r5, r3
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	899b      	ldrh	r3, [r3, #12]
 8011504:	b29b      	uxth	r3, r3
 8011506:	4618      	mov	r0, r3
 8011508:	f7fa f976 	bl	800b7f8 <lwip_htons>
 801150c:	4603      	mov	r3, r0
 801150e:	b2db      	uxtb	r3, r3
 8011510:	f003 0303 	and.w	r3, r3, #3
 8011514:	2b00      	cmp	r3, #0
 8011516:	d001      	beq.n	801151c <tcp_receive+0xa8c>
 8011518:	2301      	movs	r3, #1
 801151a:	e000      	b.n	801151e <tcp_receive+0xa8e>
 801151c:	2300      	movs	r3, #0
 801151e:	442b      	add	r3, r5
 8011520:	429c      	cmp	r4, r3
 8011522:	d206      	bcs.n	8011532 <tcp_receive+0xaa2>
 8011524:	4b1e      	ldr	r3, [pc, #120]	@ (80115a0 <tcp_receive+0xb10>)
 8011526:	f240 622b 	movw	r2, #1579	@ 0x62b
 801152a:	4923      	ldr	r1, [pc, #140]	@ (80115b8 <tcp_receive+0xb28>)
 801152c:	481e      	ldr	r0, [pc, #120]	@ (80115a8 <tcp_receive+0xb18>)
 801152e:	f007 fcd1 	bl	8018ed4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	891b      	ldrh	r3, [r3, #8]
 8011536:	461c      	mov	r4, r3
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	899b      	ldrh	r3, [r3, #12]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4618      	mov	r0, r3
 8011542:	f7fa f959 	bl	800b7f8 <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f003 0303 	and.w	r3, r3, #3
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <tcp_receive+0xac6>
 8011552:	2301      	movs	r3, #1
 8011554:	e000      	b.n	8011558 <tcp_receive+0xac8>
 8011556:	2300      	movs	r3, #0
 8011558:	1919      	adds	r1, r3, r4
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801155e:	b28b      	uxth	r3, r1
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	b29a      	uxth	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7fc fcf9 	bl	800df60 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	891b      	ldrh	r3, [r3, #8]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d028      	beq.n	80115ca <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011578:	4b0d      	ldr	r3, [pc, #52]	@ (80115b0 <tcp_receive+0xb20>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d01d      	beq.n	80115bc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011580:	4b0b      	ldr	r3, [pc, #44]	@ (80115b0 <tcp_receive+0xb20>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	4619      	mov	r1, r3
 801158a:	4610      	mov	r0, r2
 801158c:	f7fb fe36 	bl	800d1fc <pbuf_cat>
 8011590:	e018      	b.n	80115c4 <tcp_receive+0xb34>
 8011592:	bf00      	nop
 8011594:	20010fb6 	.word	0x20010fb6
 8011598:	20010fac 	.word	0x20010fac
 801159c:	20010f8c 	.word	0x20010f8c
 80115a0:	0801c3b0 	.word	0x0801c3b0
 80115a4:	0801c790 	.word	0x0801c790
 80115a8:	0801c3fc 	.word	0x0801c3fc
 80115ac:	0801c7cc 	.word	0x0801c7cc
 80115b0:	20010fbc 	.word	0x20010fbc
 80115b4:	20010fb9 	.word	0x20010fb9
 80115b8:	0801c7ec 	.word	0x0801c7ec
            } else {
              recv_data = cseg->p;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	4a70      	ldr	r2, [pc, #448]	@ (8011784 <tcp_receive+0xcf4>)
 80115c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	2200      	movs	r2, #0
 80115c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	899b      	ldrh	r3, [r3, #12]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fa f910 	bl	800b7f8 <lwip_htons>
 80115d8:	4603      	mov	r3, r0
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	f003 0301 	and.w	r3, r3, #1
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00d      	beq.n	8011600 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80115e4:	4b68      	ldr	r3, [pc, #416]	@ (8011788 <tcp_receive+0xcf8>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f043 0320 	orr.w	r3, r3, #32
 80115ec:	b2da      	uxtb	r2, r3
 80115ee:	4b66      	ldr	r3, [pc, #408]	@ (8011788 <tcp_receive+0xcf8>)
 80115f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	7d1b      	ldrb	r3, [r3, #20]
 80115f6:	2b04      	cmp	r3, #4
 80115f8:	d102      	bne.n	8011600 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2207      	movs	r2, #7
 80115fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011608:	68b8      	ldr	r0, [r7, #8]
 801160a:	f7fd fae8 	bl	800ebde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011612:	2b00      	cmp	r3, #0
 8011614:	d008      	beq.n	8011628 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011622:	429a      	cmp	r2, r3
 8011624:	f43f af43 	beq.w	80114ae <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	8b5b      	ldrh	r3, [r3, #26]
 801162c:	f003 0301 	and.w	r3, r3, #1
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00e      	beq.n	8011652 <tcp_receive+0xbc2>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	8b5b      	ldrh	r3, [r3, #26]
 8011638:	f023 0301 	bic.w	r3, r3, #1
 801163c:	b29a      	uxth	r2, r3
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	835a      	strh	r2, [r3, #26]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	8b5b      	ldrh	r3, [r3, #26]
 8011646:	f043 0302 	orr.w	r3, r3, #2
 801164a:	b29a      	uxth	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011650:	e187      	b.n	8011962 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	8b5b      	ldrh	r3, [r3, #26]
 8011656:	f043 0301 	orr.w	r3, r3, #1
 801165a:	b29a      	uxth	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011660:	e17f      	b.n	8011962 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011666:	2b00      	cmp	r3, #0
 8011668:	d106      	bne.n	8011678 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801166a:	4848      	ldr	r0, [pc, #288]	@ (801178c <tcp_receive+0xcfc>)
 801166c:	f7fd faee 	bl	800ec4c <tcp_seg_copy>
 8011670:	4602      	mov	r2, r0
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	675a      	str	r2, [r3, #116]	@ 0x74
 8011676:	e16c      	b.n	8011952 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011678:	2300      	movs	r3, #0
 801167a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011680:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011682:	e156      	b.n	8011932 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	4b41      	ldr	r3, [pc, #260]	@ (8011790 <tcp_receive+0xd00>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	d11d      	bne.n	80116ce <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011692:	4b3e      	ldr	r3, [pc, #248]	@ (801178c <tcp_receive+0xcfc>)
 8011694:	891a      	ldrh	r2, [r3, #8]
 8011696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011698:	891b      	ldrh	r3, [r3, #8]
 801169a:	429a      	cmp	r2, r3
 801169c:	f240 814e 	bls.w	801193c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116a0:	483a      	ldr	r0, [pc, #232]	@ (801178c <tcp_receive+0xcfc>)
 80116a2:	f7fd fad3 	bl	800ec4c <tcp_seg_copy>
 80116a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f000 8148 	beq.w	8011940 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80116b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d003      	beq.n	80116be <tcp_receive+0xc2e>
                    prev->next = cseg;
 80116b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	e002      	b.n	80116c4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116c6:	6978      	ldr	r0, [r7, #20]
 80116c8:	f7ff f8de 	bl	8010888 <tcp_oos_insert_segment>
                }
                break;
 80116cc:	e138      	b.n	8011940 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d117      	bne.n	8011704 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116d4:	4b2e      	ldr	r3, [pc, #184]	@ (8011790 <tcp_receive+0xd00>)
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	da57      	bge.n	8011794 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116e4:	4829      	ldr	r0, [pc, #164]	@ (801178c <tcp_receive+0xcfc>)
 80116e6:	f7fd fab1 	bl	800ec4c <tcp_seg_copy>
 80116ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 8128 	beq.w	8011944 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	69ba      	ldr	r2, [r7, #24]
 80116f8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80116fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116fc:	69b8      	ldr	r0, [r7, #24]
 80116fe:	f7ff f8c3 	bl	8010888 <tcp_oos_insert_segment>
                  }
                  break;
 8011702:	e11f      	b.n	8011944 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011704:	4b22      	ldr	r3, [pc, #136]	@ (8011790 <tcp_receive+0xd00>)
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	3b01      	subs	r3, #1
 8011712:	2b00      	cmp	r3, #0
 8011714:	db3e      	blt.n	8011794 <tcp_receive+0xd04>
 8011716:	4b1e      	ldr	r3, [pc, #120]	@ (8011790 <tcp_receive+0xd00>)
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	3301      	adds	r3, #1
 8011724:	2b00      	cmp	r3, #0
 8011726:	dc35      	bgt.n	8011794 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011728:	4818      	ldr	r0, [pc, #96]	@ (801178c <tcp_receive+0xcfc>)
 801172a:	f7fd fa8f 	bl	800ec4c <tcp_seg_copy>
 801172e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	2b00      	cmp	r3, #0
 8011734:	f000 8108 	beq.w	8011948 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011740:	8912      	ldrh	r2, [r2, #8]
 8011742:	441a      	add	r2, r3
 8011744:	4b12      	ldr	r3, [pc, #72]	@ (8011790 <tcp_receive+0xd00>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	dd12      	ble.n	8011774 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801174e:	4b10      	ldr	r3, [pc, #64]	@ (8011790 <tcp_receive+0xd00>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	b29a      	uxth	r2, r3
 8011754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	b29b      	uxth	r3, r3
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	b29a      	uxth	r2, r3
 8011760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011762:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801176a:	891b      	ldrh	r3, [r3, #8]
 801176c:	4619      	mov	r1, r3
 801176e:	4610      	mov	r0, r2
 8011770:	f7fb faf0 	bl	800cd54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011776:	69fa      	ldr	r2, [r7, #28]
 8011778:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801177a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801177c:	69f8      	ldr	r0, [r7, #28]
 801177e:	f7ff f883 	bl	8010888 <tcp_oos_insert_segment>
                  }
                  break;
 8011782:	e0e1      	b.n	8011948 <tcp_receive+0xeb8>
 8011784:	20010fbc 	.word	0x20010fbc
 8011788:	20010fb9 	.word	0x20010fb9
 801178c:	20010f8c 	.word	0x20010f8c
 8011790:	20010fac 	.word	0x20010fac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f040 80c5 	bne.w	801192c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80117a2:	4b7f      	ldr	r3, [pc, #508]	@ (80119a0 <tcp_receive+0xf10>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	f340 80bc 	ble.w	801192c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	899b      	ldrh	r3, [r3, #12]
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fa f81b 	bl	800b7f8 <lwip_htons>
 80117c2:	4603      	mov	r3, r0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f040 80be 	bne.w	801194c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117d0:	4874      	ldr	r0, [pc, #464]	@ (80119a4 <tcp_receive+0xf14>)
 80117d2:	f7fd fa3b 	bl	800ec4c <tcp_seg_copy>
 80117d6:	4602      	mov	r2, r0
 80117d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80117dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 80b5 	beq.w	8011950 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80117e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117ee:	8912      	ldrh	r2, [r2, #8]
 80117f0:	441a      	add	r2, r3
 80117f2:	4b6b      	ldr	r3, [pc, #428]	@ (80119a0 <tcp_receive+0xf10>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dd12      	ble.n	8011822 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80117fc:	4b68      	ldr	r3, [pc, #416]	@ (80119a0 <tcp_receive+0xf10>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	b29a      	uxth	r2, r3
 8011802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	b29b      	uxth	r3, r3
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	b29a      	uxth	r2, r3
 801180e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011810:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011814:	685a      	ldr	r2, [r3, #4]
 8011816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011818:	891b      	ldrh	r3, [r3, #8]
 801181a:	4619      	mov	r1, r3
 801181c:	4610      	mov	r0, r2
 801181e:	f7fb fa99 	bl	800cd54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011822:	4b61      	ldr	r3, [pc, #388]	@ (80119a8 <tcp_receive+0xf18>)
 8011824:	881b      	ldrh	r3, [r3, #0]
 8011826:	461a      	mov	r2, r3
 8011828:	4b5d      	ldr	r3, [pc, #372]	@ (80119a0 <tcp_receive+0xf10>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	441a      	add	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011832:	6879      	ldr	r1, [r7, #4]
 8011834:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011836:	440b      	add	r3, r1
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	2b00      	cmp	r3, #0
 801183c:	f340 8088 	ble.w	8011950 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	899b      	ldrh	r3, [r3, #12]
 8011848:	b29b      	uxth	r3, r3
 801184a:	4618      	mov	r0, r3
 801184c:	f7f9 ffd4 	bl	800b7f8 <lwip_htons>
 8011850:	4603      	mov	r3, r0
 8011852:	b2db      	uxtb	r3, r3
 8011854:	f003 0301 	and.w	r3, r3, #1
 8011858:	2b00      	cmp	r3, #0
 801185a:	d021      	beq.n	80118a0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	899b      	ldrh	r3, [r3, #12]
 8011864:	b29b      	uxth	r3, r3
 8011866:	b21b      	sxth	r3, r3
 8011868:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801186c:	b21c      	sxth	r4, r3
 801186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	899b      	ldrh	r3, [r3, #12]
 8011876:	b29b      	uxth	r3, r3
 8011878:	4618      	mov	r0, r3
 801187a:	f7f9 ffbd 	bl	800b7f8 <lwip_htons>
 801187e:	4603      	mov	r3, r0
 8011880:	b2db      	uxtb	r3, r3
 8011882:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011886:	b29b      	uxth	r3, r3
 8011888:	4618      	mov	r0, r3
 801188a:	f7f9 ffb5 	bl	800b7f8 <lwip_htons>
 801188e:	4603      	mov	r3, r0
 8011890:	b21b      	sxth	r3, r3
 8011892:	4323      	orrs	r3, r4
 8011894:	b21a      	sxth	r2, r3
 8011896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	b292      	uxth	r2, r2
 801189e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118aa:	4413      	add	r3, r2
 80118ac:	b299      	uxth	r1, r3
 80118ae:	4b3c      	ldr	r3, [pc, #240]	@ (80119a0 <tcp_receive+0xf10>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	1a8a      	subs	r2, r1, r2
 80118ba:	b292      	uxth	r2, r2
 80118bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	685a      	ldr	r2, [r3, #4]
 80118c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	891b      	ldrh	r3, [r3, #8]
 80118ca:	4619      	mov	r1, r3
 80118cc:	4610      	mov	r0, r2
 80118ce:	f7fb fa41 	bl	800cd54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	891c      	ldrh	r4, [r3, #8]
 80118d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	899b      	ldrh	r3, [r3, #12]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7f9 ff88 	bl	800b7f8 <lwip_htons>
 80118e8:	4603      	mov	r3, r0
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	f003 0303 	and.w	r3, r3, #3
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <tcp_receive+0xe68>
 80118f4:	2301      	movs	r3, #1
 80118f6:	e000      	b.n	80118fa <tcp_receive+0xe6a>
 80118f8:	2300      	movs	r3, #0
 80118fa:	4423      	add	r3, r4
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	4b2a      	ldr	r3, [pc, #168]	@ (80119a8 <tcp_receive+0xf18>)
 8011900:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011902:	4b29      	ldr	r3, [pc, #164]	@ (80119a8 <tcp_receive+0xf18>)
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	461a      	mov	r2, r3
 8011908:	4b25      	ldr	r3, [pc, #148]	@ (80119a0 <tcp_receive+0xf10>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	441a      	add	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011912:	6879      	ldr	r1, [r7, #4]
 8011914:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011916:	440b      	add	r3, r1
 8011918:	429a      	cmp	r2, r3
 801191a:	d019      	beq.n	8011950 <tcp_receive+0xec0>
 801191c:	4b23      	ldr	r3, [pc, #140]	@ (80119ac <tcp_receive+0xf1c>)
 801191e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011922:	4923      	ldr	r1, [pc, #140]	@ (80119b0 <tcp_receive+0xf20>)
 8011924:	4823      	ldr	r0, [pc, #140]	@ (80119b4 <tcp_receive+0xf24>)
 8011926:	f007 fad5 	bl	8018ed4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801192a:	e011      	b.n	8011950 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011934:	2b00      	cmp	r3, #0
 8011936:	f47f aea5 	bne.w	8011684 <tcp_receive+0xbf4>
 801193a:	e00a      	b.n	8011952 <tcp_receive+0xec2>
                break;
 801193c:	bf00      	nop
 801193e:	e008      	b.n	8011952 <tcp_receive+0xec2>
                break;
 8011940:	bf00      	nop
 8011942:	e006      	b.n	8011952 <tcp_receive+0xec2>
                  break;
 8011944:	bf00      	nop
 8011946:	e004      	b.n	8011952 <tcp_receive+0xec2>
                  break;
 8011948:	bf00      	nop
 801194a:	e002      	b.n	8011952 <tcp_receive+0xec2>
                  break;
 801194c:	bf00      	nop
 801194e:	e000      	b.n	8011952 <tcp_receive+0xec2>
                break;
 8011950:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f001 fe88 	bl	8013668 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011958:	e003      	b.n	8011962 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f001 fe84 	bl	8013668 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011960:	e01a      	b.n	8011998 <tcp_receive+0xf08>
 8011962:	e019      	b.n	8011998 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011964:	4b0e      	ldr	r3, [pc, #56]	@ (80119a0 <tcp_receive+0xf10>)
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801196c:	1ad3      	subs	r3, r2, r3
 801196e:	2b00      	cmp	r3, #0
 8011970:	db0a      	blt.n	8011988 <tcp_receive+0xef8>
 8011972:	4b0b      	ldr	r3, [pc, #44]	@ (80119a0 <tcp_receive+0xf10>)
 8011974:	681a      	ldr	r2, [r3, #0]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801197a:	6879      	ldr	r1, [r7, #4]
 801197c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801197e:	440b      	add	r3, r1
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	3301      	adds	r3, #1
 8011984:	2b00      	cmp	r3, #0
 8011986:	dd07      	ble.n	8011998 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	8b5b      	ldrh	r3, [r3, #26]
 801198c:	f043 0302 	orr.w	r3, r3, #2
 8011990:	b29a      	uxth	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011996:	e7ff      	b.n	8011998 <tcp_receive+0xf08>
 8011998:	bf00      	nop
 801199a:	3750      	adds	r7, #80	@ 0x50
 801199c:	46bd      	mov	sp, r7
 801199e:	bdb0      	pop	{r4, r5, r7, pc}
 80119a0:	20010fac 	.word	0x20010fac
 80119a4:	20010f8c 	.word	0x20010f8c
 80119a8:	20010fb6 	.word	0x20010fb6
 80119ac:	0801c3b0 	.word	0x0801c3b0
 80119b0:	0801c758 	.word	0x0801c758
 80119b4:	0801c3fc 	.word	0x0801c3fc

080119b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119be:	4b15      	ldr	r3, [pc, #84]	@ (8011a14 <tcp_get_next_optbyte+0x5c>)
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	1c5a      	adds	r2, r3, #1
 80119c4:	b291      	uxth	r1, r2
 80119c6:	4a13      	ldr	r2, [pc, #76]	@ (8011a14 <tcp_get_next_optbyte+0x5c>)
 80119c8:	8011      	strh	r1, [r2, #0]
 80119ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119cc:	4b12      	ldr	r3, [pc, #72]	@ (8011a18 <tcp_get_next_optbyte+0x60>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d004      	beq.n	80119de <tcp_get_next_optbyte+0x26>
 80119d4:	4b11      	ldr	r3, [pc, #68]	@ (8011a1c <tcp_get_next_optbyte+0x64>)
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	88fa      	ldrh	r2, [r7, #6]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d208      	bcs.n	80119f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119de:	4b10      	ldr	r3, [pc, #64]	@ (8011a20 <tcp_get_next_optbyte+0x68>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	3314      	adds	r3, #20
 80119e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80119e6:	88fb      	ldrh	r3, [r7, #6]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	4413      	add	r3, r2
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	e00b      	b.n	8011a08 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	b2da      	uxtb	r2, r3
 80119f4:	4b09      	ldr	r3, [pc, #36]	@ (8011a1c <tcp_get_next_optbyte+0x64>)
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80119fe:	4b06      	ldr	r3, [pc, #24]	@ (8011a18 <tcp_get_next_optbyte+0x60>)
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	797b      	ldrb	r3, [r7, #5]
 8011a04:	4413      	add	r3, r2
 8011a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	20010fa8 	.word	0x20010fa8
 8011a18:	20010fa4 	.word	0x20010fa4
 8011a1c:	20010fa2 	.word	0x20010fa2
 8011a20:	20010f9c 	.word	0x20010f9c

08011a24 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d106      	bne.n	8011a40 <tcp_parseopt+0x1c>
 8011a32:	4b32      	ldr	r3, [pc, #200]	@ (8011afc <tcp_parseopt+0xd8>)
 8011a34:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011a38:	4931      	ldr	r1, [pc, #196]	@ (8011b00 <tcp_parseopt+0xdc>)
 8011a3a:	4832      	ldr	r0, [pc, #200]	@ (8011b04 <tcp_parseopt+0xe0>)
 8011a3c:	f007 fa4a 	bl	8018ed4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a40:	4b31      	ldr	r3, [pc, #196]	@ (8011b08 <tcp_parseopt+0xe4>)
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d056      	beq.n	8011af6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a48:	4b30      	ldr	r3, [pc, #192]	@ (8011b0c <tcp_parseopt+0xe8>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	801a      	strh	r2, [r3, #0]
 8011a4e:	e046      	b.n	8011ade <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011a50:	f7ff ffb2 	bl	80119b8 <tcp_get_next_optbyte>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
 8011a5a:	2b02      	cmp	r3, #2
 8011a5c:	d006      	beq.n	8011a6c <tcp_parseopt+0x48>
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	dc2a      	bgt.n	8011ab8 <tcp_parseopt+0x94>
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d042      	beq.n	8011aec <tcp_parseopt+0xc8>
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d038      	beq.n	8011adc <tcp_parseopt+0xb8>
 8011a6a:	e025      	b.n	8011ab8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a6c:	f7ff ffa4 	bl	80119b8 <tcp_get_next_optbyte>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d13c      	bne.n	8011af0 <tcp_parseopt+0xcc>
 8011a76:	4b25      	ldr	r3, [pc, #148]	@ (8011b0c <tcp_parseopt+0xe8>)
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	4a22      	ldr	r2, [pc, #136]	@ (8011b08 <tcp_parseopt+0xe4>)
 8011a7e:	8812      	ldrh	r2, [r2, #0]
 8011a80:	4293      	cmp	r3, r2
 8011a82:	da35      	bge.n	8011af0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011a84:	f7ff ff98 	bl	80119b8 <tcp_get_next_optbyte>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	021b      	lsls	r3, r3, #8
 8011a8c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011a8e:	f7ff ff93 	bl	80119b8 <tcp_get_next_optbyte>
 8011a92:	4603      	mov	r3, r0
 8011a94:	461a      	mov	r2, r3
 8011a96:	89bb      	ldrh	r3, [r7, #12]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a9c:	89bb      	ldrh	r3, [r7, #12]
 8011a9e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011aa2:	d804      	bhi.n	8011aae <tcp_parseopt+0x8a>
 8011aa4:	89bb      	ldrh	r3, [r7, #12]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <tcp_parseopt+0x8a>
 8011aaa:	89ba      	ldrh	r2, [r7, #12]
 8011aac:	e001      	b.n	8011ab2 <tcp_parseopt+0x8e>
 8011aae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011ab6:	e012      	b.n	8011ade <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ab8:	f7ff ff7e 	bl	80119b8 <tcp_get_next_optbyte>
 8011abc:	4603      	mov	r3, r0
 8011abe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ac0:	7afb      	ldrb	r3, [r7, #11]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d916      	bls.n	8011af4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ac6:	7afb      	ldrb	r3, [r7, #11]
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	4b10      	ldr	r3, [pc, #64]	@ (8011b0c <tcp_parseopt+0xe8>)
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	4413      	add	r3, r2
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	3b02      	subs	r3, #2
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8011b0c <tcp_parseopt+0xe8>)
 8011ad8:	801a      	strh	r2, [r3, #0]
 8011ada:	e000      	b.n	8011ade <tcp_parseopt+0xba>
          break;
 8011adc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011ade:	4b0b      	ldr	r3, [pc, #44]	@ (8011b0c <tcp_parseopt+0xe8>)
 8011ae0:	881a      	ldrh	r2, [r3, #0]
 8011ae2:	4b09      	ldr	r3, [pc, #36]	@ (8011b08 <tcp_parseopt+0xe4>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d3b2      	bcc.n	8011a50 <tcp_parseopt+0x2c>
 8011aea:	e004      	b.n	8011af6 <tcp_parseopt+0xd2>
          return;
 8011aec:	bf00      	nop
 8011aee:	e002      	b.n	8011af6 <tcp_parseopt+0xd2>
            return;
 8011af0:	bf00      	nop
 8011af2:	e000      	b.n	8011af6 <tcp_parseopt+0xd2>
            return;
 8011af4:	bf00      	nop
      }
    }
  }
}
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	0801c3b0 	.word	0x0801c3b0
 8011b00:	0801c814 	.word	0x0801c814
 8011b04:	0801c3fc 	.word	0x0801c3fc
 8011b08:	20010fa0 	.word	0x20010fa0
 8011b0c:	20010fa8 	.word	0x20010fa8

08011b10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b10:	b480      	push	{r7}
 8011b12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b14:	4b05      	ldr	r3, [pc, #20]	@ (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f043 0310 	orr.w	r3, r3, #16
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	4b03      	ldr	r3, [pc, #12]	@ (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b20:	701a      	strb	r2, [r3, #0]
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	20010fb9 	.word	0x20010fb9

08011b30 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <tcp_route+0x28>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	7a1b      	ldrb	r3, [r3, #8]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d006      	beq.n	8011b58 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	7a1b      	ldrb	r3, [r3, #8]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fa fef8 	bl	800c944 <netif_get_by_index>
 8011b54:	4603      	mov	r3, r0
 8011b56:	e003      	b.n	8011b60 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f005 fca1 	bl	80174a0 <ip4_route>
 8011b5e:	4603      	mov	r3, r0
  }
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	603b      	str	r3, [r7, #0]
 8011b74:	4613      	mov	r3, r2
 8011b76:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d105      	bne.n	8011b8a <tcp_create_segment+0x22>
 8011b7e:	4b43      	ldr	r3, [pc, #268]	@ (8011c8c <tcp_create_segment+0x124>)
 8011b80:	22a3      	movs	r2, #163	@ 0xa3
 8011b82:	4943      	ldr	r1, [pc, #268]	@ (8011c90 <tcp_create_segment+0x128>)
 8011b84:	4843      	ldr	r0, [pc, #268]	@ (8011c94 <tcp_create_segment+0x12c>)
 8011b86:	f007 f9a5 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <tcp_create_segment+0x34>
 8011b90:	4b3e      	ldr	r3, [pc, #248]	@ (8011c8c <tcp_create_segment+0x124>)
 8011b92:	22a4      	movs	r2, #164	@ 0xa4
 8011b94:	4940      	ldr	r1, [pc, #256]	@ (8011c98 <tcp_create_segment+0x130>)
 8011b96:	483f      	ldr	r0, [pc, #252]	@ (8011c94 <tcp_create_segment+0x12c>)
 8011b98:	f007 f99c 	bl	8018ed4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011baa:	2003      	movs	r0, #3
 8011bac:	f7fa fb32 	bl	800c214 <memp_malloc>
 8011bb0:	6138      	str	r0, [r7, #16]
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d104      	bne.n	8011bc2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bb8:	68b8      	ldr	r0, [r7, #8]
 8011bba:	f7fb fa51 	bl	800d060 <pbuf_free>
    return NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e060      	b.n	8011c84 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011bc8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	891a      	ldrh	r2, [r3, #8]
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d205      	bcs.n	8011bee <tcp_create_segment+0x86>
 8011be2:	4b2a      	ldr	r3, [pc, #168]	@ (8011c8c <tcp_create_segment+0x124>)
 8011be4:	22b0      	movs	r2, #176	@ 0xb0
 8011be6:	492d      	ldr	r1, [pc, #180]	@ (8011c9c <tcp_create_segment+0x134>)
 8011be8:	482a      	ldr	r0, [pc, #168]	@ (8011c94 <tcp_create_segment+0x12c>)
 8011bea:	f007 f973 	bl	8018ed4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	891a      	ldrh	r2, [r3, #8]
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011bfe:	2114      	movs	r1, #20
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f7fb f997 	bl	800cf34 <pbuf_add_header>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c0c:	6938      	ldr	r0, [r7, #16]
 8011c0e:	f7fc ffe6 	bl	800ebde <tcp_seg_free>
    return NULL;
 8011c12:	2300      	movs	r3, #0
 8011c14:	e036      	b.n	8011c84 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	685a      	ldr	r2, [r3, #4]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	8ada      	ldrh	r2, [r3, #22]
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	68dc      	ldr	r4, [r3, #12]
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7f9 fde5 	bl	800b7f8 <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	8b1a      	ldrh	r2, [r3, #24]
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	68dc      	ldr	r4, [r3, #12]
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	f7f9 fddc 	bl	800b7f8 <lwip_htons>
 8011c40:	4603      	mov	r3, r0
 8011c42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	68dc      	ldr	r4, [r3, #12]
 8011c48:	6838      	ldr	r0, [r7, #0]
 8011c4a:	f7f9 fdea 	bl	800b822 <lwip_htonl>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	089b      	lsrs	r3, r3, #2
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	3305      	adds	r3, #5
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	031b      	lsls	r3, r3, #12
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	79fb      	ldrb	r3, [r7, #7]
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	4313      	orrs	r3, r2
 8011c66:	b29a      	uxth	r2, r3
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	68dc      	ldr	r4, [r3, #12]
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	f7f9 fdc3 	bl	800b7f8 <lwip_htons>
 8011c72:	4603      	mov	r3, r0
 8011c74:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	749a      	strb	r2, [r3, #18]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c82:	693b      	ldr	r3, [r7, #16]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	371c      	adds	r7, #28
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd90      	pop	{r4, r7, pc}
 8011c8c:	0801c830 	.word	0x0801c830
 8011c90:	0801c864 	.word	0x0801c864
 8011c94:	0801c884 	.word	0x0801c884
 8011c98:	0801c8ac 	.word	0x0801c8ac
 8011c9c:	0801c8d0 	.word	0x0801c8d0

08011ca0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	607b      	str	r3, [r7, #4]
 8011ca8:	4603      	mov	r3, r0
 8011caa:	73fb      	strb	r3, [r7, #15]
 8011cac:	460b      	mov	r3, r1
 8011cae:	81bb      	strh	r3, [r7, #12]
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011cb4:	89bb      	ldrh	r3, [r7, #12]
 8011cb6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d105      	bne.n	8011cca <tcp_pbuf_prealloc+0x2a>
 8011cbe:	4b30      	ldr	r3, [pc, #192]	@ (8011d80 <tcp_pbuf_prealloc+0xe0>)
 8011cc0:	22e8      	movs	r2, #232	@ 0xe8
 8011cc2:	4930      	ldr	r1, [pc, #192]	@ (8011d84 <tcp_pbuf_prealloc+0xe4>)
 8011cc4:	4830      	ldr	r0, [pc, #192]	@ (8011d88 <tcp_pbuf_prealloc+0xe8>)
 8011cc6:	f007 f905 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011cca:	6a3b      	ldr	r3, [r7, #32]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d105      	bne.n	8011cdc <tcp_pbuf_prealloc+0x3c>
 8011cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8011d80 <tcp_pbuf_prealloc+0xe0>)
 8011cd2:	22e9      	movs	r2, #233	@ 0xe9
 8011cd4:	492d      	ldr	r1, [pc, #180]	@ (8011d8c <tcp_pbuf_prealloc+0xec>)
 8011cd6:	482c      	ldr	r0, [pc, #176]	@ (8011d88 <tcp_pbuf_prealloc+0xe8>)
 8011cd8:	f007 f8fc 	bl	8018ed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011cdc:	89ba      	ldrh	r2, [r7, #12]
 8011cde:	897b      	ldrh	r3, [r7, #10]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d221      	bcs.n	8011d28 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011ce8:	f003 0302 	and.w	r3, r3, #2
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d111      	bne.n	8011d14 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	8b5b      	ldrh	r3, [r3, #26]
 8011cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d115      	bne.n	8011d28 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011cfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d007      	beq.n	8011d14 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d103      	bne.n	8011d14 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d0c:	6a3b      	ldr	r3, [r7, #32]
 8011d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d009      	beq.n	8011d28 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d14:	89bb      	ldrh	r3, [r7, #12]
 8011d16:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8011d1a:	f023 0203 	bic.w	r2, r3, #3
 8011d1e:	897b      	ldrh	r3, [r7, #10]
 8011d20:	4293      	cmp	r3, r2
 8011d22:	bf28      	it	cs
 8011d24:	4613      	movcs	r3, r2
 8011d26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d28:	8af9      	ldrh	r1, [r7, #22]
 8011d2a:	7bfb      	ldrb	r3, [r7, #15]
 8011d2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fa feb1 	bl	800ca98 <pbuf_alloc>
 8011d36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d101      	bne.n	8011d42 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e019      	b.n	8011d76 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d006      	beq.n	8011d58 <tcp_pbuf_prealloc+0xb8>
 8011d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d80 <tcp_pbuf_prealloc+0xe0>)
 8011d4c:	f240 120b 	movw	r2, #267	@ 0x10b
 8011d50:	490f      	ldr	r1, [pc, #60]	@ (8011d90 <tcp_pbuf_prealloc+0xf0>)
 8011d52:	480d      	ldr	r0, [pc, #52]	@ (8011d88 <tcp_pbuf_prealloc+0xe8>)
 8011d54:	f007 f8be 	bl	8018ed4 <iprintf>
  *oversize = p->len - length;
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	895a      	ldrh	r2, [r3, #10]
 8011d5c:	89bb      	ldrh	r3, [r7, #12]
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	89ba      	ldrh	r2, [r7, #12]
 8011d6a:	811a      	strh	r2, [r3, #8]
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	891a      	ldrh	r2, [r3, #8]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	815a      	strh	r2, [r3, #10]
  return p;
 8011d74:	693b      	ldr	r3, [r7, #16]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3718      	adds	r7, #24
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	0801c830 	.word	0x0801c830
 8011d84:	0801c8e8 	.word	0x0801c8e8
 8011d88:	0801c884 	.word	0x0801c884
 8011d8c:	0801c90c 	.word	0x0801c90c
 8011d90:	0801c92c 	.word	0x0801c92c

08011d94 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d106      	bne.n	8011db4 <tcp_write_checks+0x20>
 8011da6:	4b33      	ldr	r3, [pc, #204]	@ (8011e74 <tcp_write_checks+0xe0>)
 8011da8:	f240 1233 	movw	r2, #307	@ 0x133
 8011dac:	4932      	ldr	r1, [pc, #200]	@ (8011e78 <tcp_write_checks+0xe4>)
 8011dae:	4833      	ldr	r0, [pc, #204]	@ (8011e7c <tcp_write_checks+0xe8>)
 8011db0:	f007 f890 	bl	8018ed4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	7d1b      	ldrb	r3, [r3, #20]
 8011db8:	2b04      	cmp	r3, #4
 8011dba:	d00e      	beq.n	8011dda <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011dc0:	2b07      	cmp	r3, #7
 8011dc2:	d00a      	beq.n	8011dda <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d006      	beq.n	8011dda <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d002      	beq.n	8011dda <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011dd4:	f06f 030a 	mvn.w	r3, #10
 8011dd8:	e048      	b.n	8011e6c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011dda:	887b      	ldrh	r3, [r7, #2]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d101      	bne.n	8011de4 <tcp_write_checks+0x50>
    return ERR_OK;
 8011de0:	2300      	movs	r3, #0
 8011de2:	e043      	b.n	8011e6c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011dea:	887a      	ldrh	r2, [r7, #2]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d909      	bls.n	8011e04 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	8b5b      	ldrh	r3, [r3, #26]
 8011df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8011e02:	e033      	b.n	8011e6c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e0a:	2b08      	cmp	r3, #8
 8011e0c:	d909      	bls.n	8011e22 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	8b5b      	ldrh	r3, [r3, #26]
 8011e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e20:	e024      	b.n	8011e6c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00f      	beq.n	8011e4c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d11a      	bne.n	8011e6a <tcp_write_checks+0xd6>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d116      	bne.n	8011e6a <tcp_write_checks+0xd6>
 8011e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8011e74 <tcp_write_checks+0xe0>)
 8011e3e:	f240 1255 	movw	r2, #341	@ 0x155
 8011e42:	490f      	ldr	r1, [pc, #60]	@ (8011e80 <tcp_write_checks+0xec>)
 8011e44:	480d      	ldr	r0, [pc, #52]	@ (8011e7c <tcp_write_checks+0xe8>)
 8011e46:	f007 f845 	bl	8018ed4 <iprintf>
 8011e4a:	e00e      	b.n	8011e6a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d103      	bne.n	8011e5c <tcp_write_checks+0xc8>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d006      	beq.n	8011e6a <tcp_write_checks+0xd6>
 8011e5c:	4b05      	ldr	r3, [pc, #20]	@ (8011e74 <tcp_write_checks+0xe0>)
 8011e5e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011e62:	4908      	ldr	r1, [pc, #32]	@ (8011e84 <tcp_write_checks+0xf0>)
 8011e64:	4805      	ldr	r0, [pc, #20]	@ (8011e7c <tcp_write_checks+0xe8>)
 8011e66:	f007 f835 	bl	8018ed4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	0801c830 	.word	0x0801c830
 8011e78:	0801c940 	.word	0x0801c940
 8011e7c:	0801c884 	.word	0x0801c884
 8011e80:	0801c960 	.word	0x0801c960
 8011e84:	0801c99c 	.word	0x0801c99c

08011e88 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011e88:	b590      	push	{r4, r7, lr}
 8011e8a:	b09b      	sub	sp, #108	@ 0x6c
 8011e8c:	af04      	add	r7, sp, #16
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	4611      	mov	r1, r2
 8011e94:	461a      	mov	r2, r3
 8011e96:	460b      	mov	r3, r1
 8011e98:	80fb      	strh	r3, [r7, #6]
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011eaa:	2300      	movs	r3, #0
 8011eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011eae:	2300      	movs	r3, #0
 8011eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d109      	bne.n	8011ee4 <tcp_write+0x5c>
 8011ed0:	4ba4      	ldr	r3, [pc, #656]	@ (8012164 <tcp_write+0x2dc>)
 8011ed2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011ed6:	49a4      	ldr	r1, [pc, #656]	@ (8012168 <tcp_write+0x2e0>)
 8011ed8:	48a4      	ldr	r0, [pc, #656]	@ (801216c <tcp_write+0x2e4>)
 8011eda:	f006 fffb 	bl	8018ed4 <iprintf>
 8011ede:	f06f 030f 	mvn.w	r3, #15
 8011ee2:	e32a      	b.n	801253a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011eea:	085b      	lsrs	r3, r3, #1
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	bf28      	it	cs
 8011ef6:	4613      	movcs	r3, r2
 8011ef8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011efa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d102      	bne.n	8011f06 <tcp_write+0x7e>
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f04:	e000      	b.n	8011f08 <tcp_write+0x80>
 8011f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d109      	bne.n	8011f24 <tcp_write+0x9c>
 8011f10:	4b94      	ldr	r3, [pc, #592]	@ (8012164 <tcp_write+0x2dc>)
 8011f12:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8011f16:	4996      	ldr	r1, [pc, #600]	@ (8012170 <tcp_write+0x2e8>)
 8011f18:	4894      	ldr	r0, [pc, #592]	@ (801216c <tcp_write+0x2e4>)
 8011f1a:	f006 ffdb 	bl	8018ed4 <iprintf>
 8011f1e:	f06f 030f 	mvn.w	r3, #15
 8011f22:	e30a      	b.n	801253a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f24:	88fb      	ldrh	r3, [r7, #6]
 8011f26:	4619      	mov	r1, r3
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f7ff ff33 	bl	8011d94 <tcp_write_checks>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011f34:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d002      	beq.n	8011f42 <tcp_write+0xba>
    return err;
 8011f3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011f40:	e2fb      	b.n	801253a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f48:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f000 80f6 	beq.w	8012148 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f62:	e002      	b.n	8011f6a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1f8      	bne.n	8011f64 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f74:	7a9b      	ldrb	r3, [r3, #10]
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	f003 0304 	and.w	r3, r3, #4
 8011f7e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011f80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f84:	891b      	ldrh	r3, [r3, #8]
 8011f86:	4619      	mov	r1, r3
 8011f88:	8c3b      	ldrh	r3, [r7, #32]
 8011f8a:	440b      	add	r3, r1
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	da06      	bge.n	8011f9e <tcp_write+0x116>
 8011f90:	4b74      	ldr	r3, [pc, #464]	@ (8012164 <tcp_write+0x2dc>)
 8011f92:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011f96:	4977      	ldr	r1, [pc, #476]	@ (8012174 <tcp_write+0x2ec>)
 8011f98:	4874      	ldr	r0, [pc, #464]	@ (801216c <tcp_write+0x2e4>)
 8011f9a:	f006 ff9b 	bl	8018ed4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fa0:	891a      	ldrh	r2, [r3, #8]
 8011fa2:	8c3b      	ldrh	r3, [r7, #32]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011faa:	1ad3      	subs	r3, r2, r3
 8011fac:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011fb4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011fb6:	8a7b      	ldrh	r3, [r7, #18]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d026      	beq.n	801200a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011fbc:	8a7b      	ldrh	r3, [r7, #18]
 8011fbe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d206      	bcs.n	8011fd2 <tcp_write+0x14a>
 8011fc4:	4b67      	ldr	r3, [pc, #412]	@ (8012164 <tcp_write+0x2dc>)
 8011fc6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011fca:	496b      	ldr	r1, [pc, #428]	@ (8012178 <tcp_write+0x2f0>)
 8011fcc:	4867      	ldr	r0, [pc, #412]	@ (801216c <tcp_write+0x2e4>)
 8011fce:	f006 ff81 	bl	8018ed4 <iprintf>
      seg = last_unsent;
 8011fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011fd6:	8a7b      	ldrh	r3, [r7, #18]
 8011fd8:	88fa      	ldrh	r2, [r7, #6]
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	bf28      	it	cs
 8011fde:	4613      	movcs	r3, r2
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	bf28      	it	cs
 8011fe8:	4613      	movcs	r3, r2
 8011fea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011fec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ff0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ff2:	4413      	add	r3, r2
 8011ff4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011ff8:	8a7a      	ldrh	r2, [r7, #18]
 8011ffa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ffc:	1ad3      	subs	r3, r2, r3
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012002:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012004:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801200a:	8a7b      	ldrh	r3, [r7, #18]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00b      	beq.n	8012028 <tcp_write+0x1a0>
 8012010:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012014:	88fb      	ldrh	r3, [r7, #6]
 8012016:	429a      	cmp	r2, r3
 8012018:	d006      	beq.n	8012028 <tcp_write+0x1a0>
 801201a:	4b52      	ldr	r3, [pc, #328]	@ (8012164 <tcp_write+0x2dc>)
 801201c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012020:	4956      	ldr	r1, [pc, #344]	@ (801217c <tcp_write+0x2f4>)
 8012022:	4852      	ldr	r0, [pc, #328]	@ (801216c <tcp_write+0x2e4>)
 8012024:	f006 ff56 	bl	8018ed4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012028:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801202c:	88fb      	ldrh	r3, [r7, #6]
 801202e:	429a      	cmp	r2, r3
 8012030:	f080 8167 	bcs.w	8012302 <tcp_write+0x47a>
 8012034:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 8163 	beq.w	8012302 <tcp_write+0x47a>
 801203c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801203e:	891b      	ldrh	r3, [r3, #8]
 8012040:	2b00      	cmp	r3, #0
 8012042:	f000 815e 	beq.w	8012302 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012046:	88fa      	ldrh	r2, [r7, #6]
 8012048:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801204c:	1ad2      	subs	r2, r2, r3
 801204e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012050:	4293      	cmp	r3, r2
 8012052:	bfa8      	it	ge
 8012054:	4613      	movge	r3, r2
 8012056:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801205a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801205c:	797b      	ldrb	r3, [r7, #5]
 801205e:	f003 0301 	and.w	r3, r3, #1
 8012062:	2b00      	cmp	r3, #0
 8012064:	d027      	beq.n	80120b6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012066:	f107 0012 	add.w	r0, r7, #18
 801206a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801206c:	8bf9      	ldrh	r1, [r7, #30]
 801206e:	2301      	movs	r3, #1
 8012070:	9302      	str	r3, [sp, #8]
 8012072:	797b      	ldrb	r3, [r7, #5]
 8012074:	9301      	str	r3, [sp, #4]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	4603      	mov	r3, r0
 801207c:	2000      	movs	r0, #0
 801207e:	f7ff fe0f 	bl	8011ca0 <tcp_pbuf_prealloc>
 8012082:	6578      	str	r0, [r7, #84]	@ 0x54
 8012084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012086:	2b00      	cmp	r3, #0
 8012088:	f000 8225 	beq.w	80124d6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801208e:	6858      	ldr	r0, [r3, #4]
 8012090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012094:	68ba      	ldr	r2, [r7, #8]
 8012096:	4413      	add	r3, r2
 8012098:	8bfa      	ldrh	r2, [r7, #30]
 801209a:	4619      	mov	r1, r3
 801209c:	f007 f91b 	bl	80192d6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120a0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80120a2:	f7fb f86b 	bl	800d17c <pbuf_clen>
 80120a6:	4603      	mov	r3, r0
 80120a8:	461a      	mov	r2, r3
 80120aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80120ae:	4413      	add	r3, r2
 80120b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80120b4:	e041      	b.n	801213a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80120b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80120bc:	e002      	b.n	80120c4 <tcp_write+0x23c>
 80120be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80120c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1f8      	bne.n	80120be <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120ce:	7b1b      	ldrb	r3, [r3, #12]
 80120d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d115      	bne.n	8012104 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80120d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120de:	8952      	ldrh	r2, [r2, #10]
 80120e0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d10d      	bne.n	8012104 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80120e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d006      	beq.n	80120fe <tcp_write+0x276>
 80120f0:	4b1c      	ldr	r3, [pc, #112]	@ (8012164 <tcp_write+0x2dc>)
 80120f2:	f240 2231 	movw	r2, #561	@ 0x231
 80120f6:	4922      	ldr	r1, [pc, #136]	@ (8012180 <tcp_write+0x2f8>)
 80120f8:	481c      	ldr	r0, [pc, #112]	@ (801216c <tcp_write+0x2e4>)
 80120fa:	f006 feeb 	bl	8018ed4 <iprintf>
          extendlen = seglen;
 80120fe:	8bfb      	ldrh	r3, [r7, #30]
 8012100:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8012102:	e01a      	b.n	801213a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012104:	8bfb      	ldrh	r3, [r7, #30]
 8012106:	2201      	movs	r2, #1
 8012108:	4619      	mov	r1, r3
 801210a:	2000      	movs	r0, #0
 801210c:	f7fa fcc4 	bl	800ca98 <pbuf_alloc>
 8012110:	6578      	str	r0, [r7, #84]	@ 0x54
 8012112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 81e0 	beq.w	80124da <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801211a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801211e:	68ba      	ldr	r2, [r7, #8]
 8012120:	441a      	add	r2, r3
 8012122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012124:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012126:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012128:	f7fb f828 	bl	800d17c <pbuf_clen>
 801212c:	4603      	mov	r3, r0
 801212e:	461a      	mov	r2, r3
 8012130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012134:	4413      	add	r3, r2
 8012136:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801213a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801213e:	8bfb      	ldrh	r3, [r7, #30]
 8012140:	4413      	add	r3, r2
 8012142:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012146:	e0dc      	b.n	8012302 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801214e:	2b00      	cmp	r3, #0
 8012150:	f000 80d7 	beq.w	8012302 <tcp_write+0x47a>
 8012154:	4b03      	ldr	r3, [pc, #12]	@ (8012164 <tcp_write+0x2dc>)
 8012156:	f240 224a 	movw	r2, #586	@ 0x24a
 801215a:	490a      	ldr	r1, [pc, #40]	@ (8012184 <tcp_write+0x2fc>)
 801215c:	4803      	ldr	r0, [pc, #12]	@ (801216c <tcp_write+0x2e4>)
 801215e:	f006 feb9 	bl	8018ed4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012162:	e0ce      	b.n	8012302 <tcp_write+0x47a>
 8012164:	0801c830 	.word	0x0801c830
 8012168:	0801c9d0 	.word	0x0801c9d0
 801216c:	0801c884 	.word	0x0801c884
 8012170:	0801c9e8 	.word	0x0801c9e8
 8012174:	0801ca1c 	.word	0x0801ca1c
 8012178:	0801ca34 	.word	0x0801ca34
 801217c:	0801ca54 	.word	0x0801ca54
 8012180:	0801ca74 	.word	0x0801ca74
 8012184:	0801caa0 	.word	0x0801caa0
    struct pbuf *p;
    u16_t left = len - pos;
 8012188:	88fa      	ldrh	r2, [r7, #6]
 801218a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801218e:	1ad3      	subs	r3, r2, r3
 8012190:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012192:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012196:	b29b      	uxth	r3, r3
 8012198:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801219e:	8b7a      	ldrh	r2, [r7, #26]
 80121a0:	8bbb      	ldrh	r3, [r7, #28]
 80121a2:	4293      	cmp	r3, r2
 80121a4:	bf28      	it	cs
 80121a6:	4613      	movcs	r3, r2
 80121a8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121aa:	797b      	ldrb	r3, [r7, #5]
 80121ac:	f003 0301 	and.w	r3, r3, #1
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d036      	beq.n	8012222 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80121b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	8b3b      	ldrh	r3, [r7, #24]
 80121bc:	4413      	add	r3, r2
 80121be:	b299      	uxth	r1, r3
 80121c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	bf0c      	ite	eq
 80121c6:	2301      	moveq	r3, #1
 80121c8:	2300      	movne	r3, #0
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	f107 0012 	add.w	r0, r7, #18
 80121d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80121d2:	9302      	str	r3, [sp, #8]
 80121d4:	797b      	ldrb	r3, [r7, #5]
 80121d6:	9301      	str	r3, [sp, #4]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	4603      	mov	r3, r0
 80121de:	2036      	movs	r0, #54	@ 0x36
 80121e0:	f7ff fd5e 	bl	8011ca0 <tcp_pbuf_prealloc>
 80121e4:	6338      	str	r0, [r7, #48]	@ 0x30
 80121e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f000 8178 	beq.w	80124de <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80121ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f0:	895b      	ldrh	r3, [r3, #10]
 80121f2:	8b3a      	ldrh	r2, [r7, #24]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d906      	bls.n	8012206 <tcp_write+0x37e>
 80121f8:	4b8c      	ldr	r3, [pc, #560]	@ (801242c <tcp_write+0x5a4>)
 80121fa:	f240 2266 	movw	r2, #614	@ 0x266
 80121fe:	498c      	ldr	r1, [pc, #560]	@ (8012430 <tcp_write+0x5a8>)
 8012200:	488c      	ldr	r0, [pc, #560]	@ (8012434 <tcp_write+0x5ac>)
 8012202:	f006 fe67 	bl	8018ed4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012208:	685a      	ldr	r2, [r3, #4]
 801220a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801220e:	18d0      	adds	r0, r2, r3
 8012210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	4413      	add	r3, r2
 8012218:	8b3a      	ldrh	r2, [r7, #24]
 801221a:	4619      	mov	r1, r3
 801221c:	f007 f85b 	bl	80192d6 <memcpy>
 8012220:	e02f      	b.n	8012282 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012222:	8a7b      	ldrh	r3, [r7, #18]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d006      	beq.n	8012236 <tcp_write+0x3ae>
 8012228:	4b80      	ldr	r3, [pc, #512]	@ (801242c <tcp_write+0x5a4>)
 801222a:	f240 2271 	movw	r2, #625	@ 0x271
 801222e:	4982      	ldr	r1, [pc, #520]	@ (8012438 <tcp_write+0x5b0>)
 8012230:	4880      	ldr	r0, [pc, #512]	@ (8012434 <tcp_write+0x5ac>)
 8012232:	f006 fe4f 	bl	8018ed4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012236:	8b3b      	ldrh	r3, [r7, #24]
 8012238:	2201      	movs	r2, #1
 801223a:	4619      	mov	r1, r3
 801223c:	2036      	movs	r0, #54	@ 0x36
 801223e:	f7fa fc2b 	bl	800ca98 <pbuf_alloc>
 8012242:	6178      	str	r0, [r7, #20]
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f000 814b 	beq.w	80124e2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801224c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012250:	68ba      	ldr	r2, [r7, #8]
 8012252:	441a      	add	r2, r3
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012258:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801225c:	b29b      	uxth	r3, r3
 801225e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012262:	4619      	mov	r1, r3
 8012264:	2036      	movs	r0, #54	@ 0x36
 8012266:	f7fa fc17 	bl	800ca98 <pbuf_alloc>
 801226a:	6338      	str	r0, [r7, #48]	@ 0x30
 801226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226e:	2b00      	cmp	r3, #0
 8012270:	d103      	bne.n	801227a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012272:	6978      	ldr	r0, [r7, #20]
 8012274:	f7fa fef4 	bl	800d060 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012278:	e136      	b.n	80124e8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801227a:	6979      	ldr	r1, [r7, #20]
 801227c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801227e:	f7fa ffbd 	bl	800d1fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012282:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012284:	f7fa ff7a 	bl	800d17c <pbuf_clen>
 8012288:	4603      	mov	r3, r0
 801228a:	461a      	mov	r2, r3
 801228c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012290:	4413      	add	r3, r2
 8012292:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801229a:	2b09      	cmp	r3, #9
 801229c:	d903      	bls.n	80122a6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801229e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80122a0:	f7fa fede 	bl	800d060 <pbuf_free>
      goto memerr;
 80122a4:	e120      	b.n	80124e8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80122aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80122ae:	441a      	add	r2, r3
 80122b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	4613      	mov	r3, r2
 80122b8:	2200      	movs	r2, #0
 80122ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f7ff fc53 	bl	8011b68 <tcp_create_segment>
 80122c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80122c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f000 810d 	beq.w	80124e6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80122cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d102      	bne.n	80122d8 <tcp_write+0x450>
      queue = seg;
 80122d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80122d6:	e00c      	b.n	80122f2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80122d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <tcp_write+0x464>
 80122de:	4b53      	ldr	r3, [pc, #332]	@ (801242c <tcp_write+0x5a4>)
 80122e0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80122e4:	4955      	ldr	r1, [pc, #340]	@ (801243c <tcp_write+0x5b4>)
 80122e6:	4853      	ldr	r0, [pc, #332]	@ (8012434 <tcp_write+0x5ac>)
 80122e8:	f006 fdf4 	bl	8018ed4 <iprintf>
      prev_seg->next = seg;
 80122ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80122f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80122f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122f4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80122f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80122fa:	8b3b      	ldrh	r3, [r7, #24]
 80122fc:	4413      	add	r3, r2
 80122fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8012302:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012306:	88fb      	ldrh	r3, [r7, #6]
 8012308:	429a      	cmp	r2, r3
 801230a:	f4ff af3d 	bcc.w	8012188 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801230e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012310:	2b00      	cmp	r3, #0
 8012312:	d02c      	beq.n	801236e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801231a:	e01e      	b.n	801235a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801231c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801231e:	891a      	ldrh	r2, [r3, #8]
 8012320:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012322:	4413      	add	r3, r2
 8012324:	b29a      	uxth	r2, r3
 8012326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012328:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d110      	bne.n	8012354 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012338:	8952      	ldrh	r2, [r2, #10]
 801233a:	4413      	add	r3, r2
 801233c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801233e:	68b9      	ldr	r1, [r7, #8]
 8012340:	4618      	mov	r0, r3
 8012342:	f006 ffc8 	bl	80192d6 <memcpy>
        p->len += oversize_used;
 8012346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012348:	895a      	ldrh	r2, [r3, #10]
 801234a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801234c:	4413      	add	r3, r2
 801234e:	b29a      	uxth	r2, r3
 8012350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012352:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235c:	2b00      	cmp	r3, #0
 801235e:	d1dd      	bne.n	801231c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012362:	891a      	ldrh	r2, [r3, #8]
 8012364:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012366:	4413      	add	r3, r2
 8012368:	b29a      	uxth	r2, r3
 801236a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801236c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801236e:	8a7a      	ldrh	r2, [r7, #18]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012378:	2b00      	cmp	r3, #0
 801237a:	d018      	beq.n	80123ae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801237c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801237e:	2b00      	cmp	r3, #0
 8012380:	d106      	bne.n	8012390 <tcp_write+0x508>
 8012382:	4b2a      	ldr	r3, [pc, #168]	@ (801242c <tcp_write+0x5a4>)
 8012384:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8012388:	492d      	ldr	r1, [pc, #180]	@ (8012440 <tcp_write+0x5b8>)
 801238a:	482a      	ldr	r0, [pc, #168]	@ (8012434 <tcp_write+0x5ac>)
 801238c:	f006 fda2 	bl	8018ed4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012396:	4618      	mov	r0, r3
 8012398:	f7fa ff30 	bl	800d1fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801239c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801239e:	891a      	ldrh	r2, [r3, #8]
 80123a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123a2:	891b      	ldrh	r3, [r3, #8]
 80123a4:	4413      	add	r3, r2
 80123a6:	b29a      	uxth	r2, r3
 80123a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123aa:	811a      	strh	r2, [r3, #8]
 80123ac:	e037      	b.n	801241e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80123ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d034      	beq.n	801241e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80123b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d003      	beq.n	80123c2 <tcp_write+0x53a>
 80123ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <tcp_write+0x548>
 80123c2:	4b1a      	ldr	r3, [pc, #104]	@ (801242c <tcp_write+0x5a4>)
 80123c4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80123c8:	491e      	ldr	r1, [pc, #120]	@ (8012444 <tcp_write+0x5bc>)
 80123ca:	481a      	ldr	r0, [pc, #104]	@ (8012434 <tcp_write+0x5ac>)
 80123cc:	f006 fd82 	bl	8018ed4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123d6:	e009      	b.n	80123ec <tcp_write+0x564>
      p->tot_len += extendlen;
 80123d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123da:	891a      	ldrh	r2, [r3, #8]
 80123dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123de:	4413      	add	r3, r2
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123e4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d1f1      	bne.n	80123d8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80123f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f6:	891a      	ldrh	r2, [r3, #8]
 80123f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123fa:	4413      	add	r3, r2
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012400:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012404:	895a      	ldrh	r2, [r3, #10]
 8012406:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012408:	4413      	add	r3, r2
 801240a:	b29a      	uxth	r2, r3
 801240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801240e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012412:	891a      	ldrh	r2, [r3, #8]
 8012414:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012416:	4413      	add	r3, r2
 8012418:	b29a      	uxth	r2, r3
 801241a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801241c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801241e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012420:	2b00      	cmp	r3, #0
 8012422:	d111      	bne.n	8012448 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012428:	66da      	str	r2, [r3, #108]	@ 0x6c
 801242a:	e010      	b.n	801244e <tcp_write+0x5c6>
 801242c:	0801c830 	.word	0x0801c830
 8012430:	0801cad0 	.word	0x0801cad0
 8012434:	0801c884 	.word	0x0801c884
 8012438:	0801cb10 	.word	0x0801cb10
 801243c:	0801cb20 	.word	0x0801cb20
 8012440:	0801cb34 	.word	0x0801cb34
 8012444:	0801cb6c 	.word	0x0801cb6c
  } else {
    last_unsent->next = queue;
 8012448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801244a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801244c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012452:	88fb      	ldrh	r3, [r7, #6]
 8012454:	441a      	add	r2, r3
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012460:	88fb      	ldrh	r3, [r7, #6]
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	b29a      	uxth	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012472:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00e      	beq.n	801249e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10a      	bne.n	801249e <tcp_write+0x616>
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <tcp_write+0x616>
 8012490:	4b2c      	ldr	r3, [pc, #176]	@ (8012544 <tcp_write+0x6bc>)
 8012492:	f240 3212 	movw	r2, #786	@ 0x312
 8012496:	492c      	ldr	r1, [pc, #176]	@ (8012548 <tcp_write+0x6c0>)
 8012498:	482c      	ldr	r0, [pc, #176]	@ (801254c <tcp_write+0x6c4>)
 801249a:	f006 fd1b 	bl	8018ed4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801249e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d016      	beq.n	80124d2 <tcp_write+0x64a>
 80124a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d012      	beq.n	80124d2 <tcp_write+0x64a>
 80124ac:	797b      	ldrb	r3, [r7, #5]
 80124ae:	f003 0302 	and.w	r3, r3, #2
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d10d      	bne.n	80124d2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80124b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	899b      	ldrh	r3, [r3, #12]
 80124bc:	b29c      	uxth	r4, r3
 80124be:	2008      	movs	r0, #8
 80124c0:	f7f9 f99a 	bl	800b7f8 <lwip_htons>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124ca:	68db      	ldr	r3, [r3, #12]
 80124cc:	4322      	orrs	r2, r4
 80124ce:	b292      	uxth	r2, r2
 80124d0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e031      	b.n	801253a <tcp_write+0x6b2>
          goto memerr;
 80124d6:	bf00      	nop
 80124d8:	e006      	b.n	80124e8 <tcp_write+0x660>
            goto memerr;
 80124da:	bf00      	nop
 80124dc:	e004      	b.n	80124e8 <tcp_write+0x660>
        goto memerr;
 80124de:	bf00      	nop
 80124e0:	e002      	b.n	80124e8 <tcp_write+0x660>
        goto memerr;
 80124e2:	bf00      	nop
 80124e4:	e000      	b.n	80124e8 <tcp_write+0x660>
      goto memerr;
 80124e6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	8b5b      	ldrh	r3, [r3, #26]
 80124ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80124f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d002      	beq.n	8012502 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80124fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80124fe:	f7fa fdaf 	bl	800d060 <pbuf_free>
  }
  if (queue != NULL) {
 8012502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012508:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801250a:	f7fc fb53 	bl	800ebb4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012514:	2b00      	cmp	r3, #0
 8012516:	d00e      	beq.n	8012536 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10a      	bne.n	8012536 <tcp_write+0x6ae>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <tcp_write+0x6ae>
 8012528:	4b06      	ldr	r3, [pc, #24]	@ (8012544 <tcp_write+0x6bc>)
 801252a:	f240 3227 	movw	r2, #807	@ 0x327
 801252e:	4906      	ldr	r1, [pc, #24]	@ (8012548 <tcp_write+0x6c0>)
 8012530:	4806      	ldr	r0, [pc, #24]	@ (801254c <tcp_write+0x6c4>)
 8012532:	f006 fccf 	bl	8018ed4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012536:	f04f 33ff 	mov.w	r3, #4294967295
}
 801253a:	4618      	mov	r0, r3
 801253c:	375c      	adds	r7, #92	@ 0x5c
 801253e:	46bd      	mov	sp, r7
 8012540:	bd90      	pop	{r4, r7, pc}
 8012542:	bf00      	nop
 8012544:	0801c830 	.word	0x0801c830
 8012548:	0801cba4 	.word	0x0801cba4
 801254c:	0801c884 	.word	0x0801c884

08012550 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012550:	b590      	push	{r4, r7, lr}
 8012552:	b08b      	sub	sp, #44	@ 0x2c
 8012554:	af02      	add	r7, sp, #8
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801255c:	2300      	movs	r3, #0
 801255e:	61fb      	str	r3, [r7, #28]
 8012560:	2300      	movs	r3, #0
 8012562:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012564:	2300      	movs	r3, #0
 8012566:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d106      	bne.n	801257c <tcp_split_unsent_seg+0x2c>
 801256e:	4b95      	ldr	r3, [pc, #596]	@ (80127c4 <tcp_split_unsent_seg+0x274>)
 8012570:	f240 324b 	movw	r2, #843	@ 0x34b
 8012574:	4994      	ldr	r1, [pc, #592]	@ (80127c8 <tcp_split_unsent_seg+0x278>)
 8012576:	4895      	ldr	r0, [pc, #596]	@ (80127cc <tcp_split_unsent_seg+0x27c>)
 8012578:	f006 fcac 	bl	8018ed4 <iprintf>

  useg = pcb->unsent;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012580:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d102      	bne.n	801258e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012588:	f04f 33ff 	mov.w	r3, #4294967295
 801258c:	e116      	b.n	80127bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801258e:	887b      	ldrh	r3, [r7, #2]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d109      	bne.n	80125a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012594:	4b8b      	ldr	r3, [pc, #556]	@ (80127c4 <tcp_split_unsent_seg+0x274>)
 8012596:	f240 3253 	movw	r2, #851	@ 0x353
 801259a:	498d      	ldr	r1, [pc, #564]	@ (80127d0 <tcp_split_unsent_seg+0x280>)
 801259c:	488b      	ldr	r0, [pc, #556]	@ (80127cc <tcp_split_unsent_seg+0x27c>)
 801259e:	f006 fc99 	bl	8018ed4 <iprintf>
    return ERR_VAL;
 80125a2:	f06f 0305 	mvn.w	r3, #5
 80125a6:	e109      	b.n	80127bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	891b      	ldrh	r3, [r3, #8]
 80125ac:	887a      	ldrh	r2, [r7, #2]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d301      	bcc.n	80125b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	e102      	b.n	80127bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125ba:	887a      	ldrh	r2, [r7, #2]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d906      	bls.n	80125ce <tcp_split_unsent_seg+0x7e>
 80125c0:	4b80      	ldr	r3, [pc, #512]	@ (80127c4 <tcp_split_unsent_seg+0x274>)
 80125c2:	f240 325b 	movw	r2, #859	@ 0x35b
 80125c6:	4983      	ldr	r1, [pc, #524]	@ (80127d4 <tcp_split_unsent_seg+0x284>)
 80125c8:	4880      	ldr	r0, [pc, #512]	@ (80127cc <tcp_split_unsent_seg+0x27c>)
 80125ca:	f006 fc83 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	891b      	ldrh	r3, [r3, #8]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d106      	bne.n	80125e4 <tcp_split_unsent_seg+0x94>
 80125d6:	4b7b      	ldr	r3, [pc, #492]	@ (80127c4 <tcp_split_unsent_seg+0x274>)
 80125d8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80125dc:	497e      	ldr	r1, [pc, #504]	@ (80127d8 <tcp_split_unsent_seg+0x288>)
 80125de:	487b      	ldr	r0, [pc, #492]	@ (80127cc <tcp_split_unsent_seg+0x27c>)
 80125e0:	f006 fc78 	bl	8018ed4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	7a9b      	ldrb	r3, [r3, #10]
 80125e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80125ea:	7bfb      	ldrb	r3, [r7, #15]
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	f003 0304 	and.w	r3, r3, #4
 80125f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	891a      	ldrh	r2, [r3, #8]
 80125fa:	887b      	ldrh	r3, [r7, #2]
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012600:	7bbb      	ldrb	r3, [r7, #14]
 8012602:	b29a      	uxth	r2, r3
 8012604:	89bb      	ldrh	r3, [r7, #12]
 8012606:	4413      	add	r3, r2
 8012608:	b29b      	uxth	r3, r3
 801260a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801260e:	4619      	mov	r1, r3
 8012610:	2036      	movs	r0, #54	@ 0x36
 8012612:	f7fa fa41 	bl	800ca98 <pbuf_alloc>
 8012616:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	2b00      	cmp	r3, #0
 801261c:	f000 80b7 	beq.w	801278e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	891a      	ldrh	r2, [r3, #8]
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	891b      	ldrh	r3, [r3, #8]
 801262a:	1ad3      	subs	r3, r2, r3
 801262c:	b29a      	uxth	r2, r3
 801262e:	887b      	ldrh	r3, [r7, #2]
 8012630:	4413      	add	r3, r2
 8012632:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	6858      	ldr	r0, [r3, #4]
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	685a      	ldr	r2, [r3, #4]
 801263c:	7bbb      	ldrb	r3, [r7, #14]
 801263e:	18d1      	adds	r1, r2, r3
 8012640:	897b      	ldrh	r3, [r7, #10]
 8012642:	89ba      	ldrh	r2, [r7, #12]
 8012644:	f7fa ff12 	bl	800d46c <pbuf_copy_partial>
 8012648:	4603      	mov	r3, r0
 801264a:	461a      	mov	r2, r3
 801264c:	89bb      	ldrh	r3, [r7, #12]
 801264e:	4293      	cmp	r3, r2
 8012650:	f040 809f 	bne.w	8012792 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	899b      	ldrh	r3, [r3, #12]
 801265a:	b29b      	uxth	r3, r3
 801265c:	4618      	mov	r0, r3
 801265e:	f7f9 f8cb 	bl	800b7f8 <lwip_htons>
 8012662:	4603      	mov	r3, r0
 8012664:	b2db      	uxtb	r3, r3
 8012666:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801266a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801266c:	2300      	movs	r3, #0
 801266e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012670:	7efb      	ldrb	r3, [r7, #27]
 8012672:	f003 0308 	and.w	r3, r3, #8
 8012676:	2b00      	cmp	r3, #0
 8012678:	d007      	beq.n	801268a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801267a:	7efb      	ldrb	r3, [r7, #27]
 801267c:	f023 0308 	bic.w	r3, r3, #8
 8012680:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012682:	7ebb      	ldrb	r3, [r7, #26]
 8012684:	f043 0308 	orr.w	r3, r3, #8
 8012688:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801268a:	7efb      	ldrb	r3, [r7, #27]
 801268c:	f003 0301 	and.w	r3, r3, #1
 8012690:	2b00      	cmp	r3, #0
 8012692:	d007      	beq.n	80126a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012694:	7efb      	ldrb	r3, [r7, #27]
 8012696:	f023 0301 	bic.w	r3, r3, #1
 801269a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801269c:	7ebb      	ldrb	r3, [r7, #26]
 801269e:	f043 0301 	orr.w	r3, r3, #1
 80126a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7f9 f8b9 	bl	800b822 <lwip_htonl>
 80126b0:	4602      	mov	r2, r0
 80126b2:	887b      	ldrh	r3, [r7, #2]
 80126b4:	18d1      	adds	r1, r2, r3
 80126b6:	7eba      	ldrb	r2, [r7, #26]
 80126b8:	7bfb      	ldrb	r3, [r7, #15]
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	460b      	mov	r3, r1
 80126be:	6939      	ldr	r1, [r7, #16]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7ff fa51 	bl	8011b68 <tcp_create_segment>
 80126c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d063      	beq.n	8012796 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fa fd52 	bl	800d17c <pbuf_clen>
 80126d8:	4603      	mov	r3, r0
 80126da:	461a      	mov	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126e2:	1a9b      	subs	r3, r3, r2
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	6858      	ldr	r0, [r3, #4]
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	891a      	ldrh	r2, [r3, #8]
 80126f6:	89bb      	ldrh	r3, [r7, #12]
 80126f8:	1ad3      	subs	r3, r2, r3
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	4619      	mov	r1, r3
 80126fe:	f7fa fb29 	bl	800cd54 <pbuf_realloc>
  useg->len -= remainder;
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	891a      	ldrh	r2, [r3, #8]
 8012706:	89bb      	ldrh	r3, [r7, #12]
 8012708:	1ad3      	subs	r3, r2, r3
 801270a:	b29a      	uxth	r2, r3
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	899b      	ldrh	r3, [r3, #12]
 8012716:	b29c      	uxth	r4, r3
 8012718:	7efb      	ldrb	r3, [r7, #27]
 801271a:	b29b      	uxth	r3, r3
 801271c:	4618      	mov	r0, r3
 801271e:	f7f9 f86b 	bl	800b7f8 <lwip_htons>
 8012722:	4603      	mov	r3, r0
 8012724:	461a      	mov	r2, r3
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	4322      	orrs	r2, r4
 801272c:	b292      	uxth	r2, r2
 801272e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	f7fa fd21 	bl	800d17c <pbuf_clen>
 801273a:	4603      	mov	r3, r0
 801273c:	461a      	mov	r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012744:	4413      	add	r3, r2
 8012746:	b29a      	uxth	r2, r3
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	f7fa fd12 	bl	800d17c <pbuf_clen>
 8012758:	4603      	mov	r3, r0
 801275a:	461a      	mov	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012762:	4413      	add	r3, r2
 8012764:	b29a      	uxth	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	69fa      	ldr	r2, [r7, #28]
 8012778:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d103      	bne.n	801278a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801278a:	2300      	movs	r3, #0
 801278c:	e016      	b.n	80127bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801278e:	bf00      	nop
 8012790:	e002      	b.n	8012798 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012792:	bf00      	nop
 8012794:	e000      	b.n	8012798 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012796:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d006      	beq.n	80127ac <tcp_split_unsent_seg+0x25c>
 801279e:	4b09      	ldr	r3, [pc, #36]	@ (80127c4 <tcp_split_unsent_seg+0x274>)
 80127a0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80127a4:	490d      	ldr	r1, [pc, #52]	@ (80127dc <tcp_split_unsent_seg+0x28c>)
 80127a6:	4809      	ldr	r0, [pc, #36]	@ (80127cc <tcp_split_unsent_seg+0x27c>)
 80127a8:	f006 fb94 	bl	8018ed4 <iprintf>
  if (p != NULL) {
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d002      	beq.n	80127b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127b2:	6938      	ldr	r0, [r7, #16]
 80127b4:	f7fa fc54 	bl	800d060 <pbuf_free>
  }

  return ERR_MEM;
 80127b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3724      	adds	r7, #36	@ 0x24
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd90      	pop	{r4, r7, pc}
 80127c4:	0801c830 	.word	0x0801c830
 80127c8:	0801cbc4 	.word	0x0801cbc4
 80127cc:	0801c884 	.word	0x0801c884
 80127d0:	0801cbe8 	.word	0x0801cbe8
 80127d4:	0801cc0c 	.word	0x0801cc0c
 80127d8:	0801cc1c 	.word	0x0801cc1c
 80127dc:	0801cc2c 	.word	0x0801cc2c

080127e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b085      	sub	sp, #20
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <tcp_send_fin+0x1c>
 80127ee:	4b21      	ldr	r3, [pc, #132]	@ (8012874 <tcp_send_fin+0x94>)
 80127f0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80127f4:	4920      	ldr	r1, [pc, #128]	@ (8012878 <tcp_send_fin+0x98>)
 80127f6:	4821      	ldr	r0, [pc, #132]	@ (801287c <tcp_send_fin+0x9c>)
 80127f8:	f006 fb6c 	bl	8018ed4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012800:	2b00      	cmp	r3, #0
 8012802:	d02e      	beq.n	8012862 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012808:	60fb      	str	r3, [r7, #12]
 801280a:	e002      	b.n	8012812 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d1f8      	bne.n	801280c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	899b      	ldrh	r3, [r3, #12]
 8012820:	b29b      	uxth	r3, r3
 8012822:	4618      	mov	r0, r3
 8012824:	f7f8 ffe8 	bl	800b7f8 <lwip_htons>
 8012828:	4603      	mov	r3, r0
 801282a:	b2db      	uxtb	r3, r3
 801282c:	f003 0307 	and.w	r3, r3, #7
 8012830:	2b00      	cmp	r3, #0
 8012832:	d116      	bne.n	8012862 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	899b      	ldrh	r3, [r3, #12]
 801283a:	b29c      	uxth	r4, r3
 801283c:	2001      	movs	r0, #1
 801283e:	f7f8 ffdb 	bl	800b7f8 <lwip_htons>
 8012842:	4603      	mov	r3, r0
 8012844:	461a      	mov	r2, r3
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	68db      	ldr	r3, [r3, #12]
 801284a:	4322      	orrs	r2, r4
 801284c:	b292      	uxth	r2, r2
 801284e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	8b5b      	ldrh	r3, [r3, #26]
 8012854:	f043 0320 	orr.w	r3, r3, #32
 8012858:	b29a      	uxth	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801285e:	2300      	movs	r3, #0
 8012860:	e004      	b.n	801286c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012862:	2101      	movs	r1, #1
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 f80b 	bl	8012880 <tcp_enqueue_flags>
 801286a:	4603      	mov	r3, r0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3714      	adds	r7, #20
 8012870:	46bd      	mov	sp, r7
 8012872:	bd90      	pop	{r4, r7, pc}
 8012874:	0801c830 	.word	0x0801c830
 8012878:	0801cc38 	.word	0x0801cc38
 801287c:	0801c884 	.word	0x0801c884

08012880 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b08a      	sub	sp, #40	@ 0x28
 8012884:	af02      	add	r7, sp, #8
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	460b      	mov	r3, r1
 801288a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801288c:	2300      	movs	r3, #0
 801288e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012894:	78fb      	ldrb	r3, [r7, #3]
 8012896:	f003 0303 	and.w	r3, r3, #3
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <tcp_enqueue_flags+0x2c>
 801289e:	4b67      	ldr	r3, [pc, #412]	@ (8012a3c <tcp_enqueue_flags+0x1bc>)
 80128a0:	f240 4211 	movw	r2, #1041	@ 0x411
 80128a4:	4966      	ldr	r1, [pc, #408]	@ (8012a40 <tcp_enqueue_flags+0x1c0>)
 80128a6:	4867      	ldr	r0, [pc, #412]	@ (8012a44 <tcp_enqueue_flags+0x1c4>)
 80128a8:	f006 fb14 	bl	8018ed4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d106      	bne.n	80128c0 <tcp_enqueue_flags+0x40>
 80128b2:	4b62      	ldr	r3, [pc, #392]	@ (8012a3c <tcp_enqueue_flags+0x1bc>)
 80128b4:	f240 4213 	movw	r2, #1043	@ 0x413
 80128b8:	4963      	ldr	r1, [pc, #396]	@ (8012a48 <tcp_enqueue_flags+0x1c8>)
 80128ba:	4862      	ldr	r0, [pc, #392]	@ (8012a44 <tcp_enqueue_flags+0x1c4>)
 80128bc:	f006 fb0a 	bl	8018ed4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80128c0:	78fb      	ldrb	r3, [r7, #3]
 80128c2:	f003 0302 	and.w	r3, r3, #2
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d001      	beq.n	80128ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80128ca:	2301      	movs	r3, #1
 80128cc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128ce:	7ffb      	ldrb	r3, [r7, #31]
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	f003 0304 	and.w	r3, r3, #4
 80128d8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128da:	7dfb      	ldrb	r3, [r7, #23]
 80128dc:	b29b      	uxth	r3, r3
 80128de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80128e2:	4619      	mov	r1, r3
 80128e4:	2036      	movs	r0, #54	@ 0x36
 80128e6:	f7fa f8d7 	bl	800ca98 <pbuf_alloc>
 80128ea:	6138      	str	r0, [r7, #16]
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d109      	bne.n	8012906 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	8b5b      	ldrh	r3, [r3, #26]
 80128f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128fa:	b29a      	uxth	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012900:	f04f 33ff 	mov.w	r3, #4294967295
 8012904:	e095      	b.n	8012a32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	895a      	ldrh	r2, [r3, #10]
 801290a:	7dfb      	ldrb	r3, [r7, #23]
 801290c:	b29b      	uxth	r3, r3
 801290e:	429a      	cmp	r2, r3
 8012910:	d206      	bcs.n	8012920 <tcp_enqueue_flags+0xa0>
 8012912:	4b4a      	ldr	r3, [pc, #296]	@ (8012a3c <tcp_enqueue_flags+0x1bc>)
 8012914:	f240 4239 	movw	r2, #1081	@ 0x439
 8012918:	494c      	ldr	r1, [pc, #304]	@ (8012a4c <tcp_enqueue_flags+0x1cc>)
 801291a:	484a      	ldr	r0, [pc, #296]	@ (8012a44 <tcp_enqueue_flags+0x1c4>)
 801291c:	f006 fada 	bl	8018ed4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012924:	78fa      	ldrb	r2, [r7, #3]
 8012926:	7ffb      	ldrb	r3, [r7, #31]
 8012928:	9300      	str	r3, [sp, #0]
 801292a:	460b      	mov	r3, r1
 801292c:	6939      	ldr	r1, [r7, #16]
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7ff f91a 	bl	8011b68 <tcp_create_segment>
 8012934:	60f8      	str	r0, [r7, #12]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d109      	bne.n	8012950 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	8b5b      	ldrh	r3, [r3, #26]
 8012940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012944:	b29a      	uxth	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801294a:	f04f 33ff 	mov.w	r3, #4294967295
 801294e:	e070      	b.n	8012a32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	f003 0303 	and.w	r3, r3, #3
 8012958:	2b00      	cmp	r3, #0
 801295a:	d006      	beq.n	801296a <tcp_enqueue_flags+0xea>
 801295c:	4b37      	ldr	r3, [pc, #220]	@ (8012a3c <tcp_enqueue_flags+0x1bc>)
 801295e:	f240 4242 	movw	r2, #1090	@ 0x442
 8012962:	493b      	ldr	r1, [pc, #236]	@ (8012a50 <tcp_enqueue_flags+0x1d0>)
 8012964:	4837      	ldr	r0, [pc, #220]	@ (8012a44 <tcp_enqueue_flags+0x1c4>)
 8012966:	f006 fab5 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	891b      	ldrh	r3, [r3, #8]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d006      	beq.n	8012980 <tcp_enqueue_flags+0x100>
 8012972:	4b32      	ldr	r3, [pc, #200]	@ (8012a3c <tcp_enqueue_flags+0x1bc>)
 8012974:	f240 4243 	movw	r2, #1091	@ 0x443
 8012978:	4936      	ldr	r1, [pc, #216]	@ (8012a54 <tcp_enqueue_flags+0x1d4>)
 801297a:	4832      	ldr	r0, [pc, #200]	@ (8012a44 <tcp_enqueue_flags+0x1c4>)
 801297c:	f006 faaa 	bl	8018ed4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012984:	2b00      	cmp	r3, #0
 8012986:	d103      	bne.n	8012990 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	68fa      	ldr	r2, [r7, #12]
 801298c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801298e:	e00d      	b.n	80129ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012994:	61bb      	str	r3, [r7, #24]
 8012996:	e002      	b.n	801299e <tcp_enqueue_flags+0x11e>
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	61bb      	str	r3, [r7, #24]
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d1f8      	bne.n	8012998 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80129b4:	78fb      	ldrb	r3, [r7, #3]
 80129b6:	f003 0302 	and.w	r3, r3, #2
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d104      	bne.n	80129c8 <tcp_enqueue_flags+0x148>
 80129be:	78fb      	ldrb	r3, [r7, #3]
 80129c0:	f003 0301 	and.w	r3, r3, #1
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d004      	beq.n	80129d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80129cc:	1c5a      	adds	r2, r3, #1
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80129d2:	78fb      	ldrb	r3, [r7, #3]
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d006      	beq.n	80129ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	8b5b      	ldrh	r3, [r3, #26]
 80129e0:	f043 0320 	orr.w	r3, r3, #32
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fa fbc4 	bl	800d17c <pbuf_clen>
 80129f4:	4603      	mov	r3, r0
 80129f6:	461a      	mov	r2, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80129fe:	4413      	add	r3, r2
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d00e      	beq.n	8012a30 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10a      	bne.n	8012a30 <tcp_enqueue_flags+0x1b0>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d106      	bne.n	8012a30 <tcp_enqueue_flags+0x1b0>
 8012a22:	4b06      	ldr	r3, [pc, #24]	@ (8012a3c <tcp_enqueue_flags+0x1bc>)
 8012a24:	f240 4265 	movw	r2, #1125	@ 0x465
 8012a28:	490b      	ldr	r1, [pc, #44]	@ (8012a58 <tcp_enqueue_flags+0x1d8>)
 8012a2a:	4806      	ldr	r0, [pc, #24]	@ (8012a44 <tcp_enqueue_flags+0x1c4>)
 8012a2c:	f006 fa52 	bl	8018ed4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a30:	2300      	movs	r3, #0
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3720      	adds	r7, #32
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	0801c830 	.word	0x0801c830
 8012a40:	0801cc54 	.word	0x0801cc54
 8012a44:	0801c884 	.word	0x0801c884
 8012a48:	0801ccac 	.word	0x0801ccac
 8012a4c:	0801cccc 	.word	0x0801cccc
 8012a50:	0801cd08 	.word	0x0801cd08
 8012a54:	0801cd20 	.word	0x0801cd20
 8012a58:	0801cd4c 	.word	0x0801cd4c

08012a5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a5c:	b5b0      	push	{r4, r5, r7, lr}
 8012a5e:	b08a      	sub	sp, #40	@ 0x28
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d106      	bne.n	8012a78 <tcp_output+0x1c>
 8012a6a:	4b8a      	ldr	r3, [pc, #552]	@ (8012c94 <tcp_output+0x238>)
 8012a6c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012a70:	4989      	ldr	r1, [pc, #548]	@ (8012c98 <tcp_output+0x23c>)
 8012a72:	488a      	ldr	r0, [pc, #552]	@ (8012c9c <tcp_output+0x240>)
 8012a74:	f006 fa2e 	bl	8018ed4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	7d1b      	ldrb	r3, [r3, #20]
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d106      	bne.n	8012a8e <tcp_output+0x32>
 8012a80:	4b84      	ldr	r3, [pc, #528]	@ (8012c94 <tcp_output+0x238>)
 8012a82:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012a86:	4986      	ldr	r1, [pc, #536]	@ (8012ca0 <tcp_output+0x244>)
 8012a88:	4884      	ldr	r0, [pc, #528]	@ (8012c9c <tcp_output+0x240>)
 8012a8a:	f006 fa23 	bl	8018ed4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a8e:	4b85      	ldr	r3, [pc, #532]	@ (8012ca4 <tcp_output+0x248>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d101      	bne.n	8012a9c <tcp_output+0x40>
    return ERR_OK;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	e1ce      	b.n	8012e3a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	bf28      	it	cs
 8012aac:	4613      	movcs	r3, r2
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d10b      	bne.n	8012ad6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	8b5b      	ldrh	r3, [r3, #26]
 8012ac2:	f003 0302 	and.w	r3, r3, #2
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 81aa 	beq.w	8012e20 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 fdcb 	bl	8013668 <tcp_send_empty_ack>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	e1b1      	b.n	8012e3a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012ad6:	6879      	ldr	r1, [r7, #4]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	3304      	adds	r3, #4
 8012adc:	461a      	mov	r2, r3
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f7ff f826 	bl	8011b30 <tcp_route>
 8012ae4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d102      	bne.n	8012af2 <tcp_output+0x96>
    return ERR_RTE;
 8012aec:	f06f 0303 	mvn.w	r3, #3
 8012af0:	e1a3      	b.n	8012e3a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d003      	beq.n	8012b00 <tcp_output+0xa4>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d111      	bne.n	8012b24 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d002      	beq.n	8012b0c <tcp_output+0xb0>
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	3304      	adds	r3, #4
 8012b0a:	e000      	b.n	8012b0e <tcp_output+0xb2>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d102      	bne.n	8012b1c <tcp_output+0xc0>
      return ERR_RTE;
 8012b16:	f06f 0303 	mvn.w	r3, #3
 8012b1a:	e18e      	b.n	8012e3a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7f8 fe79 	bl	800b822 <lwip_htonl>
 8012b30:	4602      	mov	r2, r0
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b3a:	8912      	ldrh	r2, [r2, #8]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	69ba      	ldr	r2, [r7, #24]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d227      	bcs.n	8012b94 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d114      	bne.n	8012b7c <tcp_output+0x120>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d110      	bne.n	8012b7c <tcp_output+0x120>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10b      	bne.n	8012b7c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2201      	movs	r2, #1
 8012b70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	8b5b      	ldrh	r3, [r3, #26]
 8012b80:	f003 0302 	and.w	r3, r3, #2
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	f000 814d 	beq.w	8012e24 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 fd6c 	bl	8013668 <tcp_send_empty_ack>
 8012b90:	4603      	mov	r3, r0
 8012b92:	e152      	b.n	8012e3a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ba0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012ba2:	6a3b      	ldr	r3, [r7, #32]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f000 811c 	beq.w	8012de2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012baa:	e002      	b.n	8012bb2 <tcp_output+0x156>
 8012bac:	6a3b      	ldr	r3, [r7, #32]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	623b      	str	r3, [r7, #32]
 8012bb2:	6a3b      	ldr	r3, [r7, #32]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1f8      	bne.n	8012bac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012bba:	e112      	b.n	8012de2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	899b      	ldrh	r3, [r3, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f8 fe17 	bl	800b7f8 <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	f003 0304 	and.w	r3, r3, #4
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d006      	beq.n	8012be4 <tcp_output+0x188>
 8012bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8012c94 <tcp_output+0x238>)
 8012bd8:	f240 5236 	movw	r2, #1334	@ 0x536
 8012bdc:	4932      	ldr	r1, [pc, #200]	@ (8012ca8 <tcp_output+0x24c>)
 8012bde:	482f      	ldr	r0, [pc, #188]	@ (8012c9c <tcp_output+0x240>)
 8012be0:	f006 f978 	bl	8018ed4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d01f      	beq.n	8012c2c <tcp_output+0x1d0>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	8b5b      	ldrh	r3, [r3, #26]
 8012bf0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d119      	bne.n	8012c2c <tcp_output+0x1d0>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00b      	beq.n	8012c18 <tcp_output+0x1bc>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d110      	bne.n	8012c2c <tcp_output+0x1d0>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c0e:	891a      	ldrh	r2, [r3, #8]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d209      	bcs.n	8012c2c <tcp_output+0x1d0>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d004      	beq.n	8012c2c <tcp_output+0x1d0>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012c28:	2b08      	cmp	r3, #8
 8012c2a:	d901      	bls.n	8012c30 <tcp_output+0x1d4>
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	e000      	b.n	8012c32 <tcp_output+0x1d6>
 8012c30:	2300      	movs	r3, #0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d106      	bne.n	8012c44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	8b5b      	ldrh	r3, [r3, #26]
 8012c3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f000 80e4 	beq.w	8012e0c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	7d1b      	ldrb	r3, [r3, #20]
 8012c48:	2b02      	cmp	r3, #2
 8012c4a:	d00d      	beq.n	8012c68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4e:	68db      	ldr	r3, [r3, #12]
 8012c50:	899b      	ldrh	r3, [r3, #12]
 8012c52:	b29c      	uxth	r4, r3
 8012c54:	2010      	movs	r0, #16
 8012c56:	f7f8 fdcf 	bl	800b7f8 <lwip_htons>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	4322      	orrs	r2, r4
 8012c64:	b292      	uxth	r2, r2
 8012c66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c68:	697a      	ldr	r2, [r7, #20]
 8012c6a:	6879      	ldr	r1, [r7, #4]
 8012c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c6e:	f000 f909 	bl	8012e84 <tcp_output_segment>
 8012c72:	4603      	mov	r3, r0
 8012c74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d016      	beq.n	8012cac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	8b5b      	ldrh	r3, [r3, #26]
 8012c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	835a      	strh	r2, [r3, #26]
      return err;
 8012c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c90:	e0d3      	b.n	8012e3a <tcp_output+0x3de>
 8012c92:	bf00      	nop
 8012c94:	0801c830 	.word	0x0801c830
 8012c98:	0801cd74 	.word	0x0801cd74
 8012c9c:	0801c884 	.word	0x0801c884
 8012ca0:	0801cd8c 	.word	0x0801cd8c
 8012ca4:	20010fc0 	.word	0x20010fc0
 8012ca8:	0801cdb4 	.word	0x0801cdb4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7d1b      	ldrb	r3, [r3, #20]
 8012cb8:	2b02      	cmp	r3, #2
 8012cba:	d006      	beq.n	8012cca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	8b5b      	ldrh	r3, [r3, #26]
 8012cc0:	f023 0303 	bic.w	r3, r3, #3
 8012cc4:	b29a      	uxth	r2, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7f8 fda6 	bl	800b822 <lwip_htonl>
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cda:	891b      	ldrh	r3, [r3, #8]
 8012cdc:	461d      	mov	r5, r3
 8012cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	899b      	ldrh	r3, [r3, #12]
 8012ce4:	b29b      	uxth	r3, r3
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7f8 fd86 	bl	800b7f8 <lwip_htons>
 8012cec:	4603      	mov	r3, r0
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	f003 0303 	and.w	r3, r3, #3
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d001      	beq.n	8012cfc <tcp_output+0x2a0>
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e000      	b.n	8012cfe <tcp_output+0x2a2>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	442b      	add	r3, r5
 8012d00:	4423      	add	r3, r4
 8012d02:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	1ad3      	subs	r3, r2, r3
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	da02      	bge.n	8012d16 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	68ba      	ldr	r2, [r7, #8]
 8012d14:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d18:	891b      	ldrh	r3, [r3, #8]
 8012d1a:	461c      	mov	r4, r3
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	899b      	ldrh	r3, [r3, #12]
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7f8 fd67 	bl	800b7f8 <lwip_htons>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	f003 0303 	and.w	r3, r3, #3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d001      	beq.n	8012d3a <tcp_output+0x2de>
 8012d36:	2301      	movs	r3, #1
 8012d38:	e000      	b.n	8012d3c <tcp_output+0x2e0>
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	4423      	add	r3, r4
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d049      	beq.n	8012dd6 <tcp_output+0x37a>
      seg->next = NULL;
 8012d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d44:	2200      	movs	r2, #0
 8012d46:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d105      	bne.n	8012d5c <tcp_output+0x300>
        pcb->unacked = seg;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d54:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d58:	623b      	str	r3, [r7, #32]
 8012d5a:	e03f      	b.n	8012ddc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	685b      	ldr	r3, [r3, #4]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f8 fd5d 	bl	800b822 <lwip_htonl>
 8012d68:	4604      	mov	r4, r0
 8012d6a:	6a3b      	ldr	r3, [r7, #32]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f8 fd56 	bl	800b822 <lwip_htonl>
 8012d76:	4603      	mov	r3, r0
 8012d78:	1ae3      	subs	r3, r4, r3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	da24      	bge.n	8012dc8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3370      	adds	r3, #112	@ 0x70
 8012d82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d84:	e002      	b.n	8012d8c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d011      	beq.n	8012db8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f8 fd40 	bl	800b822 <lwip_htonl>
 8012da2:	4604      	mov	r4, r0
 8012da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7f8 fd39 	bl	800b822 <lwip_htonl>
 8012db0:	4603      	mov	r3, r0
 8012db2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	dbe6      	blt.n	8012d86 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dbe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dc4:	601a      	str	r2, [r3, #0]
 8012dc6:	e009      	b.n	8012ddc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dcc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012dce:	6a3b      	ldr	r3, [r7, #32]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	623b      	str	r3, [r7, #32]
 8012dd4:	e002      	b.n	8012ddc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012dd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dd8:	f7fb ff01 	bl	800ebde <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012de0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d012      	beq.n	8012e0e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f8 fd17 	bl	800b822 <lwip_htonl>
 8012df4:	4602      	mov	r2, r0
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dfe:	8912      	ldrh	r2, [r2, #8]
 8012e00:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e02:	69ba      	ldr	r2, [r7, #24]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	f4bf aed9 	bcs.w	8012bbc <tcp_output+0x160>
 8012e0a:	e000      	b.n	8012e0e <tcp_output+0x3b2>
      break;
 8012e0c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d108      	bne.n	8012e28 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012e1e:	e004      	b.n	8012e2a <tcp_output+0x3ce>
    goto output_done;
 8012e20:	bf00      	nop
 8012e22:	e002      	b.n	8012e2a <tcp_output+0x3ce>
    goto output_done;
 8012e24:	bf00      	nop
 8012e26:	e000      	b.n	8012e2a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e28:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	8b5b      	ldrh	r3, [r3, #26]
 8012e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e38:	2300      	movs	r3, #0
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3728      	adds	r7, #40	@ 0x28
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bdb0      	pop	{r4, r5, r7, pc}
 8012e42:	bf00      	nop

08012e44 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d106      	bne.n	8012e60 <tcp_output_segment_busy+0x1c>
 8012e52:	4b09      	ldr	r3, [pc, #36]	@ (8012e78 <tcp_output_segment_busy+0x34>)
 8012e54:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012e58:	4908      	ldr	r1, [pc, #32]	@ (8012e7c <tcp_output_segment_busy+0x38>)
 8012e5a:	4809      	ldr	r0, [pc, #36]	@ (8012e80 <tcp_output_segment_busy+0x3c>)
 8012e5c:	f006 f83a 	bl	8018ed4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	7b9b      	ldrb	r3, [r3, #14]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d001      	beq.n	8012e6e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	e000      	b.n	8012e70 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e6e:	2300      	movs	r3, #0
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3708      	adds	r7, #8
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	0801c830 	.word	0x0801c830
 8012e7c:	0801cdcc 	.word	0x0801cdcc
 8012e80:	0801c884 	.word	0x0801c884

08012e84 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e84:	b5b0      	push	{r4, r5, r7, lr}
 8012e86:	b08c      	sub	sp, #48	@ 0x30
 8012e88:	af04      	add	r7, sp, #16
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d106      	bne.n	8012ea4 <tcp_output_segment+0x20>
 8012e96:	4b64      	ldr	r3, [pc, #400]	@ (8013028 <tcp_output_segment+0x1a4>)
 8012e98:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012e9c:	4963      	ldr	r1, [pc, #396]	@ (801302c <tcp_output_segment+0x1a8>)
 8012e9e:	4864      	ldr	r0, [pc, #400]	@ (8013030 <tcp_output_segment+0x1ac>)
 8012ea0:	f006 f818 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d106      	bne.n	8012eb8 <tcp_output_segment+0x34>
 8012eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8013028 <tcp_output_segment+0x1a4>)
 8012eac:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012eb0:	4960      	ldr	r1, [pc, #384]	@ (8013034 <tcp_output_segment+0x1b0>)
 8012eb2:	485f      	ldr	r0, [pc, #380]	@ (8013030 <tcp_output_segment+0x1ac>)
 8012eb4:	f006 f80e 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d106      	bne.n	8012ecc <tcp_output_segment+0x48>
 8012ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8013028 <tcp_output_segment+0x1a4>)
 8012ec0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012ec4:	495c      	ldr	r1, [pc, #368]	@ (8013038 <tcp_output_segment+0x1b4>)
 8012ec6:	485a      	ldr	r0, [pc, #360]	@ (8013030 <tcp_output_segment+0x1ac>)
 8012ec8:	f006 f804 	bl	8018ed4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f7ff ffb9 	bl	8012e44 <tcp_output_segment_busy>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d001      	beq.n	8012edc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	e0a1      	b.n	8013020 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	68dc      	ldr	r4, [r3, #12]
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	f7f8 fc9c 	bl	800b822 <lwip_htonl>
 8012eea:	4603      	mov	r3, r0
 8012eec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	68dc      	ldr	r4, [r3, #12]
 8012ef6:	4610      	mov	r0, r2
 8012ef8:	f7f8 fc7e 	bl	800b7f8 <lwip_htons>
 8012efc:	4603      	mov	r3, r0
 8012efe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f04:	68ba      	ldr	r2, [r7, #8]
 8012f06:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012f08:	441a      	add	r2, r3
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	3314      	adds	r3, #20
 8012f14:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	7a9b      	ldrb	r3, [r3, #10]
 8012f1a:	f003 0301 	and.w	r3, r3, #1
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d015      	beq.n	8012f4e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	3304      	adds	r3, #4
 8012f26:	461a      	mov	r2, r3
 8012f28:	6879      	ldr	r1, [r7, #4]
 8012f2a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012f2e:	f7fc fa39 	bl	800f3a4 <tcp_eff_send_mss_netif>
 8012f32:	4603      	mov	r3, r0
 8012f34:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f36:	8b7b      	ldrh	r3, [r7, #26]
 8012f38:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f8 fc70 	bl	800b822 <lwip_htonl>
 8012f42:	4602      	mov	r2, r0
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	da02      	bge.n	8012f5e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d10c      	bne.n	8012f80 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f66:	4b35      	ldr	r3, [pc, #212]	@ (801303c <tcp_output_segment+0x1b8>)
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	68db      	ldr	r3, [r3, #12]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7f8 fc54 	bl	800b822 <lwip_htonl>
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	68da      	ldr	r2, [r3, #12]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	8959      	ldrh	r1, [r3, #10]
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	8b3a      	ldrh	r2, [r7, #24]
 8012f9a:	1a8a      	subs	r2, r1, r2
 8012f9c:	b292      	uxth	r2, r2
 8012f9e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	8919      	ldrh	r1, [r3, #8]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	8b3a      	ldrh	r2, [r7, #24]
 8012fac:	1a8a      	subs	r2, r1, r2
 8012fae:	b292      	uxth	r2, r2
 8012fb0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	68d2      	ldr	r2, [r2, #12]
 8012fba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	68db      	ldr	r3, [r3, #12]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	741a      	strb	r2, [r3, #16]
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	68da      	ldr	r2, [r3, #12]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	7a9b      	ldrb	r3, [r3, #10]
 8012fd0:	f003 0301 	and.w	r3, r3, #1
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d001      	beq.n	8012fdc <tcp_output_segment+0x158>
 8012fd8:	2318      	movs	r3, #24
 8012fda:	e000      	b.n	8012fde <tcp_output_segment+0x15a>
 8012fdc:	2314      	movs	r3, #20
 8012fde:	4413      	add	r3, r2
 8012fe0:	69fa      	ldr	r2, [r7, #28]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d006      	beq.n	8012ff4 <tcp_output_segment+0x170>
 8012fe6:	4b10      	ldr	r3, [pc, #64]	@ (8013028 <tcp_output_segment+0x1a4>)
 8012fe8:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012fec:	4914      	ldr	r1, [pc, #80]	@ (8013040 <tcp_output_segment+0x1bc>)
 8012fee:	4810      	ldr	r0, [pc, #64]	@ (8013030 <tcp_output_segment+0x1ac>)
 8012ff0:	f005 ff70 	bl	8018ed4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	6858      	ldr	r0, [r3, #4]
 8012ff8:	68b9      	ldr	r1, [r7, #8]
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	1d1c      	adds	r4, r3, #4
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	7add      	ldrb	r5, [r3, #11]
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	7a9b      	ldrb	r3, [r3, #10]
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	9202      	str	r2, [sp, #8]
 801300a:	2206      	movs	r2, #6
 801300c:	9201      	str	r2, [sp, #4]
 801300e:	9300      	str	r3, [sp, #0]
 8013010:	462b      	mov	r3, r5
 8013012:	4622      	mov	r2, r4
 8013014:	f004 fc20 	bl	8017858 <ip4_output_if>
 8013018:	4603      	mov	r3, r0
 801301a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801301c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3720      	adds	r7, #32
 8013024:	46bd      	mov	sp, r7
 8013026:	bdb0      	pop	{r4, r5, r7, pc}
 8013028:	0801c830 	.word	0x0801c830
 801302c:	0801cdf4 	.word	0x0801cdf4
 8013030:	0801c884 	.word	0x0801c884
 8013034:	0801ce14 	.word	0x0801ce14
 8013038:	0801ce34 	.word	0x0801ce34
 801303c:	20010f74 	.word	0x20010f74
 8013040:	0801ce58 	.word	0x0801ce58

08013044 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013044:	b5b0      	push	{r4, r5, r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d106      	bne.n	8013060 <tcp_rexmit_rto_prepare+0x1c>
 8013052:	4b31      	ldr	r3, [pc, #196]	@ (8013118 <tcp_rexmit_rto_prepare+0xd4>)
 8013054:	f240 6263 	movw	r2, #1635	@ 0x663
 8013058:	4930      	ldr	r1, [pc, #192]	@ (801311c <tcp_rexmit_rto_prepare+0xd8>)
 801305a:	4831      	ldr	r0, [pc, #196]	@ (8013120 <tcp_rexmit_rto_prepare+0xdc>)
 801305c:	f005 ff3a 	bl	8018ed4 <iprintf>

  if (pcb->unacked == NULL) {
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013068:	f06f 0305 	mvn.w	r3, #5
 801306c:	e050      	b.n	8013110 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013072:	60fb      	str	r3, [r7, #12]
 8013074:	e00b      	b.n	801308e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f7ff fee4 	bl	8012e44 <tcp_output_segment_busy>
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	d002      	beq.n	8013088 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013082:	f06f 0305 	mvn.w	r3, #5
 8013086:	e043      	b.n	8013110 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	60fb      	str	r3, [r7, #12]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d1ef      	bne.n	8013076 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013096:	68f8      	ldr	r0, [r7, #12]
 8013098:	f7ff fed4 	bl	8012e44 <tcp_output_segment_busy>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130a2:	f06f 0305 	mvn.w	r3, #5
 80130a6:	e033      	b.n	8013110 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	8b5b      	ldrh	r3, [r3, #26]
 80130c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7f8 fba5 	bl	800b822 <lwip_htonl>
 80130d8:	4604      	mov	r4, r0
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	891b      	ldrh	r3, [r3, #8]
 80130de:	461d      	mov	r5, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	899b      	ldrh	r3, [r3, #12]
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7f8 fb85 	bl	800b7f8 <lwip_htons>
 80130ee:	4603      	mov	r3, r0
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	f003 0303 	and.w	r3, r3, #3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d001      	beq.n	80130fe <tcp_rexmit_rto_prepare+0xba>
 80130fa:	2301      	movs	r3, #1
 80130fc:	e000      	b.n	8013100 <tcp_rexmit_rto_prepare+0xbc>
 80130fe:	2300      	movs	r3, #0
 8013100:	442b      	add	r3, r5
 8013102:	18e2      	adds	r2, r4, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2200      	movs	r2, #0
 801310c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801310e:	2300      	movs	r3, #0
}
 8013110:	4618      	mov	r0, r3
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bdb0      	pop	{r4, r5, r7, pc}
 8013118:	0801c830 	.word	0x0801c830
 801311c:	0801ce6c 	.word	0x0801ce6c
 8013120:	0801c884 	.word	0x0801c884

08013124 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d106      	bne.n	8013140 <tcp_rexmit_rto_commit+0x1c>
 8013132:	4b0d      	ldr	r3, [pc, #52]	@ (8013168 <tcp_rexmit_rto_commit+0x44>)
 8013134:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013138:	490c      	ldr	r1, [pc, #48]	@ (801316c <tcp_rexmit_rto_commit+0x48>)
 801313a:	480d      	ldr	r0, [pc, #52]	@ (8013170 <tcp_rexmit_rto_commit+0x4c>)
 801313c:	f005 feca 	bl	8018ed4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013146:	2bff      	cmp	r3, #255	@ 0xff
 8013148:	d007      	beq.n	801315a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013150:	3301      	adds	r3, #1
 8013152:	b2da      	uxtb	r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f7ff fc7e 	bl	8012a5c <tcp_output>
}
 8013160:	bf00      	nop
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0801c830 	.word	0x0801c830
 801316c:	0801ce90 	.word	0x0801ce90
 8013170:	0801c884 	.word	0x0801c884

08013174 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d106      	bne.n	8013190 <tcp_rexmit_rto+0x1c>
 8013182:	4b0a      	ldr	r3, [pc, #40]	@ (80131ac <tcp_rexmit_rto+0x38>)
 8013184:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013188:	4909      	ldr	r1, [pc, #36]	@ (80131b0 <tcp_rexmit_rto+0x3c>)
 801318a:	480a      	ldr	r0, [pc, #40]	@ (80131b4 <tcp_rexmit_rto+0x40>)
 801318c:	f005 fea2 	bl	8018ed4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7ff ff57 	bl	8013044 <tcp_rexmit_rto_prepare>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d102      	bne.n	80131a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f7ff ffc1 	bl	8013124 <tcp_rexmit_rto_commit>
  }
}
 80131a2:	bf00      	nop
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	0801c830 	.word	0x0801c830
 80131b0:	0801ceb4 	.word	0x0801ceb4
 80131b4:	0801c884 	.word	0x0801c884

080131b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80131b8:	b590      	push	{r4, r7, lr}
 80131ba:	b085      	sub	sp, #20
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <tcp_rexmit+0x1c>
 80131c6:	4b2f      	ldr	r3, [pc, #188]	@ (8013284 <tcp_rexmit+0xcc>)
 80131c8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80131cc:	492e      	ldr	r1, [pc, #184]	@ (8013288 <tcp_rexmit+0xd0>)
 80131ce:	482f      	ldr	r0, [pc, #188]	@ (801328c <tcp_rexmit+0xd4>)
 80131d0:	f005 fe80 	bl	8018ed4 <iprintf>

  if (pcb->unacked == NULL) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d102      	bne.n	80131e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80131dc:	f06f 0305 	mvn.w	r3, #5
 80131e0:	e04c      	b.n	801327c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80131e8:	68b8      	ldr	r0, [r7, #8]
 80131ea:	f7ff fe2b 	bl	8012e44 <tcp_output_segment_busy>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d002      	beq.n	80131fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80131f4:	f06f 0305 	mvn.w	r3, #5
 80131f8:	e040      	b.n	801327c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	336c      	adds	r3, #108	@ 0x6c
 8013206:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013208:	e002      	b.n	8013210 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d011      	beq.n	801323c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	68db      	ldr	r3, [r3, #12]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	f7f8 fafe 	bl	800b822 <lwip_htonl>
 8013226:	4604      	mov	r4, r0
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	4618      	mov	r0, r3
 8013230:	f7f8 faf7 	bl	800b822 <lwip_htonl>
 8013234:	4603      	mov	r3, r0
 8013236:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013238:	2b00      	cmp	r3, #0
 801323a:	dbe6      	blt.n	801320a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	68ba      	ldr	r2, [r7, #8]
 8013248:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d103      	bne.n	801325a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2200      	movs	r2, #0
 8013256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013260:	2bff      	cmp	r3, #255	@ 0xff
 8013262:	d007      	beq.n	8013274 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801326a:	3301      	adds	r3, #1
 801326c:	b2da      	uxtb	r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2200      	movs	r2, #0
 8013278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3714      	adds	r7, #20
 8013280:	46bd      	mov	sp, r7
 8013282:	bd90      	pop	{r4, r7, pc}
 8013284:	0801c830 	.word	0x0801c830
 8013288:	0801ced0 	.word	0x0801ced0
 801328c:	0801c884 	.word	0x0801c884

08013290 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <tcp_rexmit_fast+0x1c>
 801329e:	4b2a      	ldr	r3, [pc, #168]	@ (8013348 <tcp_rexmit_fast+0xb8>)
 80132a0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80132a4:	4929      	ldr	r1, [pc, #164]	@ (801334c <tcp_rexmit_fast+0xbc>)
 80132a6:	482a      	ldr	r0, [pc, #168]	@ (8013350 <tcp_rexmit_fast+0xc0>)
 80132a8:	f005 fe14 	bl	8018ed4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d044      	beq.n	801333e <tcp_rexmit_fast+0xae>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	8b5b      	ldrh	r3, [r3, #26]
 80132b8:	f003 0304 	and.w	r3, r3, #4
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d13e      	bne.n	801333e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff ff79 	bl	80131b8 <tcp_rexmit>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d138      	bne.n	801333e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80132d8:	4293      	cmp	r3, r2
 80132da:	bf28      	it	cs
 80132dc:	4613      	movcs	r3, r2
 80132de:	b29b      	uxth	r3, r3
 80132e0:	0fda      	lsrs	r2, r3, #31
 80132e2:	4413      	add	r3, r2
 80132e4:	105b      	asrs	r3, r3, #1
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80132f4:	461a      	mov	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132fa:	005b      	lsls	r3, r3, #1
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d206      	bcs.n	801330e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013304:	005b      	lsls	r3, r3, #1
 8013306:	b29a      	uxth	r2, r3
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013318:	4619      	mov	r1, r3
 801331a:	0049      	lsls	r1, r1, #1
 801331c:	440b      	add	r3, r1
 801331e:	b29b      	uxth	r3, r3
 8013320:	4413      	add	r3, r2
 8013322:	b29a      	uxth	r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	8b5b      	ldrh	r3, [r3, #26]
 801332e:	f043 0304 	orr.w	r3, r3, #4
 8013332:	b29a      	uxth	r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2200      	movs	r2, #0
 801333c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801333e:	bf00      	nop
 8013340:	3708      	adds	r7, #8
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
 8013346:	bf00      	nop
 8013348:	0801c830 	.word	0x0801c830
 801334c:	0801cee8 	.word	0x0801cee8
 8013350:	0801c884 	.word	0x0801c884

08013354 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	607b      	str	r3, [r7, #4]
 801335e:	460b      	mov	r3, r1
 8013360:	817b      	strh	r3, [r7, #10]
 8013362:	4613      	mov	r3, r2
 8013364:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013366:	897a      	ldrh	r2, [r7, #10]
 8013368:	893b      	ldrh	r3, [r7, #8]
 801336a:	4413      	add	r3, r2
 801336c:	b29b      	uxth	r3, r3
 801336e:	3314      	adds	r3, #20
 8013370:	b29b      	uxth	r3, r3
 8013372:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013376:	4619      	mov	r1, r3
 8013378:	2022      	movs	r0, #34	@ 0x22
 801337a:	f7f9 fb8d 	bl	800ca98 <pbuf_alloc>
 801337e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d04d      	beq.n	8013422 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013386:	897b      	ldrh	r3, [r7, #10]
 8013388:	3313      	adds	r3, #19
 801338a:	697a      	ldr	r2, [r7, #20]
 801338c:	8952      	ldrh	r2, [r2, #10]
 801338e:	4293      	cmp	r3, r2
 8013390:	db06      	blt.n	80133a0 <tcp_output_alloc_header_common+0x4c>
 8013392:	4b26      	ldr	r3, [pc, #152]	@ (801342c <tcp_output_alloc_header_common+0xd8>)
 8013394:	f240 7223 	movw	r2, #1827	@ 0x723
 8013398:	4925      	ldr	r1, [pc, #148]	@ (8013430 <tcp_output_alloc_header_common+0xdc>)
 801339a:	4826      	ldr	r0, [pc, #152]	@ (8013434 <tcp_output_alloc_header_common+0xe0>)
 801339c:	f005 fd9a 	bl	8018ed4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133a6:	8c3b      	ldrh	r3, [r7, #32]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7f8 fa25 	bl	800b7f8 <lwip_htons>
 80133ae:	4603      	mov	r3, r0
 80133b0:	461a      	mov	r2, r3
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f8 fa1d 	bl	800b7f8 <lwip_htons>
 80133be:	4603      	mov	r3, r0
 80133c0:	461a      	mov	r2, r3
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f7f8 fa28 	bl	800b822 <lwip_htonl>
 80133d2:	4602      	mov	r2, r0
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80133d8:	897b      	ldrh	r3, [r7, #10]
 80133da:	089b      	lsrs	r3, r3, #2
 80133dc:	b29b      	uxth	r3, r3
 80133de:	3305      	adds	r3, #5
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	031b      	lsls	r3, r3, #12
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	4313      	orrs	r3, r2
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7f8 fa01 	bl	800b7f8 <lwip_htons>
 80133f6:	4603      	mov	r3, r0
 80133f8:	461a      	mov	r2, r3
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80133fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013400:	4618      	mov	r0, r3
 8013402:	f7f8 f9f9 	bl	800b7f8 <lwip_htons>
 8013406:	4603      	mov	r3, r0
 8013408:	461a      	mov	r2, r3
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2200      	movs	r2, #0
 8013412:	741a      	strb	r2, [r3, #16]
 8013414:	2200      	movs	r2, #0
 8013416:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	2200      	movs	r2, #0
 801341c:	749a      	strb	r2, [r3, #18]
 801341e:	2200      	movs	r2, #0
 8013420:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013422:	697b      	ldr	r3, [r7, #20]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3718      	adds	r7, #24
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	0801c830 	.word	0x0801c830
 8013430:	0801cf08 	.word	0x0801cf08
 8013434:	0801c884 	.word	0x0801c884

08013438 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013438:	b5b0      	push	{r4, r5, r7, lr}
 801343a:	b08a      	sub	sp, #40	@ 0x28
 801343c:	af04      	add	r7, sp, #16
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	607b      	str	r3, [r7, #4]
 8013442:	460b      	mov	r3, r1
 8013444:	817b      	strh	r3, [r7, #10]
 8013446:	4613      	mov	r3, r2
 8013448:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d106      	bne.n	801345e <tcp_output_alloc_header+0x26>
 8013450:	4b15      	ldr	r3, [pc, #84]	@ (80134a8 <tcp_output_alloc_header+0x70>)
 8013452:	f240 7242 	movw	r2, #1858	@ 0x742
 8013456:	4915      	ldr	r1, [pc, #84]	@ (80134ac <tcp_output_alloc_header+0x74>)
 8013458:	4815      	ldr	r0, [pc, #84]	@ (80134b0 <tcp_output_alloc_header+0x78>)
 801345a:	f005 fd3b 	bl	8018ed4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	8adb      	ldrh	r3, [r3, #22]
 8013466:	68fa      	ldr	r2, [r7, #12]
 8013468:	8b12      	ldrh	r2, [r2, #24]
 801346a:	68f9      	ldr	r1, [r7, #12]
 801346c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801346e:	893d      	ldrh	r5, [r7, #8]
 8013470:	897c      	ldrh	r4, [r7, #10]
 8013472:	9103      	str	r1, [sp, #12]
 8013474:	2110      	movs	r1, #16
 8013476:	9102      	str	r1, [sp, #8]
 8013478:	9201      	str	r2, [sp, #4]
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	462a      	mov	r2, r5
 8013480:	4621      	mov	r1, r4
 8013482:	f7ff ff67 	bl	8013354 <tcp_output_alloc_header_common>
 8013486:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d006      	beq.n	801349c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013496:	441a      	add	r2, r3
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801349c:	697b      	ldr	r3, [r7, #20]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3718      	adds	r7, #24
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bdb0      	pop	{r4, r5, r7, pc}
 80134a6:	bf00      	nop
 80134a8:	0801c830 	.word	0x0801c830
 80134ac:	0801cf38 	.word	0x0801cf38
 80134b0:	0801c884 	.word	0x0801c884

080134b4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b088      	sub	sp, #32
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	4611      	mov	r1, r2
 80134c0:	461a      	mov	r2, r3
 80134c2:	460b      	mov	r3, r1
 80134c4:	71fb      	strb	r3, [r7, #7]
 80134c6:	4613      	mov	r3, r2
 80134c8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80134ca:	2300      	movs	r3, #0
 80134cc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d106      	bne.n	80134e2 <tcp_output_fill_options+0x2e>
 80134d4:	4b12      	ldr	r3, [pc, #72]	@ (8013520 <tcp_output_fill_options+0x6c>)
 80134d6:	f240 7256 	movw	r2, #1878	@ 0x756
 80134da:	4912      	ldr	r1, [pc, #72]	@ (8013524 <tcp_output_fill_options+0x70>)
 80134dc:	4812      	ldr	r0, [pc, #72]	@ (8013528 <tcp_output_fill_options+0x74>)
 80134de:	f005 fcf9 	bl	8018ed4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	3314      	adds	r3, #20
 80134ec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80134ee:	8bfb      	ldrh	r3, [r7, #30]
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	461a      	mov	r2, r3
 80134f4:	79fb      	ldrb	r3, [r7, #7]
 80134f6:	009b      	lsls	r3, r3, #2
 80134f8:	f003 0304 	and.w	r3, r3, #4
 80134fc:	4413      	add	r3, r2
 80134fe:	3314      	adds	r3, #20
 8013500:	69ba      	ldr	r2, [r7, #24]
 8013502:	4413      	add	r3, r2
 8013504:	697a      	ldr	r2, [r7, #20]
 8013506:	429a      	cmp	r2, r3
 8013508:	d006      	beq.n	8013518 <tcp_output_fill_options+0x64>
 801350a:	4b05      	ldr	r3, [pc, #20]	@ (8013520 <tcp_output_fill_options+0x6c>)
 801350c:	f240 7275 	movw	r2, #1909	@ 0x775
 8013510:	4906      	ldr	r1, [pc, #24]	@ (801352c <tcp_output_fill_options+0x78>)
 8013512:	4805      	ldr	r0, [pc, #20]	@ (8013528 <tcp_output_fill_options+0x74>)
 8013514:	f005 fcde 	bl	8018ed4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013518:	bf00      	nop
 801351a:	3720      	adds	r7, #32
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	0801c830 	.word	0x0801c830
 8013524:	0801cf60 	.word	0x0801cf60
 8013528:	0801c884 	.word	0x0801c884
 801352c:	0801ce58 	.word	0x0801ce58

08013530 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08a      	sub	sp, #40	@ 0x28
 8013534:	af04      	add	r7, sp, #16
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d106      	bne.n	8013552 <tcp_output_control_segment+0x22>
 8013544:	4b1c      	ldr	r3, [pc, #112]	@ (80135b8 <tcp_output_control_segment+0x88>)
 8013546:	f240 7287 	movw	r2, #1927	@ 0x787
 801354a:	491c      	ldr	r1, [pc, #112]	@ (80135bc <tcp_output_control_segment+0x8c>)
 801354c:	481c      	ldr	r0, [pc, #112]	@ (80135c0 <tcp_output_control_segment+0x90>)
 801354e:	f005 fcc1 	bl	8018ed4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013552:	683a      	ldr	r2, [r7, #0]
 8013554:	6879      	ldr	r1, [r7, #4]
 8013556:	68f8      	ldr	r0, [r7, #12]
 8013558:	f7fe faea 	bl	8011b30 <tcp_route>
 801355c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d102      	bne.n	801356a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013564:	23fc      	movs	r3, #252	@ 0xfc
 8013566:	75fb      	strb	r3, [r7, #23]
 8013568:	e01c      	b.n	80135a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d006      	beq.n	801357e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	7adb      	ldrb	r3, [r3, #11]
 8013574:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	7a9b      	ldrb	r3, [r3, #10]
 801357a:	757b      	strb	r3, [r7, #21]
 801357c:	e003      	b.n	8013586 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801357e:	23ff      	movs	r3, #255	@ 0xff
 8013580:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013586:	7dba      	ldrb	r2, [r7, #22]
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	9302      	str	r3, [sp, #8]
 801358c:	2306      	movs	r3, #6
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	7d7b      	ldrb	r3, [r7, #21]
 8013592:	9300      	str	r3, [sp, #0]
 8013594:	4613      	mov	r3, r2
 8013596:	683a      	ldr	r2, [r7, #0]
 8013598:	6879      	ldr	r1, [r7, #4]
 801359a:	68b8      	ldr	r0, [r7, #8]
 801359c:	f004 f95c 	bl	8017858 <ip4_output_if>
 80135a0:	4603      	mov	r3, r0
 80135a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135a4:	68b8      	ldr	r0, [r7, #8]
 80135a6:	f7f9 fd5b 	bl	800d060 <pbuf_free>
  return err;
 80135aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3718      	adds	r7, #24
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	0801c830 	.word	0x0801c830
 80135bc:	0801cf88 	.word	0x0801cf88
 80135c0:	0801c884 	.word	0x0801c884

080135c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b08b      	sub	sp, #44	@ 0x2c
 80135c8:	af04      	add	r7, sp, #16
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d106      	bne.n	80135e6 <tcp_rst+0x22>
 80135d8:	4b1f      	ldr	r3, [pc, #124]	@ (8013658 <tcp_rst+0x94>)
 80135da:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80135de:	491f      	ldr	r1, [pc, #124]	@ (801365c <tcp_rst+0x98>)
 80135e0:	481f      	ldr	r0, [pc, #124]	@ (8013660 <tcp_rst+0x9c>)
 80135e2:	f005 fc77 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80135e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d106      	bne.n	80135fa <tcp_rst+0x36>
 80135ec:	4b1a      	ldr	r3, [pc, #104]	@ (8013658 <tcp_rst+0x94>)
 80135ee:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80135f2:	491c      	ldr	r1, [pc, #112]	@ (8013664 <tcp_rst+0xa0>)
 80135f4:	481a      	ldr	r0, [pc, #104]	@ (8013660 <tcp_rst+0x9c>)
 80135f6:	f005 fc6d 	bl	8018ed4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135fa:	2300      	movs	r3, #0
 80135fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80135fe:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013602:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013604:	7dfb      	ldrb	r3, [r7, #23]
 8013606:	b29c      	uxth	r4, r3
 8013608:	68b8      	ldr	r0, [r7, #8]
 801360a:	f7f8 f90a 	bl	800b822 <lwip_htonl>
 801360e:	4602      	mov	r2, r0
 8013610:	8abb      	ldrh	r3, [r7, #20]
 8013612:	9303      	str	r3, [sp, #12]
 8013614:	2314      	movs	r3, #20
 8013616:	9302      	str	r3, [sp, #8]
 8013618:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801361a:	9301      	str	r3, [sp, #4]
 801361c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801361e:	9300      	str	r3, [sp, #0]
 8013620:	4613      	mov	r3, r2
 8013622:	2200      	movs	r2, #0
 8013624:	4621      	mov	r1, r4
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f7ff fe94 	bl	8013354 <tcp_output_alloc_header_common>
 801362c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d00c      	beq.n	801364e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	2200      	movs	r2, #0
 8013638:	6939      	ldr	r1, [r7, #16]
 801363a:	68f8      	ldr	r0, [r7, #12]
 801363c:	f7ff ff3a 	bl	80134b4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013642:	683a      	ldr	r2, [r7, #0]
 8013644:	6939      	ldr	r1, [r7, #16]
 8013646:	68f8      	ldr	r0, [r7, #12]
 8013648:	f7ff ff72 	bl	8013530 <tcp_output_control_segment>
 801364c:	e000      	b.n	8013650 <tcp_rst+0x8c>
    return;
 801364e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013650:	371c      	adds	r7, #28
 8013652:	46bd      	mov	sp, r7
 8013654:	bd90      	pop	{r4, r7, pc}
 8013656:	bf00      	nop
 8013658:	0801c830 	.word	0x0801c830
 801365c:	0801cfb4 	.word	0x0801cfb4
 8013660:	0801c884 	.word	0x0801c884
 8013664:	0801cfd0 	.word	0x0801cfd0

08013668 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013668:	b590      	push	{r4, r7, lr}
 801366a:	b087      	sub	sp, #28
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013670:	2300      	movs	r3, #0
 8013672:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d106      	bne.n	801368c <tcp_send_empty_ack+0x24>
 801367e:	4b28      	ldr	r3, [pc, #160]	@ (8013720 <tcp_send_empty_ack+0xb8>)
 8013680:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013684:	4927      	ldr	r1, [pc, #156]	@ (8013724 <tcp_send_empty_ack+0xbc>)
 8013686:	4828      	ldr	r0, [pc, #160]	@ (8013728 <tcp_send_empty_ack+0xc0>)
 8013688:	f005 fc24 	bl	8018ed4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801368c:	7dfb      	ldrb	r3, [r7, #23]
 801368e:	009b      	lsls	r3, r3, #2
 8013690:	b2db      	uxtb	r3, r3
 8013692:	f003 0304 	and.w	r3, r3, #4
 8013696:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013698:	7d7b      	ldrb	r3, [r7, #21]
 801369a:	b29c      	uxth	r4, r3
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7f8 f8be 	bl	800b822 <lwip_htonl>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2200      	movs	r2, #0
 80136aa:	4621      	mov	r1, r4
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f7ff fec3 	bl	8013438 <tcp_output_alloc_header>
 80136b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d109      	bne.n	80136ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	8b5b      	ldrh	r3, [r3, #26]
 80136be:	f043 0303 	orr.w	r3, r3, #3
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80136c8:	f06f 0301 	mvn.w	r3, #1
 80136cc:	e023      	b.n	8013716 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80136ce:	7dbb      	ldrb	r3, [r7, #22]
 80136d0:	7dfa      	ldrb	r2, [r7, #23]
 80136d2:	6939      	ldr	r1, [r7, #16]
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f7ff feed 	bl	80134b4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	3304      	adds	r3, #4
 80136e0:	6939      	ldr	r1, [r7, #16]
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ff ff24 	bl	8013530 <tcp_output_control_segment>
 80136e8:	4603      	mov	r3, r0
 80136ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80136ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d007      	beq.n	8013704 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	8b5b      	ldrh	r3, [r3, #26]
 80136f8:	f043 0303 	orr.w	r3, r3, #3
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	835a      	strh	r2, [r3, #26]
 8013702:	e006      	b.n	8013712 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	8b5b      	ldrh	r3, [r3, #26]
 8013708:	f023 0303 	bic.w	r3, r3, #3
 801370c:	b29a      	uxth	r2, r3
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013716:	4618      	mov	r0, r3
 8013718:	371c      	adds	r7, #28
 801371a:	46bd      	mov	sp, r7
 801371c:	bd90      	pop	{r4, r7, pc}
 801371e:	bf00      	nop
 8013720:	0801c830 	.word	0x0801c830
 8013724:	0801cfec 	.word	0x0801cfec
 8013728:	0801c884 	.word	0x0801c884

0801372c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801372c:	b590      	push	{r4, r7, lr}
 801372e:	b087      	sub	sp, #28
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013734:	2300      	movs	r3, #0
 8013736:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d106      	bne.n	801374c <tcp_keepalive+0x20>
 801373e:	4b18      	ldr	r3, [pc, #96]	@ (80137a0 <tcp_keepalive+0x74>)
 8013740:	f640 0224 	movw	r2, #2084	@ 0x824
 8013744:	4917      	ldr	r1, [pc, #92]	@ (80137a4 <tcp_keepalive+0x78>)
 8013746:	4818      	ldr	r0, [pc, #96]	@ (80137a8 <tcp_keepalive+0x7c>)
 8013748:	f005 fbc4 	bl	8018ed4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801374c:	7dfb      	ldrb	r3, [r7, #23]
 801374e:	b29c      	uxth	r4, r3
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013754:	3b01      	subs	r3, #1
 8013756:	4618      	mov	r0, r3
 8013758:	f7f8 f863 	bl	800b822 <lwip_htonl>
 801375c:	4603      	mov	r3, r0
 801375e:	2200      	movs	r2, #0
 8013760:	4621      	mov	r1, r4
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f7ff fe68 	bl	8013438 <tcp_output_alloc_header>
 8013768:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d102      	bne.n	8013776 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013770:	f04f 33ff 	mov.w	r3, #4294967295
 8013774:	e010      	b.n	8013798 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013776:	7dfb      	ldrb	r3, [r7, #23]
 8013778:	2200      	movs	r2, #0
 801377a:	6939      	ldr	r1, [r7, #16]
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f7ff fe99 	bl	80134b4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3304      	adds	r3, #4
 8013788:	6939      	ldr	r1, [r7, #16]
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f7ff fed0 	bl	8013530 <tcp_output_control_segment>
 8013790:	4603      	mov	r3, r0
 8013792:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013798:	4618      	mov	r0, r3
 801379a:	371c      	adds	r7, #28
 801379c:	46bd      	mov	sp, r7
 801379e:	bd90      	pop	{r4, r7, pc}
 80137a0:	0801c830 	.word	0x0801c830
 80137a4:	0801d00c 	.word	0x0801d00c
 80137a8:	0801c884 	.word	0x0801c884

080137ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137ac:	b590      	push	{r4, r7, lr}
 80137ae:	b08b      	sub	sp, #44	@ 0x2c
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137b4:	2300      	movs	r3, #0
 80137b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d106      	bne.n	80137ce <tcp_zero_window_probe+0x22>
 80137c0:	4b4c      	ldr	r3, [pc, #304]	@ (80138f4 <tcp_zero_window_probe+0x148>)
 80137c2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80137c6:	494c      	ldr	r1, [pc, #304]	@ (80138f8 <tcp_zero_window_probe+0x14c>)
 80137c8:	484c      	ldr	r0, [pc, #304]	@ (80138fc <tcp_zero_window_probe+0x150>)
 80137ca:	f005 fb83 	bl	8018ed4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80137d4:	6a3b      	ldr	r3, [r7, #32]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d101      	bne.n	80137de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80137da:	2300      	movs	r3, #0
 80137dc:	e086      	b.n	80138ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80137e4:	2bff      	cmp	r3, #255	@ 0xff
 80137e6:	d007      	beq.n	80137f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80137ee:	3301      	adds	r3, #1
 80137f0:	b2da      	uxtb	r2, r3
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80137f8:	6a3b      	ldr	r3, [r7, #32]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	899b      	ldrh	r3, [r3, #12]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	4618      	mov	r0, r3
 8013802:	f7f7 fff9 	bl	800b7f8 <lwip_htons>
 8013806:	4603      	mov	r3, r0
 8013808:	b2db      	uxtb	r3, r3
 801380a:	f003 0301 	and.w	r3, r3, #1
 801380e:	2b00      	cmp	r3, #0
 8013810:	d005      	beq.n	801381e <tcp_zero_window_probe+0x72>
 8013812:	6a3b      	ldr	r3, [r7, #32]
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d101      	bne.n	801381e <tcp_zero_window_probe+0x72>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <tcp_zero_window_probe+0x74>
 801381e:	2300      	movs	r3, #0
 8013820:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013822:	7ffb      	ldrb	r3, [r7, #31]
 8013824:	2b00      	cmp	r3, #0
 8013826:	bf0c      	ite	eq
 8013828:	2301      	moveq	r3, #1
 801382a:	2300      	movne	r3, #0
 801382c:	b2db      	uxtb	r3, r3
 801382e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013834:	b299      	uxth	r1, r3
 8013836:	6a3b      	ldr	r3, [r7, #32]
 8013838:	68db      	ldr	r3, [r3, #12]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	8bba      	ldrh	r2, [r7, #28]
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7ff fdfa 	bl	8013438 <tcp_output_alloc_header>
 8013844:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d102      	bne.n	8013852 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801384c:	f04f 33ff 	mov.w	r3, #4294967295
 8013850:	e04c      	b.n	80138ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013858:	7ffb      	ldrb	r3, [r7, #31]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d011      	beq.n	8013882 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	899b      	ldrh	r3, [r3, #12]
 8013862:	b29b      	uxth	r3, r3
 8013864:	b21b      	sxth	r3, r3
 8013866:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801386a:	b21c      	sxth	r4, r3
 801386c:	2011      	movs	r0, #17
 801386e:	f7f7 ffc3 	bl	800b7f8 <lwip_htons>
 8013872:	4603      	mov	r3, r0
 8013874:	b21b      	sxth	r3, r3
 8013876:	4323      	orrs	r3, r4
 8013878:	b21b      	sxth	r3, r3
 801387a:	b29a      	uxth	r2, r3
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	819a      	strh	r2, [r3, #12]
 8013880:	e010      	b.n	80138a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	3314      	adds	r3, #20
 8013888:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801388a:	6a3b      	ldr	r3, [r7, #32]
 801388c:	6858      	ldr	r0, [r3, #4]
 801388e:	6a3b      	ldr	r3, [r7, #32]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	891a      	ldrh	r2, [r3, #8]
 8013894:	6a3b      	ldr	r3, [r7, #32]
 8013896:	891b      	ldrh	r3, [r3, #8]
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	b29b      	uxth	r3, r3
 801389c:	2201      	movs	r2, #1
 801389e:	6939      	ldr	r1, [r7, #16]
 80138a0:	f7f9 fde4 	bl	800d46c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138a4:	6a3b      	ldr	r3, [r7, #32]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7f7 ffb9 	bl	800b822 <lwip_htonl>
 80138b0:	4603      	mov	r3, r0
 80138b2:	3301      	adds	r3, #1
 80138b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	1ad3      	subs	r3, r2, r3
 80138be:	2b00      	cmp	r3, #0
 80138c0:	da02      	bge.n	80138c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80138c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138cc:	2200      	movs	r2, #0
 80138ce:	69b9      	ldr	r1, [r7, #24]
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f7ff fdef 	bl	80134b4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	3304      	adds	r3, #4
 80138dc:	69b9      	ldr	r1, [r7, #24]
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f7ff fe26 	bl	8013530 <tcp_output_control_segment>
 80138e4:	4603      	mov	r3, r0
 80138e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80138e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	372c      	adds	r7, #44	@ 0x2c
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd90      	pop	{r4, r7, pc}
 80138f4:	0801c830 	.word	0x0801c830
 80138f8:	0801d028 	.word	0x0801d028
 80138fc:	0801c884 	.word	0x0801c884

08013900 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013908:	f7f9 fe9e 	bl	800d648 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801390c:	4b0a      	ldr	r3, [pc, #40]	@ (8013938 <tcpip_tcp_timer+0x38>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d103      	bne.n	801391c <tcpip_tcp_timer+0x1c>
 8013914:	4b09      	ldr	r3, [pc, #36]	@ (801393c <tcpip_tcp_timer+0x3c>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d005      	beq.n	8013928 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801391c:	2200      	movs	r2, #0
 801391e:	4908      	ldr	r1, [pc, #32]	@ (8013940 <tcpip_tcp_timer+0x40>)
 8013920:	20fa      	movs	r0, #250	@ 0xfa
 8013922:	f000 f8f3 	bl	8013b0c <sys_timeout>
 8013926:	e003      	b.n	8013930 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013928:	4b06      	ldr	r3, [pc, #24]	@ (8013944 <tcpip_tcp_timer+0x44>)
 801392a:	2200      	movs	r2, #0
 801392c:	601a      	str	r2, [r3, #0]
  }
}
 801392e:	bf00      	nop
 8013930:	bf00      	nop
 8013932:	3708      	adds	r7, #8
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}
 8013938:	20010f80 	.word	0x20010f80
 801393c:	20010f84 	.word	0x20010f84
 8013940:	08013901 	.word	0x08013901
 8013944:	20010fcc 	.word	0x20010fcc

08013948 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801394c:	4b0a      	ldr	r3, [pc, #40]	@ (8013978 <tcp_timer_needed+0x30>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d10f      	bne.n	8013974 <tcp_timer_needed+0x2c>
 8013954:	4b09      	ldr	r3, [pc, #36]	@ (801397c <tcp_timer_needed+0x34>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d103      	bne.n	8013964 <tcp_timer_needed+0x1c>
 801395c:	4b08      	ldr	r3, [pc, #32]	@ (8013980 <tcp_timer_needed+0x38>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d007      	beq.n	8013974 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013964:	4b04      	ldr	r3, [pc, #16]	@ (8013978 <tcp_timer_needed+0x30>)
 8013966:	2201      	movs	r2, #1
 8013968:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801396a:	2200      	movs	r2, #0
 801396c:	4905      	ldr	r1, [pc, #20]	@ (8013984 <tcp_timer_needed+0x3c>)
 801396e:	20fa      	movs	r0, #250	@ 0xfa
 8013970:	f000 f8cc 	bl	8013b0c <sys_timeout>
  }
}
 8013974:	bf00      	nop
 8013976:	bd80      	pop	{r7, pc}
 8013978:	20010fcc 	.word	0x20010fcc
 801397c:	20010f80 	.word	0x20010f80
 8013980:	20010f84 	.word	0x20010f84
 8013984:	08013901 	.word	0x08013901

08013988 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b086      	sub	sp, #24
 801398c:	af00      	add	r7, sp, #0
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	60b9      	str	r1, [r7, #8]
 8013992:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013994:	200a      	movs	r0, #10
 8013996:	f7f8 fc3d 	bl	800c214 <memp_malloc>
 801399a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d109      	bne.n	80139b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d151      	bne.n	8013a4c <sys_timeout_abs+0xc4>
 80139a8:	4b2a      	ldr	r3, [pc, #168]	@ (8013a54 <sys_timeout_abs+0xcc>)
 80139aa:	22be      	movs	r2, #190	@ 0xbe
 80139ac:	492a      	ldr	r1, [pc, #168]	@ (8013a58 <sys_timeout_abs+0xd0>)
 80139ae:	482b      	ldr	r0, [pc, #172]	@ (8013a5c <sys_timeout_abs+0xd4>)
 80139b0:	f005 fa90 	bl	8018ed4 <iprintf>
    return;
 80139b4:	e04a      	b.n	8013a4c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	2200      	movs	r2, #0
 80139ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	68fa      	ldr	r2, [r7, #12]
 80139cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80139ce:	4b24      	ldr	r3, [pc, #144]	@ (8013a60 <sys_timeout_abs+0xd8>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d103      	bne.n	80139de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80139d6:	4a22      	ldr	r2, [pc, #136]	@ (8013a60 <sys_timeout_abs+0xd8>)
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	6013      	str	r3, [r2, #0]
    return;
 80139dc:	e037      	b.n	8013a4e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	685a      	ldr	r2, [r3, #4]
 80139e2:	4b1f      	ldr	r3, [pc, #124]	@ (8013a60 <sys_timeout_abs+0xd8>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	0fdb      	lsrs	r3, r3, #31
 80139ec:	f003 0301 	and.w	r3, r3, #1
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d007      	beq.n	8013a06 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80139f6:	4b1a      	ldr	r3, [pc, #104]	@ (8013a60 <sys_timeout_abs+0xd8>)
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80139fe:	4a18      	ldr	r2, [pc, #96]	@ (8013a60 <sys_timeout_abs+0xd8>)
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	e023      	b.n	8013a4e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a06:	4b16      	ldr	r3, [pc, #88]	@ (8013a60 <sys_timeout_abs+0xd8>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	617b      	str	r3, [r7, #20]
 8013a0c:	e01a      	b.n	8013a44 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00b      	beq.n	8013a2e <sys_timeout_abs+0xa6>
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	685a      	ldr	r2, [r3, #4]
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	1ad3      	subs	r3, r2, r3
 8013a22:	0fdb      	lsrs	r3, r3, #31
 8013a24:	f003 0301 	and.w	r3, r3, #1
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d007      	beq.n	8013a3e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	693a      	ldr	r2, [r7, #16]
 8013a3a:	601a      	str	r2, [r3, #0]
        break;
 8013a3c:	e007      	b.n	8013a4e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	617b      	str	r3, [r7, #20]
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d1e1      	bne.n	8013a0e <sys_timeout_abs+0x86>
 8013a4a:	e000      	b.n	8013a4e <sys_timeout_abs+0xc6>
    return;
 8013a4c:	bf00      	nop
      }
    }
  }
}
 8013a4e:	3718      	adds	r7, #24
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	0801d04c 	.word	0x0801d04c
 8013a58:	0801d080 	.word	0x0801d080
 8013a5c:	0801d0c0 	.word	0x0801d0c0
 8013a60:	20010fc4 	.word	0x20010fc4

08013a64 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b086      	sub	sp, #24
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	4798      	blx	r3

  now = sys_now();
 8013a76:	f7f1 f9ad 	bl	8004dd4 <sys_now>
 8013a7a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	4b0f      	ldr	r3, [pc, #60]	@ (8013ac0 <lwip_cyclic_timer+0x5c>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4413      	add	r3, r2
 8013a86:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013a88:	68fa      	ldr	r2, [r7, #12]
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	0fdb      	lsrs	r3, r3, #31
 8013a90:	f003 0301 	and.w	r3, r3, #1
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d009      	beq.n	8013aae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	4413      	add	r3, r2
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	4907      	ldr	r1, [pc, #28]	@ (8013ac4 <lwip_cyclic_timer+0x60>)
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7ff ff6e 	bl	8013988 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013aac:	e004      	b.n	8013ab8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	4904      	ldr	r1, [pc, #16]	@ (8013ac4 <lwip_cyclic_timer+0x60>)
 8013ab2:	68f8      	ldr	r0, [r7, #12]
 8013ab4:	f7ff ff68 	bl	8013988 <sys_timeout_abs>
}
 8013ab8:	bf00      	nop
 8013aba:	3718      	adds	r7, #24
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	20010fc8 	.word	0x20010fc8
 8013ac4:	08013a65 	.word	0x08013a65

08013ac8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013ace:	2301      	movs	r3, #1
 8013ad0:	607b      	str	r3, [r7, #4]
 8013ad2:	e00e      	b.n	8013af2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8013b04 <sys_timeouts_init+0x3c>)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	00db      	lsls	r3, r3, #3
 8013ae0:	4a08      	ldr	r2, [pc, #32]	@ (8013b04 <sys_timeouts_init+0x3c>)
 8013ae2:	4413      	add	r3, r2
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	4908      	ldr	r1, [pc, #32]	@ (8013b08 <sys_timeouts_init+0x40>)
 8013ae8:	f000 f810 	bl	8013b0c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	3301      	adds	r3, #1
 8013af0:	607b      	str	r3, [r7, #4]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2b04      	cmp	r3, #4
 8013af6:	d9ed      	bls.n	8013ad4 <sys_timeouts_init+0xc>
  }
}
 8013af8:	bf00      	nop
 8013afa:	bf00      	nop
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	08028154 	.word	0x08028154
 8013b08:	08013a65 	.word	0x08013a65

08013b0c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b086      	sub	sp, #24
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b1e:	d306      	bcc.n	8013b2e <sys_timeout+0x22>
 8013b20:	4b0a      	ldr	r3, [pc, #40]	@ (8013b4c <sys_timeout+0x40>)
 8013b22:	f240 1229 	movw	r2, #297	@ 0x129
 8013b26:	490a      	ldr	r1, [pc, #40]	@ (8013b50 <sys_timeout+0x44>)
 8013b28:	480a      	ldr	r0, [pc, #40]	@ (8013b54 <sys_timeout+0x48>)
 8013b2a:	f005 f9d3 	bl	8018ed4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b2e:	f7f1 f951 	bl	8004dd4 <sys_now>
 8013b32:	4602      	mov	r2, r0
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	4413      	add	r3, r2
 8013b38:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	68b9      	ldr	r1, [r7, #8]
 8013b3e:	6978      	ldr	r0, [r7, #20]
 8013b40:	f7ff ff22 	bl	8013988 <sys_timeout_abs>
#endif
}
 8013b44:	bf00      	nop
 8013b46:	3718      	adds	r7, #24
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	0801d04c 	.word	0x0801d04c
 8013b50:	0801d0e8 	.word	0x0801d0e8
 8013b54:	0801d0c0 	.word	0x0801d0c0

08013b58 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013b5e:	f7f1 f939 	bl	8004dd4 <sys_now>
 8013b62:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013b64:	4b17      	ldr	r3, [pc, #92]	@ (8013bc4 <sys_check_timeouts+0x6c>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d022      	beq.n	8013bb6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	1ad3      	subs	r3, r2, r3
 8013b78:	0fdb      	lsrs	r3, r3, #31
 8013b7a:	f003 0301 	and.w	r3, r3, #1
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d11a      	bne.n	8013bba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	4a0e      	ldr	r2, [pc, #56]	@ (8013bc4 <sys_check_timeouts+0x6c>)
 8013b8a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	689b      	ldr	r3, [r3, #8]
 8013b90:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8013bc8 <sys_check_timeouts+0x70>)
 8013b9e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013ba0:	68b9      	ldr	r1, [r7, #8]
 8013ba2:	200a      	movs	r0, #10
 8013ba4:	f7f8 fbac 	bl	800c300 <memp_free>
    if (handler != NULL) {
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d0da      	beq.n	8013b64 <sys_check_timeouts+0xc>
      handler(arg);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6838      	ldr	r0, [r7, #0]
 8013bb2:	4798      	blx	r3
  do {
 8013bb4:	e7d6      	b.n	8013b64 <sys_check_timeouts+0xc>
      return;
 8013bb6:	bf00      	nop
 8013bb8:	e000      	b.n	8013bbc <sys_check_timeouts+0x64>
      return;
 8013bba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	20010fc4 	.word	0x20010fc4
 8013bc8:	20010fc8 	.word	0x20010fc8

08013bcc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013bd2:	4b16      	ldr	r3, [pc, #88]	@ (8013c2c <sys_timeouts_sleeptime+0x60>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d102      	bne.n	8013be0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013bda:	f04f 33ff 	mov.w	r3, #4294967295
 8013bde:	e020      	b.n	8013c22 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013be0:	f7f1 f8f8 	bl	8004dd4 <sys_now>
 8013be4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013be6:	4b11      	ldr	r3, [pc, #68]	@ (8013c2c <sys_timeouts_sleeptime+0x60>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	685a      	ldr	r2, [r3, #4]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	0fdb      	lsrs	r3, r3, #31
 8013bf2:	f003 0301 	and.w	r3, r3, #1
 8013bf6:	b2db      	uxtb	r3, r3
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d001      	beq.n	8013c00 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	e010      	b.n	8013c22 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c00:	4b0a      	ldr	r3, [pc, #40]	@ (8013c2c <sys_timeouts_sleeptime+0x60>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	685a      	ldr	r2, [r3, #4]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	1ad3      	subs	r3, r2, r3
 8013c0a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	da06      	bge.n	8013c20 <sys_timeouts_sleeptime+0x54>
 8013c12:	4b07      	ldr	r3, [pc, #28]	@ (8013c30 <sys_timeouts_sleeptime+0x64>)
 8013c14:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013c18:	4906      	ldr	r1, [pc, #24]	@ (8013c34 <sys_timeouts_sleeptime+0x68>)
 8013c1a:	4807      	ldr	r0, [pc, #28]	@ (8013c38 <sys_timeouts_sleeptime+0x6c>)
 8013c1c:	f005 f95a 	bl	8018ed4 <iprintf>
    return ret;
 8013c20:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
 8013c2a:	bf00      	nop
 8013c2c:	20010fc4 	.word	0x20010fc4
 8013c30:	0801d04c 	.word	0x0801d04c
 8013c34:	0801d120 	.word	0x0801d120
 8013c38:	0801d0c0 	.word	0x0801d0c0

08013c3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c40:	f005 f848 	bl	8018cd4 <rand>
 8013c44:	4603      	mov	r3, r0
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	4b01      	ldr	r3, [pc, #4]	@ (8013c5c <udp_init+0x20>)
 8013c56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c58:	bf00      	nop
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	2000002c 	.word	0x2000002c

08013c60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013c66:	2300      	movs	r3, #0
 8013c68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013c6a:	4b17      	ldr	r3, [pc, #92]	@ (8013cc8 <udp_new_port+0x68>)
 8013c6c:	881b      	ldrh	r3, [r3, #0]
 8013c6e:	1c5a      	adds	r2, r3, #1
 8013c70:	b291      	uxth	r1, r2
 8013c72:	4a15      	ldr	r2, [pc, #84]	@ (8013cc8 <udp_new_port+0x68>)
 8013c74:	8011      	strh	r1, [r2, #0]
 8013c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d103      	bne.n	8013c86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013c7e:	4b12      	ldr	r3, [pc, #72]	@ (8013cc8 <udp_new_port+0x68>)
 8013c80:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013c84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c86:	4b11      	ldr	r3, [pc, #68]	@ (8013ccc <udp_new_port+0x6c>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	603b      	str	r3, [r7, #0]
 8013c8c:	e011      	b.n	8013cb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	8a5a      	ldrh	r2, [r3, #18]
 8013c92:	4b0d      	ldr	r3, [pc, #52]	@ (8013cc8 <udp_new_port+0x68>)
 8013c94:	881b      	ldrh	r3, [r3, #0]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d108      	bne.n	8013cac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013c9a:	88fb      	ldrh	r3, [r7, #6]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	80fb      	strh	r3, [r7, #6]
 8013ca0:	88fb      	ldrh	r3, [r7, #6]
 8013ca2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013ca6:	d3e0      	bcc.n	8013c6a <udp_new_port+0xa>
        return 0;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	e007      	b.n	8013cbc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	603b      	str	r3, [r7, #0]
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d1ea      	bne.n	8013c8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013cb8:	4b03      	ldr	r3, [pc, #12]	@ (8013cc8 <udp_new_port+0x68>)
 8013cba:	881b      	ldrh	r3, [r3, #0]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr
 8013cc8:	2000002c 	.word	0x2000002c
 8013ccc:	20010fd0 	.word	0x20010fd0

08013cd0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	60f8      	str	r0, [r7, #12]
 8013cd8:	60b9      	str	r1, [r7, #8]
 8013cda:	4613      	mov	r3, r2
 8013cdc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d105      	bne.n	8013cf0 <udp_input_local_match+0x20>
 8013ce4:	4b27      	ldr	r3, [pc, #156]	@ (8013d84 <udp_input_local_match+0xb4>)
 8013ce6:	2287      	movs	r2, #135	@ 0x87
 8013ce8:	4927      	ldr	r1, [pc, #156]	@ (8013d88 <udp_input_local_match+0xb8>)
 8013cea:	4828      	ldr	r0, [pc, #160]	@ (8013d8c <udp_input_local_match+0xbc>)
 8013cec:	f005 f8f2 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d105      	bne.n	8013d02 <udp_input_local_match+0x32>
 8013cf6:	4b23      	ldr	r3, [pc, #140]	@ (8013d84 <udp_input_local_match+0xb4>)
 8013cf8:	2288      	movs	r2, #136	@ 0x88
 8013cfa:	4925      	ldr	r1, [pc, #148]	@ (8013d90 <udp_input_local_match+0xc0>)
 8013cfc:	4823      	ldr	r0, [pc, #140]	@ (8013d8c <udp_input_local_match+0xbc>)
 8013cfe:	f005 f8e9 	bl	8018ed4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	7a1b      	ldrb	r3, [r3, #8]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00b      	beq.n	8013d22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	7a1a      	ldrb	r2, [r3, #8]
 8013d0e:	4b21      	ldr	r3, [pc, #132]	@ (8013d94 <udp_input_local_match+0xc4>)
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013d16:	3301      	adds	r3, #1
 8013d18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d001      	beq.n	8013d22 <udp_input_local_match+0x52>
    return 0;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	e02b      	b.n	8013d7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d22:	79fb      	ldrb	r3, [r7, #7]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d018      	beq.n	8013d5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d013      	beq.n	8013d56 <udp_input_local_match+0x86>
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00f      	beq.n	8013d56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d36:	4b17      	ldr	r3, [pc, #92]	@ (8013d94 <udp_input_local_match+0xc4>)
 8013d38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3e:	d00a      	beq.n	8013d56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	4b13      	ldr	r3, [pc, #76]	@ (8013d94 <udp_input_local_match+0xc4>)
 8013d46:	695b      	ldr	r3, [r3, #20]
 8013d48:	405a      	eors	r2, r3
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	3308      	adds	r3, #8
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d110      	bne.n	8013d78 <udp_input_local_match+0xa8>
          return 1;
 8013d56:	2301      	movs	r3, #1
 8013d58:	e00f      	b.n	8013d7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d009      	beq.n	8013d74 <udp_input_local_match+0xa4>
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d005      	beq.n	8013d74 <udp_input_local_match+0xa4>
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	4b09      	ldr	r3, [pc, #36]	@ (8013d94 <udp_input_local_match+0xc4>)
 8013d6e:	695b      	ldr	r3, [r3, #20]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d101      	bne.n	8013d78 <udp_input_local_match+0xa8>
        return 1;
 8013d74:	2301      	movs	r3, #1
 8013d76:	e000      	b.n	8013d7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013d78:	2300      	movs	r3, #0
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3710      	adds	r7, #16
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	0801d134 	.word	0x0801d134
 8013d88:	0801d164 	.word	0x0801d164
 8013d8c:	0801d188 	.word	0x0801d188
 8013d90:	0801d1b0 	.word	0x0801d1b0
 8013d94:	2000d800 	.word	0x2000d800

08013d98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013d98:	b590      	push	{r4, r7, lr}
 8013d9a:	b08d      	sub	sp, #52	@ 0x34
 8013d9c:	af02      	add	r7, sp, #8
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013da2:	2300      	movs	r3, #0
 8013da4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d105      	bne.n	8013db8 <udp_input+0x20>
 8013dac:	4b7c      	ldr	r3, [pc, #496]	@ (8013fa0 <udp_input+0x208>)
 8013dae:	22cf      	movs	r2, #207	@ 0xcf
 8013db0:	497c      	ldr	r1, [pc, #496]	@ (8013fa4 <udp_input+0x20c>)
 8013db2:	487d      	ldr	r0, [pc, #500]	@ (8013fa8 <udp_input+0x210>)
 8013db4:	f005 f88e 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d105      	bne.n	8013dca <udp_input+0x32>
 8013dbe:	4b78      	ldr	r3, [pc, #480]	@ (8013fa0 <udp_input+0x208>)
 8013dc0:	22d0      	movs	r2, #208	@ 0xd0
 8013dc2:	497a      	ldr	r1, [pc, #488]	@ (8013fac <udp_input+0x214>)
 8013dc4:	4878      	ldr	r0, [pc, #480]	@ (8013fa8 <udp_input+0x210>)
 8013dc6:	f005 f885 	bl	8018ed4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	895b      	ldrh	r3, [r3, #10]
 8013dce:	2b07      	cmp	r3, #7
 8013dd0:	d803      	bhi.n	8013dda <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f7f9 f944 	bl	800d060 <pbuf_free>
    goto end;
 8013dd8:	e0de      	b.n	8013f98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013de0:	4b73      	ldr	r3, [pc, #460]	@ (8013fb0 <udp_input+0x218>)
 8013de2:	695b      	ldr	r3, [r3, #20]
 8013de4:	4a72      	ldr	r2, [pc, #456]	@ (8013fb0 <udp_input+0x218>)
 8013de6:	6812      	ldr	r2, [r2, #0]
 8013de8:	4611      	mov	r1, r2
 8013dea:	4618      	mov	r0, r3
 8013dec:	f003 fe0c 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 8013df0:	4603      	mov	r3, r0
 8013df2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	881b      	ldrh	r3, [r3, #0]
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7f7 fcfc 	bl	800b7f8 <lwip_htons>
 8013e00:	4603      	mov	r3, r0
 8013e02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	885b      	ldrh	r3, [r3, #2]
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7f7 fcf4 	bl	800b7f8 <lwip_htons>
 8013e10:	4603      	mov	r3, r0
 8013e12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e14:	2300      	movs	r3, #0
 8013e16:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e20:	4b64      	ldr	r3, [pc, #400]	@ (8013fb4 <udp_input+0x21c>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e26:	e054      	b.n	8013ed2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e2a:	8a5b      	ldrh	r3, [r3, #18]
 8013e2c:	89fa      	ldrh	r2, [r7, #14]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d14a      	bne.n	8013ec8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e32:	7cfb      	ldrb	r3, [r7, #19]
 8013e34:	461a      	mov	r2, r3
 8013e36:	6839      	ldr	r1, [r7, #0]
 8013e38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e3a:	f7ff ff49 	bl	8013cd0 <udp_input_local_match>
 8013e3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d041      	beq.n	8013ec8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e46:	7c1b      	ldrb	r3, [r3, #16]
 8013e48:	f003 0304 	and.w	r3, r3, #4
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d11d      	bne.n	8013e8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e50:	69fb      	ldr	r3, [r7, #28]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d102      	bne.n	8013e5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e58:	61fb      	str	r3, [r7, #28]
 8013e5a:	e017      	b.n	8013e8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e5c:	7cfb      	ldrb	r3, [r7, #19]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d014      	beq.n	8013e8c <udp_input+0xf4>
 8013e62:	4b53      	ldr	r3, [pc, #332]	@ (8013fb0 <udp_input+0x218>)
 8013e64:	695b      	ldr	r3, [r3, #20]
 8013e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e6a:	d10f      	bne.n	8013e8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	681a      	ldr	r2, [r3, #0]
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	3304      	adds	r3, #4
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d008      	beq.n	8013e8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	3304      	adds	r3, #4
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d101      	bne.n	8013e8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e8e:	8a9b      	ldrh	r3, [r3, #20]
 8013e90:	8a3a      	ldrh	r2, [r7, #16]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d118      	bne.n	8013ec8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d005      	beq.n	8013eaa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	4b43      	ldr	r3, [pc, #268]	@ (8013fb0 <udp_input+0x218>)
 8013ea4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d10e      	bne.n	8013ec8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d014      	beq.n	8013eda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb2:	68da      	ldr	r2, [r3, #12]
 8013eb4:	6a3b      	ldr	r3, [r7, #32]
 8013eb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8013fb4 <udp_input+0x21c>)
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8013fb4 <udp_input+0x21c>)
 8013ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ec6:	e008      	b.n	8013eda <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d1a7      	bne.n	8013e28 <udp_input+0x90>
 8013ed8:	e000      	b.n	8013edc <udp_input+0x144>
        break;
 8013eda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d101      	bne.n	8013ee6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <udp_input+0x15a>
    for_us = 1;
 8013eec:	2301      	movs	r3, #1
 8013eee:	76fb      	strb	r3, [r7, #27]
 8013ef0:	e00a      	b.n	8013f08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	3304      	adds	r3, #4
 8013ef6:	681a      	ldr	r2, [r3, #0]
 8013ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8013fb0 <udp_input+0x218>)
 8013efa:	695b      	ldr	r3, [r3, #20]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	bf0c      	ite	eq
 8013f00:	2301      	moveq	r3, #1
 8013f02:	2300      	movne	r3, #0
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f08:	7efb      	ldrb	r3, [r7, #27]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d041      	beq.n	8013f92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f0e:	2108      	movs	r1, #8
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f7f9 f81f 	bl	800cf54 <pbuf_remove_header>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d00a      	beq.n	8013f32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f1c:	4b20      	ldr	r3, [pc, #128]	@ (8013fa0 <udp_input+0x208>)
 8013f1e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013f22:	4925      	ldr	r1, [pc, #148]	@ (8013fb8 <udp_input+0x220>)
 8013f24:	4820      	ldr	r0, [pc, #128]	@ (8013fa8 <udp_input+0x210>)
 8013f26:	f004 ffd5 	bl	8018ed4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7f9 f898 	bl	800d060 <pbuf_free>
      goto end;
 8013f30:	e032      	b.n	8013f98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d012      	beq.n	8013f5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f3a:	699b      	ldr	r3, [r3, #24]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d00a      	beq.n	8013f56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f42:	699c      	ldr	r4, [r3, #24]
 8013f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f46:	69d8      	ldr	r0, [r3, #28]
 8013f48:	8a3b      	ldrh	r3, [r7, #16]
 8013f4a:	9300      	str	r3, [sp, #0]
 8013f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8013fbc <udp_input+0x224>)
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013f52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f54:	e021      	b.n	8013f9a <udp_input+0x202>
        pbuf_free(p);
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7f9 f882 	bl	800d060 <pbuf_free>
        goto end;
 8013f5c:	e01c      	b.n	8013f98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f5e:	7cfb      	ldrb	r3, [r7, #19]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d112      	bne.n	8013f8a <udp_input+0x1f2>
 8013f64:	4b12      	ldr	r3, [pc, #72]	@ (8013fb0 <udp_input+0x218>)
 8013f66:	695b      	ldr	r3, [r3, #20]
 8013f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013f6c:	2be0      	cmp	r3, #224	@ 0xe0
 8013f6e:	d00c      	beq.n	8013f8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013f70:	4b0f      	ldr	r3, [pc, #60]	@ (8013fb0 <udp_input+0x218>)
 8013f72:	899b      	ldrh	r3, [r3, #12]
 8013f74:	3308      	adds	r3, #8
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	b21b      	sxth	r3, r3
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f7f9 f85c 	bl	800d03a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013f82:	2103      	movs	r1, #3
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f003 fa01 	bl	801738c <icmp_dest_unreach>
      pbuf_free(p);
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7f9 f868 	bl	800d060 <pbuf_free>
  return;
 8013f90:	e003      	b.n	8013f9a <udp_input+0x202>
    pbuf_free(p);
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f7f9 f864 	bl	800d060 <pbuf_free>
  return;
 8013f98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013f9a:	372c      	adds	r7, #44	@ 0x2c
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd90      	pop	{r4, r7, pc}
 8013fa0:	0801d134 	.word	0x0801d134
 8013fa4:	0801d1d8 	.word	0x0801d1d8
 8013fa8:	0801d188 	.word	0x0801d188
 8013fac:	0801d1f0 	.word	0x0801d1f0
 8013fb0:	2000d800 	.word	0x2000d800
 8013fb4:	20010fd0 	.word	0x20010fd0
 8013fb8:	0801d20c 	.word	0x0801d20c
 8013fbc:	2000d810 	.word	0x2000d810

08013fc0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b088      	sub	sp, #32
 8013fc4:	af02      	add	r7, sp, #8
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
 8013fcc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d109      	bne.n	8013fe8 <udp_sendto_if+0x28>
 8013fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8014090 <udp_sendto_if+0xd0>)
 8013fd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fda:	492e      	ldr	r1, [pc, #184]	@ (8014094 <udp_sendto_if+0xd4>)
 8013fdc:	482e      	ldr	r0, [pc, #184]	@ (8014098 <udp_sendto_if+0xd8>)
 8013fde:	f004 ff79 	bl	8018ed4 <iprintf>
 8013fe2:	f06f 030f 	mvn.w	r3, #15
 8013fe6:	e04f      	b.n	8014088 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d109      	bne.n	8014002 <udp_sendto_if+0x42>
 8013fee:	4b28      	ldr	r3, [pc, #160]	@ (8014090 <udp_sendto_if+0xd0>)
 8013ff0:	f240 2281 	movw	r2, #641	@ 0x281
 8013ff4:	4929      	ldr	r1, [pc, #164]	@ (801409c <udp_sendto_if+0xdc>)
 8013ff6:	4828      	ldr	r0, [pc, #160]	@ (8014098 <udp_sendto_if+0xd8>)
 8013ff8:	f004 ff6c 	bl	8018ed4 <iprintf>
 8013ffc:	f06f 030f 	mvn.w	r3, #15
 8014000:	e042      	b.n	8014088 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d109      	bne.n	801401c <udp_sendto_if+0x5c>
 8014008:	4b21      	ldr	r3, [pc, #132]	@ (8014090 <udp_sendto_if+0xd0>)
 801400a:	f240 2282 	movw	r2, #642	@ 0x282
 801400e:	4924      	ldr	r1, [pc, #144]	@ (80140a0 <udp_sendto_if+0xe0>)
 8014010:	4821      	ldr	r0, [pc, #132]	@ (8014098 <udp_sendto_if+0xd8>)
 8014012:	f004 ff5f 	bl	8018ed4 <iprintf>
 8014016:	f06f 030f 	mvn.w	r3, #15
 801401a:	e035      	b.n	8014088 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801401c:	6a3b      	ldr	r3, [r7, #32]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d109      	bne.n	8014036 <udp_sendto_if+0x76>
 8014022:	4b1b      	ldr	r3, [pc, #108]	@ (8014090 <udp_sendto_if+0xd0>)
 8014024:	f240 2283 	movw	r2, #643	@ 0x283
 8014028:	491e      	ldr	r1, [pc, #120]	@ (80140a4 <udp_sendto_if+0xe4>)
 801402a:	481b      	ldr	r0, [pc, #108]	@ (8014098 <udp_sendto_if+0xd8>)
 801402c:	f004 ff52 	bl	8018ed4 <iprintf>
 8014030:	f06f 030f 	mvn.w	r3, #15
 8014034:	e028      	b.n	8014088 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d009      	beq.n	8014050 <udp_sendto_if+0x90>
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d005      	beq.n	8014050 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801404c:	2be0      	cmp	r3, #224	@ 0xe0
 801404e:	d103      	bne.n	8014058 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014050:	6a3b      	ldr	r3, [r7, #32]
 8014052:	3304      	adds	r3, #4
 8014054:	617b      	str	r3, [r7, #20]
 8014056:	e00b      	b.n	8014070 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	6a3b      	ldr	r3, [r7, #32]
 801405e:	3304      	adds	r3, #4
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	429a      	cmp	r2, r3
 8014064:	d002      	beq.n	801406c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014066:	f06f 0303 	mvn.w	r3, #3
 801406a:	e00d      	b.n	8014088 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014070:	887a      	ldrh	r2, [r7, #2]
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	9301      	str	r3, [sp, #4]
 8014076:	6a3b      	ldr	r3, [r7, #32]
 8014078:	9300      	str	r3, [sp, #0]
 801407a:	4613      	mov	r3, r2
 801407c:	687a      	ldr	r2, [r7, #4]
 801407e:	68b9      	ldr	r1, [r7, #8]
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f000 f811 	bl	80140a8 <udp_sendto_if_src>
 8014086:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014088:	4618      	mov	r0, r3
 801408a:	3718      	adds	r7, #24
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	0801d134 	.word	0x0801d134
 8014094:	0801d2a8 	.word	0x0801d2a8
 8014098:	0801d188 	.word	0x0801d188
 801409c:	0801d2c4 	.word	0x0801d2c4
 80140a0:	0801d2e0 	.word	0x0801d2e0
 80140a4:	0801d300 	.word	0x0801d300

080140a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b08c      	sub	sp, #48	@ 0x30
 80140ac:	af04      	add	r7, sp, #16
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	607a      	str	r2, [r7, #4]
 80140b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d109      	bne.n	80140d0 <udp_sendto_if_src+0x28>
 80140bc:	4b65      	ldr	r3, [pc, #404]	@ (8014254 <udp_sendto_if_src+0x1ac>)
 80140be:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80140c2:	4965      	ldr	r1, [pc, #404]	@ (8014258 <udp_sendto_if_src+0x1b0>)
 80140c4:	4865      	ldr	r0, [pc, #404]	@ (801425c <udp_sendto_if_src+0x1b4>)
 80140c6:	f004 ff05 	bl	8018ed4 <iprintf>
 80140ca:	f06f 030f 	mvn.w	r3, #15
 80140ce:	e0bc      	b.n	801424a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d109      	bne.n	80140ea <udp_sendto_if_src+0x42>
 80140d6:	4b5f      	ldr	r3, [pc, #380]	@ (8014254 <udp_sendto_if_src+0x1ac>)
 80140d8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80140dc:	4960      	ldr	r1, [pc, #384]	@ (8014260 <udp_sendto_if_src+0x1b8>)
 80140de:	485f      	ldr	r0, [pc, #380]	@ (801425c <udp_sendto_if_src+0x1b4>)
 80140e0:	f004 fef8 	bl	8018ed4 <iprintf>
 80140e4:	f06f 030f 	mvn.w	r3, #15
 80140e8:	e0af      	b.n	801424a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d109      	bne.n	8014104 <udp_sendto_if_src+0x5c>
 80140f0:	4b58      	ldr	r3, [pc, #352]	@ (8014254 <udp_sendto_if_src+0x1ac>)
 80140f2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80140f6:	495b      	ldr	r1, [pc, #364]	@ (8014264 <udp_sendto_if_src+0x1bc>)
 80140f8:	4858      	ldr	r0, [pc, #352]	@ (801425c <udp_sendto_if_src+0x1b4>)
 80140fa:	f004 feeb 	bl	8018ed4 <iprintf>
 80140fe:	f06f 030f 	mvn.w	r3, #15
 8014102:	e0a2      	b.n	801424a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014106:	2b00      	cmp	r3, #0
 8014108:	d109      	bne.n	801411e <udp_sendto_if_src+0x76>
 801410a:	4b52      	ldr	r3, [pc, #328]	@ (8014254 <udp_sendto_if_src+0x1ac>)
 801410c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8014110:	4955      	ldr	r1, [pc, #340]	@ (8014268 <udp_sendto_if_src+0x1c0>)
 8014112:	4852      	ldr	r0, [pc, #328]	@ (801425c <udp_sendto_if_src+0x1b4>)
 8014114:	f004 fede 	bl	8018ed4 <iprintf>
 8014118:	f06f 030f 	mvn.w	r3, #15
 801411c:	e095      	b.n	801424a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014120:	2b00      	cmp	r3, #0
 8014122:	d109      	bne.n	8014138 <udp_sendto_if_src+0x90>
 8014124:	4b4b      	ldr	r3, [pc, #300]	@ (8014254 <udp_sendto_if_src+0x1ac>)
 8014126:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801412a:	4950      	ldr	r1, [pc, #320]	@ (801426c <udp_sendto_if_src+0x1c4>)
 801412c:	484b      	ldr	r0, [pc, #300]	@ (801425c <udp_sendto_if_src+0x1b4>)
 801412e:	f004 fed1 	bl	8018ed4 <iprintf>
 8014132:	f06f 030f 	mvn.w	r3, #15
 8014136:	e088      	b.n	801424a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	8a5b      	ldrh	r3, [r3, #18]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d10f      	bne.n	8014160 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014140:	68f9      	ldr	r1, [r7, #12]
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	8a5b      	ldrh	r3, [r3, #18]
 8014146:	461a      	mov	r2, r3
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f000 f893 	bl	8014274 <udp_bind>
 801414e:	4603      	mov	r3, r0
 8014150:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014152:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d002      	beq.n	8014160 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801415a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801415e:	e074      	b.n	801424a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	891b      	ldrh	r3, [r3, #8]
 8014164:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8014168:	4293      	cmp	r3, r2
 801416a:	d902      	bls.n	8014172 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801416c:	f04f 33ff 	mov.w	r3, #4294967295
 8014170:	e06b      	b.n	801424a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014172:	2108      	movs	r1, #8
 8014174:	68b8      	ldr	r0, [r7, #8]
 8014176:	f7f8 fedd 	bl	800cf34 <pbuf_add_header>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d015      	beq.n	80141ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014180:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014184:	2108      	movs	r1, #8
 8014186:	2022      	movs	r0, #34	@ 0x22
 8014188:	f7f8 fc86 	bl	800ca98 <pbuf_alloc>
 801418c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d102      	bne.n	801419a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014194:	f04f 33ff 	mov.w	r3, #4294967295
 8014198:	e057      	b.n	801424a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	891b      	ldrh	r3, [r3, #8]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d006      	beq.n	80141b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80141a2:	68b9      	ldr	r1, [r7, #8]
 80141a4:	69f8      	ldr	r0, [r7, #28]
 80141a6:	f7f9 f87f 	bl	800d2a8 <pbuf_chain>
 80141aa:	e001      	b.n	80141b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80141b0:	69fb      	ldr	r3, [r7, #28]
 80141b2:	895b      	ldrh	r3, [r3, #10]
 80141b4:	2b07      	cmp	r3, #7
 80141b6:	d806      	bhi.n	80141c6 <udp_sendto_if_src+0x11e>
 80141b8:	4b26      	ldr	r3, [pc, #152]	@ (8014254 <udp_sendto_if_src+0x1ac>)
 80141ba:	f240 320d 	movw	r2, #781	@ 0x30d
 80141be:	492c      	ldr	r1, [pc, #176]	@ (8014270 <udp_sendto_if_src+0x1c8>)
 80141c0:	4826      	ldr	r0, [pc, #152]	@ (801425c <udp_sendto_if_src+0x1b4>)
 80141c2:	f004 fe87 	bl	8018ed4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	8a5b      	ldrh	r3, [r3, #18]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7f7 fb11 	bl	800b7f8 <lwip_htons>
 80141d6:	4603      	mov	r3, r0
 80141d8:	461a      	mov	r2, r3
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80141de:	887b      	ldrh	r3, [r7, #2]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7f7 fb09 	bl	800b7f8 <lwip_htons>
 80141e6:	4603      	mov	r3, r0
 80141e8:	461a      	mov	r2, r3
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	2200      	movs	r2, #0
 80141f2:	719a      	strb	r2, [r3, #6]
 80141f4:	2200      	movs	r2, #0
 80141f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	891b      	ldrh	r3, [r3, #8]
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7f7 fafb 	bl	800b7f8 <lwip_htons>
 8014202:	4603      	mov	r3, r0
 8014204:	461a      	mov	r2, r3
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801420a:	2311      	movs	r3, #17
 801420c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	7adb      	ldrb	r3, [r3, #11]
 8014212:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	7a9b      	ldrb	r3, [r3, #10]
 8014218:	7cb9      	ldrb	r1, [r7, #18]
 801421a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801421c:	9202      	str	r2, [sp, #8]
 801421e:	7cfa      	ldrb	r2, [r7, #19]
 8014220:	9201      	str	r2, [sp, #4]
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	460b      	mov	r3, r1
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801422a:	69f8      	ldr	r0, [r7, #28]
 801422c:	f003 fb3e 	bl	80178ac <ip4_output_if_src>
 8014230:	4603      	mov	r3, r0
 8014232:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014234:	69fa      	ldr	r2, [r7, #28]
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	429a      	cmp	r2, r3
 801423a:	d004      	beq.n	8014246 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801423c:	69f8      	ldr	r0, [r7, #28]
 801423e:	f7f8 ff0f 	bl	800d060 <pbuf_free>
    q = NULL;
 8014242:	2300      	movs	r3, #0
 8014244:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014246:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801424a:	4618      	mov	r0, r3
 801424c:	3720      	adds	r7, #32
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	0801d134 	.word	0x0801d134
 8014258:	0801d320 	.word	0x0801d320
 801425c:	0801d188 	.word	0x0801d188
 8014260:	0801d340 	.word	0x0801d340
 8014264:	0801d360 	.word	0x0801d360
 8014268:	0801d384 	.word	0x0801d384
 801426c:	0801d3a8 	.word	0x0801d3a8
 8014270:	0801d3cc 	.word	0x0801d3cc

08014274 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af00      	add	r7, sp, #0
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	60b9      	str	r1, [r7, #8]
 801427e:	4613      	mov	r3, r2
 8014280:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d101      	bne.n	801428c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014288:	4b39      	ldr	r3, [pc, #228]	@ (8014370 <udp_bind+0xfc>)
 801428a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d109      	bne.n	80142a6 <udp_bind+0x32>
 8014292:	4b38      	ldr	r3, [pc, #224]	@ (8014374 <udp_bind+0x100>)
 8014294:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014298:	4937      	ldr	r1, [pc, #220]	@ (8014378 <udp_bind+0x104>)
 801429a:	4838      	ldr	r0, [pc, #224]	@ (801437c <udp_bind+0x108>)
 801429c:	f004 fe1a 	bl	8018ed4 <iprintf>
 80142a0:	f06f 030f 	mvn.w	r3, #15
 80142a4:	e060      	b.n	8014368 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80142a6:	2300      	movs	r3, #0
 80142a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142aa:	4b35      	ldr	r3, [pc, #212]	@ (8014380 <udp_bind+0x10c>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	617b      	str	r3, [r7, #20]
 80142b0:	e009      	b.n	80142c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80142b2:	68fa      	ldr	r2, [r7, #12]
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d102      	bne.n	80142c0 <udp_bind+0x4c>
      rebind = 1;
 80142ba:	2301      	movs	r3, #1
 80142bc:	74fb      	strb	r3, [r7, #19]
      break;
 80142be:	e005      	b.n	80142cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	617b      	str	r3, [r7, #20]
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1f2      	bne.n	80142b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80142cc:	88fb      	ldrh	r3, [r7, #6]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d109      	bne.n	80142e6 <udp_bind+0x72>
    port = udp_new_port();
 80142d2:	f7ff fcc5 	bl	8013c60 <udp_new_port>
 80142d6:	4603      	mov	r3, r0
 80142d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80142da:	88fb      	ldrh	r3, [r7, #6]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d12c      	bne.n	801433a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80142e0:	f06f 0307 	mvn.w	r3, #7
 80142e4:	e040      	b.n	8014368 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142e6:	4b26      	ldr	r3, [pc, #152]	@ (8014380 <udp_bind+0x10c>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	617b      	str	r3, [r7, #20]
 80142ec:	e022      	b.n	8014334 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80142ee:	68fa      	ldr	r2, [r7, #12]
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d01b      	beq.n	801432e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	8a5b      	ldrh	r3, [r3, #18]
 80142fa:	88fa      	ldrh	r2, [r7, #6]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d116      	bne.n	801432e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014308:	429a      	cmp	r2, r3
 801430a:	d00d      	beq.n	8014328 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00a      	beq.n	8014328 <udp_bind+0xb4>
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d006      	beq.n	8014328 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801431a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801431c:	2b00      	cmp	r3, #0
 801431e:	d003      	beq.n	8014328 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d102      	bne.n	801432e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014328:	f06f 0307 	mvn.w	r3, #7
 801432c:	e01c      	b.n	8014368 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	68db      	ldr	r3, [r3, #12]
 8014332:	617b      	str	r3, [r7, #20]
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d1d9      	bne.n	80142ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d002      	beq.n	8014346 <udp_bind+0xd2>
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	e000      	b.n	8014348 <udp_bind+0xd4>
 8014346:	2300      	movs	r3, #0
 8014348:	68fa      	ldr	r2, [r7, #12]
 801434a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	88fa      	ldrh	r2, [r7, #6]
 8014350:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014352:	7cfb      	ldrb	r3, [r7, #19]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d106      	bne.n	8014366 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014358:	4b09      	ldr	r3, [pc, #36]	@ (8014380 <udp_bind+0x10c>)
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014360:	4a07      	ldr	r2, [pc, #28]	@ (8014380 <udp_bind+0x10c>)
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014366:	2300      	movs	r3, #0
}
 8014368:	4618      	mov	r0, r3
 801436a:	3718      	adds	r7, #24
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	0802817c 	.word	0x0802817c
 8014374:	0801d134 	.word	0x0801d134
 8014378:	0801d3fc 	.word	0x0801d3fc
 801437c:	0801d188 	.word	0x0801d188
 8014380:	20010fd0 	.word	0x20010fd0

08014384 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b086      	sub	sp, #24
 8014388:	af00      	add	r7, sp, #0
 801438a:	60f8      	str	r0, [r7, #12]
 801438c:	60b9      	str	r1, [r7, #8]
 801438e:	4613      	mov	r3, r2
 8014390:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d109      	bne.n	80143ac <udp_connect+0x28>
 8014398:	4b2c      	ldr	r3, [pc, #176]	@ (801444c <udp_connect+0xc8>)
 801439a:	f240 4235 	movw	r2, #1077	@ 0x435
 801439e:	492c      	ldr	r1, [pc, #176]	@ (8014450 <udp_connect+0xcc>)
 80143a0:	482c      	ldr	r0, [pc, #176]	@ (8014454 <udp_connect+0xd0>)
 80143a2:	f004 fd97 	bl	8018ed4 <iprintf>
 80143a6:	f06f 030f 	mvn.w	r3, #15
 80143aa:	e04b      	b.n	8014444 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d109      	bne.n	80143c6 <udp_connect+0x42>
 80143b2:	4b26      	ldr	r3, [pc, #152]	@ (801444c <udp_connect+0xc8>)
 80143b4:	f240 4236 	movw	r2, #1078	@ 0x436
 80143b8:	4927      	ldr	r1, [pc, #156]	@ (8014458 <udp_connect+0xd4>)
 80143ba:	4826      	ldr	r0, [pc, #152]	@ (8014454 <udp_connect+0xd0>)
 80143bc:	f004 fd8a 	bl	8018ed4 <iprintf>
 80143c0:	f06f 030f 	mvn.w	r3, #15
 80143c4:	e03e      	b.n	8014444 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	8a5b      	ldrh	r3, [r3, #18]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d10f      	bne.n	80143ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80143ce:	68f9      	ldr	r1, [r7, #12]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	8a5b      	ldrh	r3, [r3, #18]
 80143d4:	461a      	mov	r2, r3
 80143d6:	68f8      	ldr	r0, [r7, #12]
 80143d8:	f7ff ff4c 	bl	8014274 <udp_bind>
 80143dc:	4603      	mov	r3, r0
 80143de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80143e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d002      	beq.n	80143ee <udp_connect+0x6a>
      return err;
 80143e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80143ec:	e02a      	b.n	8014444 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d002      	beq.n	80143fa <udp_connect+0x76>
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	e000      	b.n	80143fc <udp_connect+0x78>
 80143fa:	2300      	movs	r3, #0
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	88fa      	ldrh	r2, [r7, #6]
 8014404:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	7c1b      	ldrb	r3, [r3, #16]
 801440a:	f043 0304 	orr.w	r3, r3, #4
 801440e:	b2da      	uxtb	r2, r3
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014414:	4b11      	ldr	r3, [pc, #68]	@ (801445c <udp_connect+0xd8>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	617b      	str	r3, [r7, #20]
 801441a:	e008      	b.n	801442e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801441c:	68fa      	ldr	r2, [r7, #12]
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	429a      	cmp	r2, r3
 8014422:	d101      	bne.n	8014428 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014424:	2300      	movs	r3, #0
 8014426:	e00d      	b.n	8014444 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	617b      	str	r3, [r7, #20]
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d1f3      	bne.n	801441c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014434:	4b09      	ldr	r3, [pc, #36]	@ (801445c <udp_connect+0xd8>)
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801443c:	4a07      	ldr	r2, [pc, #28]	@ (801445c <udp_connect+0xd8>)
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014442:	2300      	movs	r3, #0
}
 8014444:	4618      	mov	r0, r3
 8014446:	3718      	adds	r7, #24
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	0801d134 	.word	0x0801d134
 8014450:	0801d414 	.word	0x0801d414
 8014454:	0801d188 	.word	0x0801d188
 8014458:	0801d430 	.word	0x0801d430
 801445c:	20010fd0 	.word	0x20010fd0

08014460 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d107      	bne.n	8014482 <udp_recv+0x22>
 8014472:	4b08      	ldr	r3, [pc, #32]	@ (8014494 <udp_recv+0x34>)
 8014474:	f240 428a 	movw	r2, #1162	@ 0x48a
 8014478:	4907      	ldr	r1, [pc, #28]	@ (8014498 <udp_recv+0x38>)
 801447a:	4808      	ldr	r0, [pc, #32]	@ (801449c <udp_recv+0x3c>)
 801447c:	f004 fd2a 	bl	8018ed4 <iprintf>
 8014480:	e005      	b.n	801448e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	61da      	str	r2, [r3, #28]
}
 801448e:	3710      	adds	r7, #16
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	0801d134 	.word	0x0801d134
 8014498:	0801d468 	.word	0x0801d468
 801449c:	0801d188 	.word	0x0801d188

080144a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d107      	bne.n	80144be <udp_remove+0x1e>
 80144ae:	4b19      	ldr	r3, [pc, #100]	@ (8014514 <udp_remove+0x74>)
 80144b0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80144b4:	4918      	ldr	r1, [pc, #96]	@ (8014518 <udp_remove+0x78>)
 80144b6:	4819      	ldr	r0, [pc, #100]	@ (801451c <udp_remove+0x7c>)
 80144b8:	f004 fd0c 	bl	8018ed4 <iprintf>
 80144bc:	e026      	b.n	801450c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80144be:	4b18      	ldr	r3, [pc, #96]	@ (8014520 <udp_remove+0x80>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	687a      	ldr	r2, [r7, #4]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d105      	bne.n	80144d4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80144c8:	4b15      	ldr	r3, [pc, #84]	@ (8014520 <udp_remove+0x80>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	4a14      	ldr	r2, [pc, #80]	@ (8014520 <udp_remove+0x80>)
 80144d0:	6013      	str	r3, [r2, #0]
 80144d2:	e017      	b.n	8014504 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80144d4:	4b12      	ldr	r3, [pc, #72]	@ (8014520 <udp_remove+0x80>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	60fb      	str	r3, [r7, #12]
 80144da:	e010      	b.n	80144fe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	68db      	ldr	r3, [r3, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d009      	beq.n	80144f8 <udp_remove+0x58>
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d104      	bne.n	80144f8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	68da      	ldr	r2, [r3, #12]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	60da      	str	r2, [r3, #12]
        break;
 80144f6:	e005      	b.n	8014504 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	60fb      	str	r3, [r7, #12]
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d1eb      	bne.n	80144dc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014504:	6879      	ldr	r1, [r7, #4]
 8014506:	2000      	movs	r0, #0
 8014508:	f7f7 fefa 	bl	800c300 <memp_free>
}
 801450c:	3710      	adds	r7, #16
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	0801d134 	.word	0x0801d134
 8014518:	0801d480 	.word	0x0801d480
 801451c:	0801d188 	.word	0x0801d188
 8014520:	20010fd0 	.word	0x20010fd0

08014524 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801452a:	2000      	movs	r0, #0
 801452c:	f7f7 fe72 	bl	800c214 <memp_malloc>
 8014530:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d007      	beq.n	8014548 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014538:	2220      	movs	r2, #32
 801453a:	2100      	movs	r1, #0
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f004 fd68 	bl	8019012 <memset>
    pcb->ttl = UDP_TTL;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	22ff      	movs	r2, #255	@ 0xff
 8014546:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014548:	687b      	ldr	r3, [r7, #4]
}
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014552:	b580      	push	{r7, lr}
 8014554:	b084      	sub	sp, #16
 8014556:	af00      	add	r7, sp, #0
 8014558:	4603      	mov	r3, r0
 801455a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801455c:	f7ff ffe2 	bl	8014524 <udp_new>
 8014560:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014562:	68fb      	ldr	r3, [r7, #12]
}
 8014564:	4618      	mov	r0, r3
 8014566:	3710      	adds	r7, #16
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801456c:	b480      	push	{r7}
 801456e:	b085      	sub	sp, #20
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d01e      	beq.n	80145ba <udp_netif_ip_addr_changed+0x4e>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d01a      	beq.n	80145ba <udp_netif_ip_addr_changed+0x4e>
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d017      	beq.n	80145ba <udp_netif_ip_addr_changed+0x4e>
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d013      	beq.n	80145ba <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014592:	4b0d      	ldr	r3, [pc, #52]	@ (80145c8 <udp_netif_ip_addr_changed+0x5c>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	60fb      	str	r3, [r7, #12]
 8014598:	e00c      	b.n	80145b4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d103      	bne.n	80145ae <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	60fb      	str	r3, [r7, #12]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d1ef      	bne.n	801459a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80145ba:	bf00      	nop
 80145bc:	3714      	adds	r7, #20
 80145be:	46bd      	mov	sp, r7
 80145c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop
 80145c8:	20010fd0 	.word	0x20010fd0

080145cc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80145d0:	4b20      	ldr	r3, [pc, #128]	@ (8014654 <dhcp_inc_pcb_refcount+0x88>)
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d133      	bne.n	8014640 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80145d8:	4b1f      	ldr	r3, [pc, #124]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d005      	beq.n	80145ec <dhcp_inc_pcb_refcount+0x20>
 80145e0:	4b1e      	ldr	r3, [pc, #120]	@ (801465c <dhcp_inc_pcb_refcount+0x90>)
 80145e2:	22e5      	movs	r2, #229	@ 0xe5
 80145e4:	491e      	ldr	r1, [pc, #120]	@ (8014660 <dhcp_inc_pcb_refcount+0x94>)
 80145e6:	481f      	ldr	r0, [pc, #124]	@ (8014664 <dhcp_inc_pcb_refcount+0x98>)
 80145e8:	f004 fc74 	bl	8018ed4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80145ec:	f7ff ff9a 	bl	8014524 <udp_new>
 80145f0:	4603      	mov	r3, r0
 80145f2:	4a19      	ldr	r2, [pc, #100]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 80145f4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80145f6:	4b18      	ldr	r3, [pc, #96]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d102      	bne.n	8014604 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80145fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014602:	e024      	b.n	801464e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014604:	4b14      	ldr	r3, [pc, #80]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	7a5a      	ldrb	r2, [r3, #9]
 801460a:	4b13      	ldr	r3, [pc, #76]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f042 0220 	orr.w	r2, r2, #32
 8014612:	b2d2      	uxtb	r2, r2
 8014614:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014616:	4b10      	ldr	r3, [pc, #64]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	2244      	movs	r2, #68	@ 0x44
 801461c:	4912      	ldr	r1, [pc, #72]	@ (8014668 <dhcp_inc_pcb_refcount+0x9c>)
 801461e:	4618      	mov	r0, r3
 8014620:	f7ff fe28 	bl	8014274 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014624:	4b0c      	ldr	r3, [pc, #48]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	2243      	movs	r2, #67	@ 0x43
 801462a:	490f      	ldr	r1, [pc, #60]	@ (8014668 <dhcp_inc_pcb_refcount+0x9c>)
 801462c:	4618      	mov	r0, r3
 801462e:	f7ff fea9 	bl	8014384 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014632:	4b09      	ldr	r3, [pc, #36]	@ (8014658 <dhcp_inc_pcb_refcount+0x8c>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2200      	movs	r2, #0
 8014638:	490c      	ldr	r1, [pc, #48]	@ (801466c <dhcp_inc_pcb_refcount+0xa0>)
 801463a:	4618      	mov	r0, r3
 801463c:	f7ff ff10 	bl	8014460 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014640:	4b04      	ldr	r3, [pc, #16]	@ (8014654 <dhcp_inc_pcb_refcount+0x88>)
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	3301      	adds	r3, #1
 8014646:	b2da      	uxtb	r2, r3
 8014648:	4b02      	ldr	r3, [pc, #8]	@ (8014654 <dhcp_inc_pcb_refcount+0x88>)
 801464a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop
 8014654:	20011000 	.word	0x20011000
 8014658:	20010ffc 	.word	0x20010ffc
 801465c:	0801d498 	.word	0x0801d498
 8014660:	0801d4d0 	.word	0x0801d4d0
 8014664:	0801d4f8 	.word	0x0801d4f8
 8014668:	0802817c 	.word	0x0802817c
 801466c:	08015ef5 	.word	0x08015ef5

08014670 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014674:	4b0e      	ldr	r3, [pc, #56]	@ (80146b0 <dhcp_dec_pcb_refcount+0x40>)
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d105      	bne.n	8014688 <dhcp_dec_pcb_refcount+0x18>
 801467c:	4b0d      	ldr	r3, [pc, #52]	@ (80146b4 <dhcp_dec_pcb_refcount+0x44>)
 801467e:	22ff      	movs	r2, #255	@ 0xff
 8014680:	490d      	ldr	r1, [pc, #52]	@ (80146b8 <dhcp_dec_pcb_refcount+0x48>)
 8014682:	480e      	ldr	r0, [pc, #56]	@ (80146bc <dhcp_dec_pcb_refcount+0x4c>)
 8014684:	f004 fc26 	bl	8018ed4 <iprintf>
  dhcp_pcb_refcount--;
 8014688:	4b09      	ldr	r3, [pc, #36]	@ (80146b0 <dhcp_dec_pcb_refcount+0x40>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	3b01      	subs	r3, #1
 801468e:	b2da      	uxtb	r2, r3
 8014690:	4b07      	ldr	r3, [pc, #28]	@ (80146b0 <dhcp_dec_pcb_refcount+0x40>)
 8014692:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014694:	4b06      	ldr	r3, [pc, #24]	@ (80146b0 <dhcp_dec_pcb_refcount+0x40>)
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d107      	bne.n	80146ac <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801469c:	4b08      	ldr	r3, [pc, #32]	@ (80146c0 <dhcp_dec_pcb_refcount+0x50>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff fefd 	bl	80144a0 <udp_remove>
    dhcp_pcb = NULL;
 80146a6:	4b06      	ldr	r3, [pc, #24]	@ (80146c0 <dhcp_dec_pcb_refcount+0x50>)
 80146a8:	2200      	movs	r2, #0
 80146aa:	601a      	str	r2, [r3, #0]
  }
}
 80146ac:	bf00      	nop
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	20011000 	.word	0x20011000
 80146b4:	0801d498 	.word	0x0801d498
 80146b8:	0801d520 	.word	0x0801d520
 80146bc:	0801d4f8 	.word	0x0801d4f8
 80146c0:	20010ffc 	.word	0x20010ffc

080146c4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80146d2:	210c      	movs	r1, #12
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f001 f84f 	bl	8015778 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80146da:	4b06      	ldr	r3, [pc, #24]	@ (80146f4 <dhcp_handle_nak+0x30>)
 80146dc:	4a05      	ldr	r2, [pc, #20]	@ (80146f4 <dhcp_handle_nak+0x30>)
 80146de:	4905      	ldr	r1, [pc, #20]	@ (80146f4 <dhcp_handle_nak+0x30>)
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7f7 ffaf 	bl	800c644 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 fc48 	bl	8014f7c <dhcp_discover>
}
 80146ec:	bf00      	nop
 80146ee:	3710      	adds	r7, #16
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	0802817c 	.word	0x0802817c

080146f8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014704:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014706:	2108      	movs	r1, #8
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f001 f835 	bl	8015778 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	331c      	adds	r3, #28
 8014712:	2200      	movs	r2, #0
 8014714:	4619      	mov	r1, r3
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f002 fb36 	bl	8016d88 <etharp_query>
 801471c:	4603      	mov	r3, r0
 801471e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	799b      	ldrb	r3, [r3, #6]
 8014724:	2bff      	cmp	r3, #255	@ 0xff
 8014726:	d005      	beq.n	8014734 <dhcp_check+0x3c>
    dhcp->tries++;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	799b      	ldrb	r3, [r3, #6]
 801472c:	3301      	adds	r3, #1
 801472e:	b2da      	uxtb	r2, r3
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014734:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8014738:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801473a:	893b      	ldrh	r3, [r7, #8]
 801473c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014740:	4a06      	ldr	r2, [pc, #24]	@ (801475c <dhcp_check+0x64>)
 8014742:	fb82 1203 	smull	r1, r2, r2, r3
 8014746:	1152      	asrs	r2, r2, #5
 8014748:	17db      	asrs	r3, r3, #31
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	b29a      	uxth	r2, r3
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014752:	bf00      	nop
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	10624dd3 	.word	0x10624dd3

08014760 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801476e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014770:	4b0c      	ldr	r3, [pc, #48]	@ (80147a4 <dhcp_handle_offer+0x44>)
 8014772:	789b      	ldrb	r3, [r3, #2]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d011      	beq.n	801479c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2200      	movs	r2, #0
 801477c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801477e:	4b0a      	ldr	r3, [pc, #40]	@ (80147a8 <dhcp_handle_offer+0x48>)
 8014780:	689b      	ldr	r3, [r3, #8]
 8014782:	4618      	mov	r0, r3
 8014784:	f7f7 f84d 	bl	800b822 <lwip_htonl>
 8014788:	4602      	mov	r2, r0
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	691a      	ldr	r2, [r3, #16]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f000 f808 	bl	80147ac <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801479c:	bf00      	nop
 801479e:	3710      	adds	r7, #16
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	20010ff4 	.word	0x20010ff4
 80147a8:	20010fd4 	.word	0x20010fd4

080147ac <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80147ac:	b5b0      	push	{r4, r5, r7, lr}
 80147ae:	b08a      	sub	sp, #40	@ 0x28
 80147b0:	af02      	add	r7, sp, #8
 80147b2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d109      	bne.n	80147ce <dhcp_select+0x22>
 80147ba:	4b71      	ldr	r3, [pc, #452]	@ (8014980 <dhcp_select+0x1d4>)
 80147bc:	f240 1277 	movw	r2, #375	@ 0x177
 80147c0:	4970      	ldr	r1, [pc, #448]	@ (8014984 <dhcp_select+0x1d8>)
 80147c2:	4871      	ldr	r0, [pc, #452]	@ (8014988 <dhcp_select+0x1dc>)
 80147c4:	f004 fb86 	bl	8018ed4 <iprintf>
 80147c8:	f06f 030f 	mvn.w	r3, #15
 80147cc:	e0d3      	b.n	8014976 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147d2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80147d4:	69bb      	ldr	r3, [r7, #24]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d109      	bne.n	80147ee <dhcp_select+0x42>
 80147da:	4b69      	ldr	r3, [pc, #420]	@ (8014980 <dhcp_select+0x1d4>)
 80147dc:	f240 1279 	movw	r2, #377	@ 0x179
 80147e0:	496a      	ldr	r1, [pc, #424]	@ (801498c <dhcp_select+0x1e0>)
 80147e2:	4869      	ldr	r0, [pc, #420]	@ (8014988 <dhcp_select+0x1dc>)
 80147e4:	f004 fb76 	bl	8018ed4 <iprintf>
 80147e8:	f06f 0305 	mvn.w	r3, #5
 80147ec:	e0c3      	b.n	8014976 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80147ee:	2101      	movs	r1, #1
 80147f0:	69b8      	ldr	r0, [r7, #24]
 80147f2:	f000 ffc1 	bl	8015778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80147f6:	f107 030c 	add.w	r3, r7, #12
 80147fa:	2203      	movs	r2, #3
 80147fc:	69b9      	ldr	r1, [r7, #24]
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f001 fc46 	bl	8016090 <dhcp_create_msg>
 8014804:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	2b00      	cmp	r3, #0
 801480a:	f000 8085 	beq.w	8014918 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014814:	89b8      	ldrh	r0, [r7, #12]
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801481c:	2302      	movs	r3, #2
 801481e:	2239      	movs	r2, #57	@ 0x39
 8014820:	f000 ffc4 	bl	80157ac <dhcp_option>
 8014824:	4603      	mov	r3, r0
 8014826:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014828:	89b8      	ldrh	r0, [r7, #12]
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014834:	461a      	mov	r2, r3
 8014836:	f001 f813 	bl	8015860 <dhcp_option_short>
 801483a:	4603      	mov	r3, r0
 801483c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801483e:	89b8      	ldrh	r0, [r7, #12]
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014846:	2304      	movs	r3, #4
 8014848:	2232      	movs	r2, #50	@ 0x32
 801484a:	f000 ffaf 	bl	80157ac <dhcp_option>
 801484e:	4603      	mov	r3, r0
 8014850:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014852:	89bc      	ldrh	r4, [r7, #12]
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	69db      	ldr	r3, [r3, #28]
 801485e:	4618      	mov	r0, r3
 8014860:	f7f6 ffdf 	bl	800b822 <lwip_htonl>
 8014864:	4603      	mov	r3, r0
 8014866:	461a      	mov	r2, r3
 8014868:	4629      	mov	r1, r5
 801486a:	4620      	mov	r0, r4
 801486c:	f001 f82a 	bl	80158c4 <dhcp_option_long>
 8014870:	4603      	mov	r3, r0
 8014872:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014874:	89b8      	ldrh	r0, [r7, #12]
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801487c:	2304      	movs	r3, #4
 801487e:	2236      	movs	r2, #54	@ 0x36
 8014880:	f000 ff94 	bl	80157ac <dhcp_option>
 8014884:	4603      	mov	r3, r0
 8014886:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014888:	89bc      	ldrh	r4, [r7, #12]
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	699b      	ldr	r3, [r3, #24]
 8014894:	4618      	mov	r0, r3
 8014896:	f7f6 ffc4 	bl	800b822 <lwip_htonl>
 801489a:	4603      	mov	r3, r0
 801489c:	461a      	mov	r2, r3
 801489e:	4629      	mov	r1, r5
 80148a0:	4620      	mov	r0, r4
 80148a2:	f001 f80f 	bl	80158c4 <dhcp_option_long>
 80148a6:	4603      	mov	r3, r0
 80148a8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80148aa:	89b8      	ldrh	r0, [r7, #12]
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80148b2:	2303      	movs	r3, #3
 80148b4:	2237      	movs	r2, #55	@ 0x37
 80148b6:	f000 ff79 	bl	80157ac <dhcp_option>
 80148ba:	4603      	mov	r3, r0
 80148bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80148be:	2300      	movs	r3, #0
 80148c0:	77bb      	strb	r3, [r7, #30]
 80148c2:	e00e      	b.n	80148e2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80148c4:	89b8      	ldrh	r0, [r7, #12]
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80148cc:	7fbb      	ldrb	r3, [r7, #30]
 80148ce:	4a30      	ldr	r2, [pc, #192]	@ (8014990 <dhcp_select+0x1e4>)
 80148d0:	5cd3      	ldrb	r3, [r2, r3]
 80148d2:	461a      	mov	r2, r3
 80148d4:	f000 ff9e 	bl	8015814 <dhcp_option_byte>
 80148d8:	4603      	mov	r3, r0
 80148da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80148dc:	7fbb      	ldrb	r3, [r7, #30]
 80148de:	3301      	adds	r3, #1
 80148e0:	77bb      	strb	r3, [r7, #30]
 80148e2:	7fbb      	ldrb	r3, [r7, #30]
 80148e4:	2b02      	cmp	r3, #2
 80148e6:	d9ed      	bls.n	80148c4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80148e8:	89b8      	ldrh	r0, [r7, #12]
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	33f0      	adds	r3, #240	@ 0xf0
 80148ee:	697a      	ldr	r2, [r7, #20]
 80148f0:	4619      	mov	r1, r3
 80148f2:	f001 fca3 	bl	801623c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80148f6:	4b27      	ldr	r3, [pc, #156]	@ (8014994 <dhcp_select+0x1e8>)
 80148f8:	6818      	ldr	r0, [r3, #0]
 80148fa:	4b27      	ldr	r3, [pc, #156]	@ (8014998 <dhcp_select+0x1ec>)
 80148fc:	9301      	str	r3, [sp, #4]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	9300      	str	r3, [sp, #0]
 8014902:	2343      	movs	r3, #67	@ 0x43
 8014904:	4a25      	ldr	r2, [pc, #148]	@ (801499c <dhcp_select+0x1f0>)
 8014906:	6979      	ldr	r1, [r7, #20]
 8014908:	f7ff fbce 	bl	80140a8 <udp_sendto_if_src>
 801490c:	4603      	mov	r3, r0
 801490e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014910:	6978      	ldr	r0, [r7, #20]
 8014912:	f7f8 fba5 	bl	800d060 <pbuf_free>
 8014916:	e001      	b.n	801491c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014918:	23ff      	movs	r3, #255	@ 0xff
 801491a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801491c:	69bb      	ldr	r3, [r7, #24]
 801491e:	799b      	ldrb	r3, [r3, #6]
 8014920:	2bff      	cmp	r3, #255	@ 0xff
 8014922:	d005      	beq.n	8014930 <dhcp_select+0x184>
    dhcp->tries++;
 8014924:	69bb      	ldr	r3, [r7, #24]
 8014926:	799b      	ldrb	r3, [r3, #6]
 8014928:	3301      	adds	r3, #1
 801492a:	b2da      	uxtb	r2, r3
 801492c:	69bb      	ldr	r3, [r7, #24]
 801492e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	799b      	ldrb	r3, [r3, #6]
 8014934:	2b05      	cmp	r3, #5
 8014936:	d80d      	bhi.n	8014954 <dhcp_select+0x1a8>
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	799b      	ldrb	r3, [r3, #6]
 801493c:	461a      	mov	r2, r3
 801493e:	2301      	movs	r3, #1
 8014940:	4093      	lsls	r3, r2
 8014942:	b29b      	uxth	r3, r3
 8014944:	461a      	mov	r2, r3
 8014946:	0152      	lsls	r2, r2, #5
 8014948:	1ad2      	subs	r2, r2, r3
 801494a:	0092      	lsls	r2, r2, #2
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	b29b      	uxth	r3, r3
 8014952:	e001      	b.n	8014958 <dhcp_select+0x1ac>
 8014954:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014958:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801495a:	89fb      	ldrh	r3, [r7, #14]
 801495c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014960:	4a0f      	ldr	r2, [pc, #60]	@ (80149a0 <dhcp_select+0x1f4>)
 8014962:	fb82 1203 	smull	r1, r2, r2, r3
 8014966:	1152      	asrs	r2, r2, #5
 8014968:	17db      	asrs	r3, r3, #31
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	b29a      	uxth	r2, r3
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014972:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014976:	4618      	mov	r0, r3
 8014978:	3720      	adds	r7, #32
 801497a:	46bd      	mov	sp, r7
 801497c:	bdb0      	pop	{r4, r5, r7, pc}
 801497e:	bf00      	nop
 8014980:	0801d498 	.word	0x0801d498
 8014984:	0801d544 	.word	0x0801d544
 8014988:	0801d4f8 	.word	0x0801d4f8
 801498c:	0801d560 	.word	0x0801d560
 8014990:	20000030 	.word	0x20000030
 8014994:	20010ffc 	.word	0x20010ffc
 8014998:	0802817c 	.word	0x0802817c
 801499c:	08028180 	.word	0x08028180
 80149a0:	10624dd3 	.word	0x10624dd3

080149a4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80149aa:	4b27      	ldr	r3, [pc, #156]	@ (8014a48 <dhcp_coarse_tmr+0xa4>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	607b      	str	r3, [r7, #4]
 80149b0:	e042      	b.n	8014a38 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149b6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d039      	beq.n	8014a32 <dhcp_coarse_tmr+0x8e>
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	795b      	ldrb	r3, [r3, #5]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d035      	beq.n	8014a32 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	8a9b      	ldrh	r3, [r3, #20]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d012      	beq.n	80149f4 <dhcp_coarse_tmr+0x50>
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	8a5b      	ldrh	r3, [r3, #18]
 80149d2:	3301      	adds	r3, #1
 80149d4:	b29a      	uxth	r2, r3
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	825a      	strh	r2, [r3, #18]
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	8a5a      	ldrh	r2, [r3, #18]
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	8a9b      	ldrh	r3, [r3, #20]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d106      	bne.n	80149f4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 fe2c 	bl	8015644 <dhcp_release_and_stop>
        dhcp_start(netif);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f969 	bl	8014cc4 <dhcp_start>
 80149f2:	e01e      	b.n	8014a32 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	8a1b      	ldrh	r3, [r3, #16]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d00b      	beq.n	8014a14 <dhcp_coarse_tmr+0x70>
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	8a1b      	ldrh	r3, [r3, #16]
 8014a00:	1e5a      	subs	r2, r3, #1
 8014a02:	b291      	uxth	r1, r2
 8014a04:	683a      	ldr	r2, [r7, #0]
 8014a06:	8211      	strh	r1, [r2, #16]
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	d103      	bne.n	8014a14 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 f8c6 	bl	8014b9e <dhcp_t2_timeout>
 8014a12:	e00e      	b.n	8014a32 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	89db      	ldrh	r3, [r3, #14]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d00a      	beq.n	8014a32 <dhcp_coarse_tmr+0x8e>
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	89db      	ldrh	r3, [r3, #14]
 8014a20:	1e5a      	subs	r2, r3, #1
 8014a22:	b291      	uxth	r1, r2
 8014a24:	683a      	ldr	r2, [r7, #0]
 8014a26:	81d1      	strh	r1, [r2, #14]
 8014a28:	2b01      	cmp	r3, #1
 8014a2a:	d102      	bne.n	8014a32 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 f888 	bl	8014b42 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	607b      	str	r3, [r7, #4]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d1b9      	bne.n	80149b2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014a3e:	bf00      	nop
 8014a40:	bf00      	nop
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}
 8014a48:	20010f68 	.word	0x20010f68

08014a4c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014a52:	4b16      	ldr	r3, [pc, #88]	@ (8014aac <dhcp_fine_tmr+0x60>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	607b      	str	r3, [r7, #4]
 8014a58:	e020      	b.n	8014a9c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a5e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d017      	beq.n	8014a96 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	891b      	ldrh	r3, [r3, #8]
 8014a6a:	2b01      	cmp	r3, #1
 8014a6c:	d906      	bls.n	8014a7c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	891b      	ldrh	r3, [r3, #8]
 8014a72:	3b01      	subs	r3, #1
 8014a74:	b29a      	uxth	r2, r3
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	811a      	strh	r2, [r3, #8]
 8014a7a:	e00c      	b.n	8014a96 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	891b      	ldrh	r3, [r3, #8]
 8014a80:	2b01      	cmp	r3, #1
 8014a82:	d108      	bne.n	8014a96 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	891b      	ldrh	r3, [r3, #8]
 8014a88:	3b01      	subs	r3, #1
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 f80d 	bl	8014ab0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	607b      	str	r3, [r7, #4]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1db      	bne.n	8014a5a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014aa2:	bf00      	nop
 8014aa4:	bf00      	nop
 8014aa6:	3708      	adds	r7, #8
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	20010f68 	.word	0x20010f68

08014ab0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014abc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	795b      	ldrb	r3, [r3, #5]
 8014ac2:	2b0c      	cmp	r3, #12
 8014ac4:	d003      	beq.n	8014ace <dhcp_timeout+0x1e>
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	795b      	ldrb	r3, [r3, #5]
 8014aca:	2b06      	cmp	r3, #6
 8014acc:	d103      	bne.n	8014ad6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fa54 	bl	8014f7c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014ad4:	e031      	b.n	8014b3a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	795b      	ldrb	r3, [r3, #5]
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	d10e      	bne.n	8014afc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	799b      	ldrb	r3, [r3, #6]
 8014ae2:	2b05      	cmp	r3, #5
 8014ae4:	d803      	bhi.n	8014aee <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f7ff fe60 	bl	80147ac <dhcp_select>
}
 8014aec:	e025      	b.n	8014b3a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 fda8 	bl	8015644 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 f8e5 	bl	8014cc4 <dhcp_start>
}
 8014afa:	e01e      	b.n	8014b3a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	795b      	ldrb	r3, [r3, #5]
 8014b00:	2b08      	cmp	r3, #8
 8014b02:	d10b      	bne.n	8014b1c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	799b      	ldrb	r3, [r3, #6]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d803      	bhi.n	8014b14 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f7ff fdf3 	bl	80146f8 <dhcp_check>
}
 8014b12:	e012      	b.n	8014b3a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fad3 	bl	80150c0 <dhcp_bind>
}
 8014b1a:	e00e      	b.n	8014b3a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	795b      	ldrb	r3, [r3, #5]
 8014b20:	2b03      	cmp	r3, #3
 8014b22:	d10a      	bne.n	8014b3a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	799b      	ldrb	r3, [r3, #6]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d803      	bhi.n	8014b34 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f000 fcd5 	bl	80154dc <dhcp_reboot>
}
 8014b32:	e002      	b.n	8014b3a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f000 fa21 	bl	8014f7c <dhcp_discover>
}
 8014b3a:	bf00      	nop
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b4e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	795b      	ldrb	r3, [r3, #5]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d007      	beq.n	8014b68 <dhcp_t1_timeout+0x26>
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	795b      	ldrb	r3, [r3, #5]
 8014b5c:	2b0a      	cmp	r3, #10
 8014b5e:	d003      	beq.n	8014b68 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014b64:	2b05      	cmp	r3, #5
 8014b66:	d116      	bne.n	8014b96 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 fb83 	bl	8015274 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	899b      	ldrh	r3, [r3, #12]
 8014b72:	461a      	mov	r2, r3
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	8a5b      	ldrh	r3, [r3, #18]
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	dd0b      	ble.n	8014b96 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	899b      	ldrh	r3, [r3, #12]
 8014b82:	461a      	mov	r2, r3
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	8a5b      	ldrh	r3, [r3, #18]
 8014b88:	1ad3      	subs	r3, r2, r3
 8014b8a:	0fda      	lsrs	r2, r3, #31
 8014b8c:	4413      	add	r3, r2
 8014b8e:	105b      	asrs	r3, r3, #1
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014b96:	bf00      	nop
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b084      	sub	sp, #16
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014baa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	795b      	ldrb	r3, [r3, #5]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d00b      	beq.n	8014bcc <dhcp_t2_timeout+0x2e>
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	795b      	ldrb	r3, [r3, #5]
 8014bb8:	2b0a      	cmp	r3, #10
 8014bba:	d007      	beq.n	8014bcc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014bc0:	2b05      	cmp	r3, #5
 8014bc2:	d003      	beq.n	8014bcc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	795b      	ldrb	r3, [r3, #5]
 8014bc8:	2b04      	cmp	r3, #4
 8014bca:	d116      	bne.n	8014bfa <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 fbeb 	bl	80153a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	8a9b      	ldrh	r3, [r3, #20]
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	8a5b      	ldrh	r3, [r3, #18]
 8014bdc:	1ad3      	subs	r3, r2, r3
 8014bde:	2b01      	cmp	r3, #1
 8014be0:	dd0b      	ble.n	8014bfa <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	8a9b      	ldrh	r3, [r3, #20]
 8014be6:	461a      	mov	r2, r3
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	8a5b      	ldrh	r3, [r3, #18]
 8014bec:	1ad3      	subs	r3, r2, r3
 8014bee:	0fda      	lsrs	r2, r3, #31
 8014bf0:	4413      	add	r3, r2
 8014bf2:	105b      	asrs	r3, r3, #1
 8014bf4:	b29a      	uxth	r2, r3
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014bfa:	bf00      	nop
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
	...

08014c04 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c12:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2200      	movs	r2, #0
 8014c18:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014c20:	4b26      	ldr	r3, [pc, #152]	@ (8014cbc <dhcp_handle_ack+0xb8>)
 8014c22:	78db      	ldrb	r3, [r3, #3]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d003      	beq.n	8014c30 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014c28:	4b25      	ldr	r3, [pc, #148]	@ (8014cc0 <dhcp_handle_ack+0xbc>)
 8014c2a:	68da      	ldr	r2, [r3, #12]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014c30:	4b22      	ldr	r3, [pc, #136]	@ (8014cbc <dhcp_handle_ack+0xb8>)
 8014c32:	791b      	ldrb	r3, [r3, #4]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d004      	beq.n	8014c42 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014c38:	4b21      	ldr	r3, [pc, #132]	@ (8014cc0 <dhcp_handle_ack+0xbc>)
 8014c3a:	691a      	ldr	r2, [r3, #16]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014c40:	e004      	b.n	8014c4c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c46:	085a      	lsrs	r2, r3, #1
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8014cbc <dhcp_handle_ack+0xb8>)
 8014c4e:	795b      	ldrb	r3, [r3, #5]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d004      	beq.n	8014c5e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014c54:	4b1a      	ldr	r3, [pc, #104]	@ (8014cc0 <dhcp_handle_ack+0xbc>)
 8014c56:	695a      	ldr	r2, [r3, #20]
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014c5c:	e007      	b.n	8014c6e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014c62:	4613      	mov	r3, r2
 8014c64:	00db      	lsls	r3, r3, #3
 8014c66:	1a9b      	subs	r3, r3, r2
 8014c68:	08da      	lsrs	r2, r3, #3
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	691a      	ldr	r2, [r3, #16]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014c76:	4b11      	ldr	r3, [pc, #68]	@ (8014cbc <dhcp_handle_ack+0xb8>)
 8014c78:	799b      	ldrb	r3, [r3, #6]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00b      	beq.n	8014c96 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014c7e:	4b10      	ldr	r3, [pc, #64]	@ (8014cc0 <dhcp_handle_ack+0xbc>)
 8014c80:	699b      	ldr	r3, [r3, #24]
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f6 fdcd 	bl	800b822 <lwip_htonl>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	2201      	movs	r2, #1
 8014c92:	71da      	strb	r2, [r3, #7]
 8014c94:	e002      	b.n	8014c9c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014c9c:	4b07      	ldr	r3, [pc, #28]	@ (8014cbc <dhcp_handle_ack+0xb8>)
 8014c9e:	79db      	ldrb	r3, [r3, #7]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d007      	beq.n	8014cb4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014ca4:	4b06      	ldr	r3, [pc, #24]	@ (8014cc0 <dhcp_handle_ack+0xbc>)
 8014ca6:	69db      	ldr	r3, [r3, #28]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7f6 fdba 	bl	800b822 <lwip_htonl>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014cb4:	bf00      	nop
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	20010ff4 	.word	0x20010ff4
 8014cc0:	20010fd4 	.word	0x20010fd4

08014cc4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b084      	sub	sp, #16
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d109      	bne.n	8014ce6 <dhcp_start+0x22>
 8014cd2:	4b37      	ldr	r3, [pc, #220]	@ (8014db0 <dhcp_start+0xec>)
 8014cd4:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8014cd8:	4936      	ldr	r1, [pc, #216]	@ (8014db4 <dhcp_start+0xf0>)
 8014cda:	4837      	ldr	r0, [pc, #220]	@ (8014db8 <dhcp_start+0xf4>)
 8014cdc:	f004 f8fa 	bl	8018ed4 <iprintf>
 8014ce0:	f06f 030f 	mvn.w	r3, #15
 8014ce4:	e060      	b.n	8014da8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014cec:	f003 0301 	and.w	r3, r3, #1
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d109      	bne.n	8014d08 <dhcp_start+0x44>
 8014cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8014db0 <dhcp_start+0xec>)
 8014cf6:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8014cfa:	4930      	ldr	r1, [pc, #192]	@ (8014dbc <dhcp_start+0xf8>)
 8014cfc:	482e      	ldr	r0, [pc, #184]	@ (8014db8 <dhcp_start+0xf4>)
 8014cfe:	f004 f8e9 	bl	8018ed4 <iprintf>
 8014d02:	f06f 030f 	mvn.w	r3, #15
 8014d06:	e04f      	b.n	8014da8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d0c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d12:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014d16:	d202      	bcs.n	8014d1e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014d18:	f04f 33ff 	mov.w	r3, #4294967295
 8014d1c:	e044      	b.n	8014da8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d10d      	bne.n	8014d40 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014d24:	2034      	movs	r0, #52	@ 0x34
 8014d26:	f7f7 f8d1 	bl	800becc <mem_malloc>
 8014d2a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d102      	bne.n	8014d38 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014d32:	f04f 33ff 	mov.w	r3, #4294967295
 8014d36:	e037      	b.n	8014da8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	68fa      	ldr	r2, [r7, #12]
 8014d3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014d3e:	e005      	b.n	8014d4c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	791b      	ldrb	r3, [r3, #4]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014d48:	f7ff fc92 	bl	8014670 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014d4c:	2234      	movs	r2, #52	@ 0x34
 8014d4e:	2100      	movs	r1, #0
 8014d50:	68f8      	ldr	r0, [r7, #12]
 8014d52:	f004 f95e 	bl	8019012 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014d56:	f7ff fc39 	bl	80145cc <dhcp_inc_pcb_refcount>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d002      	beq.n	8014d66 <dhcp_start+0xa2>
    return ERR_MEM;
 8014d60:	f04f 33ff 	mov.w	r3, #4294967295
 8014d64:	e020      	b.n	8014da8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2201      	movs	r2, #1
 8014d6a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014d72:	f003 0304 	and.w	r3, r3, #4
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d105      	bne.n	8014d86 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014d7a:	2102      	movs	r1, #2
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f000 fcfb 	bl	8015778 <dhcp_set_state>
    return ERR_OK;
 8014d82:	2300      	movs	r3, #0
 8014d84:	e010      	b.n	8014da8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 f8f8 	bl	8014f7c <dhcp_discover>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014d90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d005      	beq.n	8014da4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 fc53 	bl	8015644 <dhcp_release_and_stop>
    return ERR_MEM;
 8014d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014da2:	e001      	b.n	8014da8 <dhcp_start+0xe4>
  }
  return result;
 8014da4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3710      	adds	r7, #16
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	0801d498 	.word	0x0801d498
 8014db4:	0801d57c 	.word	0x0801d57c
 8014db8:	0801d4f8 	.word	0x0801d4f8
 8014dbc:	0801d5c0 	.word	0x0801d5c0

08014dc0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b084      	sub	sp, #16
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dcc:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d025      	beq.n	8014e20 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	795b      	ldrb	r3, [r3, #5]
 8014dd8:	2b0a      	cmp	r3, #10
 8014dda:	d008      	beq.n	8014dee <dhcp_network_changed+0x2e>
 8014ddc:	2b0a      	cmp	r3, #10
 8014dde:	dc0d      	bgt.n	8014dfc <dhcp_network_changed+0x3c>
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d01f      	beq.n	8014e24 <dhcp_network_changed+0x64>
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	db09      	blt.n	8014dfc <dhcp_network_changed+0x3c>
 8014de8:	3b03      	subs	r3, #3
 8014dea:	2b02      	cmp	r3, #2
 8014dec:	d806      	bhi.n	8014dfc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	2200      	movs	r2, #0
 8014df2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f000 fb71 	bl	80154dc <dhcp_reboot>
      break;
 8014dfa:	e014      	b.n	8014e26 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	795b      	ldrb	r3, [r3, #5]
 8014e00:	2b0c      	cmp	r3, #12
 8014e02:	d906      	bls.n	8014e12 <dhcp_network_changed+0x52>
 8014e04:	4b09      	ldr	r3, [pc, #36]	@ (8014e2c <dhcp_network_changed+0x6c>)
 8014e06:	f240 326d 	movw	r2, #877	@ 0x36d
 8014e0a:	4909      	ldr	r1, [pc, #36]	@ (8014e30 <dhcp_network_changed+0x70>)
 8014e0c:	4809      	ldr	r0, [pc, #36]	@ (8014e34 <dhcp_network_changed+0x74>)
 8014e0e:	f004 f861 	bl	8018ed4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 f8af 	bl	8014f7c <dhcp_discover>
      break;
 8014e1e:	e002      	b.n	8014e26 <dhcp_network_changed+0x66>
    return;
 8014e20:	bf00      	nop
 8014e22:	e000      	b.n	8014e26 <dhcp_network_changed+0x66>
      break;
 8014e24:	bf00      	nop
  }
}
 8014e26:	3710      	adds	r7, #16
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	0801d498 	.word	0x0801d498
 8014e30:	0801d5e4 	.word	0x0801d5e4
 8014e34:	0801d4f8 	.word	0x0801d4f8

08014e38 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d107      	bne.n	8014e58 <dhcp_arp_reply+0x20>
 8014e48:	4b0e      	ldr	r3, [pc, #56]	@ (8014e84 <dhcp_arp_reply+0x4c>)
 8014e4a:	f240 328b 	movw	r2, #907	@ 0x38b
 8014e4e:	490e      	ldr	r1, [pc, #56]	@ (8014e88 <dhcp_arp_reply+0x50>)
 8014e50:	480e      	ldr	r0, [pc, #56]	@ (8014e8c <dhcp_arp_reply+0x54>)
 8014e52:	f004 f83f 	bl	8018ed4 <iprintf>
 8014e56:	e012      	b.n	8014e7e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d00c      	beq.n	8014e7e <dhcp_arp_reply+0x46>
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	795b      	ldrb	r3, [r3, #5]
 8014e68:	2b08      	cmp	r3, #8
 8014e6a:	d108      	bne.n	8014e7e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	69db      	ldr	r3, [r3, #28]
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d102      	bne.n	8014e7e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f000 f809 	bl	8014e90 <dhcp_decline>
    }
  }
}
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	0801d498 	.word	0x0801d498
 8014e88:	0801d57c 	.word	0x0801d57c
 8014e8c:	0801d4f8 	.word	0x0801d4f8

08014e90 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014e90:	b5b0      	push	{r4, r5, r7, lr}
 8014e92:	b08a      	sub	sp, #40	@ 0x28
 8014e94:	af02      	add	r7, sp, #8
 8014e96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e9c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014e9e:	210c      	movs	r1, #12
 8014ea0:	69b8      	ldr	r0, [r7, #24]
 8014ea2:	f000 fc69 	bl	8015778 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014ea6:	f107 030c 	add.w	r3, r7, #12
 8014eaa:	2204      	movs	r2, #4
 8014eac:	69b9      	ldr	r1, [r7, #24]
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f001 f8ee 	bl	8016090 <dhcp_create_msg>
 8014eb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d035      	beq.n	8014f28 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014ec2:	89b8      	ldrh	r0, [r7, #12]
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014eca:	2304      	movs	r3, #4
 8014ecc:	2232      	movs	r2, #50	@ 0x32
 8014ece:	f000 fc6d 	bl	80157ac <dhcp_option>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014ed6:	89bc      	ldrh	r4, [r7, #12]
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	69db      	ldr	r3, [r3, #28]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7f6 fc9d 	bl	800b822 <lwip_htonl>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	461a      	mov	r2, r3
 8014eec:	4629      	mov	r1, r5
 8014eee:	4620      	mov	r0, r4
 8014ef0:	f000 fce8 	bl	80158c4 <dhcp_option_long>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ef8:	89b8      	ldrh	r0, [r7, #12]
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	33f0      	adds	r3, #240	@ 0xf0
 8014efe:	697a      	ldr	r2, [r7, #20]
 8014f00:	4619      	mov	r1, r3
 8014f02:	f001 f99b 	bl	801623c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014f06:	4b19      	ldr	r3, [pc, #100]	@ (8014f6c <dhcp_decline+0xdc>)
 8014f08:	6818      	ldr	r0, [r3, #0]
 8014f0a:	4b19      	ldr	r3, [pc, #100]	@ (8014f70 <dhcp_decline+0xe0>)
 8014f0c:	9301      	str	r3, [sp, #4]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	9300      	str	r3, [sp, #0]
 8014f12:	2343      	movs	r3, #67	@ 0x43
 8014f14:	4a17      	ldr	r2, [pc, #92]	@ (8014f74 <dhcp_decline+0xe4>)
 8014f16:	6979      	ldr	r1, [r7, #20]
 8014f18:	f7ff f8c6 	bl	80140a8 <udp_sendto_if_src>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014f20:	6978      	ldr	r0, [r7, #20]
 8014f22:	f7f8 f89d 	bl	800d060 <pbuf_free>
 8014f26:	e001      	b.n	8014f2c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014f28:	23ff      	movs	r3, #255	@ 0xff
 8014f2a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014f2c:	69bb      	ldr	r3, [r7, #24]
 8014f2e:	799b      	ldrb	r3, [r3, #6]
 8014f30:	2bff      	cmp	r3, #255	@ 0xff
 8014f32:	d005      	beq.n	8014f40 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014f34:	69bb      	ldr	r3, [r7, #24]
 8014f36:	799b      	ldrb	r3, [r3, #6]
 8014f38:	3301      	adds	r3, #1
 8014f3a:	b2da      	uxtb	r2, r3
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014f40:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014f44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f46:	89fb      	ldrh	r3, [r7, #14]
 8014f48:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8014f78 <dhcp_decline+0xe8>)
 8014f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8014f52:	1152      	asrs	r2, r2, #5
 8014f54:	17db      	asrs	r3, r3, #31
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3720      	adds	r7, #32
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bdb0      	pop	{r4, r5, r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	20010ffc 	.word	0x20010ffc
 8014f70:	0802817c 	.word	0x0802817c
 8014f74:	08028180 	.word	0x08028180
 8014f78:	10624dd3 	.word	0x10624dd3

08014f7c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b08a      	sub	sp, #40	@ 0x28
 8014f80:	af02      	add	r7, sp, #8
 8014f82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f88:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	2200      	movs	r2, #0
 8014f92:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014f94:	2106      	movs	r1, #6
 8014f96:	69b8      	ldr	r0, [r7, #24]
 8014f98:	f000 fbee 	bl	8015778 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014f9c:	f107 0308 	add.w	r3, r7, #8
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	69b9      	ldr	r1, [r7, #24]
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f001 f873 	bl	8016090 <dhcp_create_msg>
 8014faa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d04b      	beq.n	801504a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014fb8:	8938      	ldrh	r0, [r7, #8]
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014fc0:	2302      	movs	r3, #2
 8014fc2:	2239      	movs	r2, #57	@ 0x39
 8014fc4:	f000 fbf2 	bl	80157ac <dhcp_option>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014fcc:	8938      	ldrh	r0, [r7, #8]
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014fd8:	461a      	mov	r2, r3
 8014fda:	f000 fc41 	bl	8015860 <dhcp_option_short>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014fe2:	8938      	ldrh	r0, [r7, #8]
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014fea:	2303      	movs	r3, #3
 8014fec:	2237      	movs	r2, #55	@ 0x37
 8014fee:	f000 fbdd 	bl	80157ac <dhcp_option>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	77fb      	strb	r3, [r7, #31]
 8014ffa:	e00e      	b.n	801501a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014ffc:	8938      	ldrh	r0, [r7, #8]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015004:	7ffb      	ldrb	r3, [r7, #31]
 8015006:	4a29      	ldr	r2, [pc, #164]	@ (80150ac <dhcp_discover+0x130>)
 8015008:	5cd3      	ldrb	r3, [r2, r3]
 801500a:	461a      	mov	r2, r3
 801500c:	f000 fc02 	bl	8015814 <dhcp_option_byte>
 8015010:	4603      	mov	r3, r0
 8015012:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015014:	7ffb      	ldrb	r3, [r7, #31]
 8015016:	3301      	adds	r3, #1
 8015018:	77fb      	strb	r3, [r7, #31]
 801501a:	7ffb      	ldrb	r3, [r7, #31]
 801501c:	2b02      	cmp	r3, #2
 801501e:	d9ed      	bls.n	8014ffc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015020:	8938      	ldrh	r0, [r7, #8]
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	33f0      	adds	r3, #240	@ 0xf0
 8015026:	693a      	ldr	r2, [r7, #16]
 8015028:	4619      	mov	r1, r3
 801502a:	f001 f907 	bl	801623c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801502e:	4b20      	ldr	r3, [pc, #128]	@ (80150b0 <dhcp_discover+0x134>)
 8015030:	6818      	ldr	r0, [r3, #0]
 8015032:	4b20      	ldr	r3, [pc, #128]	@ (80150b4 <dhcp_discover+0x138>)
 8015034:	9301      	str	r3, [sp, #4]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	9300      	str	r3, [sp, #0]
 801503a:	2343      	movs	r3, #67	@ 0x43
 801503c:	4a1e      	ldr	r2, [pc, #120]	@ (80150b8 <dhcp_discover+0x13c>)
 801503e:	6939      	ldr	r1, [r7, #16]
 8015040:	f7ff f832 	bl	80140a8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015044:	6938      	ldr	r0, [r7, #16]
 8015046:	f7f8 f80b 	bl	800d060 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801504a:	69bb      	ldr	r3, [r7, #24]
 801504c:	799b      	ldrb	r3, [r3, #6]
 801504e:	2bff      	cmp	r3, #255	@ 0xff
 8015050:	d005      	beq.n	801505e <dhcp_discover+0xe2>
    dhcp->tries++;
 8015052:	69bb      	ldr	r3, [r7, #24]
 8015054:	799b      	ldrb	r3, [r3, #6]
 8015056:	3301      	adds	r3, #1
 8015058:	b2da      	uxtb	r2, r3
 801505a:	69bb      	ldr	r3, [r7, #24]
 801505c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801505e:	69bb      	ldr	r3, [r7, #24]
 8015060:	799b      	ldrb	r3, [r3, #6]
 8015062:	2b05      	cmp	r3, #5
 8015064:	d80d      	bhi.n	8015082 <dhcp_discover+0x106>
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	799b      	ldrb	r3, [r3, #6]
 801506a:	461a      	mov	r2, r3
 801506c:	2301      	movs	r3, #1
 801506e:	4093      	lsls	r3, r2
 8015070:	b29b      	uxth	r3, r3
 8015072:	461a      	mov	r2, r3
 8015074:	0152      	lsls	r2, r2, #5
 8015076:	1ad2      	subs	r2, r2, r3
 8015078:	0092      	lsls	r2, r2, #2
 801507a:	4413      	add	r3, r2
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	b29b      	uxth	r3, r3
 8015080:	e001      	b.n	8015086 <dhcp_discover+0x10a>
 8015082:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8015086:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015088:	897b      	ldrh	r3, [r7, #10]
 801508a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801508e:	4a0b      	ldr	r2, [pc, #44]	@ (80150bc <dhcp_discover+0x140>)
 8015090:	fb82 1203 	smull	r1, r2, r2, r3
 8015094:	1152      	asrs	r2, r2, #5
 8015096:	17db      	asrs	r3, r3, #31
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	b29a      	uxth	r2, r3
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80150a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3720      	adds	r7, #32
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	20000030 	.word	0x20000030
 80150b0:	20010ffc 	.word	0x20010ffc
 80150b4:	0802817c 	.word	0x0802817c
 80150b8:	08028180 	.word	0x08028180
 80150bc:	10624dd3 	.word	0x10624dd3

080150c0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b088      	sub	sp, #32
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d107      	bne.n	80150de <dhcp_bind+0x1e>
 80150ce:	4b64      	ldr	r3, [pc, #400]	@ (8015260 <dhcp_bind+0x1a0>)
 80150d0:	f240 4215 	movw	r2, #1045	@ 0x415
 80150d4:	4963      	ldr	r1, [pc, #396]	@ (8015264 <dhcp_bind+0x1a4>)
 80150d6:	4864      	ldr	r0, [pc, #400]	@ (8015268 <dhcp_bind+0x1a8>)
 80150d8:	f003 fefc 	bl	8018ed4 <iprintf>
 80150dc:	e0bc      	b.n	8015258 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80150e4:	69bb      	ldr	r3, [r7, #24]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d107      	bne.n	80150fa <dhcp_bind+0x3a>
 80150ea:	4b5d      	ldr	r3, [pc, #372]	@ (8015260 <dhcp_bind+0x1a0>)
 80150ec:	f240 4217 	movw	r2, #1047	@ 0x417
 80150f0:	495e      	ldr	r1, [pc, #376]	@ (801526c <dhcp_bind+0x1ac>)
 80150f2:	485d      	ldr	r0, [pc, #372]	@ (8015268 <dhcp_bind+0x1a8>)
 80150f4:	f003 feee 	bl	8018ed4 <iprintf>
 80150f8:	e0ae      	b.n	8015258 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	2200      	movs	r2, #0
 80150fe:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015108:	d019      	beq.n	801513e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801510e:	331e      	adds	r3, #30
 8015110:	4a57      	ldr	r2, [pc, #348]	@ (8015270 <dhcp_bind+0x1b0>)
 8015112:	fba2 2303 	umull	r2, r3, r2, r3
 8015116:	095b      	lsrs	r3, r3, #5
 8015118:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015120:	d302      	bcc.n	8015128 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015126:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	b29a      	uxth	r2, r3
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	8a9b      	ldrh	r3, [r3, #20]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d102      	bne.n	801513e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015138:	69bb      	ldr	r3, [r7, #24]
 801513a:	2201      	movs	r2, #1
 801513c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015146:	d01d      	beq.n	8015184 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015148:	69bb      	ldr	r3, [r7, #24]
 801514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801514c:	331e      	adds	r3, #30
 801514e:	4a48      	ldr	r2, [pc, #288]	@ (8015270 <dhcp_bind+0x1b0>)
 8015150:	fba2 2303 	umull	r2, r3, r2, r3
 8015154:	095b      	lsrs	r3, r3, #5
 8015156:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801515e:	d302      	bcc.n	8015166 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015160:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015164:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	b29a      	uxth	r2, r3
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	895b      	ldrh	r3, [r3, #10]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d102      	bne.n	801517c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015176:	69bb      	ldr	r3, [r7, #24]
 8015178:	2201      	movs	r2, #1
 801517a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	895a      	ldrh	r2, [r3, #10]
 8015180:	69bb      	ldr	r3, [r7, #24]
 8015182:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015184:	69bb      	ldr	r3, [r7, #24]
 8015186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801518c:	d01d      	beq.n	80151ca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015192:	331e      	adds	r3, #30
 8015194:	4a36      	ldr	r2, [pc, #216]	@ (8015270 <dhcp_bind+0x1b0>)
 8015196:	fba2 2303 	umull	r2, r3, r2, r3
 801519a:	095b      	lsrs	r3, r3, #5
 801519c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801519e:	69fb      	ldr	r3, [r7, #28]
 80151a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80151a4:	d302      	bcc.n	80151ac <dhcp_bind+0xec>
      timeout = 0xffff;
 80151a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80151aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	69bb      	ldr	r3, [r7, #24]
 80151b2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80151b4:	69bb      	ldr	r3, [r7, #24]
 80151b6:	899b      	ldrh	r3, [r3, #12]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d102      	bne.n	80151c2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	2201      	movs	r2, #1
 80151c0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	899a      	ldrh	r2, [r3, #12]
 80151c6:	69bb      	ldr	r3, [r7, #24]
 80151c8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80151ca:	69bb      	ldr	r3, [r7, #24]
 80151cc:	895a      	ldrh	r2, [r3, #10]
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	899b      	ldrh	r3, [r3, #12]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d306      	bcc.n	80151e4 <dhcp_bind+0x124>
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	899b      	ldrh	r3, [r3, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d002      	beq.n	80151e4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	2200      	movs	r2, #0
 80151e2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	79db      	ldrb	r3, [r3, #7]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d003      	beq.n	80151f4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	6a1b      	ldr	r3, [r3, #32]
 80151f0:	613b      	str	r3, [r7, #16]
 80151f2:	e014      	b.n	801521e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	331c      	adds	r3, #28
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80151fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015200:	2b00      	cmp	r3, #0
 8015202:	db02      	blt.n	801520a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015204:	23ff      	movs	r3, #255	@ 0xff
 8015206:	613b      	str	r3, [r7, #16]
 8015208:	e009      	b.n	801521e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801520a:	7dfb      	ldrb	r3, [r7, #23]
 801520c:	2bbf      	cmp	r3, #191	@ 0xbf
 801520e:	d903      	bls.n	8015218 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015210:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8015214:	613b      	str	r3, [r7, #16]
 8015216:	e002      	b.n	801521e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015218:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801521c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015222:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d108      	bne.n	801523c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	69da      	ldr	r2, [r3, #28]
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	4013      	ands	r3, r2
 8015232:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801523a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801523c:	210a      	movs	r1, #10
 801523e:	69b8      	ldr	r0, [r7, #24]
 8015240:	f000 fa9a 	bl	8015778 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	f103 011c 	add.w	r1, r3, #28
 801524a:	f107 030c 	add.w	r3, r7, #12
 801524e:	f107 0210 	add.w	r2, r7, #16
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7f7 f9f6 	bl	800c644 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015258:	3720      	adds	r7, #32
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	0801d498 	.word	0x0801d498
 8015264:	0801d5f8 	.word	0x0801d5f8
 8015268:	0801d4f8 	.word	0x0801d4f8
 801526c:	0801d614 	.word	0x0801d614
 8015270:	88888889 	.word	0x88888889

08015274 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b08a      	sub	sp, #40	@ 0x28
 8015278:	af02      	add	r7, sp, #8
 801527a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015280:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015282:	2105      	movs	r1, #5
 8015284:	69b8      	ldr	r0, [r7, #24]
 8015286:	f000 fa77 	bl	8015778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801528a:	f107 030c 	add.w	r3, r7, #12
 801528e:	2203      	movs	r2, #3
 8015290:	69b9      	ldr	r1, [r7, #24]
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f000 fefc 	bl	8016090 <dhcp_create_msg>
 8015298:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d04e      	beq.n	801533e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152a6:	89b8      	ldrh	r0, [r7, #12]
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80152ae:	2302      	movs	r3, #2
 80152b0:	2239      	movs	r2, #57	@ 0x39
 80152b2:	f000 fa7b 	bl	80157ac <dhcp_option>
 80152b6:	4603      	mov	r3, r0
 80152b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80152ba:	89b8      	ldrh	r0, [r7, #12]
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152c6:	461a      	mov	r2, r3
 80152c8:	f000 faca 	bl	8015860 <dhcp_option_short>
 80152cc:	4603      	mov	r3, r0
 80152ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80152d0:	89b8      	ldrh	r0, [r7, #12]
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80152d8:	2303      	movs	r3, #3
 80152da:	2237      	movs	r2, #55	@ 0x37
 80152dc:	f000 fa66 	bl	80157ac <dhcp_option>
 80152e0:	4603      	mov	r3, r0
 80152e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80152e4:	2300      	movs	r3, #0
 80152e6:	77bb      	strb	r3, [r7, #30]
 80152e8:	e00e      	b.n	8015308 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80152ea:	89b8      	ldrh	r0, [r7, #12]
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80152f2:	7fbb      	ldrb	r3, [r7, #30]
 80152f4:	4a29      	ldr	r2, [pc, #164]	@ (801539c <dhcp_renew+0x128>)
 80152f6:	5cd3      	ldrb	r3, [r2, r3]
 80152f8:	461a      	mov	r2, r3
 80152fa:	f000 fa8b 	bl	8015814 <dhcp_option_byte>
 80152fe:	4603      	mov	r3, r0
 8015300:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015302:	7fbb      	ldrb	r3, [r7, #30]
 8015304:	3301      	adds	r3, #1
 8015306:	77bb      	strb	r3, [r7, #30]
 8015308:	7fbb      	ldrb	r3, [r7, #30]
 801530a:	2b02      	cmp	r3, #2
 801530c:	d9ed      	bls.n	80152ea <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801530e:	89b8      	ldrh	r0, [r7, #12]
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	33f0      	adds	r3, #240	@ 0xf0
 8015314:	697a      	ldr	r2, [r7, #20]
 8015316:	4619      	mov	r1, r3
 8015318:	f000 ff90 	bl	801623c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801531c:	4b20      	ldr	r3, [pc, #128]	@ (80153a0 <dhcp_renew+0x12c>)
 801531e:	6818      	ldr	r0, [r3, #0]
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	f103 0218 	add.w	r2, r3, #24
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	2343      	movs	r3, #67	@ 0x43
 801532c:	6979      	ldr	r1, [r7, #20]
 801532e:	f7fe fe47 	bl	8013fc0 <udp_sendto_if>
 8015332:	4603      	mov	r3, r0
 8015334:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015336:	6978      	ldr	r0, [r7, #20]
 8015338:	f7f7 fe92 	bl	800d060 <pbuf_free>
 801533c:	e001      	b.n	8015342 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801533e:	23ff      	movs	r3, #255	@ 0xff
 8015340:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	799b      	ldrb	r3, [r3, #6]
 8015346:	2bff      	cmp	r3, #255	@ 0xff
 8015348:	d005      	beq.n	8015356 <dhcp_renew+0xe2>
    dhcp->tries++;
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	799b      	ldrb	r3, [r3, #6]
 801534e:	3301      	adds	r3, #1
 8015350:	b2da      	uxtb	r2, r3
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	799b      	ldrb	r3, [r3, #6]
 801535a:	2b09      	cmp	r3, #9
 801535c:	d809      	bhi.n	8015372 <dhcp_renew+0xfe>
 801535e:	69bb      	ldr	r3, [r7, #24]
 8015360:	799b      	ldrb	r3, [r3, #6]
 8015362:	461a      	mov	r2, r3
 8015364:	0152      	lsls	r2, r2, #5
 8015366:	1ad2      	subs	r2, r2, r3
 8015368:	0092      	lsls	r2, r2, #2
 801536a:	4413      	add	r3, r2
 801536c:	011b      	lsls	r3, r3, #4
 801536e:	b29b      	uxth	r3, r3
 8015370:	e001      	b.n	8015376 <dhcp_renew+0x102>
 8015372:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8015376:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015378:	89fb      	ldrh	r3, [r7, #14]
 801537a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801537e:	4a09      	ldr	r2, [pc, #36]	@ (80153a4 <dhcp_renew+0x130>)
 8015380:	fb82 1203 	smull	r1, r2, r2, r3
 8015384:	1152      	asrs	r2, r2, #5
 8015386:	17db      	asrs	r3, r3, #31
 8015388:	1ad3      	subs	r3, r2, r3
 801538a:	b29a      	uxth	r2, r3
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015390:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3720      	adds	r7, #32
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	20000030 	.word	0x20000030
 80153a0:	20010ffc 	.word	0x20010ffc
 80153a4:	10624dd3 	.word	0x10624dd3

080153a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b08a      	sub	sp, #40	@ 0x28
 80153ac:	af02      	add	r7, sp, #8
 80153ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80153b6:	2104      	movs	r1, #4
 80153b8:	69b8      	ldr	r0, [r7, #24]
 80153ba:	f000 f9dd 	bl	8015778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153be:	f107 030c 	add.w	r3, r7, #12
 80153c2:	2203      	movs	r2, #3
 80153c4:	69b9      	ldr	r1, [r7, #24]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 fe62 	bl	8016090 <dhcp_create_msg>
 80153cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d04c      	beq.n	801546e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153da:	89b8      	ldrh	r0, [r7, #12]
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153e2:	2302      	movs	r3, #2
 80153e4:	2239      	movs	r2, #57	@ 0x39
 80153e6:	f000 f9e1 	bl	80157ac <dhcp_option>
 80153ea:	4603      	mov	r3, r0
 80153ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80153ee:	89b8      	ldrh	r0, [r7, #12]
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153fa:	461a      	mov	r2, r3
 80153fc:	f000 fa30 	bl	8015860 <dhcp_option_short>
 8015400:	4603      	mov	r3, r0
 8015402:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015404:	89b8      	ldrh	r0, [r7, #12]
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801540c:	2303      	movs	r3, #3
 801540e:	2237      	movs	r2, #55	@ 0x37
 8015410:	f000 f9cc 	bl	80157ac <dhcp_option>
 8015414:	4603      	mov	r3, r0
 8015416:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015418:	2300      	movs	r3, #0
 801541a:	77bb      	strb	r3, [r7, #30]
 801541c:	e00e      	b.n	801543c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801541e:	89b8      	ldrh	r0, [r7, #12]
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015426:	7fbb      	ldrb	r3, [r7, #30]
 8015428:	4a28      	ldr	r2, [pc, #160]	@ (80154cc <dhcp_rebind+0x124>)
 801542a:	5cd3      	ldrb	r3, [r2, r3]
 801542c:	461a      	mov	r2, r3
 801542e:	f000 f9f1 	bl	8015814 <dhcp_option_byte>
 8015432:	4603      	mov	r3, r0
 8015434:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015436:	7fbb      	ldrb	r3, [r7, #30]
 8015438:	3301      	adds	r3, #1
 801543a:	77bb      	strb	r3, [r7, #30]
 801543c:	7fbb      	ldrb	r3, [r7, #30]
 801543e:	2b02      	cmp	r3, #2
 8015440:	d9ed      	bls.n	801541e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015442:	89b8      	ldrh	r0, [r7, #12]
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	33f0      	adds	r3, #240	@ 0xf0
 8015448:	697a      	ldr	r2, [r7, #20]
 801544a:	4619      	mov	r1, r3
 801544c:	f000 fef6 	bl	801623c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015450:	4b1f      	ldr	r3, [pc, #124]	@ (80154d0 <dhcp_rebind+0x128>)
 8015452:	6818      	ldr	r0, [r3, #0]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	2343      	movs	r3, #67	@ 0x43
 801545a:	4a1e      	ldr	r2, [pc, #120]	@ (80154d4 <dhcp_rebind+0x12c>)
 801545c:	6979      	ldr	r1, [r7, #20]
 801545e:	f7fe fdaf 	bl	8013fc0 <udp_sendto_if>
 8015462:	4603      	mov	r3, r0
 8015464:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015466:	6978      	ldr	r0, [r7, #20]
 8015468:	f7f7 fdfa 	bl	800d060 <pbuf_free>
 801546c:	e001      	b.n	8015472 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801546e:	23ff      	movs	r3, #255	@ 0xff
 8015470:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015472:	69bb      	ldr	r3, [r7, #24]
 8015474:	799b      	ldrb	r3, [r3, #6]
 8015476:	2bff      	cmp	r3, #255	@ 0xff
 8015478:	d005      	beq.n	8015486 <dhcp_rebind+0xde>
    dhcp->tries++;
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	799b      	ldrb	r3, [r3, #6]
 801547e:	3301      	adds	r3, #1
 8015480:	b2da      	uxtb	r2, r3
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	799b      	ldrb	r3, [r3, #6]
 801548a:	2b09      	cmp	r3, #9
 801548c:	d809      	bhi.n	80154a2 <dhcp_rebind+0xfa>
 801548e:	69bb      	ldr	r3, [r7, #24]
 8015490:	799b      	ldrb	r3, [r3, #6]
 8015492:	461a      	mov	r2, r3
 8015494:	0152      	lsls	r2, r2, #5
 8015496:	1ad2      	subs	r2, r2, r3
 8015498:	0092      	lsls	r2, r2, #2
 801549a:	4413      	add	r3, r2
 801549c:	00db      	lsls	r3, r3, #3
 801549e:	b29b      	uxth	r3, r3
 80154a0:	e001      	b.n	80154a6 <dhcp_rebind+0xfe>
 80154a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80154a6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154a8:	89fb      	ldrh	r3, [r7, #14]
 80154aa:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80154ae:	4a0a      	ldr	r2, [pc, #40]	@ (80154d8 <dhcp_rebind+0x130>)
 80154b0:	fb82 1203 	smull	r1, r2, r2, r3
 80154b4:	1152      	asrs	r2, r2, #5
 80154b6:	17db      	asrs	r3, r3, #31
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	b29a      	uxth	r2, r3
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3720      	adds	r7, #32
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	20000030 	.word	0x20000030
 80154d0:	20010ffc 	.word	0x20010ffc
 80154d4:	08028180 	.word	0x08028180
 80154d8:	10624dd3 	.word	0x10624dd3

080154dc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80154dc:	b5b0      	push	{r4, r5, r7, lr}
 80154de:	b08a      	sub	sp, #40	@ 0x28
 80154e0:	af02      	add	r7, sp, #8
 80154e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154e8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80154ea:	2103      	movs	r1, #3
 80154ec:	69b8      	ldr	r0, [r7, #24]
 80154ee:	f000 f943 	bl	8015778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80154f2:	f107 030c 	add.w	r3, r7, #12
 80154f6:	2203      	movs	r2, #3
 80154f8:	69b9      	ldr	r1, [r7, #24]
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f000 fdc8 	bl	8016090 <dhcp_create_msg>
 8015500:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d066      	beq.n	80155d6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801550e:	89b8      	ldrh	r0, [r7, #12]
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015516:	2302      	movs	r3, #2
 8015518:	2239      	movs	r2, #57	@ 0x39
 801551a:	f000 f947 	bl	80157ac <dhcp_option>
 801551e:	4603      	mov	r3, r0
 8015520:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015522:	89b8      	ldrh	r0, [r7, #12]
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	33f0      	adds	r3, #240	@ 0xf0
 8015528:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801552c:	4619      	mov	r1, r3
 801552e:	f000 f997 	bl	8015860 <dhcp_option_short>
 8015532:	4603      	mov	r3, r0
 8015534:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015536:	89b8      	ldrh	r0, [r7, #12]
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801553e:	2304      	movs	r3, #4
 8015540:	2232      	movs	r2, #50	@ 0x32
 8015542:	f000 f933 	bl	80157ac <dhcp_option>
 8015546:	4603      	mov	r3, r0
 8015548:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801554a:	89bc      	ldrh	r4, [r7, #12]
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	69db      	ldr	r3, [r3, #28]
 8015556:	4618      	mov	r0, r3
 8015558:	f7f6 f963 	bl	800b822 <lwip_htonl>
 801555c:	4603      	mov	r3, r0
 801555e:	461a      	mov	r2, r3
 8015560:	4629      	mov	r1, r5
 8015562:	4620      	mov	r0, r4
 8015564:	f000 f9ae 	bl	80158c4 <dhcp_option_long>
 8015568:	4603      	mov	r3, r0
 801556a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801556c:	89b8      	ldrh	r0, [r7, #12]
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015574:	2303      	movs	r3, #3
 8015576:	2237      	movs	r2, #55	@ 0x37
 8015578:	f000 f918 	bl	80157ac <dhcp_option>
 801557c:	4603      	mov	r3, r0
 801557e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015580:	2300      	movs	r3, #0
 8015582:	77bb      	strb	r3, [r7, #30]
 8015584:	e00e      	b.n	80155a4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015586:	89b8      	ldrh	r0, [r7, #12]
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801558e:	7fbb      	ldrb	r3, [r7, #30]
 8015590:	4a28      	ldr	r2, [pc, #160]	@ (8015634 <dhcp_reboot+0x158>)
 8015592:	5cd3      	ldrb	r3, [r2, r3]
 8015594:	461a      	mov	r2, r3
 8015596:	f000 f93d 	bl	8015814 <dhcp_option_byte>
 801559a:	4603      	mov	r3, r0
 801559c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801559e:	7fbb      	ldrb	r3, [r7, #30]
 80155a0:	3301      	adds	r3, #1
 80155a2:	77bb      	strb	r3, [r7, #30]
 80155a4:	7fbb      	ldrb	r3, [r7, #30]
 80155a6:	2b02      	cmp	r3, #2
 80155a8:	d9ed      	bls.n	8015586 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80155aa:	89b8      	ldrh	r0, [r7, #12]
 80155ac:	693b      	ldr	r3, [r7, #16]
 80155ae:	33f0      	adds	r3, #240	@ 0xf0
 80155b0:	697a      	ldr	r2, [r7, #20]
 80155b2:	4619      	mov	r1, r3
 80155b4:	f000 fe42 	bl	801623c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80155b8:	4b1f      	ldr	r3, [pc, #124]	@ (8015638 <dhcp_reboot+0x15c>)
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	2343      	movs	r3, #67	@ 0x43
 80155c2:	4a1e      	ldr	r2, [pc, #120]	@ (801563c <dhcp_reboot+0x160>)
 80155c4:	6979      	ldr	r1, [r7, #20]
 80155c6:	f7fe fcfb 	bl	8013fc0 <udp_sendto_if>
 80155ca:	4603      	mov	r3, r0
 80155cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80155ce:	6978      	ldr	r0, [r7, #20]
 80155d0:	f7f7 fd46 	bl	800d060 <pbuf_free>
 80155d4:	e001      	b.n	80155da <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80155d6:	23ff      	movs	r3, #255	@ 0xff
 80155d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	799b      	ldrb	r3, [r3, #6]
 80155de:	2bff      	cmp	r3, #255	@ 0xff
 80155e0:	d005      	beq.n	80155ee <dhcp_reboot+0x112>
    dhcp->tries++;
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	799b      	ldrb	r3, [r3, #6]
 80155e6:	3301      	adds	r3, #1
 80155e8:	b2da      	uxtb	r2, r3
 80155ea:	69bb      	ldr	r3, [r7, #24]
 80155ec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	799b      	ldrb	r3, [r3, #6]
 80155f2:	2b09      	cmp	r3, #9
 80155f4:	d809      	bhi.n	801560a <dhcp_reboot+0x12e>
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	799b      	ldrb	r3, [r3, #6]
 80155fa:	461a      	mov	r2, r3
 80155fc:	0152      	lsls	r2, r2, #5
 80155fe:	1ad2      	subs	r2, r2, r3
 8015600:	0092      	lsls	r2, r2, #2
 8015602:	4413      	add	r3, r2
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	b29b      	uxth	r3, r3
 8015608:	e001      	b.n	801560e <dhcp_reboot+0x132>
 801560a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801560e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015610:	89fb      	ldrh	r3, [r7, #14]
 8015612:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015616:	4a0a      	ldr	r2, [pc, #40]	@ (8015640 <dhcp_reboot+0x164>)
 8015618:	fb82 1203 	smull	r1, r2, r2, r3
 801561c:	1152      	asrs	r2, r2, #5
 801561e:	17db      	asrs	r3, r3, #31
 8015620:	1ad3      	subs	r3, r2, r3
 8015622:	b29a      	uxth	r2, r3
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015628:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801562c:	4618      	mov	r0, r3
 801562e:	3720      	adds	r7, #32
 8015630:	46bd      	mov	sp, r7
 8015632:	bdb0      	pop	{r4, r5, r7, pc}
 8015634:	20000030 	.word	0x20000030
 8015638:	20010ffc 	.word	0x20010ffc
 801563c:	08028180 	.word	0x08028180
 8015640:	10624dd3 	.word	0x10624dd3

08015644 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015644:	b5b0      	push	{r4, r5, r7, lr}
 8015646:	b08a      	sub	sp, #40	@ 0x28
 8015648:	af02      	add	r7, sp, #8
 801564a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015650:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	2b00      	cmp	r3, #0
 8015656:	f000 8084 	beq.w	8015762 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801565a:	69fb      	ldr	r3, [r7, #28]
 801565c:	795b      	ldrb	r3, [r3, #5]
 801565e:	2b00      	cmp	r3, #0
 8015660:	f000 8081 	beq.w	8015766 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	699b      	ldr	r3, [r3, #24]
 8015668:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	2200      	movs	r2, #0
 801566e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015670:	69fb      	ldr	r3, [r7, #28]
 8015672:	2200      	movs	r2, #0
 8015674:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	2200      	movs	r2, #0
 801567a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	2200      	movs	r2, #0
 8015680:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	2200      	movs	r2, #0
 8015686:	631a      	str	r2, [r3, #48]	@ 0x30
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015694:	69fb      	ldr	r3, [r7, #28]
 8015696:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	2200      	movs	r2, #0
 801569c:	829a      	strh	r2, [r3, #20]
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	8a9a      	ldrh	r2, [r3, #20]
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	825a      	strh	r2, [r3, #18]
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	8a5a      	ldrh	r2, [r3, #18]
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	821a      	strh	r2, [r3, #16]
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	8a1a      	ldrh	r2, [r3, #16]
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f000 fdee 	bl	8016298 <dhcp_supplied_address>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d03b      	beq.n	801573a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80156c2:	f107 030e 	add.w	r3, r7, #14
 80156c6:	2207      	movs	r2, #7
 80156c8:	69f9      	ldr	r1, [r7, #28]
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 fce0 	bl	8016090 <dhcp_create_msg>
 80156d0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d030      	beq.n	801573a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80156d8:	69bb      	ldr	r3, [r7, #24]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80156de:	89f8      	ldrh	r0, [r7, #14]
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80156e6:	2304      	movs	r3, #4
 80156e8:	2236      	movs	r2, #54	@ 0x36
 80156ea:	f000 f85f 	bl	80157ac <dhcp_option>
 80156ee:	4603      	mov	r3, r0
 80156f0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80156f2:	89fc      	ldrh	r4, [r7, #14]
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7f6 f890 	bl	800b822 <lwip_htonl>
 8015702:	4603      	mov	r3, r0
 8015704:	461a      	mov	r2, r3
 8015706:	4629      	mov	r1, r5
 8015708:	4620      	mov	r0, r4
 801570a:	f000 f8db 	bl	80158c4 <dhcp_option_long>
 801570e:	4603      	mov	r3, r0
 8015710:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015712:	89f8      	ldrh	r0, [r7, #14]
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	33f0      	adds	r3, #240	@ 0xf0
 8015718:	69ba      	ldr	r2, [r7, #24]
 801571a:	4619      	mov	r1, r3
 801571c:	f000 fd8e 	bl	801623c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015720:	4b13      	ldr	r3, [pc, #76]	@ (8015770 <dhcp_release_and_stop+0x12c>)
 8015722:	6818      	ldr	r0, [r3, #0]
 8015724:	f107 0210 	add.w	r2, r7, #16
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	2343      	movs	r3, #67	@ 0x43
 801572e:	69b9      	ldr	r1, [r7, #24]
 8015730:	f7fe fc46 	bl	8013fc0 <udp_sendto_if>
      pbuf_free(p_out);
 8015734:	69b8      	ldr	r0, [r7, #24]
 8015736:	f7f7 fc93 	bl	800d060 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801573a:	4b0e      	ldr	r3, [pc, #56]	@ (8015774 <dhcp_release_and_stop+0x130>)
 801573c:	4a0d      	ldr	r2, [pc, #52]	@ (8015774 <dhcp_release_and_stop+0x130>)
 801573e:	490d      	ldr	r1, [pc, #52]	@ (8015774 <dhcp_release_and_stop+0x130>)
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7f6 ff7f 	bl	800c644 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015746:	2100      	movs	r1, #0
 8015748:	69f8      	ldr	r0, [r7, #28]
 801574a:	f000 f815 	bl	8015778 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801574e:	69fb      	ldr	r3, [r7, #28]
 8015750:	791b      	ldrb	r3, [r3, #4]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d008      	beq.n	8015768 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015756:	f7fe ff8b 	bl	8014670 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	2200      	movs	r2, #0
 801575e:	711a      	strb	r2, [r3, #4]
 8015760:	e002      	b.n	8015768 <dhcp_release_and_stop+0x124>
    return;
 8015762:	bf00      	nop
 8015764:	e000      	b.n	8015768 <dhcp_release_and_stop+0x124>
    return;
 8015766:	bf00      	nop
  }
}
 8015768:	3720      	adds	r7, #32
 801576a:	46bd      	mov	sp, r7
 801576c:	bdb0      	pop	{r4, r5, r7, pc}
 801576e:	bf00      	nop
 8015770:	20010ffc 	.word	0x20010ffc
 8015774:	0802817c 	.word	0x0802817c

08015778 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015778:	b480      	push	{r7}
 801577a:	b083      	sub	sp, #12
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	460b      	mov	r3, r1
 8015782:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	795b      	ldrb	r3, [r3, #5]
 8015788:	78fa      	ldrb	r2, [r7, #3]
 801578a:	429a      	cmp	r2, r3
 801578c:	d008      	beq.n	80157a0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	78fa      	ldrb	r2, [r7, #3]
 8015792:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2200      	movs	r2, #0
 8015798:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	811a      	strh	r2, [r3, #8]
  }
}
 80157a0:	bf00      	nop
 80157a2:	370c      	adds	r7, #12
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr

080157ac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6039      	str	r1, [r7, #0]
 80157b4:	4611      	mov	r1, r2
 80157b6:	461a      	mov	r2, r3
 80157b8:	4603      	mov	r3, r0
 80157ba:	80fb      	strh	r3, [r7, #6]
 80157bc:	460b      	mov	r3, r1
 80157be:	717b      	strb	r3, [r7, #5]
 80157c0:	4613      	mov	r3, r2
 80157c2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80157c4:	88fa      	ldrh	r2, [r7, #6]
 80157c6:	793b      	ldrb	r3, [r7, #4]
 80157c8:	4413      	add	r3, r2
 80157ca:	3302      	adds	r3, #2
 80157cc:	2b44      	cmp	r3, #68	@ 0x44
 80157ce:	d906      	bls.n	80157de <dhcp_option+0x32>
 80157d0:	4b0d      	ldr	r3, [pc, #52]	@ (8015808 <dhcp_option+0x5c>)
 80157d2:	f240 529a 	movw	r2, #1434	@ 0x59a
 80157d6:	490d      	ldr	r1, [pc, #52]	@ (801580c <dhcp_option+0x60>)
 80157d8:	480d      	ldr	r0, [pc, #52]	@ (8015810 <dhcp_option+0x64>)
 80157da:	f003 fb7b 	bl	8018ed4 <iprintf>
  options[options_out_len++] = option_type;
 80157de:	88fb      	ldrh	r3, [r7, #6]
 80157e0:	1c5a      	adds	r2, r3, #1
 80157e2:	80fa      	strh	r2, [r7, #6]
 80157e4:	461a      	mov	r2, r3
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	4413      	add	r3, r2
 80157ea:	797a      	ldrb	r2, [r7, #5]
 80157ec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80157ee:	88fb      	ldrh	r3, [r7, #6]
 80157f0:	1c5a      	adds	r2, r3, #1
 80157f2:	80fa      	strh	r2, [r7, #6]
 80157f4:	461a      	mov	r2, r3
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	4413      	add	r3, r2
 80157fa:	793a      	ldrb	r2, [r7, #4]
 80157fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80157fe:	88fb      	ldrh	r3, [r7, #6]
}
 8015800:	4618      	mov	r0, r3
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}
 8015808:	0801d498 	.word	0x0801d498
 801580c:	0801d62c 	.word	0x0801d62c
 8015810:	0801d4f8 	.word	0x0801d4f8

08015814 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	4603      	mov	r3, r0
 801581c:	6039      	str	r1, [r7, #0]
 801581e:	80fb      	strh	r3, [r7, #6]
 8015820:	4613      	mov	r3, r2
 8015822:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015824:	88fb      	ldrh	r3, [r7, #6]
 8015826:	2b43      	cmp	r3, #67	@ 0x43
 8015828:	d906      	bls.n	8015838 <dhcp_option_byte+0x24>
 801582a:	4b0a      	ldr	r3, [pc, #40]	@ (8015854 <dhcp_option_byte+0x40>)
 801582c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8015830:	4909      	ldr	r1, [pc, #36]	@ (8015858 <dhcp_option_byte+0x44>)
 8015832:	480a      	ldr	r0, [pc, #40]	@ (801585c <dhcp_option_byte+0x48>)
 8015834:	f003 fb4e 	bl	8018ed4 <iprintf>
  options[options_out_len++] = value;
 8015838:	88fb      	ldrh	r3, [r7, #6]
 801583a:	1c5a      	adds	r2, r3, #1
 801583c:	80fa      	strh	r2, [r7, #6]
 801583e:	461a      	mov	r2, r3
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	4413      	add	r3, r2
 8015844:	797a      	ldrb	r2, [r7, #5]
 8015846:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015848:	88fb      	ldrh	r3, [r7, #6]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3708      	adds	r7, #8
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	0801d498 	.word	0x0801d498
 8015858:	0801d670 	.word	0x0801d670
 801585c:	0801d4f8 	.word	0x0801d4f8

08015860 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	4603      	mov	r3, r0
 8015868:	6039      	str	r1, [r7, #0]
 801586a:	80fb      	strh	r3, [r7, #6]
 801586c:	4613      	mov	r3, r2
 801586e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015870:	88fb      	ldrh	r3, [r7, #6]
 8015872:	3302      	adds	r3, #2
 8015874:	2b44      	cmp	r3, #68	@ 0x44
 8015876:	d906      	bls.n	8015886 <dhcp_option_short+0x26>
 8015878:	4b0f      	ldr	r3, [pc, #60]	@ (80158b8 <dhcp_option_short+0x58>)
 801587a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801587e:	490f      	ldr	r1, [pc, #60]	@ (80158bc <dhcp_option_short+0x5c>)
 8015880:	480f      	ldr	r0, [pc, #60]	@ (80158c0 <dhcp_option_short+0x60>)
 8015882:	f003 fb27 	bl	8018ed4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015886:	88bb      	ldrh	r3, [r7, #4]
 8015888:	0a1b      	lsrs	r3, r3, #8
 801588a:	b29a      	uxth	r2, r3
 801588c:	88fb      	ldrh	r3, [r7, #6]
 801588e:	1c59      	adds	r1, r3, #1
 8015890:	80f9      	strh	r1, [r7, #6]
 8015892:	4619      	mov	r1, r3
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	440b      	add	r3, r1
 8015898:	b2d2      	uxtb	r2, r2
 801589a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801589c:	88fb      	ldrh	r3, [r7, #6]
 801589e:	1c5a      	adds	r2, r3, #1
 80158a0:	80fa      	strh	r2, [r7, #6]
 80158a2:	461a      	mov	r2, r3
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	4413      	add	r3, r2
 80158a8:	88ba      	ldrh	r2, [r7, #4]
 80158aa:	b2d2      	uxtb	r2, r2
 80158ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80158ae:	88fb      	ldrh	r3, [r7, #6]
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3708      	adds	r7, #8
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	0801d498 	.word	0x0801d498
 80158bc:	0801d6a8 	.word	0x0801d6a8
 80158c0:	0801d4f8 	.word	0x0801d4f8

080158c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	607a      	str	r2, [r7, #4]
 80158d0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80158d2:	89fb      	ldrh	r3, [r7, #14]
 80158d4:	3304      	adds	r3, #4
 80158d6:	2b44      	cmp	r3, #68	@ 0x44
 80158d8:	d906      	bls.n	80158e8 <dhcp_option_long+0x24>
 80158da:	4b19      	ldr	r3, [pc, #100]	@ (8015940 <dhcp_option_long+0x7c>)
 80158dc:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80158e0:	4918      	ldr	r1, [pc, #96]	@ (8015944 <dhcp_option_long+0x80>)
 80158e2:	4819      	ldr	r0, [pc, #100]	@ (8015948 <dhcp_option_long+0x84>)
 80158e4:	f003 faf6 	bl	8018ed4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	0e1a      	lsrs	r2, r3, #24
 80158ec:	89fb      	ldrh	r3, [r7, #14]
 80158ee:	1c59      	adds	r1, r3, #1
 80158f0:	81f9      	strh	r1, [r7, #14]
 80158f2:	4619      	mov	r1, r3
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	440b      	add	r3, r1
 80158f8:	b2d2      	uxtb	r2, r2
 80158fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	0c1a      	lsrs	r2, r3, #16
 8015900:	89fb      	ldrh	r3, [r7, #14]
 8015902:	1c59      	adds	r1, r3, #1
 8015904:	81f9      	strh	r1, [r7, #14]
 8015906:	4619      	mov	r1, r3
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	440b      	add	r3, r1
 801590c:	b2d2      	uxtb	r2, r2
 801590e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	0a1a      	lsrs	r2, r3, #8
 8015914:	89fb      	ldrh	r3, [r7, #14]
 8015916:	1c59      	adds	r1, r3, #1
 8015918:	81f9      	strh	r1, [r7, #14]
 801591a:	4619      	mov	r1, r3
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	440b      	add	r3, r1
 8015920:	b2d2      	uxtb	r2, r2
 8015922:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015924:	89fb      	ldrh	r3, [r7, #14]
 8015926:	1c5a      	adds	r2, r3, #1
 8015928:	81fa      	strh	r2, [r7, #14]
 801592a:	461a      	mov	r2, r3
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	4413      	add	r3, r2
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	b2d2      	uxtb	r2, r2
 8015934:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015936:	89fb      	ldrh	r3, [r7, #14]
}
 8015938:	4618      	mov	r0, r3
 801593a:	3710      	adds	r7, #16
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	0801d498 	.word	0x0801d498
 8015944:	0801d6e4 	.word	0x0801d6e4
 8015948:	0801d4f8 	.word	0x0801d4f8

0801594c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b090      	sub	sp, #64	@ 0x40
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015956:	2300      	movs	r3, #0
 8015958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801595a:	2300      	movs	r3, #0
 801595c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801595e:	2208      	movs	r2, #8
 8015960:	2100      	movs	r1, #0
 8015962:	48b5      	ldr	r0, [pc, #724]	@ (8015c38 <dhcp_parse_reply+0x2ec>)
 8015964:	f003 fb55 	bl	8019012 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	895b      	ldrh	r3, [r3, #10]
 801596c:	2b2b      	cmp	r3, #43	@ 0x2b
 801596e:	d802      	bhi.n	8015976 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015970:	f06f 0301 	mvn.w	r3, #1
 8015974:	e2a7      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801597c:	23f0      	movs	r3, #240	@ 0xf0
 801597e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	891b      	ldrh	r3, [r3, #8]
 8015984:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801598a:	e00c      	b.n	80159a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801598e:	895b      	ldrh	r3, [r3, #10]
 8015990:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015992:	1ad3      	subs	r3, r2, r3
 8015994:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015998:	895b      	ldrh	r3, [r3, #10]
 801599a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801599c:	1ad3      	subs	r3, r2, r3
 801599e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80159a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80159a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d004      	beq.n	80159b6 <dhcp_parse_reply+0x6a>
 80159ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ae:	895b      	ldrh	r3, [r3, #10]
 80159b0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d2ea      	bcs.n	801598c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80159b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d102      	bne.n	80159c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80159bc:	f06f 0301 	mvn.w	r3, #1
 80159c0:	e281      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80159c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80159c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80159c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80159c8:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80159ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159cc:	685b      	ldr	r3, [r3, #4]
 80159ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80159d0:	e239      	b.n	8015e46 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80159d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80159d6:	4413      	add	r3, r2
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80159dc:	2300      	movs	r3, #0
 80159de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 80159e2:	f04f 33ff 	mov.w	r3, #4294967295
 80159e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80159e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159ea:	3302      	adds	r3, #2
 80159ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80159ee:	8bfa      	ldrh	r2, [r7, #30]
 80159f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d202      	bcs.n	80159fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80159f6:	f06f 0301 	mvn.w	r3, #1
 80159fa:	e264      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80159fc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159fe:	3301      	adds	r3, #1
 8015a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a02:	8952      	ldrh	r2, [r2, #10]
 8015a04:	4293      	cmp	r3, r2
 8015a06:	da07      	bge.n	8015a18 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015a08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015a0e:	4413      	add	r3, r2
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015a16:	e00b      	b.n	8015a30 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d004      	beq.n	8015a2a <dhcp_parse_reply+0xde>
 8015a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	e000      	b.n	8015a2c <dhcp_parse_reply+0xe0>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8015a38:	7dfb      	ldrb	r3, [r7, #23]
 8015a3a:	2b3b      	cmp	r3, #59	@ 0x3b
 8015a3c:	f200 812c 	bhi.w	8015c98 <dhcp_parse_reply+0x34c>
 8015a40:	a201      	add	r2, pc, #4	@ (adr r2, 8015a48 <dhcp_parse_reply+0xfc>)
 8015a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a46:	bf00      	nop
 8015a48:	08015b39 	.word	0x08015b39
 8015a4c:	08015b49 	.word	0x08015b49
 8015a50:	08015c99 	.word	0x08015c99
 8015a54:	08015b6b 	.word	0x08015b6b
 8015a58:	08015c99 	.word	0x08015c99
 8015a5c:	08015c99 	.word	0x08015c99
 8015a60:	08015c99 	.word	0x08015c99
 8015a64:	08015c99 	.word	0x08015c99
 8015a68:	08015c99 	.word	0x08015c99
 8015a6c:	08015c99 	.word	0x08015c99
 8015a70:	08015c99 	.word	0x08015c99
 8015a74:	08015c99 	.word	0x08015c99
 8015a78:	08015c99 	.word	0x08015c99
 8015a7c:	08015c99 	.word	0x08015c99
 8015a80:	08015c99 	.word	0x08015c99
 8015a84:	08015c99 	.word	0x08015c99
 8015a88:	08015c99 	.word	0x08015c99
 8015a8c:	08015c99 	.word	0x08015c99
 8015a90:	08015c99 	.word	0x08015c99
 8015a94:	08015c99 	.word	0x08015c99
 8015a98:	08015c99 	.word	0x08015c99
 8015a9c:	08015c99 	.word	0x08015c99
 8015aa0:	08015c99 	.word	0x08015c99
 8015aa4:	08015c99 	.word	0x08015c99
 8015aa8:	08015c99 	.word	0x08015c99
 8015aac:	08015c99 	.word	0x08015c99
 8015ab0:	08015c99 	.word	0x08015c99
 8015ab4:	08015c99 	.word	0x08015c99
 8015ab8:	08015c99 	.word	0x08015c99
 8015abc:	08015c99 	.word	0x08015c99
 8015ac0:	08015c99 	.word	0x08015c99
 8015ac4:	08015c99 	.word	0x08015c99
 8015ac8:	08015c99 	.word	0x08015c99
 8015acc:	08015c99 	.word	0x08015c99
 8015ad0:	08015c99 	.word	0x08015c99
 8015ad4:	08015c99 	.word	0x08015c99
 8015ad8:	08015c99 	.word	0x08015c99
 8015adc:	08015c99 	.word	0x08015c99
 8015ae0:	08015c99 	.word	0x08015c99
 8015ae4:	08015c99 	.word	0x08015c99
 8015ae8:	08015c99 	.word	0x08015c99
 8015aec:	08015c99 	.word	0x08015c99
 8015af0:	08015c99 	.word	0x08015c99
 8015af4:	08015c99 	.word	0x08015c99
 8015af8:	08015c99 	.word	0x08015c99
 8015afc:	08015c99 	.word	0x08015c99
 8015b00:	08015c99 	.word	0x08015c99
 8015b04:	08015c99 	.word	0x08015c99
 8015b08:	08015c99 	.word	0x08015c99
 8015b0c:	08015c99 	.word	0x08015c99
 8015b10:	08015c99 	.word	0x08015c99
 8015b14:	08015b97 	.word	0x08015b97
 8015b18:	08015bb9 	.word	0x08015bb9
 8015b1c:	08015bf5 	.word	0x08015bf5
 8015b20:	08015c17 	.word	0x08015c17
 8015b24:	08015c99 	.word	0x08015c99
 8015b28:	08015c99 	.word	0x08015c99
 8015b2c:	08015c99 	.word	0x08015c99
 8015b30:	08015c55 	.word	0x08015c55
 8015b34:	08015c77 	.word	0x08015c77
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8015b46:	e0ab      	b.n	8015ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b4c:	2b04      	cmp	r3, #4
 8015b4e:	d009      	beq.n	8015b64 <dhcp_parse_reply+0x218>
 8015b50:	4b3a      	ldr	r3, [pc, #232]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015b52:	f240 622e 	movw	r2, #1582	@ 0x62e
 8015b56:	493a      	ldr	r1, [pc, #232]	@ (8015c40 <dhcp_parse_reply+0x2f4>)
 8015b58:	483a      	ldr	r0, [pc, #232]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015b5a:	f003 f9bb 	bl	8018ed4 <iprintf>
 8015b5e:	f06f 0305 	mvn.w	r3, #5
 8015b62:	e1b0      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015b64:	2306      	movs	r3, #6
 8015b66:	623b      	str	r3, [r7, #32]
        break;
 8015b68:	e09a      	b.n	8015ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015b6a:	2304      	movs	r3, #4
 8015b6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015b70:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015b74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d209      	bcs.n	8015b90 <dhcp_parse_reply+0x244>
 8015b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015b7e:	f240 6233 	movw	r2, #1587	@ 0x633
 8015b82:	4931      	ldr	r1, [pc, #196]	@ (8015c48 <dhcp_parse_reply+0x2fc>)
 8015b84:	482f      	ldr	r0, [pc, #188]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015b86:	f003 f9a5 	bl	8018ed4 <iprintf>
 8015b8a:	f06f 0305 	mvn.w	r3, #5
 8015b8e:	e19a      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015b90:	2307      	movs	r3, #7
 8015b92:	623b      	str	r3, [r7, #32]
        break;
 8015b94:	e084      	b.n	8015ca0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b9a:	2b04      	cmp	r3, #4
 8015b9c:	d009      	beq.n	8015bb2 <dhcp_parse_reply+0x266>
 8015b9e:	4b27      	ldr	r3, [pc, #156]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015ba0:	f240 6241 	movw	r2, #1601	@ 0x641
 8015ba4:	4926      	ldr	r1, [pc, #152]	@ (8015c40 <dhcp_parse_reply+0x2f4>)
 8015ba6:	4827      	ldr	r0, [pc, #156]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015ba8:	f003 f994 	bl	8018ed4 <iprintf>
 8015bac:	f06f 0305 	mvn.w	r3, #5
 8015bb0:	e189      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015bb2:	2303      	movs	r3, #3
 8015bb4:	623b      	str	r3, [r7, #32]
        break;
 8015bb6:	e073      	b.n	8015ca0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d009      	beq.n	8015bd4 <dhcp_parse_reply+0x288>
 8015bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015bc2:	f240 624f 	movw	r2, #1615	@ 0x64f
 8015bc6:	4921      	ldr	r1, [pc, #132]	@ (8015c4c <dhcp_parse_reply+0x300>)
 8015bc8:	481e      	ldr	r0, [pc, #120]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015bca:	f003 f983 	bl	8018ed4 <iprintf>
 8015bce:	f06f 0305 	mvn.w	r3, #5
 8015bd2:	e178      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015bd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015bd6:	2bf0      	cmp	r3, #240	@ 0xf0
 8015bd8:	d009      	beq.n	8015bee <dhcp_parse_reply+0x2a2>
 8015bda:	4b18      	ldr	r3, [pc, #96]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015bdc:	f240 6251 	movw	r2, #1617	@ 0x651
 8015be0:	491b      	ldr	r1, [pc, #108]	@ (8015c50 <dhcp_parse_reply+0x304>)
 8015be2:	4818      	ldr	r0, [pc, #96]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015be4:	f003 f976 	bl	8018ed4 <iprintf>
 8015be8:	f06f 0305 	mvn.w	r3, #5
 8015bec:	e16b      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	623b      	str	r3, [r7, #32]
        break;
 8015bf2:	e055      	b.n	8015ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bf8:	2b01      	cmp	r3, #1
 8015bfa:	d009      	beq.n	8015c10 <dhcp_parse_reply+0x2c4>
 8015bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015bfe:	f240 6255 	movw	r2, #1621	@ 0x655
 8015c02:	4912      	ldr	r1, [pc, #72]	@ (8015c4c <dhcp_parse_reply+0x300>)
 8015c04:	480f      	ldr	r0, [pc, #60]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015c06:	f003 f965 	bl	8018ed4 <iprintf>
 8015c0a:	f06f 0305 	mvn.w	r3, #5
 8015c0e:	e15a      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015c10:	2301      	movs	r3, #1
 8015c12:	623b      	str	r3, [r7, #32]
        break;
 8015c14:	e044      	b.n	8015ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c1a:	2b04      	cmp	r3, #4
 8015c1c:	d009      	beq.n	8015c32 <dhcp_parse_reply+0x2e6>
 8015c1e:	4b07      	ldr	r3, [pc, #28]	@ (8015c3c <dhcp_parse_reply+0x2f0>)
 8015c20:	f240 6259 	movw	r2, #1625	@ 0x659
 8015c24:	4906      	ldr	r1, [pc, #24]	@ (8015c40 <dhcp_parse_reply+0x2f4>)
 8015c26:	4807      	ldr	r0, [pc, #28]	@ (8015c44 <dhcp_parse_reply+0x2f8>)
 8015c28:	f003 f954 	bl	8018ed4 <iprintf>
 8015c2c:	f06f 0305 	mvn.w	r3, #5
 8015c30:	e149      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015c32:	2302      	movs	r3, #2
 8015c34:	623b      	str	r3, [r7, #32]
        break;
 8015c36:	e033      	b.n	8015ca0 <dhcp_parse_reply+0x354>
 8015c38:	20010ff4 	.word	0x20010ff4
 8015c3c:	0801d498 	.word	0x0801d498
 8015c40:	0801d720 	.word	0x0801d720
 8015c44:	0801d4f8 	.word	0x0801d4f8
 8015c48:	0801d72c 	.word	0x0801d72c
 8015c4c:	0801d740 	.word	0x0801d740
 8015c50:	0801d74c 	.word	0x0801d74c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c58:	2b04      	cmp	r3, #4
 8015c5a:	d009      	beq.n	8015c70 <dhcp_parse_reply+0x324>
 8015c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8015ed0 <dhcp_parse_reply+0x584>)
 8015c5e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8015c62:	499c      	ldr	r1, [pc, #624]	@ (8015ed4 <dhcp_parse_reply+0x588>)
 8015c64:	489c      	ldr	r0, [pc, #624]	@ (8015ed8 <dhcp_parse_reply+0x58c>)
 8015c66:	f003 f935 	bl	8018ed4 <iprintf>
 8015c6a:	f06f 0305 	mvn.w	r3, #5
 8015c6e:	e12a      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015c70:	2304      	movs	r3, #4
 8015c72:	623b      	str	r3, [r7, #32]
        break;
 8015c74:	e014      	b.n	8015ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c7a:	2b04      	cmp	r3, #4
 8015c7c:	d009      	beq.n	8015c92 <dhcp_parse_reply+0x346>
 8015c7e:	4b94      	ldr	r3, [pc, #592]	@ (8015ed0 <dhcp_parse_reply+0x584>)
 8015c80:	f240 6261 	movw	r2, #1633	@ 0x661
 8015c84:	4993      	ldr	r1, [pc, #588]	@ (8015ed4 <dhcp_parse_reply+0x588>)
 8015c86:	4894      	ldr	r0, [pc, #592]	@ (8015ed8 <dhcp_parse_reply+0x58c>)
 8015c88:	f003 f924 	bl	8018ed4 <iprintf>
 8015c8c:	f06f 0305 	mvn.w	r3, #5
 8015c90:	e119      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015c92:	2305      	movs	r3, #5
 8015c94:	623b      	str	r3, [r7, #32]
        break;
 8015c96:	e003      	b.n	8015ca0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015c9e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015ca0:	7dfb      	ldrb	r3, [r7, #23]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d103      	bne.n	8015cae <dhcp_parse_reply+0x362>
      offset++;
 8015ca6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015ca8:	3301      	adds	r3, #1
 8015caa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015cac:	e0a1      	b.n	8015df2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015cae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cb4:	4413      	add	r3, r2
 8015cb6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8015cba:	4293      	cmp	r3, r2
 8015cbc:	dd02      	ble.n	8015cc4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015cbe:	f06f 0301 	mvn.w	r3, #1
 8015cc2:	e100      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015ccc:	4413      	add	r3, r2
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	3302      	adds	r3, #2
 8015cd2:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8015cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f000 808a 	beq.w	8015df2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015ce2:	6a3b      	ldr	r3, [r7, #32]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	db02      	blt.n	8015cee <dhcp_parse_reply+0x3a2>
 8015ce8:	6a3b      	ldr	r3, [r7, #32]
 8015cea:	2b07      	cmp	r3, #7
 8015cec:	dd06      	ble.n	8015cfc <dhcp_parse_reply+0x3b0>
 8015cee:	4b78      	ldr	r3, [pc, #480]	@ (8015ed0 <dhcp_parse_reply+0x584>)
 8015cf0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8015cf4:	4979      	ldr	r1, [pc, #484]	@ (8015edc <dhcp_parse_reply+0x590>)
 8015cf6:	4878      	ldr	r0, [pc, #480]	@ (8015ed8 <dhcp_parse_reply+0x58c>)
 8015cf8:	f003 f8ec 	bl	8018ed4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015cfc:	4a78      	ldr	r2, [pc, #480]	@ (8015ee0 <dhcp_parse_reply+0x594>)
 8015cfe:	6a3b      	ldr	r3, [r7, #32]
 8015d00:	4413      	add	r3, r2
 8015d02:	781b      	ldrb	r3, [r3, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d174      	bne.n	8015df2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015d08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d0c:	2b04      	cmp	r3, #4
 8015d0e:	bf28      	it	cs
 8015d10:	2304      	movcs	r3, #4
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015d16:	8bfb      	ldrh	r3, [r7, #30]
 8015d18:	8aba      	ldrh	r2, [r7, #20]
 8015d1a:	f107 0108 	add.w	r1, r7, #8
 8015d1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d20:	f7f7 fba4 	bl	800d46c <pbuf_copy_partial>
 8015d24:	4603      	mov	r3, r0
 8015d26:	461a      	mov	r2, r3
 8015d28:	8abb      	ldrh	r3, [r7, #20]
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	d002      	beq.n	8015d34 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015d2e:	f06f 0301 	mvn.w	r3, #1
 8015d32:	e0c8      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d38:	2b04      	cmp	r3, #4
 8015d3a:	d933      	bls.n	8015da4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d40:	f003 0303 	and.w	r3, r3, #3
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d009      	beq.n	8015d5e <dhcp_parse_reply+0x412>
 8015d4a:	4b61      	ldr	r3, [pc, #388]	@ (8015ed0 <dhcp_parse_reply+0x584>)
 8015d4c:	f240 6281 	movw	r2, #1665	@ 0x681
 8015d50:	4964      	ldr	r1, [pc, #400]	@ (8015ee4 <dhcp_parse_reply+0x598>)
 8015d52:	4861      	ldr	r0, [pc, #388]	@ (8015ed8 <dhcp_parse_reply+0x58c>)
 8015d54:	f003 f8be 	bl	8018ed4 <iprintf>
 8015d58:	f06f 0305 	mvn.w	r3, #5
 8015d5c:	e0b3      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015d5e:	4a60      	ldr	r2, [pc, #384]	@ (8015ee0 <dhcp_parse_reply+0x594>)
 8015d60:	6a3b      	ldr	r3, [r7, #32]
 8015d62:	4413      	add	r3, r2
 8015d64:	2201      	movs	r2, #1
 8015d66:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7f5 fd59 	bl	800b822 <lwip_htonl>
 8015d70:	4602      	mov	r2, r0
 8015d72:	495d      	ldr	r1, [pc, #372]	@ (8015ee8 <dhcp_parse_reply+0x59c>)
 8015d74:	6a3b      	ldr	r3, [r7, #32]
 8015d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d7e:	3b04      	subs	r3, #4
 8015d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015d84:	8bfb      	ldrh	r3, [r7, #30]
 8015d86:	3304      	adds	r3, #4
 8015d88:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015d8a:	8a7a      	ldrh	r2, [r7, #18]
 8015d8c:	8bfb      	ldrh	r3, [r7, #30]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d202      	bcs.n	8015d98 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015d92:	f06f 0301 	mvn.w	r3, #1
 8015d96:	e096      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015d98:	8a7b      	ldrh	r3, [r7, #18]
 8015d9a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015d9c:	6a3b      	ldr	r3, [r7, #32]
 8015d9e:	3301      	adds	r3, #1
 8015da0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015da2:	e79e      	b.n	8015ce2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015da4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015da8:	2b04      	cmp	r3, #4
 8015daa:	d106      	bne.n	8015dba <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7f5 fd37 	bl	800b822 <lwip_htonl>
 8015db4:	4603      	mov	r3, r0
 8015db6:	60bb      	str	r3, [r7, #8]
 8015db8:	e011      	b.n	8015dde <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015dba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dbe:	2b01      	cmp	r3, #1
 8015dc0:	d009      	beq.n	8015dd6 <dhcp_parse_reply+0x48a>
 8015dc2:	4b43      	ldr	r3, [pc, #268]	@ (8015ed0 <dhcp_parse_reply+0x584>)
 8015dc4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8015dc8:	4948      	ldr	r1, [pc, #288]	@ (8015eec <dhcp_parse_reply+0x5a0>)
 8015dca:	4843      	ldr	r0, [pc, #268]	@ (8015ed8 <dhcp_parse_reply+0x58c>)
 8015dcc:	f003 f882 	bl	8018ed4 <iprintf>
 8015dd0:	f06f 0305 	mvn.w	r3, #5
 8015dd4:	e077      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015dd6:	f107 0308 	add.w	r3, r7, #8
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015dde:	4a40      	ldr	r2, [pc, #256]	@ (8015ee0 <dhcp_parse_reply+0x594>)
 8015de0:	6a3b      	ldr	r3, [r7, #32]
 8015de2:	4413      	add	r3, r2
 8015de4:	2201      	movs	r2, #1
 8015de6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015de8:	68ba      	ldr	r2, [r7, #8]
 8015dea:	493f      	ldr	r1, [pc, #252]	@ (8015ee8 <dhcp_parse_reply+0x59c>)
 8015dec:	6a3b      	ldr	r3, [r7, #32]
 8015dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015df4:	895b      	ldrh	r3, [r3, #10]
 8015df6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d324      	bcc.n	8015e46 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dfe:	895b      	ldrh	r3, [r3, #10]
 8015e00:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015e02:	1ad3      	subs	r3, r2, r3
 8015e04:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e08:	895b      	ldrh	r3, [r3, #10]
 8015e0a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015e0c:	1ad3      	subs	r3, r2, r3
 8015e0e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8015e10:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015e12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d213      	bcs.n	8015e40 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d109      	bne.n	8015e38 <dhcp_parse_reply+0x4ec>
 8015e24:	4b2a      	ldr	r3, [pc, #168]	@ (8015ed0 <dhcp_parse_reply+0x584>)
 8015e26:	f240 629d 	movw	r2, #1693	@ 0x69d
 8015e2a:	4931      	ldr	r1, [pc, #196]	@ (8015ef0 <dhcp_parse_reply+0x5a4>)
 8015e2c:	482a      	ldr	r0, [pc, #168]	@ (8015ed8 <dhcp_parse_reply+0x58c>)
 8015e2e:	f003 f851 	bl	8018ed4 <iprintf>
 8015e32:	f06f 0305 	mvn.w	r3, #5
 8015e36:	e046      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015e3e:	e002      	b.n	8015e46 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015e40:	f06f 0301 	mvn.w	r3, #1
 8015e44:	e03f      	b.n	8015ec6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00a      	beq.n	8015e62 <dhcp_parse_reply+0x516>
 8015e4c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015e4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d206      	bcs.n	8015e62 <dhcp_parse_reply+0x516>
 8015e54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015e56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015e58:	4413      	add	r3, r2
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	2bff      	cmp	r3, #255	@ 0xff
 8015e5e:	f47f adb8 	bne.w	80159d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015e62:	4b1f      	ldr	r3, [pc, #124]	@ (8015ee0 <dhcp_parse_reply+0x594>)
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d018      	beq.n	8015e9c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8015ee8 <dhcp_parse_reply+0x59c>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015e70:	4b1b      	ldr	r3, [pc, #108]	@ (8015ee0 <dhcp_parse_reply+0x594>)
 8015e72:	2200      	movs	r2, #0
 8015e74:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2b01      	cmp	r3, #1
 8015e7a:	d102      	bne.n	8015e82 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e80:	e00c      	b.n	8015e9c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	2b02      	cmp	r3, #2
 8015e86:	d102      	bne.n	8015e8e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015e88:	2301      	movs	r3, #1
 8015e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015e8c:	e006      	b.n	8015e9c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d103      	bne.n	8015e9c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015e94:	2301      	movs	r3, #1
 8015e96:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015e98:	2301      	movs	r3, #1
 8015e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d006      	beq.n	8015eb0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015ea6:	236c      	movs	r3, #108	@ 0x6c
 8015ea8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015eaa:	23ec      	movs	r3, #236	@ 0xec
 8015eac:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015eae:	e56a      	b.n	8015986 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d006      	beq.n	8015ec4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015eba:	232c      	movs	r3, #44	@ 0x2c
 8015ebc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015ebe:	236c      	movs	r3, #108	@ 0x6c
 8015ec0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8015ec2:	e560      	b.n	8015986 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3740      	adds	r7, #64	@ 0x40
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	0801d498 	.word	0x0801d498
 8015ed4:	0801d720 	.word	0x0801d720
 8015ed8:	0801d4f8 	.word	0x0801d4f8
 8015edc:	0801d764 	.word	0x0801d764
 8015ee0:	20010ff4 	.word	0x20010ff4
 8015ee4:	0801d778 	.word	0x0801d778
 8015ee8:	20010fd4 	.word	0x20010fd4
 8015eec:	0801d790 	.word	0x0801d790
 8015ef0:	0801d7a4 	.word	0x0801d7a4

08015ef4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b08a      	sub	sp, #40	@ 0x28
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	607a      	str	r2, [r7, #4]
 8015f00:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015f02:	4b60      	ldr	r3, [pc, #384]	@ (8016084 <dhcp_recv+0x190>)
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f08:	6a3b      	ldr	r3, [r7, #32]
 8015f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f0c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015f14:	69fb      	ldr	r3, [r7, #28]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	f000 809d 	beq.w	8016056 <dhcp_recv+0x162>
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	791b      	ldrb	r3, [r3, #4]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f000 8098 	beq.w	8016056 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	895b      	ldrh	r3, [r3, #10]
 8015f2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8015f2c:	f240 8095 	bls.w	801605a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015f30:	69bb      	ldr	r3, [r7, #24]
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b02      	cmp	r3, #2
 8015f36:	f040 8092 	bne.w	801605e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f40:	e012      	b.n	8015f68 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f46:	6a3a      	ldr	r2, [r7, #32]
 8015f48:	4413      	add	r3, r2
 8015f4a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8015f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f52:	69b9      	ldr	r1, [r7, #24]
 8015f54:	440b      	add	r3, r1
 8015f56:	7f1b      	ldrb	r3, [r3, #28]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	f040 8082 	bne.w	8016062 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f62:	3301      	adds	r3, #1
 8015f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f68:	6a3b      	ldr	r3, [r7, #32]
 8015f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015f6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d203      	bcs.n	8015f7e <dhcp_recv+0x8a>
 8015f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f7a:	2b05      	cmp	r3, #5
 8015f7c:	d9e1      	bls.n	8015f42 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015f7e:	69bb      	ldr	r3, [r7, #24]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7f5 fc4d 	bl	800b822 <lwip_htonl>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d169      	bne.n	8016066 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015f92:	69f9      	ldr	r1, [r7, #28]
 8015f94:	6878      	ldr	r0, [r7, #4]
 8015f96:	f7ff fcd9 	bl	801594c <dhcp_parse_reply>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d164      	bne.n	801606a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015fa0:	4b39      	ldr	r3, [pc, #228]	@ (8016088 <dhcp_recv+0x194>)
 8015fa2:	785b      	ldrb	r3, [r3, #1]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d062      	beq.n	801606e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015fae:	4b37      	ldr	r3, [pc, #220]	@ (801608c <dhcp_recv+0x198>)
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015fb4:	7cfb      	ldrb	r3, [r7, #19]
 8015fb6:	2b05      	cmp	r3, #5
 8015fb8:	d12a      	bne.n	8016010 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015fba:	69fb      	ldr	r3, [r7, #28]
 8015fbc:	795b      	ldrb	r3, [r3, #5]
 8015fbe:	2b01      	cmp	r3, #1
 8015fc0:	d112      	bne.n	8015fe8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015fc2:	6979      	ldr	r1, [r7, #20]
 8015fc4:	6a38      	ldr	r0, [r7, #32]
 8015fc6:	f7fe fe1d 	bl	8014c04 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015fd0:	f003 0308 	and.w	r3, r3, #8
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d003      	beq.n	8015fe0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015fd8:	6a38      	ldr	r0, [r7, #32]
 8015fda:	f7fe fb8d 	bl	80146f8 <dhcp_check>
 8015fde:	e049      	b.n	8016074 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015fe0:	6a38      	ldr	r0, [r7, #32]
 8015fe2:	f7ff f86d 	bl	80150c0 <dhcp_bind>
 8015fe6:	e045      	b.n	8016074 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	795b      	ldrb	r3, [r3, #5]
 8015fec:	2b03      	cmp	r3, #3
 8015fee:	d007      	beq.n	8016000 <dhcp_recv+0x10c>
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	795b      	ldrb	r3, [r3, #5]
 8015ff4:	2b04      	cmp	r3, #4
 8015ff6:	d003      	beq.n	8016000 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015ffc:	2b05      	cmp	r3, #5
 8015ffe:	d139      	bne.n	8016074 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016000:	6979      	ldr	r1, [r7, #20]
 8016002:	6a38      	ldr	r0, [r7, #32]
 8016004:	f7fe fdfe 	bl	8014c04 <dhcp_handle_ack>
      dhcp_bind(netif);
 8016008:	6a38      	ldr	r0, [r7, #32]
 801600a:	f7ff f859 	bl	80150c0 <dhcp_bind>
 801600e:	e031      	b.n	8016074 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016010:	7cfb      	ldrb	r3, [r7, #19]
 8016012:	2b06      	cmp	r3, #6
 8016014:	d113      	bne.n	801603e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016016:	69fb      	ldr	r3, [r7, #28]
 8016018:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801601a:	2b03      	cmp	r3, #3
 801601c:	d00b      	beq.n	8016036 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801601e:	69fb      	ldr	r3, [r7, #28]
 8016020:	795b      	ldrb	r3, [r3, #5]
 8016022:	2b01      	cmp	r3, #1
 8016024:	d007      	beq.n	8016036 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016026:	69fb      	ldr	r3, [r7, #28]
 8016028:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801602a:	2b04      	cmp	r3, #4
 801602c:	d003      	beq.n	8016036 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801602e:	69fb      	ldr	r3, [r7, #28]
 8016030:	795b      	ldrb	r3, [r3, #5]
 8016032:	2b05      	cmp	r3, #5
 8016034:	d103      	bne.n	801603e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016036:	6a38      	ldr	r0, [r7, #32]
 8016038:	f7fe fb44 	bl	80146c4 <dhcp_handle_nak>
 801603c:	e01a      	b.n	8016074 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801603e:	7cfb      	ldrb	r3, [r7, #19]
 8016040:	2b02      	cmp	r3, #2
 8016042:	d116      	bne.n	8016072 <dhcp_recv+0x17e>
 8016044:	69fb      	ldr	r3, [r7, #28]
 8016046:	795b      	ldrb	r3, [r3, #5]
 8016048:	2b06      	cmp	r3, #6
 801604a:	d112      	bne.n	8016072 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801604c:	6979      	ldr	r1, [r7, #20]
 801604e:	6a38      	ldr	r0, [r7, #32]
 8016050:	f7fe fb86 	bl	8014760 <dhcp_handle_offer>
 8016054:	e00e      	b.n	8016074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016056:	bf00      	nop
 8016058:	e00c      	b.n	8016074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801605a:	bf00      	nop
 801605c:	e00a      	b.n	8016074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801605e:	bf00      	nop
 8016060:	e008      	b.n	8016074 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016062:	bf00      	nop
 8016064:	e006      	b.n	8016074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016066:	bf00      	nop
 8016068:	e004      	b.n	8016074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801606a:	bf00      	nop
 801606c:	e002      	b.n	8016074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801606e:	bf00      	nop
 8016070:	e000      	b.n	8016074 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016072:	bf00      	nop
  pbuf_free(p);
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7f6 fff3 	bl	800d060 <pbuf_free>
}
 801607a:	bf00      	nop
 801607c:	3728      	adds	r7, #40	@ 0x28
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	2000d800 	.word	0x2000d800
 8016088:	20010ff4 	.word	0x20010ff4
 801608c:	20010fd4 	.word	0x20010fd4

08016090 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b088      	sub	sp, #32
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	603b      	str	r3, [r7, #0]
 801609c:	4613      	mov	r3, r2
 801609e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d108      	bne.n	80160b8 <dhcp_create_msg+0x28>
 80160a6:	4b5f      	ldr	r3, [pc, #380]	@ (8016224 <dhcp_create_msg+0x194>)
 80160a8:	f240 7269 	movw	r2, #1897	@ 0x769
 80160ac:	495e      	ldr	r1, [pc, #376]	@ (8016228 <dhcp_create_msg+0x198>)
 80160ae:	485f      	ldr	r0, [pc, #380]	@ (801622c <dhcp_create_msg+0x19c>)
 80160b0:	f002 ff10 	bl	8018ed4 <iprintf>
 80160b4:	2300      	movs	r3, #0
 80160b6:	e0b1      	b.n	801621c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d108      	bne.n	80160d0 <dhcp_create_msg+0x40>
 80160be:	4b59      	ldr	r3, [pc, #356]	@ (8016224 <dhcp_create_msg+0x194>)
 80160c0:	f240 726a 	movw	r2, #1898	@ 0x76a
 80160c4:	495a      	ldr	r1, [pc, #360]	@ (8016230 <dhcp_create_msg+0x1a0>)
 80160c6:	4859      	ldr	r0, [pc, #356]	@ (801622c <dhcp_create_msg+0x19c>)
 80160c8:	f002 ff04 	bl	8018ed4 <iprintf>
 80160cc:	2300      	movs	r3, #0
 80160ce:	e0a5      	b.n	801621c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80160d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80160d4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80160d8:	2036      	movs	r0, #54	@ 0x36
 80160da:	f7f6 fcdd 	bl	800ca98 <pbuf_alloc>
 80160de:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d101      	bne.n	80160ea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80160e6:	2300      	movs	r3, #0
 80160e8:	e098      	b.n	801621c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	895b      	ldrh	r3, [r3, #10]
 80160ee:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80160f2:	d206      	bcs.n	8016102 <dhcp_create_msg+0x72>
 80160f4:	4b4b      	ldr	r3, [pc, #300]	@ (8016224 <dhcp_create_msg+0x194>)
 80160f6:	f240 7271 	movw	r2, #1905	@ 0x771
 80160fa:	494e      	ldr	r1, [pc, #312]	@ (8016234 <dhcp_create_msg+0x1a4>)
 80160fc:	484b      	ldr	r0, [pc, #300]	@ (801622c <dhcp_create_msg+0x19c>)
 80160fe:	f002 fee9 	bl	8018ed4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016102:	79fb      	ldrb	r3, [r7, #7]
 8016104:	2b03      	cmp	r3, #3
 8016106:	d103      	bne.n	8016110 <dhcp_create_msg+0x80>
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	795b      	ldrb	r3, [r3, #5]
 801610c:	2b03      	cmp	r3, #3
 801610e:	d10d      	bne.n	801612c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	799b      	ldrb	r3, [r3, #6]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d105      	bne.n	8016124 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016118:	f002 fddc 	bl	8018cd4 <rand>
 801611c:	4603      	mov	r3, r0
 801611e:	461a      	mov	r2, r3
 8016120:	4b45      	ldr	r3, [pc, #276]	@ (8016238 <dhcp_create_msg+0x1a8>)
 8016122:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016124:	4b44      	ldr	r3, [pc, #272]	@ (8016238 <dhcp_create_msg+0x1a8>)
 8016126:	681a      	ldr	r2, [r3, #0]
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016132:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8016136:	2100      	movs	r1, #0
 8016138:	6978      	ldr	r0, [r7, #20]
 801613a:	f002 ff6a 	bl	8019012 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	2201      	movs	r2, #1
 8016142:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	2201      	movs	r2, #1
 8016148:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	4618      	mov	r0, r3
 801615a:	f7f5 fb62 	bl	800b822 <lwip_htonl>
 801615e:	4602      	mov	r2, r0
 8016160:	697b      	ldr	r3, [r7, #20]
 8016162:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016164:	79fb      	ldrb	r3, [r7, #7]
 8016166:	2b08      	cmp	r3, #8
 8016168:	d010      	beq.n	801618c <dhcp_create_msg+0xfc>
 801616a:	79fb      	ldrb	r3, [r7, #7]
 801616c:	2b04      	cmp	r3, #4
 801616e:	d00d      	beq.n	801618c <dhcp_create_msg+0xfc>
 8016170:	79fb      	ldrb	r3, [r7, #7]
 8016172:	2b07      	cmp	r3, #7
 8016174:	d00a      	beq.n	801618c <dhcp_create_msg+0xfc>
 8016176:	79fb      	ldrb	r3, [r7, #7]
 8016178:	2b03      	cmp	r3, #3
 801617a:	d10c      	bne.n	8016196 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016180:	2b05      	cmp	r3, #5
 8016182:	d003      	beq.n	801618c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	795b      	ldrb	r3, [r3, #5]
 8016188:	2b04      	cmp	r3, #4
 801618a:	d104      	bne.n	8016196 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	3304      	adds	r3, #4
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016196:	2300      	movs	r3, #0
 8016198:	83fb      	strh	r3, [r7, #30]
 801619a:	e00c      	b.n	80161b6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801619c:	8bfa      	ldrh	r2, [r7, #30]
 801619e:	8bfb      	ldrh	r3, [r7, #30]
 80161a0:	68f9      	ldr	r1, [r7, #12]
 80161a2:	440a      	add	r2, r1
 80161a4:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 80161a8:	697a      	ldr	r2, [r7, #20]
 80161aa:	4413      	add	r3, r2
 80161ac:	460a      	mov	r2, r1
 80161ae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80161b0:	8bfb      	ldrh	r3, [r7, #30]
 80161b2:	3301      	adds	r3, #1
 80161b4:	83fb      	strh	r3, [r7, #30]
 80161b6:	8bfb      	ldrh	r3, [r7, #30]
 80161b8:	2b05      	cmp	r3, #5
 80161ba:	d9ef      	bls.n	801619c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80161bc:	697b      	ldr	r3, [r7, #20]
 80161be:	2200      	movs	r2, #0
 80161c0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80161c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80161c8:	2200      	movs	r2, #0
 80161ca:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80161ce:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80161d2:	2200      	movs	r2, #0
 80161d4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80161d8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80161dc:	2200      	movs	r2, #0
 80161de:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80161e2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80161ec:	2301      	movs	r3, #1
 80161ee:	2235      	movs	r2, #53	@ 0x35
 80161f0:	2000      	movs	r0, #0
 80161f2:	f7ff fadb 	bl	80157ac <dhcp_option>
 80161f6:	4603      	mov	r3, r0
 80161f8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016200:	79fa      	ldrb	r2, [r7, #7]
 8016202:	8a7b      	ldrh	r3, [r7, #18]
 8016204:	4618      	mov	r0, r3
 8016206:	f7ff fb05 	bl	8015814 <dhcp_option_byte>
 801620a:	4603      	mov	r3, r0
 801620c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d002      	beq.n	801621a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	8a7a      	ldrh	r2, [r7, #18]
 8016218:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801621a:	69bb      	ldr	r3, [r7, #24]
}
 801621c:	4618      	mov	r0, r3
 801621e:	3720      	adds	r7, #32
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}
 8016224:	0801d498 	.word	0x0801d498
 8016228:	0801d7b8 	.word	0x0801d7b8
 801622c:	0801d4f8 	.word	0x0801d4f8
 8016230:	0801d7d8 	.word	0x0801d7d8
 8016234:	0801d7f8 	.word	0x0801d7f8
 8016238:	20011004 	.word	0x20011004

0801623c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b084      	sub	sp, #16
 8016240:	af00      	add	r7, sp, #0
 8016242:	4603      	mov	r3, r0
 8016244:	60b9      	str	r1, [r7, #8]
 8016246:	607a      	str	r2, [r7, #4]
 8016248:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801624a:	89fb      	ldrh	r3, [r7, #14]
 801624c:	1c5a      	adds	r2, r3, #1
 801624e:	81fa      	strh	r2, [r7, #14]
 8016250:	461a      	mov	r2, r3
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	4413      	add	r3, r2
 8016256:	22ff      	movs	r2, #255	@ 0xff
 8016258:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801625a:	e007      	b.n	801626c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801625c:	89fb      	ldrh	r3, [r7, #14]
 801625e:	1c5a      	adds	r2, r3, #1
 8016260:	81fa      	strh	r2, [r7, #14]
 8016262:	461a      	mov	r2, r3
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	4413      	add	r3, r2
 8016268:	2200      	movs	r2, #0
 801626a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801626c:	89fb      	ldrh	r3, [r7, #14]
 801626e:	2b43      	cmp	r3, #67	@ 0x43
 8016270:	d904      	bls.n	801627c <dhcp_option_trailer+0x40>
 8016272:	89fb      	ldrh	r3, [r7, #14]
 8016274:	f003 0303 	and.w	r3, r3, #3
 8016278:	2b00      	cmp	r3, #0
 801627a:	d002      	beq.n	8016282 <dhcp_option_trailer+0x46>
 801627c:	89fb      	ldrh	r3, [r7, #14]
 801627e:	2b43      	cmp	r3, #67	@ 0x43
 8016280:	d9ec      	bls.n	801625c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016282:	89fb      	ldrh	r3, [r7, #14]
 8016284:	33f0      	adds	r3, #240	@ 0xf0
 8016286:	b29b      	uxth	r3, r3
 8016288:	4619      	mov	r1, r3
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f7f6 fd62 	bl	800cd54 <pbuf_realloc>
}
 8016290:	bf00      	nop
 8016292:	3710      	adds	r7, #16
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016298:	b480      	push	{r7}
 801629a:	b085      	sub	sp, #20
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d017      	beq.n	80162d6 <dhcp_supplied_address+0x3e>
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d013      	beq.n	80162d6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	795b      	ldrb	r3, [r3, #5]
 80162b8:	2b0a      	cmp	r3, #10
 80162ba:	d007      	beq.n	80162cc <dhcp_supplied_address+0x34>
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	795b      	ldrb	r3, [r3, #5]
 80162c0:	2b05      	cmp	r3, #5
 80162c2:	d003      	beq.n	80162cc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80162c8:	2b04      	cmp	r3, #4
 80162ca:	d101      	bne.n	80162d0 <dhcp_supplied_address+0x38>
 80162cc:	2301      	movs	r3, #1
 80162ce:	e000      	b.n	80162d2 <dhcp_supplied_address+0x3a>
 80162d0:	2300      	movs	r3, #0
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	e000      	b.n	80162d8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80162d6:	2300      	movs	r3, #0
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3714      	adds	r7, #20
 80162dc:	46bd      	mov	sp, r7
 80162de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e2:	4770      	bx	lr

080162e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b082      	sub	sp, #8
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80162ec:	4915      	ldr	r1, [pc, #84]	@ (8016344 <etharp_free_entry+0x60>)
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	4613      	mov	r3, r2
 80162f2:	005b      	lsls	r3, r3, #1
 80162f4:	4413      	add	r3, r2
 80162f6:	00db      	lsls	r3, r3, #3
 80162f8:	440b      	add	r3, r1
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d013      	beq.n	8016328 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016300:	4910      	ldr	r1, [pc, #64]	@ (8016344 <etharp_free_entry+0x60>)
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	4613      	mov	r3, r2
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	4413      	add	r3, r2
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	440b      	add	r3, r1
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4618      	mov	r0, r3
 8016312:	f7f6 fea5 	bl	800d060 <pbuf_free>
    arp_table[i].q = NULL;
 8016316:	490b      	ldr	r1, [pc, #44]	@ (8016344 <etharp_free_entry+0x60>)
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	4613      	mov	r3, r2
 801631c:	005b      	lsls	r3, r3, #1
 801631e:	4413      	add	r3, r2
 8016320:	00db      	lsls	r3, r3, #3
 8016322:	440b      	add	r3, r1
 8016324:	2200      	movs	r2, #0
 8016326:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016328:	4906      	ldr	r1, [pc, #24]	@ (8016344 <etharp_free_entry+0x60>)
 801632a:	687a      	ldr	r2, [r7, #4]
 801632c:	4613      	mov	r3, r2
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	4413      	add	r3, r2
 8016332:	00db      	lsls	r3, r3, #3
 8016334:	440b      	add	r3, r1
 8016336:	3314      	adds	r3, #20
 8016338:	2200      	movs	r2, #0
 801633a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801633c:	bf00      	nop
 801633e:	3708      	adds	r7, #8
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}
 8016344:	20011008 	.word	0x20011008

08016348 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801634e:	2300      	movs	r3, #0
 8016350:	607b      	str	r3, [r7, #4]
 8016352:	e096      	b.n	8016482 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016354:	494f      	ldr	r1, [pc, #316]	@ (8016494 <etharp_tmr+0x14c>)
 8016356:	687a      	ldr	r2, [r7, #4]
 8016358:	4613      	mov	r3, r2
 801635a:	005b      	lsls	r3, r3, #1
 801635c:	4413      	add	r3, r2
 801635e:	00db      	lsls	r3, r3, #3
 8016360:	440b      	add	r3, r1
 8016362:	3314      	adds	r3, #20
 8016364:	781b      	ldrb	r3, [r3, #0]
 8016366:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016368:	78fb      	ldrb	r3, [r7, #3]
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 8086 	beq.w	801647c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016370:	4948      	ldr	r1, [pc, #288]	@ (8016494 <etharp_tmr+0x14c>)
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	4613      	mov	r3, r2
 8016376:	005b      	lsls	r3, r3, #1
 8016378:	4413      	add	r3, r2
 801637a:	00db      	lsls	r3, r3, #3
 801637c:	440b      	add	r3, r1
 801637e:	3312      	adds	r3, #18
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	3301      	adds	r3, #1
 8016384:	b298      	uxth	r0, r3
 8016386:	4943      	ldr	r1, [pc, #268]	@ (8016494 <etharp_tmr+0x14c>)
 8016388:	687a      	ldr	r2, [r7, #4]
 801638a:	4613      	mov	r3, r2
 801638c:	005b      	lsls	r3, r3, #1
 801638e:	4413      	add	r3, r2
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	440b      	add	r3, r1
 8016394:	3312      	adds	r3, #18
 8016396:	4602      	mov	r2, r0
 8016398:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801639a:	493e      	ldr	r1, [pc, #248]	@ (8016494 <etharp_tmr+0x14c>)
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	4613      	mov	r3, r2
 80163a0:	005b      	lsls	r3, r3, #1
 80163a2:	4413      	add	r3, r2
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	440b      	add	r3, r1
 80163a8:	3312      	adds	r3, #18
 80163aa:	881b      	ldrh	r3, [r3, #0]
 80163ac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80163b0:	d215      	bcs.n	80163de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80163b2:	4938      	ldr	r1, [pc, #224]	@ (8016494 <etharp_tmr+0x14c>)
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	4613      	mov	r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4413      	add	r3, r2
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	440b      	add	r3, r1
 80163c0:	3314      	adds	r3, #20
 80163c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d10e      	bne.n	80163e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80163c8:	4932      	ldr	r1, [pc, #200]	@ (8016494 <etharp_tmr+0x14c>)
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	3312      	adds	r3, #18
 80163d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80163da:	2b04      	cmp	r3, #4
 80163dc:	d903      	bls.n	80163e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f7ff ff80 	bl	80162e4 <etharp_free_entry>
 80163e4:	e04a      	b.n	801647c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80163e6:	492b      	ldr	r1, [pc, #172]	@ (8016494 <etharp_tmr+0x14c>)
 80163e8:	687a      	ldr	r2, [r7, #4]
 80163ea:	4613      	mov	r3, r2
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	4413      	add	r3, r2
 80163f0:	00db      	lsls	r3, r3, #3
 80163f2:	440b      	add	r3, r1
 80163f4:	3314      	adds	r3, #20
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	2b03      	cmp	r3, #3
 80163fa:	d10a      	bne.n	8016412 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80163fc:	4925      	ldr	r1, [pc, #148]	@ (8016494 <etharp_tmr+0x14c>)
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	4613      	mov	r3, r2
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4413      	add	r3, r2
 8016406:	00db      	lsls	r3, r3, #3
 8016408:	440b      	add	r3, r1
 801640a:	3314      	adds	r3, #20
 801640c:	2204      	movs	r2, #4
 801640e:	701a      	strb	r2, [r3, #0]
 8016410:	e034      	b.n	801647c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016412:	4920      	ldr	r1, [pc, #128]	@ (8016494 <etharp_tmr+0x14c>)
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	4613      	mov	r3, r2
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	4413      	add	r3, r2
 801641c:	00db      	lsls	r3, r3, #3
 801641e:	440b      	add	r3, r1
 8016420:	3314      	adds	r3, #20
 8016422:	781b      	ldrb	r3, [r3, #0]
 8016424:	2b04      	cmp	r3, #4
 8016426:	d10a      	bne.n	801643e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016428:	491a      	ldr	r1, [pc, #104]	@ (8016494 <etharp_tmr+0x14c>)
 801642a:	687a      	ldr	r2, [r7, #4]
 801642c:	4613      	mov	r3, r2
 801642e:	005b      	lsls	r3, r3, #1
 8016430:	4413      	add	r3, r2
 8016432:	00db      	lsls	r3, r3, #3
 8016434:	440b      	add	r3, r1
 8016436:	3314      	adds	r3, #20
 8016438:	2202      	movs	r2, #2
 801643a:	701a      	strb	r2, [r3, #0]
 801643c:	e01e      	b.n	801647c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801643e:	4915      	ldr	r1, [pc, #84]	@ (8016494 <etharp_tmr+0x14c>)
 8016440:	687a      	ldr	r2, [r7, #4]
 8016442:	4613      	mov	r3, r2
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	4413      	add	r3, r2
 8016448:	00db      	lsls	r3, r3, #3
 801644a:	440b      	add	r3, r1
 801644c:	3314      	adds	r3, #20
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	2b01      	cmp	r3, #1
 8016452:	d113      	bne.n	801647c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016454:	490f      	ldr	r1, [pc, #60]	@ (8016494 <etharp_tmr+0x14c>)
 8016456:	687a      	ldr	r2, [r7, #4]
 8016458:	4613      	mov	r3, r2
 801645a:	005b      	lsls	r3, r3, #1
 801645c:	4413      	add	r3, r2
 801645e:	00db      	lsls	r3, r3, #3
 8016460:	440b      	add	r3, r1
 8016462:	3308      	adds	r3, #8
 8016464:	6818      	ldr	r0, [r3, #0]
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	4613      	mov	r3, r2
 801646a:	005b      	lsls	r3, r3, #1
 801646c:	4413      	add	r3, r2
 801646e:	00db      	lsls	r3, r3, #3
 8016470:	4a08      	ldr	r2, [pc, #32]	@ (8016494 <etharp_tmr+0x14c>)
 8016472:	4413      	add	r3, r2
 8016474:	3304      	adds	r3, #4
 8016476:	4619      	mov	r1, r3
 8016478:	f000 fe72 	bl	8017160 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	3301      	adds	r3, #1
 8016480:	607b      	str	r3, [r7, #4]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2b09      	cmp	r3, #9
 8016486:	f77f af65 	ble.w	8016354 <etharp_tmr+0xc>
      }
    }
  }
}
 801648a:	bf00      	nop
 801648c:	bf00      	nop
 801648e:	3708      	adds	r7, #8
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	20011008 	.word	0x20011008

08016498 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b08a      	sub	sp, #40	@ 0x28
 801649c:	af00      	add	r7, sp, #0
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	460b      	mov	r3, r1
 80164a2:	607a      	str	r2, [r7, #4]
 80164a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80164a6:	230a      	movs	r3, #10
 80164a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80164aa:	230a      	movs	r3, #10
 80164ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80164ae:	230a      	movs	r3, #10
 80164b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80164b6:	230a      	movs	r3, #10
 80164b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80164ba:	2300      	movs	r3, #0
 80164bc:	83bb      	strh	r3, [r7, #28]
 80164be:	2300      	movs	r3, #0
 80164c0:	837b      	strh	r3, [r7, #26]
 80164c2:	2300      	movs	r3, #0
 80164c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164c6:	2300      	movs	r3, #0
 80164c8:	843b      	strh	r3, [r7, #32]
 80164ca:	e0ae      	b.n	801662a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80164cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164d0:	49a6      	ldr	r1, [pc, #664]	@ (801676c <etharp_find_entry+0x2d4>)
 80164d2:	4613      	mov	r3, r2
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	00db      	lsls	r3, r3, #3
 80164da:	440b      	add	r3, r1
 80164dc:	3314      	adds	r3, #20
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80164e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80164e6:	2b0a      	cmp	r3, #10
 80164e8:	d105      	bne.n	80164f6 <etharp_find_entry+0x5e>
 80164ea:	7dfb      	ldrb	r3, [r7, #23]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d102      	bne.n	80164f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80164f0:	8c3b      	ldrh	r3, [r7, #32]
 80164f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80164f4:	e095      	b.n	8016622 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80164f6:	7dfb      	ldrb	r3, [r7, #23]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f000 8092 	beq.w	8016622 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80164fe:	7dfb      	ldrb	r3, [r7, #23]
 8016500:	2b01      	cmp	r3, #1
 8016502:	d009      	beq.n	8016518 <etharp_find_entry+0x80>
 8016504:	7dfb      	ldrb	r3, [r7, #23]
 8016506:	2b01      	cmp	r3, #1
 8016508:	d806      	bhi.n	8016518 <etharp_find_entry+0x80>
 801650a:	4b99      	ldr	r3, [pc, #612]	@ (8016770 <etharp_find_entry+0x2d8>)
 801650c:	f240 1223 	movw	r2, #291	@ 0x123
 8016510:	4998      	ldr	r1, [pc, #608]	@ (8016774 <etharp_find_entry+0x2dc>)
 8016512:	4899      	ldr	r0, [pc, #612]	@ (8016778 <etharp_find_entry+0x2e0>)
 8016514:	f002 fcde 	bl	8018ed4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d020      	beq.n	8016560 <etharp_find_entry+0xc8>
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016526:	4891      	ldr	r0, [pc, #580]	@ (801676c <etharp_find_entry+0x2d4>)
 8016528:	4613      	mov	r3, r2
 801652a:	005b      	lsls	r3, r3, #1
 801652c:	4413      	add	r3, r2
 801652e:	00db      	lsls	r3, r3, #3
 8016530:	4403      	add	r3, r0
 8016532:	3304      	adds	r3, #4
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4299      	cmp	r1, r3
 8016538:	d112      	bne.n	8016560 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00c      	beq.n	801655a <etharp_find_entry+0xc2>
 8016540:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016544:	4989      	ldr	r1, [pc, #548]	@ (801676c <etharp_find_entry+0x2d4>)
 8016546:	4613      	mov	r3, r2
 8016548:	005b      	lsls	r3, r3, #1
 801654a:	4413      	add	r3, r2
 801654c:	00db      	lsls	r3, r3, #3
 801654e:	440b      	add	r3, r1
 8016550:	3308      	adds	r3, #8
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	687a      	ldr	r2, [r7, #4]
 8016556:	429a      	cmp	r2, r3
 8016558:	d102      	bne.n	8016560 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801655a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801655e:	e100      	b.n	8016762 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016560:	7dfb      	ldrb	r3, [r7, #23]
 8016562:	2b01      	cmp	r3, #1
 8016564:	d140      	bne.n	80165e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801656a:	4980      	ldr	r1, [pc, #512]	@ (801676c <etharp_find_entry+0x2d4>)
 801656c:	4613      	mov	r3, r2
 801656e:	005b      	lsls	r3, r3, #1
 8016570:	4413      	add	r3, r2
 8016572:	00db      	lsls	r3, r3, #3
 8016574:	440b      	add	r3, r1
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d01a      	beq.n	80165b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801657c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016580:	497a      	ldr	r1, [pc, #488]	@ (801676c <etharp_find_entry+0x2d4>)
 8016582:	4613      	mov	r3, r2
 8016584:	005b      	lsls	r3, r3, #1
 8016586:	4413      	add	r3, r2
 8016588:	00db      	lsls	r3, r3, #3
 801658a:	440b      	add	r3, r1
 801658c:	3312      	adds	r3, #18
 801658e:	881b      	ldrh	r3, [r3, #0]
 8016590:	8bba      	ldrh	r2, [r7, #28]
 8016592:	429a      	cmp	r2, r3
 8016594:	d845      	bhi.n	8016622 <etharp_find_entry+0x18a>
            old_queue = i;
 8016596:	8c3b      	ldrh	r3, [r7, #32]
 8016598:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801659a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801659e:	4973      	ldr	r1, [pc, #460]	@ (801676c <etharp_find_entry+0x2d4>)
 80165a0:	4613      	mov	r3, r2
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	4413      	add	r3, r2
 80165a6:	00db      	lsls	r3, r3, #3
 80165a8:	440b      	add	r3, r1
 80165aa:	3312      	adds	r3, #18
 80165ac:	881b      	ldrh	r3, [r3, #0]
 80165ae:	83bb      	strh	r3, [r7, #28]
 80165b0:	e037      	b.n	8016622 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80165b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165b6:	496d      	ldr	r1, [pc, #436]	@ (801676c <etharp_find_entry+0x2d4>)
 80165b8:	4613      	mov	r3, r2
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	4413      	add	r3, r2
 80165be:	00db      	lsls	r3, r3, #3
 80165c0:	440b      	add	r3, r1
 80165c2:	3312      	adds	r3, #18
 80165c4:	881b      	ldrh	r3, [r3, #0]
 80165c6:	8b7a      	ldrh	r2, [r7, #26]
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d82a      	bhi.n	8016622 <etharp_find_entry+0x18a>
            old_pending = i;
 80165cc:	8c3b      	ldrh	r3, [r7, #32]
 80165ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80165d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165d4:	4965      	ldr	r1, [pc, #404]	@ (801676c <etharp_find_entry+0x2d4>)
 80165d6:	4613      	mov	r3, r2
 80165d8:	005b      	lsls	r3, r3, #1
 80165da:	4413      	add	r3, r2
 80165dc:	00db      	lsls	r3, r3, #3
 80165de:	440b      	add	r3, r1
 80165e0:	3312      	adds	r3, #18
 80165e2:	881b      	ldrh	r3, [r3, #0]
 80165e4:	837b      	strh	r3, [r7, #26]
 80165e6:	e01c      	b.n	8016622 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80165e8:	7dfb      	ldrb	r3, [r7, #23]
 80165ea:	2b01      	cmp	r3, #1
 80165ec:	d919      	bls.n	8016622 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80165ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165f2:	495e      	ldr	r1, [pc, #376]	@ (801676c <etharp_find_entry+0x2d4>)
 80165f4:	4613      	mov	r3, r2
 80165f6:	005b      	lsls	r3, r3, #1
 80165f8:	4413      	add	r3, r2
 80165fa:	00db      	lsls	r3, r3, #3
 80165fc:	440b      	add	r3, r1
 80165fe:	3312      	adds	r3, #18
 8016600:	881b      	ldrh	r3, [r3, #0]
 8016602:	8b3a      	ldrh	r2, [r7, #24]
 8016604:	429a      	cmp	r2, r3
 8016606:	d80c      	bhi.n	8016622 <etharp_find_entry+0x18a>
            old_stable = i;
 8016608:	8c3b      	ldrh	r3, [r7, #32]
 801660a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801660c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016610:	4956      	ldr	r1, [pc, #344]	@ (801676c <etharp_find_entry+0x2d4>)
 8016612:	4613      	mov	r3, r2
 8016614:	005b      	lsls	r3, r3, #1
 8016616:	4413      	add	r3, r2
 8016618:	00db      	lsls	r3, r3, #3
 801661a:	440b      	add	r3, r1
 801661c:	3312      	adds	r3, #18
 801661e:	881b      	ldrh	r3, [r3, #0]
 8016620:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016622:	8c3b      	ldrh	r3, [r7, #32]
 8016624:	3301      	adds	r3, #1
 8016626:	b29b      	uxth	r3, r3
 8016628:	843b      	strh	r3, [r7, #32]
 801662a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801662e:	2b09      	cmp	r3, #9
 8016630:	f77f af4c 	ble.w	80164cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016634:	7afb      	ldrb	r3, [r7, #11]
 8016636:	f003 0302 	and.w	r3, r3, #2
 801663a:	2b00      	cmp	r3, #0
 801663c:	d108      	bne.n	8016650 <etharp_find_entry+0x1b8>
 801663e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016642:	2b0a      	cmp	r3, #10
 8016644:	d107      	bne.n	8016656 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016646:	7afb      	ldrb	r3, [r7, #11]
 8016648:	f003 0301 	and.w	r3, r3, #1
 801664c:	2b00      	cmp	r3, #0
 801664e:	d102      	bne.n	8016656 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016650:	f04f 33ff 	mov.w	r3, #4294967295
 8016654:	e085      	b.n	8016762 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016656:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801665a:	2b09      	cmp	r3, #9
 801665c:	dc02      	bgt.n	8016664 <etharp_find_entry+0x1cc>
    i = empty;
 801665e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016660:	843b      	strh	r3, [r7, #32]
 8016662:	e039      	b.n	80166d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016664:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016668:	2b09      	cmp	r3, #9
 801666a:	dc14      	bgt.n	8016696 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801666c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801666e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016674:	493d      	ldr	r1, [pc, #244]	@ (801676c <etharp_find_entry+0x2d4>)
 8016676:	4613      	mov	r3, r2
 8016678:	005b      	lsls	r3, r3, #1
 801667a:	4413      	add	r3, r2
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	440b      	add	r3, r1
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d018      	beq.n	80166b8 <etharp_find_entry+0x220>
 8016686:	4b3a      	ldr	r3, [pc, #232]	@ (8016770 <etharp_find_entry+0x2d8>)
 8016688:	f240 126d 	movw	r2, #365	@ 0x16d
 801668c:	493b      	ldr	r1, [pc, #236]	@ (801677c <etharp_find_entry+0x2e4>)
 801668e:	483a      	ldr	r0, [pc, #232]	@ (8016778 <etharp_find_entry+0x2e0>)
 8016690:	f002 fc20 	bl	8018ed4 <iprintf>
 8016694:	e010      	b.n	80166b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016696:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801669a:	2b09      	cmp	r3, #9
 801669c:	dc02      	bgt.n	80166a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801669e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80166a0:	843b      	strh	r3, [r7, #32]
 80166a2:	e009      	b.n	80166b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80166a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80166a8:	2b09      	cmp	r3, #9
 80166aa:	dc02      	bgt.n	80166b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80166ac:	8bfb      	ldrh	r3, [r7, #30]
 80166ae:	843b      	strh	r3, [r7, #32]
 80166b0:	e002      	b.n	80166b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80166b2:	f04f 33ff 	mov.w	r3, #4294967295
 80166b6:	e054      	b.n	8016762 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80166b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80166bc:	2b09      	cmp	r3, #9
 80166be:	dd06      	ble.n	80166ce <etharp_find_entry+0x236>
 80166c0:	4b2b      	ldr	r3, [pc, #172]	@ (8016770 <etharp_find_entry+0x2d8>)
 80166c2:	f240 127f 	movw	r2, #383	@ 0x17f
 80166c6:	492e      	ldr	r1, [pc, #184]	@ (8016780 <etharp_find_entry+0x2e8>)
 80166c8:	482b      	ldr	r0, [pc, #172]	@ (8016778 <etharp_find_entry+0x2e0>)
 80166ca:	f002 fc03 	bl	8018ed4 <iprintf>
    etharp_free_entry(i);
 80166ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7ff fe06 	bl	80162e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80166d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80166dc:	2b09      	cmp	r3, #9
 80166de:	dd06      	ble.n	80166ee <etharp_find_entry+0x256>
 80166e0:	4b23      	ldr	r3, [pc, #140]	@ (8016770 <etharp_find_entry+0x2d8>)
 80166e2:	f240 1283 	movw	r2, #387	@ 0x183
 80166e6:	4926      	ldr	r1, [pc, #152]	@ (8016780 <etharp_find_entry+0x2e8>)
 80166e8:	4823      	ldr	r0, [pc, #140]	@ (8016778 <etharp_find_entry+0x2e0>)
 80166ea:	f002 fbf3 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80166ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166f2:	491e      	ldr	r1, [pc, #120]	@ (801676c <etharp_find_entry+0x2d4>)
 80166f4:	4613      	mov	r3, r2
 80166f6:	005b      	lsls	r3, r3, #1
 80166f8:	4413      	add	r3, r2
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	440b      	add	r3, r1
 80166fe:	3314      	adds	r3, #20
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d006      	beq.n	8016714 <etharp_find_entry+0x27c>
 8016706:	4b1a      	ldr	r3, [pc, #104]	@ (8016770 <etharp_find_entry+0x2d8>)
 8016708:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801670c:	491d      	ldr	r1, [pc, #116]	@ (8016784 <etharp_find_entry+0x2ec>)
 801670e:	481a      	ldr	r0, [pc, #104]	@ (8016778 <etharp_find_entry+0x2e0>)
 8016710:	f002 fbe0 	bl	8018ed4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d00b      	beq.n	8016732 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801671a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	6819      	ldr	r1, [r3, #0]
 8016722:	4812      	ldr	r0, [pc, #72]	@ (801676c <etharp_find_entry+0x2d4>)
 8016724:	4613      	mov	r3, r2
 8016726:	005b      	lsls	r3, r3, #1
 8016728:	4413      	add	r3, r2
 801672a:	00db      	lsls	r3, r3, #3
 801672c:	4403      	add	r3, r0
 801672e:	3304      	adds	r3, #4
 8016730:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016732:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016736:	490d      	ldr	r1, [pc, #52]	@ (801676c <etharp_find_entry+0x2d4>)
 8016738:	4613      	mov	r3, r2
 801673a:	005b      	lsls	r3, r3, #1
 801673c:	4413      	add	r3, r2
 801673e:	00db      	lsls	r3, r3, #3
 8016740:	440b      	add	r3, r1
 8016742:	3312      	adds	r3, #18
 8016744:	2200      	movs	r2, #0
 8016746:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801674c:	4907      	ldr	r1, [pc, #28]	@ (801676c <etharp_find_entry+0x2d4>)
 801674e:	4613      	mov	r3, r2
 8016750:	005b      	lsls	r3, r3, #1
 8016752:	4413      	add	r3, r2
 8016754:	00db      	lsls	r3, r3, #3
 8016756:	440b      	add	r3, r1
 8016758:	3308      	adds	r3, #8
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801675e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3728      	adds	r7, #40	@ 0x28
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	20011008 	.word	0x20011008
 8016770:	0801d838 	.word	0x0801d838
 8016774:	0801d870 	.word	0x0801d870
 8016778:	0801d8b0 	.word	0x0801d8b0
 801677c:	0801d8d8 	.word	0x0801d8d8
 8016780:	0801d8f0 	.word	0x0801d8f0
 8016784:	0801d904 	.word	0x0801d904

08016788 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b088      	sub	sp, #32
 801678c:	af02      	add	r7, sp, #8
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	607a      	str	r2, [r7, #4]
 8016794:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801679c:	2b06      	cmp	r3, #6
 801679e:	d006      	beq.n	80167ae <etharp_update_arp_entry+0x26>
 80167a0:	4b48      	ldr	r3, [pc, #288]	@ (80168c4 <etharp_update_arp_entry+0x13c>)
 80167a2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80167a6:	4948      	ldr	r1, [pc, #288]	@ (80168c8 <etharp_update_arp_entry+0x140>)
 80167a8:	4848      	ldr	r0, [pc, #288]	@ (80168cc <etharp_update_arp_entry+0x144>)
 80167aa:	f002 fb93 	bl	8018ed4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80167ae:	68bb      	ldr	r3, [r7, #8]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d012      	beq.n	80167da <etharp_update_arp_entry+0x52>
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d00e      	beq.n	80167da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	68f9      	ldr	r1, [r7, #12]
 80167c2:	4618      	mov	r0, r3
 80167c4:	f001 f920 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 80167c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d105      	bne.n	80167da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80167d6:	2be0      	cmp	r3, #224	@ 0xe0
 80167d8:	d102      	bne.n	80167e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80167da:	f06f 030f 	mvn.w	r3, #15
 80167de:	e06c      	b.n	80168ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80167e0:	78fb      	ldrb	r3, [r7, #3]
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	4619      	mov	r1, r3
 80167e6:	68b8      	ldr	r0, [r7, #8]
 80167e8:	f7ff fe56 	bl	8016498 <etharp_find_entry>
 80167ec:	4603      	mov	r3, r0
 80167ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80167f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	da02      	bge.n	80167fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80167f8:	8afb      	ldrh	r3, [r7, #22]
 80167fa:	b25b      	sxtb	r3, r3
 80167fc:	e05d      	b.n	80168ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80167fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016802:	4933      	ldr	r1, [pc, #204]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 8016804:	4613      	mov	r3, r2
 8016806:	005b      	lsls	r3, r3, #1
 8016808:	4413      	add	r3, r2
 801680a:	00db      	lsls	r3, r3, #3
 801680c:	440b      	add	r3, r1
 801680e:	3314      	adds	r3, #20
 8016810:	2202      	movs	r2, #2
 8016812:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016814:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016818:	492d      	ldr	r1, [pc, #180]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 801681a:	4613      	mov	r3, r2
 801681c:	005b      	lsls	r3, r3, #1
 801681e:	4413      	add	r3, r2
 8016820:	00db      	lsls	r3, r3, #3
 8016822:	440b      	add	r3, r1
 8016824:	3308      	adds	r3, #8
 8016826:	68fa      	ldr	r2, [r7, #12]
 8016828:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801682a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801682e:	4613      	mov	r3, r2
 8016830:	005b      	lsls	r3, r3, #1
 8016832:	4413      	add	r3, r2
 8016834:	00db      	lsls	r3, r3, #3
 8016836:	3308      	adds	r3, #8
 8016838:	4a25      	ldr	r2, [pc, #148]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 801683a:	4413      	add	r3, r2
 801683c:	3304      	adds	r3, #4
 801683e:	2206      	movs	r2, #6
 8016840:	6879      	ldr	r1, [r7, #4]
 8016842:	4618      	mov	r0, r3
 8016844:	f002 fd47 	bl	80192d6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016848:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801684c:	4920      	ldr	r1, [pc, #128]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 801684e:	4613      	mov	r3, r2
 8016850:	005b      	lsls	r3, r3, #1
 8016852:	4413      	add	r3, r2
 8016854:	00db      	lsls	r3, r3, #3
 8016856:	440b      	add	r3, r1
 8016858:	3312      	adds	r3, #18
 801685a:	2200      	movs	r2, #0
 801685c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801685e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016862:	491b      	ldr	r1, [pc, #108]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 8016864:	4613      	mov	r3, r2
 8016866:	005b      	lsls	r3, r3, #1
 8016868:	4413      	add	r3, r2
 801686a:	00db      	lsls	r3, r3, #3
 801686c:	440b      	add	r3, r1
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d021      	beq.n	80168b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016874:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016878:	4915      	ldr	r1, [pc, #84]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 801687a:	4613      	mov	r3, r2
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	4413      	add	r3, r2
 8016880:	00db      	lsls	r3, r3, #3
 8016882:	440b      	add	r3, r1
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016888:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801688c:	4910      	ldr	r1, [pc, #64]	@ (80168d0 <etharp_update_arp_entry+0x148>)
 801688e:	4613      	mov	r3, r2
 8016890:	005b      	lsls	r3, r3, #1
 8016892:	4413      	add	r3, r2
 8016894:	00db      	lsls	r3, r3, #3
 8016896:	440b      	add	r3, r1
 8016898:	2200      	movs	r2, #0
 801689a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80168a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80168a6:	9300      	str	r3, [sp, #0]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	6939      	ldr	r1, [r7, #16]
 80168ac:	68f8      	ldr	r0, [r7, #12]
 80168ae:	f001 ffb9 	bl	8018824 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80168b2:	6938      	ldr	r0, [r7, #16]
 80168b4:	f7f6 fbd4 	bl	800d060 <pbuf_free>
  }
  return ERR_OK;
 80168b8:	2300      	movs	r3, #0
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3718      	adds	r7, #24
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	0801d838 	.word	0x0801d838
 80168c8:	0801d930 	.word	0x0801d930
 80168cc:	0801d8b0 	.word	0x0801d8b0
 80168d0:	20011008 	.word	0x20011008

080168d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168dc:	2300      	movs	r3, #0
 80168de:	60fb      	str	r3, [r7, #12]
 80168e0:	e01e      	b.n	8016920 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80168e2:	4913      	ldr	r1, [pc, #76]	@ (8016930 <etharp_cleanup_netif+0x5c>)
 80168e4:	68fa      	ldr	r2, [r7, #12]
 80168e6:	4613      	mov	r3, r2
 80168e8:	005b      	lsls	r3, r3, #1
 80168ea:	4413      	add	r3, r2
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	440b      	add	r3, r1
 80168f0:	3314      	adds	r3, #20
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80168f6:	7afb      	ldrb	r3, [r7, #11]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d00e      	beq.n	801691a <etharp_cleanup_netif+0x46>
 80168fc:	490c      	ldr	r1, [pc, #48]	@ (8016930 <etharp_cleanup_netif+0x5c>)
 80168fe:	68fa      	ldr	r2, [r7, #12]
 8016900:	4613      	mov	r3, r2
 8016902:	005b      	lsls	r3, r3, #1
 8016904:	4413      	add	r3, r2
 8016906:	00db      	lsls	r3, r3, #3
 8016908:	440b      	add	r3, r1
 801690a:	3308      	adds	r3, #8
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	687a      	ldr	r2, [r7, #4]
 8016910:	429a      	cmp	r2, r3
 8016912:	d102      	bne.n	801691a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016914:	68f8      	ldr	r0, [r7, #12]
 8016916:	f7ff fce5 	bl	80162e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	3301      	adds	r3, #1
 801691e:	60fb      	str	r3, [r7, #12]
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	2b09      	cmp	r3, #9
 8016924:	dddd      	ble.n	80168e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016926:	bf00      	nop
 8016928:	bf00      	nop
 801692a:	3710      	adds	r7, #16
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	20011008 	.word	0x20011008

08016934 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016934:	b5b0      	push	{r4, r5, r7, lr}
 8016936:	b08a      	sub	sp, #40	@ 0x28
 8016938:	af04      	add	r7, sp, #16
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d107      	bne.n	8016954 <etharp_input+0x20>
 8016944:	4b3f      	ldr	r3, [pc, #252]	@ (8016a44 <etharp_input+0x110>)
 8016946:	f240 228a 	movw	r2, #650	@ 0x28a
 801694a:	493f      	ldr	r1, [pc, #252]	@ (8016a48 <etharp_input+0x114>)
 801694c:	483f      	ldr	r0, [pc, #252]	@ (8016a4c <etharp_input+0x118>)
 801694e:	f002 fac1 	bl	8018ed4 <iprintf>
 8016952:	e074      	b.n	8016a3e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801695a:	693b      	ldr	r3, [r7, #16]
 801695c:	881b      	ldrh	r3, [r3, #0]
 801695e:	b29b      	uxth	r3, r3
 8016960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016964:	d10c      	bne.n	8016980 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801696a:	2b06      	cmp	r3, #6
 801696c:	d108      	bne.n	8016980 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016972:	2b04      	cmp	r3, #4
 8016974:	d104      	bne.n	8016980 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	885b      	ldrh	r3, [r3, #2]
 801697a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801697c:	2b08      	cmp	r3, #8
 801697e:	d003      	beq.n	8016988 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	f7f6 fb6d 	bl	800d060 <pbuf_free>
    return;
 8016986:	e05a      	b.n	8016a3e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	330e      	adds	r3, #14
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	3318      	adds	r3, #24
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	3304      	adds	r3, #4
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d102      	bne.n	80169a8 <etharp_input+0x74>
    for_us = 0;
 80169a2:	2300      	movs	r3, #0
 80169a4:	75fb      	strb	r3, [r7, #23]
 80169a6:	e009      	b.n	80169bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80169a8:	68ba      	ldr	r2, [r7, #8]
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	3304      	adds	r3, #4
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	bf0c      	ite	eq
 80169b4:	2301      	moveq	r3, #1
 80169b6:	2300      	movne	r3, #0
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	f103 0208 	add.w	r2, r3, #8
 80169c2:	7dfb      	ldrb	r3, [r7, #23]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d001      	beq.n	80169cc <etharp_input+0x98>
 80169c8:	2301      	movs	r3, #1
 80169ca:	e000      	b.n	80169ce <etharp_input+0x9a>
 80169cc:	2302      	movs	r3, #2
 80169ce:	f107 010c 	add.w	r1, r7, #12
 80169d2:	6838      	ldr	r0, [r7, #0]
 80169d4:	f7ff fed8 	bl	8016788 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80169d8:	693b      	ldr	r3, [r7, #16]
 80169da:	88db      	ldrh	r3, [r3, #6]
 80169dc:	b29b      	uxth	r3, r3
 80169de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80169e2:	d003      	beq.n	80169ec <etharp_input+0xb8>
 80169e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80169e8:	d01e      	beq.n	8016a28 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80169ea:	e025      	b.n	8016a38 <etharp_input+0x104>
      if (for_us) {
 80169ec:	7dfb      	ldrb	r3, [r7, #23]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d021      	beq.n	8016a36 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016a08:	693a      	ldr	r2, [r7, #16]
 8016a0a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016a0c:	2102      	movs	r1, #2
 8016a0e:	9103      	str	r1, [sp, #12]
 8016a10:	f107 010c 	add.w	r1, r7, #12
 8016a14:	9102      	str	r1, [sp, #8]
 8016a16:	9201      	str	r2, [sp, #4]
 8016a18:	9300      	str	r3, [sp, #0]
 8016a1a:	462b      	mov	r3, r5
 8016a1c:	4622      	mov	r2, r4
 8016a1e:	4601      	mov	r1, r0
 8016a20:	6838      	ldr	r0, [r7, #0]
 8016a22:	f000 faef 	bl	8017004 <etharp_raw>
      break;
 8016a26:	e006      	b.n	8016a36 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016a28:	f107 030c 	add.w	r3, r7, #12
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	6838      	ldr	r0, [r7, #0]
 8016a30:	f7fe fa02 	bl	8014e38 <dhcp_arp_reply>
      break;
 8016a34:	e000      	b.n	8016a38 <etharp_input+0x104>
      break;
 8016a36:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f7f6 fb11 	bl	800d060 <pbuf_free>
}
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bdb0      	pop	{r4, r5, r7, pc}
 8016a44:	0801d838 	.word	0x0801d838
 8016a48:	0801d988 	.word	0x0801d988
 8016a4c:	0801d8b0 	.word	0x0801d8b0

08016a50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b086      	sub	sp, #24
 8016a54:	af02      	add	r7, sp, #8
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	4613      	mov	r3, r2
 8016a5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016a5e:	79fa      	ldrb	r2, [r7, #7]
 8016a60:	4944      	ldr	r1, [pc, #272]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016a62:	4613      	mov	r3, r2
 8016a64:	005b      	lsls	r3, r3, #1
 8016a66:	4413      	add	r3, r2
 8016a68:	00db      	lsls	r3, r3, #3
 8016a6a:	440b      	add	r3, r1
 8016a6c:	3314      	adds	r3, #20
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	2b01      	cmp	r3, #1
 8016a72:	d806      	bhi.n	8016a82 <etharp_output_to_arp_index+0x32>
 8016a74:	4b40      	ldr	r3, [pc, #256]	@ (8016b78 <etharp_output_to_arp_index+0x128>)
 8016a76:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016a7a:	4940      	ldr	r1, [pc, #256]	@ (8016b7c <etharp_output_to_arp_index+0x12c>)
 8016a7c:	4840      	ldr	r0, [pc, #256]	@ (8016b80 <etharp_output_to_arp_index+0x130>)
 8016a7e:	f002 fa29 	bl	8018ed4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016a82:	79fa      	ldrb	r2, [r7, #7]
 8016a84:	493b      	ldr	r1, [pc, #236]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016a86:	4613      	mov	r3, r2
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	4413      	add	r3, r2
 8016a8c:	00db      	lsls	r3, r3, #3
 8016a8e:	440b      	add	r3, r1
 8016a90:	3314      	adds	r3, #20
 8016a92:	781b      	ldrb	r3, [r3, #0]
 8016a94:	2b02      	cmp	r3, #2
 8016a96:	d153      	bne.n	8016b40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016a98:	79fa      	ldrb	r2, [r7, #7]
 8016a9a:	4936      	ldr	r1, [pc, #216]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	005b      	lsls	r3, r3, #1
 8016aa0:	4413      	add	r3, r2
 8016aa2:	00db      	lsls	r3, r3, #3
 8016aa4:	440b      	add	r3, r1
 8016aa6:	3312      	adds	r3, #18
 8016aa8:	881b      	ldrh	r3, [r3, #0]
 8016aaa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016aae:	d919      	bls.n	8016ae4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016ab0:	79fa      	ldrb	r2, [r7, #7]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	005b      	lsls	r3, r3, #1
 8016ab6:	4413      	add	r3, r2
 8016ab8:	00db      	lsls	r3, r3, #3
 8016aba:	4a2e      	ldr	r2, [pc, #184]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016abc:	4413      	add	r3, r2
 8016abe:	3304      	adds	r3, #4
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	68f8      	ldr	r0, [r7, #12]
 8016ac4:	f000 fb4c 	bl	8017160 <etharp_request>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d138      	bne.n	8016b40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016ace:	79fa      	ldrb	r2, [r7, #7]
 8016ad0:	4928      	ldr	r1, [pc, #160]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	005b      	lsls	r3, r3, #1
 8016ad6:	4413      	add	r3, r2
 8016ad8:	00db      	lsls	r3, r3, #3
 8016ada:	440b      	add	r3, r1
 8016adc:	3314      	adds	r3, #20
 8016ade:	2203      	movs	r2, #3
 8016ae0:	701a      	strb	r2, [r3, #0]
 8016ae2:	e02d      	b.n	8016b40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016ae4:	79fa      	ldrb	r2, [r7, #7]
 8016ae6:	4923      	ldr	r1, [pc, #140]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016ae8:	4613      	mov	r3, r2
 8016aea:	005b      	lsls	r3, r3, #1
 8016aec:	4413      	add	r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	440b      	add	r3, r1
 8016af2:	3312      	adds	r3, #18
 8016af4:	881b      	ldrh	r3, [r3, #0]
 8016af6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016afa:	d321      	bcc.n	8016b40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016afc:	79fa      	ldrb	r2, [r7, #7]
 8016afe:	4613      	mov	r3, r2
 8016b00:	005b      	lsls	r3, r3, #1
 8016b02:	4413      	add	r3, r2
 8016b04:	00db      	lsls	r3, r3, #3
 8016b06:	4a1b      	ldr	r2, [pc, #108]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016b08:	4413      	add	r3, r2
 8016b0a:	1d19      	adds	r1, r3, #4
 8016b0c:	79fa      	ldrb	r2, [r7, #7]
 8016b0e:	4613      	mov	r3, r2
 8016b10:	005b      	lsls	r3, r3, #1
 8016b12:	4413      	add	r3, r2
 8016b14:	00db      	lsls	r3, r3, #3
 8016b16:	3308      	adds	r3, #8
 8016b18:	4a16      	ldr	r2, [pc, #88]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016b1a:	4413      	add	r3, r2
 8016b1c:	3304      	adds	r3, #4
 8016b1e:	461a      	mov	r2, r3
 8016b20:	68f8      	ldr	r0, [r7, #12]
 8016b22:	f000 fafb 	bl	801711c <etharp_request_dst>
 8016b26:	4603      	mov	r3, r0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d109      	bne.n	8016b40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b2c:	79fa      	ldrb	r2, [r7, #7]
 8016b2e:	4911      	ldr	r1, [pc, #68]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016b30:	4613      	mov	r3, r2
 8016b32:	005b      	lsls	r3, r3, #1
 8016b34:	4413      	add	r3, r2
 8016b36:	00db      	lsls	r3, r3, #3
 8016b38:	440b      	add	r3, r1
 8016b3a:	3314      	adds	r3, #20
 8016b3c:	2203      	movs	r2, #3
 8016b3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8016b46:	79fa      	ldrb	r2, [r7, #7]
 8016b48:	4613      	mov	r3, r2
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	4413      	add	r3, r2
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	3308      	adds	r3, #8
 8016b52:	4a08      	ldr	r2, [pc, #32]	@ (8016b74 <etharp_output_to_arp_index+0x124>)
 8016b54:	4413      	add	r3, r2
 8016b56:	3304      	adds	r3, #4
 8016b58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016b5c:	9200      	str	r2, [sp, #0]
 8016b5e:	460a      	mov	r2, r1
 8016b60:	68b9      	ldr	r1, [r7, #8]
 8016b62:	68f8      	ldr	r0, [r7, #12]
 8016b64:	f001 fe5e 	bl	8018824 <ethernet_output>
 8016b68:	4603      	mov	r3, r0
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3710      	adds	r7, #16
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}
 8016b72:	bf00      	nop
 8016b74:	20011008 	.word	0x20011008
 8016b78:	0801d838 	.word	0x0801d838
 8016b7c:	0801d9a8 	.word	0x0801d9a8
 8016b80:	0801d8b0 	.word	0x0801d8b0

08016b84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b08a      	sub	sp, #40	@ 0x28
 8016b88:	af02      	add	r7, sp, #8
 8016b8a:	60f8      	str	r0, [r7, #12]
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d106      	bne.n	8016ba8 <etharp_output+0x24>
 8016b9a:	4b73      	ldr	r3, [pc, #460]	@ (8016d68 <etharp_output+0x1e4>)
 8016b9c:	f240 321e 	movw	r2, #798	@ 0x31e
 8016ba0:	4972      	ldr	r1, [pc, #456]	@ (8016d6c <etharp_output+0x1e8>)
 8016ba2:	4873      	ldr	r0, [pc, #460]	@ (8016d70 <etharp_output+0x1ec>)
 8016ba4:	f002 f996 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d106      	bne.n	8016bbc <etharp_output+0x38>
 8016bae:	4b6e      	ldr	r3, [pc, #440]	@ (8016d68 <etharp_output+0x1e4>)
 8016bb0:	f240 321f 	movw	r2, #799	@ 0x31f
 8016bb4:	496f      	ldr	r1, [pc, #444]	@ (8016d74 <etharp_output+0x1f0>)
 8016bb6:	486e      	ldr	r0, [pc, #440]	@ (8016d70 <etharp_output+0x1ec>)
 8016bb8:	f002 f98c 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d106      	bne.n	8016bd0 <etharp_output+0x4c>
 8016bc2:	4b69      	ldr	r3, [pc, #420]	@ (8016d68 <etharp_output+0x1e4>)
 8016bc4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016bc8:	496b      	ldr	r1, [pc, #428]	@ (8016d78 <etharp_output+0x1f4>)
 8016bca:	4869      	ldr	r0, [pc, #420]	@ (8016d70 <etharp_output+0x1ec>)
 8016bcc:	f002 f982 	bl	8018ed4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	68f9      	ldr	r1, [r7, #12]
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f000 ff16 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d002      	beq.n	8016be8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016be2:	4b66      	ldr	r3, [pc, #408]	@ (8016d7c <etharp_output+0x1f8>)
 8016be4:	61fb      	str	r3, [r7, #28]
 8016be6:	e0af      	b.n	8016d48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016bf0:	2be0      	cmp	r3, #224	@ 0xe0
 8016bf2:	d118      	bne.n	8016c26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016bfc:	235e      	movs	r3, #94	@ 0x5e
 8016bfe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	3301      	adds	r3, #1
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	3302      	adds	r3, #2
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	3303      	adds	r3, #3
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016c1e:	f107 0310 	add.w	r3, r7, #16
 8016c22:	61fb      	str	r3, [r7, #28]
 8016c24:	e090      	b.n	8016d48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	3304      	adds	r3, #4
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	405a      	eors	r2, r3
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	3308      	adds	r3, #8
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	4013      	ands	r3, r2
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d012      	beq.n	8016c64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c44:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016c48:	4293      	cmp	r3, r2
 8016c4a:	d00b      	beq.n	8016c64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	330c      	adds	r3, #12
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d003      	beq.n	8016c5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	330c      	adds	r3, #12
 8016c5a:	61bb      	str	r3, [r7, #24]
 8016c5c:	e002      	b.n	8016c64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016c5e:	f06f 0303 	mvn.w	r3, #3
 8016c62:	e07d      	b.n	8016d60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016c64:	4b46      	ldr	r3, [pc, #280]	@ (8016d80 <etharp_output+0x1fc>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	4619      	mov	r1, r3
 8016c6a:	4a46      	ldr	r2, [pc, #280]	@ (8016d84 <etharp_output+0x200>)
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	005b      	lsls	r3, r3, #1
 8016c70:	440b      	add	r3, r1
 8016c72:	00db      	lsls	r3, r3, #3
 8016c74:	4413      	add	r3, r2
 8016c76:	3314      	adds	r3, #20
 8016c78:	781b      	ldrb	r3, [r3, #0]
 8016c7a:	2b01      	cmp	r3, #1
 8016c7c:	d925      	bls.n	8016cca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016c7e:	4b40      	ldr	r3, [pc, #256]	@ (8016d80 <etharp_output+0x1fc>)
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	4619      	mov	r1, r3
 8016c84:	4a3f      	ldr	r2, [pc, #252]	@ (8016d84 <etharp_output+0x200>)
 8016c86:	460b      	mov	r3, r1
 8016c88:	005b      	lsls	r3, r3, #1
 8016c8a:	440b      	add	r3, r1
 8016c8c:	00db      	lsls	r3, r3, #3
 8016c8e:	4413      	add	r3, r2
 8016c90:	3308      	adds	r3, #8
 8016c92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016c94:	68fa      	ldr	r2, [r7, #12]
 8016c96:	429a      	cmp	r2, r3
 8016c98:	d117      	bne.n	8016cca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016c9a:	69bb      	ldr	r3, [r7, #24]
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	4b38      	ldr	r3, [pc, #224]	@ (8016d80 <etharp_output+0x1fc>)
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	4937      	ldr	r1, [pc, #220]	@ (8016d84 <etharp_output+0x200>)
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	005b      	lsls	r3, r3, #1
 8016caa:	4403      	add	r3, r0
 8016cac:	00db      	lsls	r3, r3, #3
 8016cae:	440b      	add	r3, r1
 8016cb0:	3304      	adds	r3, #4
 8016cb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d108      	bne.n	8016cca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016cb8:	4b31      	ldr	r3, [pc, #196]	@ (8016d80 <etharp_output+0x1fc>)
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	461a      	mov	r2, r3
 8016cbe:	68b9      	ldr	r1, [r7, #8]
 8016cc0:	68f8      	ldr	r0, [r7, #12]
 8016cc2:	f7ff fec5 	bl	8016a50 <etharp_output_to_arp_index>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	e04a      	b.n	8016d60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016cca:	2300      	movs	r3, #0
 8016ccc:	75fb      	strb	r3, [r7, #23]
 8016cce:	e031      	b.n	8016d34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016cd0:	7dfa      	ldrb	r2, [r7, #23]
 8016cd2:	492c      	ldr	r1, [pc, #176]	@ (8016d84 <etharp_output+0x200>)
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	005b      	lsls	r3, r3, #1
 8016cd8:	4413      	add	r3, r2
 8016cda:	00db      	lsls	r3, r3, #3
 8016cdc:	440b      	add	r3, r1
 8016cde:	3314      	adds	r3, #20
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	2b01      	cmp	r3, #1
 8016ce4:	d923      	bls.n	8016d2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016ce6:	7dfa      	ldrb	r2, [r7, #23]
 8016ce8:	4926      	ldr	r1, [pc, #152]	@ (8016d84 <etharp_output+0x200>)
 8016cea:	4613      	mov	r3, r2
 8016cec:	005b      	lsls	r3, r3, #1
 8016cee:	4413      	add	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	440b      	add	r3, r1
 8016cf4:	3308      	adds	r3, #8
 8016cf6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016cf8:	68fa      	ldr	r2, [r7, #12]
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d117      	bne.n	8016d2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	6819      	ldr	r1, [r3, #0]
 8016d02:	7dfa      	ldrb	r2, [r7, #23]
 8016d04:	481f      	ldr	r0, [pc, #124]	@ (8016d84 <etharp_output+0x200>)
 8016d06:	4613      	mov	r3, r2
 8016d08:	005b      	lsls	r3, r3, #1
 8016d0a:	4413      	add	r3, r2
 8016d0c:	00db      	lsls	r3, r3, #3
 8016d0e:	4403      	add	r3, r0
 8016d10:	3304      	adds	r3, #4
 8016d12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016d14:	4299      	cmp	r1, r3
 8016d16:	d10a      	bne.n	8016d2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016d18:	4a19      	ldr	r2, [pc, #100]	@ (8016d80 <etharp_output+0x1fc>)
 8016d1a:	7dfb      	ldrb	r3, [r7, #23]
 8016d1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016d1e:	7dfb      	ldrb	r3, [r7, #23]
 8016d20:	461a      	mov	r2, r3
 8016d22:	68b9      	ldr	r1, [r7, #8]
 8016d24:	68f8      	ldr	r0, [r7, #12]
 8016d26:	f7ff fe93 	bl	8016a50 <etharp_output_to_arp_index>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	e018      	b.n	8016d60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d2e:	7dfb      	ldrb	r3, [r7, #23]
 8016d30:	3301      	adds	r3, #1
 8016d32:	75fb      	strb	r3, [r7, #23]
 8016d34:	7dfb      	ldrb	r3, [r7, #23]
 8016d36:	2b09      	cmp	r3, #9
 8016d38:	d9ca      	bls.n	8016cd0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016d3a:	68ba      	ldr	r2, [r7, #8]
 8016d3c:	69b9      	ldr	r1, [r7, #24]
 8016d3e:	68f8      	ldr	r0, [r7, #12]
 8016d40:	f000 f822 	bl	8016d88 <etharp_query>
 8016d44:	4603      	mov	r3, r0
 8016d46:	e00b      	b.n	8016d60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8016d4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d52:	9300      	str	r3, [sp, #0]
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	68b9      	ldr	r1, [r7, #8]
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f001 fd63 	bl	8018824 <ethernet_output>
 8016d5e:	4603      	mov	r3, r0
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3720      	adds	r7, #32
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	0801d838 	.word	0x0801d838
 8016d6c:	0801d988 	.word	0x0801d988
 8016d70:	0801d8b0 	.word	0x0801d8b0
 8016d74:	0801d9d8 	.word	0x0801d9d8
 8016d78:	0801d978 	.word	0x0801d978
 8016d7c:	08028184 	.word	0x08028184
 8016d80:	200110f8 	.word	0x200110f8
 8016d84:	20011008 	.word	0x20011008

08016d88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b08c      	sub	sp, #48	@ 0x30
 8016d8c:	af02      	add	r7, sp, #8
 8016d8e:	60f8      	str	r0, [r7, #12]
 8016d90:	60b9      	str	r1, [r7, #8]
 8016d92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	332a      	adds	r3, #42	@ 0x2a
 8016d98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016d9a:	23ff      	movs	r3, #255	@ 0xff
 8016d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016da0:	2300      	movs	r3, #0
 8016da2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	68f9      	ldr	r1, [r7, #12]
 8016daa:	4618      	mov	r0, r3
 8016dac:	f000 fe2c 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 8016db0:	4603      	mov	r3, r0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d10c      	bne.n	8016dd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016dbe:	2be0      	cmp	r3, #224	@ 0xe0
 8016dc0:	d006      	beq.n	8016dd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d003      	beq.n	8016dd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d102      	bne.n	8016dd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016dd0:	f06f 030f 	mvn.w	r3, #15
 8016dd4:	e101      	b.n	8016fda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016dd6:	68fa      	ldr	r2, [r7, #12]
 8016dd8:	2101      	movs	r1, #1
 8016dda:	68b8      	ldr	r0, [r7, #8]
 8016ddc:	f7ff fb5c 	bl	8016498 <etharp_find_entry>
 8016de0:	4603      	mov	r3, r0
 8016de2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016de4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	da02      	bge.n	8016df2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016dec:	8a7b      	ldrh	r3, [r7, #18]
 8016dee:	b25b      	sxtb	r3, r3
 8016df0:	e0f3      	b.n	8016fda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016df2:	8a7b      	ldrh	r3, [r7, #18]
 8016df4:	2b7e      	cmp	r3, #126	@ 0x7e
 8016df6:	d906      	bls.n	8016e06 <etharp_query+0x7e>
 8016df8:	4b7a      	ldr	r3, [pc, #488]	@ (8016fe4 <etharp_query+0x25c>)
 8016dfa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016dfe:	497a      	ldr	r1, [pc, #488]	@ (8016fe8 <etharp_query+0x260>)
 8016e00:	487a      	ldr	r0, [pc, #488]	@ (8016fec <etharp_query+0x264>)
 8016e02:	f002 f867 	bl	8018ed4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016e06:	8a7b      	ldrh	r3, [r7, #18]
 8016e08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016e0a:	7c7a      	ldrb	r2, [r7, #17]
 8016e0c:	4978      	ldr	r1, [pc, #480]	@ (8016ff0 <etharp_query+0x268>)
 8016e0e:	4613      	mov	r3, r2
 8016e10:	005b      	lsls	r3, r3, #1
 8016e12:	4413      	add	r3, r2
 8016e14:	00db      	lsls	r3, r3, #3
 8016e16:	440b      	add	r3, r1
 8016e18:	3314      	adds	r3, #20
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d115      	bne.n	8016e4c <etharp_query+0xc4>
    is_new_entry = 1;
 8016e20:	2301      	movs	r3, #1
 8016e22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016e24:	7c7a      	ldrb	r2, [r7, #17]
 8016e26:	4972      	ldr	r1, [pc, #456]	@ (8016ff0 <etharp_query+0x268>)
 8016e28:	4613      	mov	r3, r2
 8016e2a:	005b      	lsls	r3, r3, #1
 8016e2c:	4413      	add	r3, r2
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	440b      	add	r3, r1
 8016e32:	3314      	adds	r3, #20
 8016e34:	2201      	movs	r2, #1
 8016e36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016e38:	7c7a      	ldrb	r2, [r7, #17]
 8016e3a:	496d      	ldr	r1, [pc, #436]	@ (8016ff0 <etharp_query+0x268>)
 8016e3c:	4613      	mov	r3, r2
 8016e3e:	005b      	lsls	r3, r3, #1
 8016e40:	4413      	add	r3, r2
 8016e42:	00db      	lsls	r3, r3, #3
 8016e44:	440b      	add	r3, r1
 8016e46:	3308      	adds	r3, #8
 8016e48:	68fa      	ldr	r2, [r7, #12]
 8016e4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016e4c:	7c7a      	ldrb	r2, [r7, #17]
 8016e4e:	4968      	ldr	r1, [pc, #416]	@ (8016ff0 <etharp_query+0x268>)
 8016e50:	4613      	mov	r3, r2
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	4413      	add	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	440b      	add	r3, r1
 8016e5a:	3314      	adds	r3, #20
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2b01      	cmp	r3, #1
 8016e60:	d011      	beq.n	8016e86 <etharp_query+0xfe>
 8016e62:	7c7a      	ldrb	r2, [r7, #17]
 8016e64:	4962      	ldr	r1, [pc, #392]	@ (8016ff0 <etharp_query+0x268>)
 8016e66:	4613      	mov	r3, r2
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4413      	add	r3, r2
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	440b      	add	r3, r1
 8016e70:	3314      	adds	r3, #20
 8016e72:	781b      	ldrb	r3, [r3, #0]
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d806      	bhi.n	8016e86 <etharp_query+0xfe>
 8016e78:	4b5a      	ldr	r3, [pc, #360]	@ (8016fe4 <etharp_query+0x25c>)
 8016e7a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016e7e:	495d      	ldr	r1, [pc, #372]	@ (8016ff4 <etharp_query+0x26c>)
 8016e80:	485a      	ldr	r0, [pc, #360]	@ (8016fec <etharp_query+0x264>)
 8016e82:	f002 f827 	bl	8018ed4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d102      	bne.n	8016e92 <etharp_query+0x10a>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d10c      	bne.n	8016eac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016e92:	68b9      	ldr	r1, [r7, #8]
 8016e94:	68f8      	ldr	r0, [r7, #12]
 8016e96:	f000 f963 	bl	8017160 <etharp_request>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d102      	bne.n	8016eac <etharp_query+0x124>
      return result;
 8016ea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016eaa:	e096      	b.n	8016fda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d106      	bne.n	8016ec0 <etharp_query+0x138>
 8016eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8016fe4 <etharp_query+0x25c>)
 8016eb4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016eb8:	494f      	ldr	r1, [pc, #316]	@ (8016ff8 <etharp_query+0x270>)
 8016eba:	484c      	ldr	r0, [pc, #304]	@ (8016fec <etharp_query+0x264>)
 8016ebc:	f002 f80a 	bl	8018ed4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016ec0:	7c7a      	ldrb	r2, [r7, #17]
 8016ec2:	494b      	ldr	r1, [pc, #300]	@ (8016ff0 <etharp_query+0x268>)
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	4413      	add	r3, r2
 8016eca:	00db      	lsls	r3, r3, #3
 8016ecc:	440b      	add	r3, r1
 8016ece:	3314      	adds	r3, #20
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2b01      	cmp	r3, #1
 8016ed4:	d917      	bls.n	8016f06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016ed6:	4a49      	ldr	r2, [pc, #292]	@ (8016ffc <etharp_query+0x274>)
 8016ed8:	7c7b      	ldrb	r3, [r7, #17]
 8016eda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016edc:	7c7a      	ldrb	r2, [r7, #17]
 8016ede:	4613      	mov	r3, r2
 8016ee0:	005b      	lsls	r3, r3, #1
 8016ee2:	4413      	add	r3, r2
 8016ee4:	00db      	lsls	r3, r3, #3
 8016ee6:	3308      	adds	r3, #8
 8016ee8:	4a41      	ldr	r2, [pc, #260]	@ (8016ff0 <etharp_query+0x268>)
 8016eea:	4413      	add	r3, r2
 8016eec:	3304      	adds	r3, #4
 8016eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016ef2:	9200      	str	r2, [sp, #0]
 8016ef4:	697a      	ldr	r2, [r7, #20]
 8016ef6:	6879      	ldr	r1, [r7, #4]
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f001 fc93 	bl	8018824 <ethernet_output>
 8016efe:	4603      	mov	r3, r0
 8016f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016f04:	e067      	b.n	8016fd6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f06:	7c7a      	ldrb	r2, [r7, #17]
 8016f08:	4939      	ldr	r1, [pc, #228]	@ (8016ff0 <etharp_query+0x268>)
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	005b      	lsls	r3, r3, #1
 8016f0e:	4413      	add	r3, r2
 8016f10:	00db      	lsls	r3, r3, #3
 8016f12:	440b      	add	r3, r1
 8016f14:	3314      	adds	r3, #20
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	2b01      	cmp	r3, #1
 8016f1a:	d15c      	bne.n	8016fd6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016f24:	e01c      	b.n	8016f60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016f26:	69fb      	ldr	r3, [r7, #28]
 8016f28:	895a      	ldrh	r2, [r3, #10]
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	891b      	ldrh	r3, [r3, #8]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d10a      	bne.n	8016f48 <etharp_query+0x1c0>
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d006      	beq.n	8016f48 <etharp_query+0x1c0>
 8016f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8016fe4 <etharp_query+0x25c>)
 8016f3c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016f40:	492f      	ldr	r1, [pc, #188]	@ (8017000 <etharp_query+0x278>)
 8016f42:	482a      	ldr	r0, [pc, #168]	@ (8016fec <etharp_query+0x264>)
 8016f44:	f001 ffc6 	bl	8018ed4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016f48:	69fb      	ldr	r3, [r7, #28]
 8016f4a:	7b1b      	ldrb	r3, [r3, #12]
 8016f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d002      	beq.n	8016f5a <etharp_query+0x1d2>
        copy_needed = 1;
 8016f54:	2301      	movs	r3, #1
 8016f56:	61bb      	str	r3, [r7, #24]
        break;
 8016f58:	e005      	b.n	8016f66 <etharp_query+0x1de>
      }
      p = p->next;
 8016f5a:	69fb      	ldr	r3, [r7, #28]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d1df      	bne.n	8016f26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016f66:	69bb      	ldr	r3, [r7, #24]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d007      	beq.n	8016f7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016f72:	200e      	movs	r0, #14
 8016f74:	f7f6 faec 	bl	800d550 <pbuf_clone>
 8016f78:	61f8      	str	r0, [r7, #28]
 8016f7a:	e004      	b.n	8016f86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016f80:	69f8      	ldr	r0, [r7, #28]
 8016f82:	f7f6 f913 	bl	800d1ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016f86:	69fb      	ldr	r3, [r7, #28]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d021      	beq.n	8016fd0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016f8c:	7c7a      	ldrb	r2, [r7, #17]
 8016f8e:	4918      	ldr	r1, [pc, #96]	@ (8016ff0 <etharp_query+0x268>)
 8016f90:	4613      	mov	r3, r2
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	4413      	add	r3, r2
 8016f96:	00db      	lsls	r3, r3, #3
 8016f98:	440b      	add	r3, r1
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d00a      	beq.n	8016fb6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016fa0:	7c7a      	ldrb	r2, [r7, #17]
 8016fa2:	4913      	ldr	r1, [pc, #76]	@ (8016ff0 <etharp_query+0x268>)
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	005b      	lsls	r3, r3, #1
 8016fa8:	4413      	add	r3, r2
 8016faa:	00db      	lsls	r3, r3, #3
 8016fac:	440b      	add	r3, r1
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7f6 f855 	bl	800d060 <pbuf_free>
      }
      arp_table[i].q = p;
 8016fb6:	7c7a      	ldrb	r2, [r7, #17]
 8016fb8:	490d      	ldr	r1, [pc, #52]	@ (8016ff0 <etharp_query+0x268>)
 8016fba:	4613      	mov	r3, r2
 8016fbc:	005b      	lsls	r3, r3, #1
 8016fbe:	4413      	add	r3, r2
 8016fc0:	00db      	lsls	r3, r3, #3
 8016fc2:	440b      	add	r3, r1
 8016fc4:	69fa      	ldr	r2, [r7, #28]
 8016fc6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016fce:	e002      	b.n	8016fd6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016fd0:	23ff      	movs	r3, #255	@ 0xff
 8016fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016fd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3728      	adds	r7, #40	@ 0x28
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	0801d838 	.word	0x0801d838
 8016fe8:	0801d9e4 	.word	0x0801d9e4
 8016fec:	0801d8b0 	.word	0x0801d8b0
 8016ff0:	20011008 	.word	0x20011008
 8016ff4:	0801d9f4 	.word	0x0801d9f4
 8016ff8:	0801d9d8 	.word	0x0801d9d8
 8016ffc:	200110f8 	.word	0x200110f8
 8017000:	0801da1c 	.word	0x0801da1c

08017004 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b08a      	sub	sp, #40	@ 0x28
 8017008:	af02      	add	r7, sp, #8
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
 8017010:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017012:	2300      	movs	r3, #0
 8017014:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d106      	bne.n	801702a <etharp_raw+0x26>
 801701c:	4b3a      	ldr	r3, [pc, #232]	@ (8017108 <etharp_raw+0x104>)
 801701e:	f240 4257 	movw	r2, #1111	@ 0x457
 8017022:	493a      	ldr	r1, [pc, #232]	@ (801710c <etharp_raw+0x108>)
 8017024:	483a      	ldr	r0, [pc, #232]	@ (8017110 <etharp_raw+0x10c>)
 8017026:	f001 ff55 	bl	8018ed4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801702a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801702e:	211c      	movs	r1, #28
 8017030:	200e      	movs	r0, #14
 8017032:	f7f5 fd31 	bl	800ca98 <pbuf_alloc>
 8017036:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017038:	69bb      	ldr	r3, [r7, #24]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d102      	bne.n	8017044 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801703e:	f04f 33ff 	mov.w	r3, #4294967295
 8017042:	e05d      	b.n	8017100 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017044:	69bb      	ldr	r3, [r7, #24]
 8017046:	895b      	ldrh	r3, [r3, #10]
 8017048:	2b1b      	cmp	r3, #27
 801704a:	d806      	bhi.n	801705a <etharp_raw+0x56>
 801704c:	4b2e      	ldr	r3, [pc, #184]	@ (8017108 <etharp_raw+0x104>)
 801704e:	f240 4262 	movw	r2, #1122	@ 0x462
 8017052:	4930      	ldr	r1, [pc, #192]	@ (8017114 <etharp_raw+0x110>)
 8017054:	482e      	ldr	r0, [pc, #184]	@ (8017110 <etharp_raw+0x10c>)
 8017056:	f001 ff3d 	bl	8018ed4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801705a:	69bb      	ldr	r3, [r7, #24]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017060:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017062:	4618      	mov	r0, r3
 8017064:	f7f4 fbc8 	bl	800b7f8 <lwip_htons>
 8017068:	4603      	mov	r3, r0
 801706a:	461a      	mov	r2, r3
 801706c:	697b      	ldr	r3, [r7, #20]
 801706e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017076:	2b06      	cmp	r3, #6
 8017078:	d006      	beq.n	8017088 <etharp_raw+0x84>
 801707a:	4b23      	ldr	r3, [pc, #140]	@ (8017108 <etharp_raw+0x104>)
 801707c:	f240 4269 	movw	r2, #1129	@ 0x469
 8017080:	4925      	ldr	r1, [pc, #148]	@ (8017118 <etharp_raw+0x114>)
 8017082:	4823      	ldr	r0, [pc, #140]	@ (8017110 <etharp_raw+0x10c>)
 8017084:	f001 ff26 	bl	8018ed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	3308      	adds	r3, #8
 801708c:	2206      	movs	r2, #6
 801708e:	6839      	ldr	r1, [r7, #0]
 8017090:	4618      	mov	r0, r3
 8017092:	f002 f920 	bl	80192d6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	3312      	adds	r3, #18
 801709a:	2206      	movs	r2, #6
 801709c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801709e:	4618      	mov	r0, r3
 80170a0:	f002 f919 	bl	80192d6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	330e      	adds	r3, #14
 80170a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80170aa:	6812      	ldr	r2, [r2, #0]
 80170ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	3318      	adds	r3, #24
 80170b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170b4:	6812      	ldr	r2, [r2, #0]
 80170b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	2200      	movs	r2, #0
 80170bc:	701a      	strb	r2, [r3, #0]
 80170be:	2200      	movs	r2, #0
 80170c0:	f042 0201 	orr.w	r2, r2, #1
 80170c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	2200      	movs	r2, #0
 80170ca:	f042 0208 	orr.w	r2, r2, #8
 80170ce:	709a      	strb	r2, [r3, #2]
 80170d0:	2200      	movs	r2, #0
 80170d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	2206      	movs	r2, #6
 80170d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	2204      	movs	r2, #4
 80170de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80170e0:	f640 0306 	movw	r3, #2054	@ 0x806
 80170e4:	9300      	str	r3, [sp, #0]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	68ba      	ldr	r2, [r7, #8]
 80170ea:	69b9      	ldr	r1, [r7, #24]
 80170ec:	68f8      	ldr	r0, [r7, #12]
 80170ee:	f001 fb99 	bl	8018824 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80170f2:	69b8      	ldr	r0, [r7, #24]
 80170f4:	f7f5 ffb4 	bl	800d060 <pbuf_free>
  p = NULL;
 80170f8:	2300      	movs	r3, #0
 80170fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80170fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017100:	4618      	mov	r0, r3
 8017102:	3720      	adds	r7, #32
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}
 8017108:	0801d838 	.word	0x0801d838
 801710c:	0801d988 	.word	0x0801d988
 8017110:	0801d8b0 	.word	0x0801d8b0
 8017114:	0801da38 	.word	0x0801da38
 8017118:	0801da6c 	.word	0x0801da6c

0801711c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b088      	sub	sp, #32
 8017120:	af04      	add	r7, sp, #16
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	60b9      	str	r1, [r7, #8]
 8017126:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017138:	2201      	movs	r2, #1
 801713a:	9203      	str	r2, [sp, #12]
 801713c:	68ba      	ldr	r2, [r7, #8]
 801713e:	9202      	str	r2, [sp, #8]
 8017140:	4a06      	ldr	r2, [pc, #24]	@ (801715c <etharp_request_dst+0x40>)
 8017142:	9201      	str	r2, [sp, #4]
 8017144:	9300      	str	r3, [sp, #0]
 8017146:	4603      	mov	r3, r0
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	68f8      	ldr	r0, [r7, #12]
 801714c:	f7ff ff5a 	bl	8017004 <etharp_raw>
 8017150:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017152:	4618      	mov	r0, r3
 8017154:	3710      	adds	r7, #16
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	0802818c 	.word	0x0802818c

08017160 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801716a:	4a05      	ldr	r2, [pc, #20]	@ (8017180 <etharp_request+0x20>)
 801716c:	6839      	ldr	r1, [r7, #0]
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f7ff ffd4 	bl	801711c <etharp_request_dst>
 8017174:	4603      	mov	r3, r0
}
 8017176:	4618      	mov	r0, r3
 8017178:	3708      	adds	r7, #8
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}
 801717e:	bf00      	nop
 8017180:	08028184 	.word	0x08028184

08017184 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b08e      	sub	sp, #56	@ 0x38
 8017188:	af04      	add	r7, sp, #16
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801718e:	4b79      	ldr	r3, [pc, #484]	@ (8017374 <icmp_input+0x1f0>)
 8017190:	689b      	ldr	r3, [r3, #8]
 8017192:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	f003 030f 	and.w	r3, r3, #15
 801719c:	b2db      	uxtb	r3, r3
 801719e:	009b      	lsls	r3, r3, #2
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80171a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80171a6:	2b13      	cmp	r3, #19
 80171a8:	f240 80cd 	bls.w	8017346 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	895b      	ldrh	r3, [r3, #10]
 80171b0:	2b03      	cmp	r3, #3
 80171b2:	f240 80ca 	bls.w	801734a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	781b      	ldrb	r3, [r3, #0]
 80171bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80171c0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	f000 80b7 	beq.w	8017338 <icmp_input+0x1b4>
 80171ca:	2b08      	cmp	r3, #8
 80171cc:	f040 80b7 	bne.w	801733e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80171d0:	4b69      	ldr	r3, [pc, #420]	@ (8017378 <icmp_input+0x1f4>)
 80171d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80171d4:	4b67      	ldr	r3, [pc, #412]	@ (8017374 <icmp_input+0x1f0>)
 80171d6:	695b      	ldr	r3, [r3, #20]
 80171d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80171dc:	2be0      	cmp	r3, #224	@ 0xe0
 80171de:	f000 80bb 	beq.w	8017358 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80171e2:	4b64      	ldr	r3, [pc, #400]	@ (8017374 <icmp_input+0x1f0>)
 80171e4:	695b      	ldr	r3, [r3, #20]
 80171e6:	4a63      	ldr	r2, [pc, #396]	@ (8017374 <icmp_input+0x1f0>)
 80171e8:	6812      	ldr	r2, [r2, #0]
 80171ea:	4611      	mov	r1, r2
 80171ec:	4618      	mov	r0, r3
 80171ee:	f000 fc0b 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 80171f2:	4603      	mov	r3, r0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	f040 80b1 	bne.w	801735c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	891b      	ldrh	r3, [r3, #8]
 80171fe:	2b07      	cmp	r3, #7
 8017200:	f240 80a5 	bls.w	801734e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017204:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017206:	330e      	adds	r3, #14
 8017208:	4619      	mov	r1, r3
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f7f5 fe92 	bl	800cf34 <pbuf_add_header>
 8017210:	4603      	mov	r3, r0
 8017212:	2b00      	cmp	r3, #0
 8017214:	d04b      	beq.n	80172ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	891a      	ldrh	r2, [r3, #8]
 801721a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801721c:	4413      	add	r3, r2
 801721e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	891b      	ldrh	r3, [r3, #8]
 8017224:	8b7a      	ldrh	r2, [r7, #26]
 8017226:	429a      	cmp	r2, r3
 8017228:	f0c0 809a 	bcc.w	8017360 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801722c:	8b7b      	ldrh	r3, [r7, #26]
 801722e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017232:	4619      	mov	r1, r3
 8017234:	200e      	movs	r0, #14
 8017236:	f7f5 fc2f 	bl	800ca98 <pbuf_alloc>
 801723a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	2b00      	cmp	r3, #0
 8017240:	f000 8090 	beq.w	8017364 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	895b      	ldrh	r3, [r3, #10]
 8017248:	461a      	mov	r2, r3
 801724a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801724c:	3308      	adds	r3, #8
 801724e:	429a      	cmp	r2, r3
 8017250:	d203      	bcs.n	801725a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017252:	6978      	ldr	r0, [r7, #20]
 8017254:	f7f5 ff04 	bl	800d060 <pbuf_free>
          goto icmperr;
 8017258:	e085      	b.n	8017366 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017260:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017262:	4618      	mov	r0, r3
 8017264:	f002 f837 	bl	80192d6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017268:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801726a:	4619      	mov	r1, r3
 801726c:	6978      	ldr	r0, [r7, #20]
 801726e:	f7f5 fe71 	bl	800cf54 <pbuf_remove_header>
 8017272:	4603      	mov	r3, r0
 8017274:	2b00      	cmp	r3, #0
 8017276:	d009      	beq.n	801728c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017278:	4b40      	ldr	r3, [pc, #256]	@ (801737c <icmp_input+0x1f8>)
 801727a:	22b6      	movs	r2, #182	@ 0xb6
 801727c:	4940      	ldr	r1, [pc, #256]	@ (8017380 <icmp_input+0x1fc>)
 801727e:	4841      	ldr	r0, [pc, #260]	@ (8017384 <icmp_input+0x200>)
 8017280:	f001 fe28 	bl	8018ed4 <iprintf>
          pbuf_free(r);
 8017284:	6978      	ldr	r0, [r7, #20]
 8017286:	f7f5 feeb 	bl	800d060 <pbuf_free>
          goto icmperr;
 801728a:	e06c      	b.n	8017366 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	6978      	ldr	r0, [r7, #20]
 8017290:	f7f6 f81a 	bl	800d2c8 <pbuf_copy>
 8017294:	4603      	mov	r3, r0
 8017296:	2b00      	cmp	r3, #0
 8017298:	d003      	beq.n	80172a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801729a:	6978      	ldr	r0, [r7, #20]
 801729c:	f7f5 fee0 	bl	800d060 <pbuf_free>
          goto icmperr;
 80172a0:	e061      	b.n	8017366 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7f5 fedc 	bl	800d060 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	607b      	str	r3, [r7, #4]
 80172ac:	e00f      	b.n	80172ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80172ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80172b0:	330e      	adds	r3, #14
 80172b2:	4619      	mov	r1, r3
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f7f5 fe4d 	bl	800cf54 <pbuf_remove_header>
 80172ba:	4603      	mov	r3, r0
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d006      	beq.n	80172ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80172c0:	4b2e      	ldr	r3, [pc, #184]	@ (801737c <icmp_input+0x1f8>)
 80172c2:	22c7      	movs	r2, #199	@ 0xc7
 80172c4:	4930      	ldr	r1, [pc, #192]	@ (8017388 <icmp_input+0x204>)
 80172c6:	482f      	ldr	r0, [pc, #188]	@ (8017384 <icmp_input+0x200>)
 80172c8:	f001 fe04 	bl	8018ed4 <iprintf>
          goto icmperr;
 80172cc:	e04b      	b.n	8017366 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	685b      	ldr	r3, [r3, #4]
 80172d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80172d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80172d6:	4619      	mov	r1, r3
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f7f5 fe2b 	bl	800cf34 <pbuf_add_header>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d12b      	bne.n	801733c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80172ea:	69fb      	ldr	r3, [r7, #28]
 80172ec:	681a      	ldr	r2, [r3, #0]
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80172f2:	4b20      	ldr	r3, [pc, #128]	@ (8017374 <icmp_input+0x1f0>)
 80172f4:	691a      	ldr	r2, [r3, #16]
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	2200      	movs	r2, #0
 80172fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	2200      	movs	r2, #0
 8017304:	709a      	strb	r2, [r3, #2]
 8017306:	2200      	movs	r2, #0
 8017308:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	22ff      	movs	r2, #255	@ 0xff
 801730e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	2200      	movs	r2, #0
 8017314:	729a      	strb	r2, [r3, #10]
 8017316:	2200      	movs	r2, #0
 8017318:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	9302      	str	r3, [sp, #8]
 801731e:	2301      	movs	r3, #1
 8017320:	9301      	str	r3, [sp, #4]
 8017322:	2300      	movs	r3, #0
 8017324:	9300      	str	r3, [sp, #0]
 8017326:	23ff      	movs	r3, #255	@ 0xff
 8017328:	2200      	movs	r2, #0
 801732a:	69f9      	ldr	r1, [r7, #28]
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f000 fa93 	bl	8017858 <ip4_output_if>
 8017332:	4603      	mov	r3, r0
 8017334:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017336:	e001      	b.n	801733c <icmp_input+0x1b8>
      break;
 8017338:	bf00      	nop
 801733a:	e000      	b.n	801733e <icmp_input+0x1ba>
      break;
 801733c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f7f5 fe8e 	bl	800d060 <pbuf_free>
  return;
 8017344:	e013      	b.n	801736e <icmp_input+0x1ea>
    goto lenerr;
 8017346:	bf00      	nop
 8017348:	e002      	b.n	8017350 <icmp_input+0x1cc>
    goto lenerr;
 801734a:	bf00      	nop
 801734c:	e000      	b.n	8017350 <icmp_input+0x1cc>
        goto lenerr;
 801734e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017350:	6878      	ldr	r0, [r7, #4]
 8017352:	f7f5 fe85 	bl	800d060 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017356:	e00a      	b.n	801736e <icmp_input+0x1ea>
        goto icmperr;
 8017358:	bf00      	nop
 801735a:	e004      	b.n	8017366 <icmp_input+0x1e2>
        goto icmperr;
 801735c:	bf00      	nop
 801735e:	e002      	b.n	8017366 <icmp_input+0x1e2>
          goto icmperr;
 8017360:	bf00      	nop
 8017362:	e000      	b.n	8017366 <icmp_input+0x1e2>
          goto icmperr;
 8017364:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f5 fe7a 	bl	800d060 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801736c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801736e:	3728      	adds	r7, #40	@ 0x28
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	2000d800 	.word	0x2000d800
 8017378:	2000d814 	.word	0x2000d814
 801737c:	0801dab0 	.word	0x0801dab0
 8017380:	0801dae8 	.word	0x0801dae8
 8017384:	0801db20 	.word	0x0801db20
 8017388:	0801db48 	.word	0x0801db48

0801738c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b082      	sub	sp, #8
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
 8017394:	460b      	mov	r3, r1
 8017396:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017398:	78fb      	ldrb	r3, [r7, #3]
 801739a:	461a      	mov	r2, r3
 801739c:	2103      	movs	r1, #3
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f000 f814 	bl	80173cc <icmp_send_response>
}
 80173a4:	bf00      	nop
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}

080173ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
 80173b4:	460b      	mov	r3, r1
 80173b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80173b8:	78fb      	ldrb	r3, [r7, #3]
 80173ba:	461a      	mov	r2, r3
 80173bc:	210b      	movs	r1, #11
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f000 f804 	bl	80173cc <icmp_send_response>
}
 80173c4:	bf00      	nop
 80173c6:	3708      	adds	r7, #8
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b08c      	sub	sp, #48	@ 0x30
 80173d0:	af04      	add	r7, sp, #16
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	460b      	mov	r3, r1
 80173d6:	70fb      	strb	r3, [r7, #3]
 80173d8:	4613      	mov	r3, r2
 80173da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80173dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80173e0:	2124      	movs	r1, #36	@ 0x24
 80173e2:	2022      	movs	r0, #34	@ 0x22
 80173e4:	f7f5 fb58 	bl	800ca98 <pbuf_alloc>
 80173e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80173ea:	69fb      	ldr	r3, [r7, #28]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d04c      	beq.n	801748a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	895b      	ldrh	r3, [r3, #10]
 80173f4:	2b23      	cmp	r3, #35	@ 0x23
 80173f6:	d806      	bhi.n	8017406 <icmp_send_response+0x3a>
 80173f8:	4b26      	ldr	r3, [pc, #152]	@ (8017494 <icmp_send_response+0xc8>)
 80173fa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80173fe:	4926      	ldr	r1, [pc, #152]	@ (8017498 <icmp_send_response+0xcc>)
 8017400:	4826      	ldr	r0, [pc, #152]	@ (801749c <icmp_send_response+0xd0>)
 8017402:	f001 fd67 	bl	8018ed4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	685b      	ldr	r3, [r3, #4]
 801740a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801740c:	69fb      	ldr	r3, [r7, #28]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	78fa      	ldrb	r2, [r7, #3]
 8017416:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	78ba      	ldrb	r2, [r7, #2]
 801741c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	2200      	movs	r2, #0
 8017422:	711a      	strb	r2, [r3, #4]
 8017424:	2200      	movs	r2, #0
 8017426:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	2200      	movs	r2, #0
 801742c:	719a      	strb	r2, [r3, #6]
 801742e:	2200      	movs	r2, #0
 8017430:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017432:	69fb      	ldr	r3, [r7, #28]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	f103 0008 	add.w	r0, r3, #8
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	221c      	movs	r2, #28
 8017440:	4619      	mov	r1, r3
 8017442:	f001 ff48 	bl	80192d6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017446:	69bb      	ldr	r3, [r7, #24]
 8017448:	68db      	ldr	r3, [r3, #12]
 801744a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801744c:	f107 030c 	add.w	r3, r7, #12
 8017450:	4618      	mov	r0, r3
 8017452:	f000 f825 	bl	80174a0 <ip4_route>
 8017456:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d011      	beq.n	8017482 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	2200      	movs	r2, #0
 8017462:	709a      	strb	r2, [r3, #2]
 8017464:	2200      	movs	r2, #0
 8017466:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017468:	f107 020c 	add.w	r2, r7, #12
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	9302      	str	r3, [sp, #8]
 8017470:	2301      	movs	r3, #1
 8017472:	9301      	str	r3, [sp, #4]
 8017474:	2300      	movs	r3, #0
 8017476:	9300      	str	r3, [sp, #0]
 8017478:	23ff      	movs	r3, #255	@ 0xff
 801747a:	2100      	movs	r1, #0
 801747c:	69f8      	ldr	r0, [r7, #28]
 801747e:	f000 f9eb 	bl	8017858 <ip4_output_if>
  }
  pbuf_free(q);
 8017482:	69f8      	ldr	r0, [r7, #28]
 8017484:	f7f5 fdec 	bl	800d060 <pbuf_free>
 8017488:	e000      	b.n	801748c <icmp_send_response+0xc0>
    return;
 801748a:	bf00      	nop
}
 801748c:	3720      	adds	r7, #32
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	0801dab0 	.word	0x0801dab0
 8017498:	0801db7c 	.word	0x0801db7c
 801749c:	0801db20 	.word	0x0801db20

080174a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80174a0:	b480      	push	{r7}
 80174a2:	b085      	sub	sp, #20
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80174a8:	4b33      	ldr	r3, [pc, #204]	@ (8017578 <ip4_route+0xd8>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	60fb      	str	r3, [r7, #12]
 80174ae:	e036      	b.n	801751e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80174b6:	f003 0301 	and.w	r3, r3, #1
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d02b      	beq.n	8017518 <ip4_route+0x78>
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80174c6:	089b      	lsrs	r3, r3, #2
 80174c8:	f003 0301 	and.w	r3, r3, #1
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d022      	beq.n	8017518 <ip4_route+0x78>
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	3304      	adds	r3, #4
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d01d      	beq.n	8017518 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681a      	ldr	r2, [r3, #0]
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	3304      	adds	r3, #4
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	405a      	eors	r2, r3
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	3308      	adds	r3, #8
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	4013      	ands	r3, r2
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d101      	bne.n	80174f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	e038      	b.n	801756a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80174fe:	f003 0302 	and.w	r3, r3, #2
 8017502:	2b00      	cmp	r3, #0
 8017504:	d108      	bne.n	8017518 <ip4_route+0x78>
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	330c      	adds	r3, #12
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	429a      	cmp	r2, r3
 8017512:	d101      	bne.n	8017518 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	e028      	b.n	801756a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	60fb      	str	r3, [r7, #12]
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d1c5      	bne.n	80174b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017524:	4b15      	ldr	r3, [pc, #84]	@ (801757c <ip4_route+0xdc>)
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d01a      	beq.n	8017562 <ip4_route+0xc2>
 801752c:	4b13      	ldr	r3, [pc, #76]	@ (801757c <ip4_route+0xdc>)
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017534:	f003 0301 	and.w	r3, r3, #1
 8017538:	2b00      	cmp	r3, #0
 801753a:	d012      	beq.n	8017562 <ip4_route+0xc2>
 801753c:	4b0f      	ldr	r3, [pc, #60]	@ (801757c <ip4_route+0xdc>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017544:	f003 0304 	and.w	r3, r3, #4
 8017548:	2b00      	cmp	r3, #0
 801754a:	d00a      	beq.n	8017562 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801754c:	4b0b      	ldr	r3, [pc, #44]	@ (801757c <ip4_route+0xdc>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	3304      	adds	r3, #4
 8017552:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017554:	2b00      	cmp	r3, #0
 8017556:	d004      	beq.n	8017562 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	b2db      	uxtb	r3, r3
 801755e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017560:	d101      	bne.n	8017566 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017562:	2300      	movs	r3, #0
 8017564:	e001      	b.n	801756a <ip4_route+0xca>
  }

  return netif_default;
 8017566:	4b05      	ldr	r3, [pc, #20]	@ (801757c <ip4_route+0xdc>)
 8017568:	681b      	ldr	r3, [r3, #0]
}
 801756a:	4618      	mov	r0, r3
 801756c:	3714      	adds	r7, #20
 801756e:	46bd      	mov	sp, r7
 8017570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop
 8017578:	20010f68 	.word	0x20010f68
 801757c:	20010f6c 	.word	0x20010f6c

08017580 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b082      	sub	sp, #8
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801758e:	f003 0301 	and.w	r3, r3, #1
 8017592:	b2db      	uxtb	r3, r3
 8017594:	2b00      	cmp	r3, #0
 8017596:	d016      	beq.n	80175c6 <ip4_input_accept+0x46>
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	3304      	adds	r3, #4
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d011      	beq.n	80175c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175a2:	4b0b      	ldr	r3, [pc, #44]	@ (80175d0 <ip4_input_accept+0x50>)
 80175a4:	695a      	ldr	r2, [r3, #20]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	3304      	adds	r3, #4
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d008      	beq.n	80175c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80175b0:	4b07      	ldr	r3, [pc, #28]	@ (80175d0 <ip4_input_accept+0x50>)
 80175b2:	695b      	ldr	r3, [r3, #20]
 80175b4:	6879      	ldr	r1, [r7, #4]
 80175b6:	4618      	mov	r0, r3
 80175b8:	f000 fa26 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 80175bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d001      	beq.n	80175c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80175c2:	2301      	movs	r3, #1
 80175c4:	e000      	b.n	80175c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80175c6:	2300      	movs	r3, #0
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3708      	adds	r7, #8
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	2000d800 	.word	0x2000d800

080175d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b088      	sub	sp, #32
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80175de:	2301      	movs	r3, #1
 80175e0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	685b      	ldr	r3, [r3, #4]
 80175e6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	091b      	lsrs	r3, r3, #4
 80175ee:	b2db      	uxtb	r3, r3
 80175f0:	2b04      	cmp	r3, #4
 80175f2:	d004      	beq.n	80175fe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f7f5 fd33 	bl	800d060 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80175fa:	2300      	movs	r3, #0
 80175fc:	e123      	b.n	8017846 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80175fe:	69fb      	ldr	r3, [r7, #28]
 8017600:	781b      	ldrb	r3, [r3, #0]
 8017602:	f003 030f 	and.w	r3, r3, #15
 8017606:	b2db      	uxtb	r3, r3
 8017608:	009b      	lsls	r3, r3, #2
 801760a:	b2db      	uxtb	r3, r3
 801760c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	885b      	ldrh	r3, [r3, #2]
 8017612:	b29b      	uxth	r3, r3
 8017614:	4618      	mov	r0, r3
 8017616:	f7f4 f8ef 	bl	800b7f8 <lwip_htons>
 801761a:	4603      	mov	r3, r0
 801761c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	891b      	ldrh	r3, [r3, #8]
 8017622:	8a3a      	ldrh	r2, [r7, #16]
 8017624:	429a      	cmp	r2, r3
 8017626:	d204      	bcs.n	8017632 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017628:	8a3b      	ldrh	r3, [r7, #16]
 801762a:	4619      	mov	r1, r3
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f7f5 fb91 	bl	800cd54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	895b      	ldrh	r3, [r3, #10]
 8017636:	8a7a      	ldrh	r2, [r7, #18]
 8017638:	429a      	cmp	r2, r3
 801763a:	d807      	bhi.n	801764c <ip4_input+0x78>
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	891b      	ldrh	r3, [r3, #8]
 8017640:	8a3a      	ldrh	r2, [r7, #16]
 8017642:	429a      	cmp	r2, r3
 8017644:	d802      	bhi.n	801764c <ip4_input+0x78>
 8017646:	8a7b      	ldrh	r3, [r7, #18]
 8017648:	2b13      	cmp	r3, #19
 801764a:	d804      	bhi.n	8017656 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7f5 fd07 	bl	800d060 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017652:	2300      	movs	r3, #0
 8017654:	e0f7      	b.n	8017846 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017656:	69fb      	ldr	r3, [r7, #28]
 8017658:	691b      	ldr	r3, [r3, #16]
 801765a:	4a7d      	ldr	r2, [pc, #500]	@ (8017850 <ip4_input+0x27c>)
 801765c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801765e:	69fb      	ldr	r3, [r7, #28]
 8017660:	68db      	ldr	r3, [r3, #12]
 8017662:	4a7b      	ldr	r2, [pc, #492]	@ (8017850 <ip4_input+0x27c>)
 8017664:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017666:	4b7a      	ldr	r3, [pc, #488]	@ (8017850 <ip4_input+0x27c>)
 8017668:	695b      	ldr	r3, [r3, #20]
 801766a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801766e:	2be0      	cmp	r3, #224	@ 0xe0
 8017670:	d112      	bne.n	8017698 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017678:	f003 0301 	and.w	r3, r3, #1
 801767c:	b2db      	uxtb	r3, r3
 801767e:	2b00      	cmp	r3, #0
 8017680:	d007      	beq.n	8017692 <ip4_input+0xbe>
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	3304      	adds	r3, #4
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d002      	beq.n	8017692 <ip4_input+0xbe>
      netif = inp;
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	61bb      	str	r3, [r7, #24]
 8017690:	e02a      	b.n	80176e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017692:	2300      	movs	r3, #0
 8017694:	61bb      	str	r3, [r7, #24]
 8017696:	e027      	b.n	80176e8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017698:	6838      	ldr	r0, [r7, #0]
 801769a:	f7ff ff71 	bl	8017580 <ip4_input_accept>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d002      	beq.n	80176aa <ip4_input+0xd6>
      netif = inp;
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	61bb      	str	r3, [r7, #24]
 80176a8:	e01e      	b.n	80176e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 80176aa:	2300      	movs	r3, #0
 80176ac:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80176ae:	4b68      	ldr	r3, [pc, #416]	@ (8017850 <ip4_input+0x27c>)
 80176b0:	695b      	ldr	r3, [r3, #20]
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80176b6:	d017      	beq.n	80176e8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80176b8:	4b66      	ldr	r3, [pc, #408]	@ (8017854 <ip4_input+0x280>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	61bb      	str	r3, [r7, #24]
 80176be:	e00e      	b.n	80176de <ip4_input+0x10a>
          if (netif == inp) {
 80176c0:	69ba      	ldr	r2, [r7, #24]
 80176c2:	683b      	ldr	r3, [r7, #0]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d006      	beq.n	80176d6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80176c8:	69b8      	ldr	r0, [r7, #24]
 80176ca:	f7ff ff59 	bl	8017580 <ip4_input_accept>
 80176ce:	4603      	mov	r3, r0
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d108      	bne.n	80176e6 <ip4_input+0x112>
 80176d4:	e000      	b.n	80176d8 <ip4_input+0x104>
            continue;
 80176d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80176d8:	69bb      	ldr	r3, [r7, #24]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	61bb      	str	r3, [r7, #24]
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d1ed      	bne.n	80176c0 <ip4_input+0xec>
 80176e4:	e000      	b.n	80176e8 <ip4_input+0x114>
            break;
 80176e6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80176e8:	69bb      	ldr	r3, [r7, #24]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d111      	bne.n	8017712 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80176ee:	69fb      	ldr	r3, [r7, #28]
 80176f0:	7a5b      	ldrb	r3, [r3, #9]
 80176f2:	2b11      	cmp	r3, #17
 80176f4:	d10d      	bne.n	8017712 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80176f6:	8a7b      	ldrh	r3, [r7, #18]
 80176f8:	69fa      	ldr	r2, [r7, #28]
 80176fa:	4413      	add	r3, r2
 80176fc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	885b      	ldrh	r3, [r3, #2]
 8017702:	b29b      	uxth	r3, r3
 8017704:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8017708:	d103      	bne.n	8017712 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801770a:	683b      	ldr	r3, [r7, #0]
 801770c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801770e:	2300      	movs	r3, #0
 8017710:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017712:	697b      	ldr	r3, [r7, #20]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d017      	beq.n	8017748 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017718:	4b4d      	ldr	r3, [pc, #308]	@ (8017850 <ip4_input+0x27c>)
 801771a:	691b      	ldr	r3, [r3, #16]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d013      	beq.n	8017748 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017720:	4b4b      	ldr	r3, [pc, #300]	@ (8017850 <ip4_input+0x27c>)
 8017722:	691b      	ldr	r3, [r3, #16]
 8017724:	6839      	ldr	r1, [r7, #0]
 8017726:	4618      	mov	r0, r3
 8017728:	f000 f96e 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d105      	bne.n	801773e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017732:	4b47      	ldr	r3, [pc, #284]	@ (8017850 <ip4_input+0x27c>)
 8017734:	691b      	ldr	r3, [r3, #16]
 8017736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801773a:	2be0      	cmp	r3, #224	@ 0xe0
 801773c:	d104      	bne.n	8017748 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7f5 fc8e 	bl	800d060 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017744:	2300      	movs	r3, #0
 8017746:	e07e      	b.n	8017846 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017748:	69bb      	ldr	r3, [r7, #24]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d104      	bne.n	8017758 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801774e:	6878      	ldr	r0, [r7, #4]
 8017750:	f7f5 fc86 	bl	800d060 <pbuf_free>
    return ERR_OK;
 8017754:	2300      	movs	r3, #0
 8017756:	e076      	b.n	8017846 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017758:	69fb      	ldr	r3, [r7, #28]
 801775a:	88db      	ldrh	r3, [r3, #6]
 801775c:	b29b      	uxth	r3, r3
 801775e:	461a      	mov	r2, r3
 8017760:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017764:	4013      	ands	r3, r2
 8017766:	2b00      	cmp	r3, #0
 8017768:	d00b      	beq.n	8017782 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f000 fc92 	bl	8018094 <ip4_reass>
 8017770:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d101      	bne.n	801777c <ip4_input+0x1a8>
      return ERR_OK;
 8017778:	2300      	movs	r3, #0
 801777a:	e064      	b.n	8017846 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017782:	4a33      	ldr	r2, [pc, #204]	@ (8017850 <ip4_input+0x27c>)
 8017784:	69bb      	ldr	r3, [r7, #24]
 8017786:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017788:	4a31      	ldr	r2, [pc, #196]	@ (8017850 <ip4_input+0x27c>)
 801778a:	683b      	ldr	r3, [r7, #0]
 801778c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801778e:	4a30      	ldr	r2, [pc, #192]	@ (8017850 <ip4_input+0x27c>)
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017794:	69fb      	ldr	r3, [r7, #28]
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	f003 030f 	and.w	r3, r3, #15
 801779c:	b2db      	uxtb	r3, r3
 801779e:	009b      	lsls	r3, r3, #2
 80177a0:	b2db      	uxtb	r3, r3
 80177a2:	461a      	mov	r2, r3
 80177a4:	4b2a      	ldr	r3, [pc, #168]	@ (8017850 <ip4_input+0x27c>)
 80177a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80177a8:	8a7b      	ldrh	r3, [r7, #18]
 80177aa:	4619      	mov	r1, r3
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	f7f5 fbd1 	bl	800cf54 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	7a5b      	ldrb	r3, [r3, #9]
 80177b6:	2b11      	cmp	r3, #17
 80177b8:	d006      	beq.n	80177c8 <ip4_input+0x1f4>
 80177ba:	2b11      	cmp	r3, #17
 80177bc:	dc13      	bgt.n	80177e6 <ip4_input+0x212>
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d00c      	beq.n	80177dc <ip4_input+0x208>
 80177c2:	2b06      	cmp	r3, #6
 80177c4:	d005      	beq.n	80177d2 <ip4_input+0x1fe>
 80177c6:	e00e      	b.n	80177e6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80177c8:	6839      	ldr	r1, [r7, #0]
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f7fc fae4 	bl	8013d98 <udp_input>
        break;
 80177d0:	e026      	b.n	8017820 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80177d2:	6839      	ldr	r1, [r7, #0]
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7f7 fea3 	bl	800f520 <tcp_input>
        break;
 80177da:	e021      	b.n	8017820 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80177dc:	6839      	ldr	r1, [r7, #0]
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f7ff fcd0 	bl	8017184 <icmp_input>
        break;
 80177e4:	e01c      	b.n	8017820 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80177e6:	4b1a      	ldr	r3, [pc, #104]	@ (8017850 <ip4_input+0x27c>)
 80177e8:	695b      	ldr	r3, [r3, #20]
 80177ea:	69b9      	ldr	r1, [r7, #24]
 80177ec:	4618      	mov	r0, r3
 80177ee:	f000 f90b 	bl	8017a08 <ip4_addr_isbroadcast_u32>
 80177f2:	4603      	mov	r3, r0
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d10f      	bne.n	8017818 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177f8:	4b15      	ldr	r3, [pc, #84]	@ (8017850 <ip4_input+0x27c>)
 80177fa:	695b      	ldr	r3, [r3, #20]
 80177fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017800:	2be0      	cmp	r3, #224	@ 0xe0
 8017802:	d009      	beq.n	8017818 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017808:	4619      	mov	r1, r3
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f7f5 fc15 	bl	800d03a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017810:	2102      	movs	r1, #2
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f7ff fdba 	bl	801738c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f7f5 fc21 	bl	800d060 <pbuf_free>
        break;
 801781e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017820:	4b0b      	ldr	r3, [pc, #44]	@ (8017850 <ip4_input+0x27c>)
 8017822:	2200      	movs	r2, #0
 8017824:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017826:	4b0a      	ldr	r3, [pc, #40]	@ (8017850 <ip4_input+0x27c>)
 8017828:	2200      	movs	r2, #0
 801782a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801782c:	4b08      	ldr	r3, [pc, #32]	@ (8017850 <ip4_input+0x27c>)
 801782e:	2200      	movs	r2, #0
 8017830:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017832:	4b07      	ldr	r3, [pc, #28]	@ (8017850 <ip4_input+0x27c>)
 8017834:	2200      	movs	r2, #0
 8017836:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017838:	4b05      	ldr	r3, [pc, #20]	@ (8017850 <ip4_input+0x27c>)
 801783a:	2200      	movs	r2, #0
 801783c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801783e:	4b04      	ldr	r3, [pc, #16]	@ (8017850 <ip4_input+0x27c>)
 8017840:	2200      	movs	r2, #0
 8017842:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017844:	2300      	movs	r3, #0
}
 8017846:	4618      	mov	r0, r3
 8017848:	3720      	adds	r7, #32
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}
 801784e:	bf00      	nop
 8017850:	2000d800 	.word	0x2000d800
 8017854:	20010f68 	.word	0x20010f68

08017858 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b08a      	sub	sp, #40	@ 0x28
 801785c:	af04      	add	r7, sp, #16
 801785e:	60f8      	str	r0, [r7, #12]
 8017860:	60b9      	str	r1, [r7, #8]
 8017862:	607a      	str	r2, [r7, #4]
 8017864:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d009      	beq.n	8017884 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017870:	68bb      	ldr	r3, [r7, #8]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d003      	beq.n	801787e <ip4_output_if+0x26>
 8017876:	68bb      	ldr	r3, [r7, #8]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d102      	bne.n	8017884 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017880:	3304      	adds	r3, #4
 8017882:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017884:	78fa      	ldrb	r2, [r7, #3]
 8017886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017888:	9302      	str	r3, [sp, #8]
 801788a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801788e:	9301      	str	r3, [sp, #4]
 8017890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017894:	9300      	str	r3, [sp, #0]
 8017896:	4613      	mov	r3, r2
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	6979      	ldr	r1, [r7, #20]
 801789c:	68f8      	ldr	r0, [r7, #12]
 801789e:	f000 f805 	bl	80178ac <ip4_output_if_src>
 80178a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3718      	adds	r7, #24
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}

080178ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b088      	sub	sp, #32
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	607a      	str	r2, [r7, #4]
 80178b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	7b9b      	ldrb	r3, [r3, #14]
 80178be:	2b01      	cmp	r3, #1
 80178c0:	d006      	beq.n	80178d0 <ip4_output_if_src+0x24>
 80178c2:	4b4b      	ldr	r3, [pc, #300]	@ (80179f0 <ip4_output_if_src+0x144>)
 80178c4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80178c8:	494a      	ldr	r1, [pc, #296]	@ (80179f4 <ip4_output_if_src+0x148>)
 80178ca:	484b      	ldr	r0, [pc, #300]	@ (80179f8 <ip4_output_if_src+0x14c>)
 80178cc:	f001 fb02 	bl	8018ed4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d060      	beq.n	8017998 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80178d6:	2314      	movs	r3, #20
 80178d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80178da:	2114      	movs	r1, #20
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f7f5 fb29 	bl	800cf34 <pbuf_add_header>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d002      	beq.n	80178ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80178e8:	f06f 0301 	mvn.w	r3, #1
 80178ec:	e07c      	b.n	80179e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	895b      	ldrh	r3, [r3, #10]
 80178f8:	2b13      	cmp	r3, #19
 80178fa:	d806      	bhi.n	801790a <ip4_output_if_src+0x5e>
 80178fc:	4b3c      	ldr	r3, [pc, #240]	@ (80179f0 <ip4_output_if_src+0x144>)
 80178fe:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017902:	493e      	ldr	r1, [pc, #248]	@ (80179fc <ip4_output_if_src+0x150>)
 8017904:	483c      	ldr	r0, [pc, #240]	@ (80179f8 <ip4_output_if_src+0x14c>)
 8017906:	f001 fae5 	bl	8018ed4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801790a:	69fb      	ldr	r3, [r7, #28]
 801790c:	78fa      	ldrb	r2, [r7, #3]
 801790e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017910:	69fb      	ldr	r3, [r7, #28]
 8017912:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017916:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681a      	ldr	r2, [r3, #0]
 801791c:	69fb      	ldr	r3, [r7, #28]
 801791e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017920:	8b7b      	ldrh	r3, [r7, #26]
 8017922:	089b      	lsrs	r3, r3, #2
 8017924:	b29b      	uxth	r3, r3
 8017926:	b2db      	uxtb	r3, r3
 8017928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801792c:	b2da      	uxtb	r2, r3
 801792e:	69fb      	ldr	r3, [r7, #28]
 8017930:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017932:	69fb      	ldr	r3, [r7, #28]
 8017934:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017938:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	891b      	ldrh	r3, [r3, #8]
 801793e:	4618      	mov	r0, r3
 8017940:	f7f3 ff5a 	bl	800b7f8 <lwip_htons>
 8017944:	4603      	mov	r3, r0
 8017946:	461a      	mov	r2, r3
 8017948:	69fb      	ldr	r3, [r7, #28]
 801794a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	2200      	movs	r2, #0
 8017950:	719a      	strb	r2, [r3, #6]
 8017952:	2200      	movs	r2, #0
 8017954:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017956:	4b2a      	ldr	r3, [pc, #168]	@ (8017a00 <ip4_output_if_src+0x154>)
 8017958:	881b      	ldrh	r3, [r3, #0]
 801795a:	4618      	mov	r0, r3
 801795c:	f7f3 ff4c 	bl	800b7f8 <lwip_htons>
 8017960:	4603      	mov	r3, r0
 8017962:	461a      	mov	r2, r3
 8017964:	69fb      	ldr	r3, [r7, #28]
 8017966:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017968:	4b25      	ldr	r3, [pc, #148]	@ (8017a00 <ip4_output_if_src+0x154>)
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	3301      	adds	r3, #1
 801796e:	b29a      	uxth	r2, r3
 8017970:	4b23      	ldr	r3, [pc, #140]	@ (8017a00 <ip4_output_if_src+0x154>)
 8017972:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d104      	bne.n	8017984 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801797a:	4b22      	ldr	r3, [pc, #136]	@ (8017a04 <ip4_output_if_src+0x158>)
 801797c:	681a      	ldr	r2, [r3, #0]
 801797e:	69fb      	ldr	r3, [r7, #28]
 8017980:	60da      	str	r2, [r3, #12]
 8017982:	e003      	b.n	801798c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	681a      	ldr	r2, [r3, #0]
 8017988:	69fb      	ldr	r3, [r7, #28]
 801798a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	2200      	movs	r2, #0
 8017990:	729a      	strb	r2, [r3, #10]
 8017992:	2200      	movs	r2, #0
 8017994:	72da      	strb	r2, [r3, #11]
 8017996:	e00f      	b.n	80179b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	895b      	ldrh	r3, [r3, #10]
 801799c:	2b13      	cmp	r3, #19
 801799e:	d802      	bhi.n	80179a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179a0:	f06f 0301 	mvn.w	r3, #1
 80179a4:	e020      	b.n	80179e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80179ac:	69fb      	ldr	r3, [r7, #28]
 80179ae:	691b      	ldr	r3, [r3, #16]
 80179b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80179b2:	f107 0314 	add.w	r3, r7, #20
 80179b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80179b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d00c      	beq.n	80179da <ip4_output_if_src+0x12e>
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	891a      	ldrh	r2, [r3, #8]
 80179c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d906      	bls.n	80179da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80179cc:	687a      	ldr	r2, [r7, #4]
 80179ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80179d0:	68f8      	ldr	r0, [r7, #12]
 80179d2:	f000 fd53 	bl	801847c <ip4_frag>
 80179d6:	4603      	mov	r3, r0
 80179d8:	e006      	b.n	80179e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80179da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179dc:	695b      	ldr	r3, [r3, #20]
 80179de:	687a      	ldr	r2, [r7, #4]
 80179e0:	68f9      	ldr	r1, [r7, #12]
 80179e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80179e4:	4798      	blx	r3
 80179e6:	4603      	mov	r3, r0
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	3720      	adds	r7, #32
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}
 80179f0:	0801dba8 	.word	0x0801dba8
 80179f4:	0801dbdc 	.word	0x0801dbdc
 80179f8:	0801dbe8 	.word	0x0801dbe8
 80179fc:	0801dc10 	.word	0x0801dc10
 8017a00:	200110fa 	.word	0x200110fa
 8017a04:	0802817c 	.word	0x0802817c

08017a08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a1c:	d002      	beq.n	8017a24 <ip4_addr_isbroadcast_u32+0x1c>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d101      	bne.n	8017a28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017a24:	2301      	movs	r3, #1
 8017a26:	e02a      	b.n	8017a7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017a2e:	f003 0302 	and.w	r3, r3, #2
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d101      	bne.n	8017a3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	e021      	b.n	8017a7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	687a      	ldr	r2, [r7, #4]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d101      	bne.n	8017a4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017a46:	2300      	movs	r3, #0
 8017a48:	e019      	b.n	8017a7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017a4a:	68fa      	ldr	r2, [r7, #12]
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	3304      	adds	r3, #4
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	405a      	eors	r2, r3
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	3308      	adds	r3, #8
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	4013      	ands	r3, r2
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d10d      	bne.n	8017a7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	3308      	adds	r3, #8
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	43da      	mvns	r2, r3
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	3308      	adds	r3, #8
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d101      	bne.n	8017a7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017a78:	2301      	movs	r3, #1
 8017a7a:	e000      	b.n	8017a7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017a7c:	2300      	movs	r3, #0
  }
}
 8017a7e:	4618      	mov	r0, r3
 8017a80:	3714      	adds	r7, #20
 8017a82:	46bd      	mov	sp, r7
 8017a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a88:	4770      	bx	lr
	...

08017a8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b084      	sub	sp, #16
 8017a90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017a92:	2300      	movs	r3, #0
 8017a94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017a96:	4b12      	ldr	r3, [pc, #72]	@ (8017ae0 <ip_reass_tmr+0x54>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017a9c:	e018      	b.n	8017ad0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	7fdb      	ldrb	r3, [r3, #31]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d00b      	beq.n	8017abe <ip_reass_tmr+0x32>
      r->timer--;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	7fdb      	ldrb	r3, [r3, #31]
 8017aaa:	3b01      	subs	r3, #1
 8017aac:	b2da      	uxtb	r2, r3
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	60fb      	str	r3, [r7, #12]
 8017abc:	e008      	b.n	8017ad0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017ac8:	68b9      	ldr	r1, [r7, #8]
 8017aca:	6878      	ldr	r0, [r7, #4]
 8017acc:	f000 f80a 	bl	8017ae4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d1e3      	bne.n	8017a9e <ip_reass_tmr+0x12>
    }
  }
}
 8017ad6:	bf00      	nop
 8017ad8:	bf00      	nop
 8017ada:	3710      	adds	r7, #16
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	200110fc 	.word	0x200110fc

08017ae4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b088      	sub	sp, #32
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017aee:	2300      	movs	r3, #0
 8017af0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017af2:	683a      	ldr	r2, [r7, #0]
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	429a      	cmp	r2, r3
 8017af8:	d105      	bne.n	8017b06 <ip_reass_free_complete_datagram+0x22>
 8017afa:	4b45      	ldr	r3, [pc, #276]	@ (8017c10 <ip_reass_free_complete_datagram+0x12c>)
 8017afc:	22ab      	movs	r2, #171	@ 0xab
 8017afe:	4945      	ldr	r1, [pc, #276]	@ (8017c14 <ip_reass_free_complete_datagram+0x130>)
 8017b00:	4845      	ldr	r0, [pc, #276]	@ (8017c18 <ip_reass_free_complete_datagram+0x134>)
 8017b02:	f001 f9e7 	bl	8018ed4 <iprintf>
  if (prev != NULL) {
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d00a      	beq.n	8017b22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017b0c:	683b      	ldr	r3, [r7, #0]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	687a      	ldr	r2, [r7, #4]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d005      	beq.n	8017b22 <ip_reass_free_complete_datagram+0x3e>
 8017b16:	4b3e      	ldr	r3, [pc, #248]	@ (8017c10 <ip_reass_free_complete_datagram+0x12c>)
 8017b18:	22ad      	movs	r2, #173	@ 0xad
 8017b1a:	4940      	ldr	r1, [pc, #256]	@ (8017c1c <ip_reass_free_complete_datagram+0x138>)
 8017b1c:	483e      	ldr	r0, [pc, #248]	@ (8017c18 <ip_reass_free_complete_datagram+0x134>)
 8017b1e:	f001 f9d9 	bl	8018ed4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	685b      	ldr	r3, [r3, #4]
 8017b26:	685b      	ldr	r3, [r3, #4]
 8017b28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017b2a:	697b      	ldr	r3, [r7, #20]
 8017b2c:	889b      	ldrh	r3, [r3, #4]
 8017b2e:	b29b      	uxth	r3, r3
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d12a      	bne.n	8017b8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	685b      	ldr	r3, [r3, #4]
 8017b38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	681a      	ldr	r2, [r3, #0]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017b42:	69bb      	ldr	r3, [r7, #24]
 8017b44:	6858      	ldr	r0, [r3, #4]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	3308      	adds	r3, #8
 8017b4a:	2214      	movs	r2, #20
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	f001 fbc2 	bl	80192d6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017b52:	2101      	movs	r1, #1
 8017b54:	69b8      	ldr	r0, [r7, #24]
 8017b56:	f7ff fc29 	bl	80173ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017b5a:	69b8      	ldr	r0, [r7, #24]
 8017b5c:	f7f5 fb0e 	bl	800d17c <pbuf_clen>
 8017b60:	4603      	mov	r3, r0
 8017b62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017b64:	8bfa      	ldrh	r2, [r7, #30]
 8017b66:	8a7b      	ldrh	r3, [r7, #18]
 8017b68:	4413      	add	r3, r2
 8017b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017b6e:	db05      	blt.n	8017b7c <ip_reass_free_complete_datagram+0x98>
 8017b70:	4b27      	ldr	r3, [pc, #156]	@ (8017c10 <ip_reass_free_complete_datagram+0x12c>)
 8017b72:	22bc      	movs	r2, #188	@ 0xbc
 8017b74:	492a      	ldr	r1, [pc, #168]	@ (8017c20 <ip_reass_free_complete_datagram+0x13c>)
 8017b76:	4828      	ldr	r0, [pc, #160]	@ (8017c18 <ip_reass_free_complete_datagram+0x134>)
 8017b78:	f001 f9ac 	bl	8018ed4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017b7c:	8bfa      	ldrh	r2, [r7, #30]
 8017b7e:	8a7b      	ldrh	r3, [r7, #18]
 8017b80:	4413      	add	r3, r2
 8017b82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017b84:	69b8      	ldr	r0, [r7, #24]
 8017b86:	f7f5 fa6b 	bl	800d060 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017b90:	e01f      	b.n	8017bd2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017b98:	69bb      	ldr	r3, [r7, #24]
 8017b9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017b9c:	697b      	ldr	r3, [r7, #20]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017ba2:	68f8      	ldr	r0, [r7, #12]
 8017ba4:	f7f5 faea 	bl	800d17c <pbuf_clen>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017bac:	8bfa      	ldrh	r2, [r7, #30]
 8017bae:	8a7b      	ldrh	r3, [r7, #18]
 8017bb0:	4413      	add	r3, r2
 8017bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017bb6:	db05      	blt.n	8017bc4 <ip_reass_free_complete_datagram+0xe0>
 8017bb8:	4b15      	ldr	r3, [pc, #84]	@ (8017c10 <ip_reass_free_complete_datagram+0x12c>)
 8017bba:	22cc      	movs	r2, #204	@ 0xcc
 8017bbc:	4918      	ldr	r1, [pc, #96]	@ (8017c20 <ip_reass_free_complete_datagram+0x13c>)
 8017bbe:	4816      	ldr	r0, [pc, #88]	@ (8017c18 <ip_reass_free_complete_datagram+0x134>)
 8017bc0:	f001 f988 	bl	8018ed4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017bc4:	8bfa      	ldrh	r2, [r7, #30]
 8017bc6:	8a7b      	ldrh	r3, [r7, #18]
 8017bc8:	4413      	add	r3, r2
 8017bca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017bcc:	68f8      	ldr	r0, [r7, #12]
 8017bce:	f7f5 fa47 	bl	800d060 <pbuf_free>
  while (p != NULL) {
 8017bd2:	69bb      	ldr	r3, [r7, #24]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d1dc      	bne.n	8017b92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017bd8:	6839      	ldr	r1, [r7, #0]
 8017bda:	6878      	ldr	r0, [r7, #4]
 8017bdc:	f000 f8c2 	bl	8017d64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017be0:	4b10      	ldr	r3, [pc, #64]	@ (8017c24 <ip_reass_free_complete_datagram+0x140>)
 8017be2:	881b      	ldrh	r3, [r3, #0]
 8017be4:	8bfa      	ldrh	r2, [r7, #30]
 8017be6:	429a      	cmp	r2, r3
 8017be8:	d905      	bls.n	8017bf6 <ip_reass_free_complete_datagram+0x112>
 8017bea:	4b09      	ldr	r3, [pc, #36]	@ (8017c10 <ip_reass_free_complete_datagram+0x12c>)
 8017bec:	22d2      	movs	r2, #210	@ 0xd2
 8017bee:	490e      	ldr	r1, [pc, #56]	@ (8017c28 <ip_reass_free_complete_datagram+0x144>)
 8017bf0:	4809      	ldr	r0, [pc, #36]	@ (8017c18 <ip_reass_free_complete_datagram+0x134>)
 8017bf2:	f001 f96f 	bl	8018ed4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8017c24 <ip_reass_free_complete_datagram+0x140>)
 8017bf8:	881a      	ldrh	r2, [r3, #0]
 8017bfa:	8bfb      	ldrh	r3, [r7, #30]
 8017bfc:	1ad3      	subs	r3, r2, r3
 8017bfe:	b29a      	uxth	r2, r3
 8017c00:	4b08      	ldr	r3, [pc, #32]	@ (8017c24 <ip_reass_free_complete_datagram+0x140>)
 8017c02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017c04:	8bfb      	ldrh	r3, [r7, #30]
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3720      	adds	r7, #32
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}
 8017c0e:	bf00      	nop
 8017c10:	0801dc40 	.word	0x0801dc40
 8017c14:	0801dc7c 	.word	0x0801dc7c
 8017c18:	0801dc88 	.word	0x0801dc88
 8017c1c:	0801dcb0 	.word	0x0801dcb0
 8017c20:	0801dcc4 	.word	0x0801dcc4
 8017c24:	20011100 	.word	0x20011100
 8017c28:	0801dce4 	.word	0x0801dce4

08017c2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b08a      	sub	sp, #40	@ 0x28
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
 8017c34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017c36:	2300      	movs	r3, #0
 8017c38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017c42:	2300      	movs	r3, #0
 8017c44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017c46:	2300      	movs	r3, #0
 8017c48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017c4a:	4b28      	ldr	r3, [pc, #160]	@ (8017cec <ip_reass_remove_oldest_datagram+0xc0>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017c50:	e030      	b.n	8017cb4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c54:	695a      	ldr	r2, [r3, #20]
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	68db      	ldr	r3, [r3, #12]
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	d10c      	bne.n	8017c78 <ip_reass_remove_oldest_datagram+0x4c>
 8017c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c60:	699a      	ldr	r2, [r3, #24]
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	691b      	ldr	r3, [r3, #16]
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d106      	bne.n	8017c78 <ip_reass_remove_oldest_datagram+0x4c>
 8017c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c6c:	899a      	ldrh	r2, [r3, #12]
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	889b      	ldrh	r3, [r3, #4]
 8017c72:	b29b      	uxth	r3, r3
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d014      	beq.n	8017ca2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017c7e:	6a3b      	ldr	r3, [r7, #32]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d104      	bne.n	8017c8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017c88:	69fb      	ldr	r3, [r7, #28]
 8017c8a:	61bb      	str	r3, [r7, #24]
 8017c8c:	e009      	b.n	8017ca2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c90:	7fda      	ldrb	r2, [r3, #31]
 8017c92:	6a3b      	ldr	r3, [r7, #32]
 8017c94:	7fdb      	ldrb	r3, [r3, #31]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d803      	bhi.n	8017ca2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017c9e:	69fb      	ldr	r3, [r7, #28]
 8017ca0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d001      	beq.n	8017cae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d1cb      	bne.n	8017c52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017cba:	6a3b      	ldr	r3, [r7, #32]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d008      	beq.n	8017cd2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017cc0:	69b9      	ldr	r1, [r7, #24]
 8017cc2:	6a38      	ldr	r0, [r7, #32]
 8017cc4:	f7ff ff0e 	bl	8017ae4 <ip_reass_free_complete_datagram>
 8017cc8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017cca:	697a      	ldr	r2, [r7, #20]
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	4413      	add	r3, r2
 8017cd0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017cd2:	697a      	ldr	r2, [r7, #20]
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	da02      	bge.n	8017ce0 <ip_reass_remove_oldest_datagram+0xb4>
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	2b01      	cmp	r3, #1
 8017cde:	dcac      	bgt.n	8017c3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017ce0:	697b      	ldr	r3, [r7, #20]
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3728      	adds	r7, #40	@ 0x28
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	200110fc 	.word	0x200110fc

08017cf0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017cfa:	2004      	movs	r0, #4
 8017cfc:	f7f4 fa8a 	bl	800c214 <memp_malloc>
 8017d00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d110      	bne.n	8017d2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017d08:	6839      	ldr	r1, [r7, #0]
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7ff ff8e 	bl	8017c2c <ip_reass_remove_oldest_datagram>
 8017d10:	4602      	mov	r2, r0
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	4293      	cmp	r3, r2
 8017d16:	dc03      	bgt.n	8017d20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d18:	2004      	movs	r0, #4
 8017d1a:	f7f4 fa7b 	bl	800c214 <memp_malloc>
 8017d1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d101      	bne.n	8017d2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017d26:	2300      	movs	r3, #0
 8017d28:	e016      	b.n	8017d58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017d2a:	2220      	movs	r2, #32
 8017d2c:	2100      	movs	r1, #0
 8017d2e:	68f8      	ldr	r0, [r7, #12]
 8017d30:	f001 f96f 	bl	8019012 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	220f      	movs	r2, #15
 8017d38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017d3a:	4b09      	ldr	r3, [pc, #36]	@ (8017d60 <ip_reass_enqueue_new_datagram+0x70>)
 8017d3c:	681a      	ldr	r2, [r3, #0]
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017d42:	4a07      	ldr	r2, [pc, #28]	@ (8017d60 <ip_reass_enqueue_new_datagram+0x70>)
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	3308      	adds	r3, #8
 8017d4c:	2214      	movs	r2, #20
 8017d4e:	6879      	ldr	r1, [r7, #4]
 8017d50:	4618      	mov	r0, r3
 8017d52:	f001 fac0 	bl	80192d6 <memcpy>
  return ipr;
 8017d56:	68fb      	ldr	r3, [r7, #12]
}
 8017d58:	4618      	mov	r0, r3
 8017d5a:	3710      	adds	r7, #16
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}
 8017d60:	200110fc 	.word	0x200110fc

08017d64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
 8017d6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017d6e:	4b10      	ldr	r3, [pc, #64]	@ (8017db0 <ip_reass_dequeue_datagram+0x4c>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	687a      	ldr	r2, [r7, #4]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d104      	bne.n	8017d82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8017db0 <ip_reass_dequeue_datagram+0x4c>)
 8017d7e:	6013      	str	r3, [r2, #0]
 8017d80:	e00d      	b.n	8017d9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017d82:	683b      	ldr	r3, [r7, #0]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d106      	bne.n	8017d96 <ip_reass_dequeue_datagram+0x32>
 8017d88:	4b0a      	ldr	r3, [pc, #40]	@ (8017db4 <ip_reass_dequeue_datagram+0x50>)
 8017d8a:	f240 1245 	movw	r2, #325	@ 0x145
 8017d8e:	490a      	ldr	r1, [pc, #40]	@ (8017db8 <ip_reass_dequeue_datagram+0x54>)
 8017d90:	480a      	ldr	r0, [pc, #40]	@ (8017dbc <ip_reass_dequeue_datagram+0x58>)
 8017d92:	f001 f89f 	bl	8018ed4 <iprintf>
    prev->next = ipr->next;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681a      	ldr	r2, [r3, #0]
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017d9e:	6879      	ldr	r1, [r7, #4]
 8017da0:	2004      	movs	r0, #4
 8017da2:	f7f4 faad 	bl	800c300 <memp_free>
}
 8017da6:	bf00      	nop
 8017da8:	3708      	adds	r7, #8
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
 8017dae:	bf00      	nop
 8017db0:	200110fc 	.word	0x200110fc
 8017db4:	0801dc40 	.word	0x0801dc40
 8017db8:	0801dd08 	.word	0x0801dd08
 8017dbc:	0801dc88 	.word	0x0801dc88

08017dc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b08c      	sub	sp, #48	@ 0x30
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	60f8      	str	r0, [r7, #12]
 8017dc8:	60b9      	str	r1, [r7, #8]
 8017dca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017dd0:	2301      	movs	r3, #1
 8017dd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	885b      	ldrh	r3, [r3, #2]
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7f3 fd09 	bl	800b7f8 <lwip_htons>
 8017de6:	4603      	mov	r3, r0
 8017de8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017dea:	69fb      	ldr	r3, [r7, #28]
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	f003 030f 	and.w	r3, r3, #15
 8017df2:	b2db      	uxtb	r3, r3
 8017df4:	009b      	lsls	r3, r3, #2
 8017df6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017df8:	7e7b      	ldrb	r3, [r7, #25]
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	8b7a      	ldrh	r2, [r7, #26]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d202      	bcs.n	8017e08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e02:	f04f 33ff 	mov.w	r3, #4294967295
 8017e06:	e135      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017e08:	7e7b      	ldrb	r3, [r7, #25]
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	8b7a      	ldrh	r2, [r7, #26]
 8017e0e:	1ad3      	subs	r3, r2, r3
 8017e10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	88db      	ldrh	r3, [r3, #6]
 8017e16:	b29b      	uxth	r3, r3
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f7f3 fced 	bl	800b7f8 <lwip_htons>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e24:	b29b      	uxth	r3, r3
 8017e26:	00db      	lsls	r3, r3, #3
 8017e28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e32:	2200      	movs	r2, #0
 8017e34:	701a      	strb	r2, [r3, #0]
 8017e36:	2200      	movs	r2, #0
 8017e38:	705a      	strb	r2, [r3, #1]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	709a      	strb	r2, [r3, #2]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e44:	8afa      	ldrh	r2, [r7, #22]
 8017e46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017e48:	8afa      	ldrh	r2, [r7, #22]
 8017e4a:	8b7b      	ldrh	r3, [r7, #26]
 8017e4c:	4413      	add	r3, r2
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e56:	88db      	ldrh	r3, [r3, #6]
 8017e58:	b29b      	uxth	r3, r3
 8017e5a:	8afa      	ldrh	r2, [r7, #22]
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d902      	bls.n	8017e66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e60:	f04f 33ff 	mov.w	r3, #4294967295
 8017e64:	e106      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	685b      	ldr	r3, [r3, #4]
 8017e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e6c:	e068      	b.n	8017f40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e70:	685b      	ldr	r3, [r3, #4]
 8017e72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e76:	889b      	ldrh	r3, [r3, #4]
 8017e78:	b29a      	uxth	r2, r3
 8017e7a:	693b      	ldr	r3, [r7, #16]
 8017e7c:	889b      	ldrh	r3, [r3, #4]
 8017e7e:	b29b      	uxth	r3, r3
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d235      	bcs.n	8017ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d020      	beq.n	8017ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e92:	889b      	ldrh	r3, [r3, #4]
 8017e94:	b29a      	uxth	r2, r3
 8017e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e98:	88db      	ldrh	r3, [r3, #6]
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d307      	bcc.n	8017eb0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ea2:	88db      	ldrh	r3, [r3, #6]
 8017ea4:	b29a      	uxth	r2, r3
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	889b      	ldrh	r3, [r3, #4]
 8017eaa:	b29b      	uxth	r3, r3
 8017eac:	429a      	cmp	r2, r3
 8017eae:	d902      	bls.n	8017eb6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb4:	e0de      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eb8:	68ba      	ldr	r2, [r7, #8]
 8017eba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ebe:	88db      	ldrh	r3, [r3, #6]
 8017ec0:	b29a      	uxth	r2, r3
 8017ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ec4:	889b      	ldrh	r3, [r3, #4]
 8017ec6:	b29b      	uxth	r3, r3
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d03d      	beq.n	8017f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017ed0:	e03a      	b.n	8017f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ed4:	88db      	ldrh	r3, [r3, #6]
 8017ed6:	b29a      	uxth	r2, r3
 8017ed8:	693b      	ldr	r3, [r7, #16]
 8017eda:	889b      	ldrh	r3, [r3, #4]
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d902      	bls.n	8017ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ee6:	e0c5      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	68ba      	ldr	r2, [r7, #8]
 8017eec:	605a      	str	r2, [r3, #4]
      break;
 8017eee:	e02b      	b.n	8017f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ef2:	889b      	ldrh	r3, [r3, #4]
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	693b      	ldr	r3, [r7, #16]
 8017ef8:	889b      	ldrh	r3, [r3, #4]
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d102      	bne.n	8017f06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f00:	f04f 33ff 	mov.w	r3, #4294967295
 8017f04:	e0b6      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f08:	889b      	ldrh	r3, [r3, #4]
 8017f0a:	b29a      	uxth	r2, r3
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	88db      	ldrh	r3, [r3, #6]
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d202      	bcs.n	8017f1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f16:	f04f 33ff 	mov.w	r3, #4294967295
 8017f1a:	e0ab      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d009      	beq.n	8017f36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f24:	88db      	ldrh	r3, [r3, #6]
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	889b      	ldrh	r3, [r3, #4]
 8017f2c:	b29b      	uxth	r3, r3
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	d001      	beq.n	8017f36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f32:	2300      	movs	r3, #0
 8017f34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017f36:	693b      	ldr	r3, [r7, #16]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d193      	bne.n	8017e6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017f46:	e000      	b.n	8017f4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017f48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d12d      	bne.n	8017fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d01c      	beq.n	8017f90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f58:	88db      	ldrh	r3, [r3, #6]
 8017f5a:	b29a      	uxth	r2, r3
 8017f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f5e:	889b      	ldrh	r3, [r3, #4]
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d906      	bls.n	8017f74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017f66:	4b45      	ldr	r3, [pc, #276]	@ (801807c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f68:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017f6c:	4944      	ldr	r1, [pc, #272]	@ (8018080 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017f6e:	4845      	ldr	r0, [pc, #276]	@ (8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f70:	f000 ffb0 	bl	8018ed4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f76:	68ba      	ldr	r2, [r7, #8]
 8017f78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f7c:	88db      	ldrh	r3, [r3, #6]
 8017f7e:	b29a      	uxth	r2, r3
 8017f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f82:	889b      	ldrh	r3, [r3, #4]
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	429a      	cmp	r2, r3
 8017f88:	d010      	beq.n	8017fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	623b      	str	r3, [r7, #32]
 8017f8e:	e00d      	b.n	8017fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	685b      	ldr	r3, [r3, #4]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d006      	beq.n	8017fa6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017f98:	4b38      	ldr	r3, [pc, #224]	@ (801807c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f9a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8017f9e:	493a      	ldr	r1, [pc, #232]	@ (8018088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017fa0:	4838      	ldr	r0, [pc, #224]	@ (8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fa2:	f000 ff97 	bl	8018ed4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	68ba      	ldr	r2, [r7, #8]
 8017faa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d105      	bne.n	8017fbe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	7f9b      	ldrb	r3, [r3, #30]
 8017fb6:	f003 0301 	and.w	r3, r3, #1
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d059      	beq.n	8018072 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017fbe:	6a3b      	ldr	r3, [r7, #32]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d04f      	beq.n	8018064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	685b      	ldr	r3, [r3, #4]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d006      	beq.n	8017fda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	685b      	ldr	r3, [r3, #4]
 8017fd2:	889b      	ldrh	r3, [r3, #4]
 8017fd4:	b29b      	uxth	r3, r3
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d002      	beq.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	623b      	str	r3, [r7, #32]
 8017fde:	e041      	b.n	8018064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017fea:	e012      	b.n	8018012 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8017ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ff4:	88db      	ldrh	r3, [r3, #6]
 8017ff6:	b29a      	uxth	r2, r3
 8017ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ffa:	889b      	ldrh	r3, [r3, #4]
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	429a      	cmp	r2, r3
 8018000:	d002      	beq.n	8018008 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018002:	2300      	movs	r3, #0
 8018004:	623b      	str	r3, [r7, #32]
            break;
 8018006:	e007      	b.n	8018018 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801800a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1e9      	bne.n	8017fec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018018:	6a3b      	ldr	r3, [r7, #32]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d022      	beq.n	8018064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	685b      	ldr	r3, [r3, #4]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d106      	bne.n	8018034 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018026:	4b15      	ldr	r3, [pc, #84]	@ (801807c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018028:	f240 12df 	movw	r2, #479	@ 0x1df
 801802c:	4917      	ldr	r1, [pc, #92]	@ (801808c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801802e:	4815      	ldr	r0, [pc, #84]	@ (8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018030:	f000 ff50 	bl	8018ed4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	685b      	ldr	r3, [r3, #4]
 801803a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801803c:	429a      	cmp	r2, r3
 801803e:	d106      	bne.n	801804e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018040:	4b0e      	ldr	r3, [pc, #56]	@ (801807c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018042:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018046:	4911      	ldr	r1, [pc, #68]	@ (801808c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018048:	480e      	ldr	r0, [pc, #56]	@ (8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801804a:	f000 ff43 	bl	8018ed4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d006      	beq.n	8018064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018056:	4b09      	ldr	r3, [pc, #36]	@ (801807c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018058:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801805c:	490c      	ldr	r1, [pc, #48]	@ (8018090 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801805e:	4809      	ldr	r0, [pc, #36]	@ (8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018060:	f000 ff38 	bl	8018ed4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018064:	6a3b      	ldr	r3, [r7, #32]
 8018066:	2b00      	cmp	r3, #0
 8018068:	bf14      	ite	ne
 801806a:	2301      	movne	r3, #1
 801806c:	2300      	moveq	r3, #0
 801806e:	b2db      	uxtb	r3, r3
 8018070:	e000      	b.n	8018074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018072:	2300      	movs	r3, #0
}
 8018074:	4618      	mov	r0, r3
 8018076:	3730      	adds	r7, #48	@ 0x30
 8018078:	46bd      	mov	sp, r7
 801807a:	bd80      	pop	{r7, pc}
 801807c:	0801dc40 	.word	0x0801dc40
 8018080:	0801dd24 	.word	0x0801dd24
 8018084:	0801dc88 	.word	0x0801dc88
 8018088:	0801dd44 	.word	0x0801dd44
 801808c:	0801dd7c 	.word	0x0801dd7c
 8018090:	0801dd8c 	.word	0x0801dd8c

08018094 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b08e      	sub	sp, #56	@ 0x38
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	685b      	ldr	r3, [r3, #4]
 80180a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80180a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	f003 030f 	and.w	r3, r3, #15
 80180aa:	b2db      	uxtb	r3, r3
 80180ac:	009b      	lsls	r3, r3, #2
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	2b14      	cmp	r3, #20
 80180b2:	f040 8171 	bne.w	8018398 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80180b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180b8:	88db      	ldrh	r3, [r3, #6]
 80180ba:	b29b      	uxth	r3, r3
 80180bc:	4618      	mov	r0, r3
 80180be:	f7f3 fb9b 	bl	800b7f8 <lwip_htons>
 80180c2:	4603      	mov	r3, r0
 80180c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	00db      	lsls	r3, r3, #3
 80180cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80180ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180d0:	885b      	ldrh	r3, [r3, #2]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7f3 fb8f 	bl	800b7f8 <lwip_htons>
 80180da:	4603      	mov	r3, r0
 80180dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80180de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	f003 030f 	and.w	r3, r3, #15
 80180e6:	b2db      	uxtb	r3, r3
 80180e8:	009b      	lsls	r3, r3, #2
 80180ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80180ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80180f6:	429a      	cmp	r2, r3
 80180f8:	f0c0 8150 	bcc.w	801839c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80180fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018100:	b29b      	uxth	r3, r3
 8018102:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018104:	1ad3      	subs	r3, r2, r3
 8018106:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f7f5 f837 	bl	800d17c <pbuf_clen>
 801810e:	4603      	mov	r3, r0
 8018110:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018112:	4b8c      	ldr	r3, [pc, #560]	@ (8018344 <ip4_reass+0x2b0>)
 8018114:	881b      	ldrh	r3, [r3, #0]
 8018116:	461a      	mov	r2, r3
 8018118:	8c3b      	ldrh	r3, [r7, #32]
 801811a:	4413      	add	r3, r2
 801811c:	2b0a      	cmp	r3, #10
 801811e:	dd10      	ble.n	8018142 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018120:	8c3b      	ldrh	r3, [r7, #32]
 8018122:	4619      	mov	r1, r3
 8018124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018126:	f7ff fd81 	bl	8017c2c <ip_reass_remove_oldest_datagram>
 801812a:	4603      	mov	r3, r0
 801812c:	2b00      	cmp	r3, #0
 801812e:	f000 8137 	beq.w	80183a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018132:	4b84      	ldr	r3, [pc, #528]	@ (8018344 <ip4_reass+0x2b0>)
 8018134:	881b      	ldrh	r3, [r3, #0]
 8018136:	461a      	mov	r2, r3
 8018138:	8c3b      	ldrh	r3, [r7, #32]
 801813a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801813c:	2b0a      	cmp	r3, #10
 801813e:	f300 812f 	bgt.w	80183a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018142:	4b81      	ldr	r3, [pc, #516]	@ (8018348 <ip4_reass+0x2b4>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	633b      	str	r3, [r7, #48]	@ 0x30
 8018148:	e015      	b.n	8018176 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801814c:	695a      	ldr	r2, [r3, #20]
 801814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018150:	68db      	ldr	r3, [r3, #12]
 8018152:	429a      	cmp	r2, r3
 8018154:	d10c      	bne.n	8018170 <ip4_reass+0xdc>
 8018156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018158:	699a      	ldr	r2, [r3, #24]
 801815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801815c:	691b      	ldr	r3, [r3, #16]
 801815e:	429a      	cmp	r2, r3
 8018160:	d106      	bne.n	8018170 <ip4_reass+0xdc>
 8018162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018164:	899a      	ldrh	r2, [r3, #12]
 8018166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018168:	889b      	ldrh	r3, [r3, #4]
 801816a:	b29b      	uxth	r3, r3
 801816c:	429a      	cmp	r2, r3
 801816e:	d006      	beq.n	801817e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	633b      	str	r3, [r7, #48]	@ 0x30
 8018176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018178:	2b00      	cmp	r3, #0
 801817a:	d1e6      	bne.n	801814a <ip4_reass+0xb6>
 801817c:	e000      	b.n	8018180 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801817e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018182:	2b00      	cmp	r3, #0
 8018184:	d109      	bne.n	801819a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018186:	8c3b      	ldrh	r3, [r7, #32]
 8018188:	4619      	mov	r1, r3
 801818a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801818c:	f7ff fdb0 	bl	8017cf0 <ip_reass_enqueue_new_datagram>
 8018190:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018194:	2b00      	cmp	r3, #0
 8018196:	d11c      	bne.n	80181d2 <ip4_reass+0x13e>
      goto nullreturn;
 8018198:	e105      	b.n	80183a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801819c:	88db      	ldrh	r3, [r3, #6]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	4618      	mov	r0, r3
 80181a2:	f7f3 fb29 	bl	800b7f8 <lwip_htons>
 80181a6:	4603      	mov	r3, r0
 80181a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d110      	bne.n	80181d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80181b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181b2:	89db      	ldrh	r3, [r3, #14]
 80181b4:	4618      	mov	r0, r3
 80181b6:	f7f3 fb1f 	bl	800b7f8 <lwip_htons>
 80181ba:	4603      	mov	r3, r0
 80181bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d006      	beq.n	80181d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80181c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181c6:	3308      	adds	r3, #8
 80181c8:	2214      	movs	r2, #20
 80181ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80181cc:	4618      	mov	r0, r3
 80181ce:	f001 f882 	bl	80192d6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80181d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181d4:	88db      	ldrh	r3, [r3, #6]
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	f003 0320 	and.w	r3, r3, #32
 80181dc:	2b00      	cmp	r3, #0
 80181de:	bf0c      	ite	eq
 80181e0:	2301      	moveq	r3, #1
 80181e2:	2300      	movne	r3, #0
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d00e      	beq.n	801820c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80181ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80181f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80181f2:	4413      	add	r3, r2
 80181f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80181f6:	8b7a      	ldrh	r2, [r7, #26]
 80181f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80181fa:	429a      	cmp	r2, r3
 80181fc:	f0c0 80a0 	bcc.w	8018340 <ip4_reass+0x2ac>
 8018200:	8b7b      	ldrh	r3, [r7, #26]
 8018202:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018206:	4293      	cmp	r3, r2
 8018208:	f200 809a 	bhi.w	8018340 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801820c:	69fa      	ldr	r2, [r7, #28]
 801820e:	6879      	ldr	r1, [r7, #4]
 8018210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018212:	f7ff fdd5 	bl	8017dc0 <ip_reass_chain_frag_into_datagram_and_validate>
 8018216:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801821e:	f000 809b 	beq.w	8018358 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018222:	4b48      	ldr	r3, [pc, #288]	@ (8018344 <ip4_reass+0x2b0>)
 8018224:	881a      	ldrh	r2, [r3, #0]
 8018226:	8c3b      	ldrh	r3, [r7, #32]
 8018228:	4413      	add	r3, r2
 801822a:	b29a      	uxth	r2, r3
 801822c:	4b45      	ldr	r3, [pc, #276]	@ (8018344 <ip4_reass+0x2b0>)
 801822e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018230:	69fb      	ldr	r3, [r7, #28]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d00d      	beq.n	8018252 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018236:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018238:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801823a:	4413      	add	r3, r2
 801823c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018240:	8a7a      	ldrh	r2, [r7, #18]
 8018242:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018246:	7f9b      	ldrb	r3, [r3, #30]
 8018248:	f043 0301 	orr.w	r3, r3, #1
 801824c:	b2da      	uxtb	r2, r3
 801824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018250:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	2b01      	cmp	r3, #1
 8018256:	d171      	bne.n	801833c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801825a:	8b9b      	ldrh	r3, [r3, #28]
 801825c:	3314      	adds	r3, #20
 801825e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018274:	3308      	adds	r3, #8
 8018276:	2214      	movs	r2, #20
 8018278:	4619      	mov	r1, r3
 801827a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801827c:	f001 f82b 	bl	80192d6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018280:	8a3b      	ldrh	r3, [r7, #16]
 8018282:	4618      	mov	r0, r3
 8018284:	f7f3 fab8 	bl	800b7f8 <lwip_htons>
 8018288:	4603      	mov	r3, r0
 801828a:	461a      	mov	r2, r3
 801828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801828e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018292:	2200      	movs	r2, #0
 8018294:	719a      	strb	r2, [r3, #6]
 8018296:	2200      	movs	r2, #0
 8018298:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801829c:	2200      	movs	r2, #0
 801829e:	729a      	strb	r2, [r3, #10]
 80182a0:	2200      	movs	r2, #0
 80182a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80182a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182a6:	685b      	ldr	r3, [r3, #4]
 80182a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80182aa:	e00d      	b.n	80182c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80182ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ae:	685b      	ldr	r3, [r3, #4]
 80182b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80182b2:	2114      	movs	r1, #20
 80182b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80182b6:	f7f4 fe4d 	bl	800cf54 <pbuf_remove_header>
      pbuf_cat(p, r);
 80182ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f7f4 ff9d 	bl	800d1fc <pbuf_cat>
      r = iprh->next_pbuf;
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80182c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d1ee      	bne.n	80182ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80182ce:	4b1e      	ldr	r3, [pc, #120]	@ (8018348 <ip4_reass+0x2b4>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d102      	bne.n	80182de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80182d8:	2300      	movs	r3, #0
 80182da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80182dc:	e010      	b.n	8018300 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182de:	4b1a      	ldr	r3, [pc, #104]	@ (8018348 <ip4_reass+0x2b4>)
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80182e4:	e007      	b.n	80182f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80182e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80182ec:	429a      	cmp	r2, r3
 80182ee:	d006      	beq.n	80182fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80182f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d1f4      	bne.n	80182e6 <ip4_reass+0x252>
 80182fc:	e000      	b.n	8018300 <ip4_reass+0x26c>
          break;
 80182fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018300:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018304:	f7ff fd2e 	bl	8017d64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7f4 ff37 	bl	800d17c <pbuf_clen>
 801830e:	4603      	mov	r3, r0
 8018310:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018312:	4b0c      	ldr	r3, [pc, #48]	@ (8018344 <ip4_reass+0x2b0>)
 8018314:	881b      	ldrh	r3, [r3, #0]
 8018316:	8c3a      	ldrh	r2, [r7, #32]
 8018318:	429a      	cmp	r2, r3
 801831a:	d906      	bls.n	801832a <ip4_reass+0x296>
 801831c:	4b0b      	ldr	r3, [pc, #44]	@ (801834c <ip4_reass+0x2b8>)
 801831e:	f240 229b 	movw	r2, #667	@ 0x29b
 8018322:	490b      	ldr	r1, [pc, #44]	@ (8018350 <ip4_reass+0x2bc>)
 8018324:	480b      	ldr	r0, [pc, #44]	@ (8018354 <ip4_reass+0x2c0>)
 8018326:	f000 fdd5 	bl	8018ed4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801832a:	4b06      	ldr	r3, [pc, #24]	@ (8018344 <ip4_reass+0x2b0>)
 801832c:	881a      	ldrh	r2, [r3, #0]
 801832e:	8c3b      	ldrh	r3, [r7, #32]
 8018330:	1ad3      	subs	r3, r2, r3
 8018332:	b29a      	uxth	r2, r3
 8018334:	4b03      	ldr	r3, [pc, #12]	@ (8018344 <ip4_reass+0x2b0>)
 8018336:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	e038      	b.n	80183ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801833c:	2300      	movs	r3, #0
 801833e:	e036      	b.n	80183ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018340:	bf00      	nop
 8018342:	e00a      	b.n	801835a <ip4_reass+0x2c6>
 8018344:	20011100 	.word	0x20011100
 8018348:	200110fc 	.word	0x200110fc
 801834c:	0801dc40 	.word	0x0801dc40
 8018350:	0801ddb0 	.word	0x0801ddb0
 8018354:	0801dc88 	.word	0x0801dc88
    goto nullreturn_ipr;
 8018358:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801835c:	2b00      	cmp	r3, #0
 801835e:	d106      	bne.n	801836e <ip4_reass+0x2da>
 8018360:	4b15      	ldr	r3, [pc, #84]	@ (80183b8 <ip4_reass+0x324>)
 8018362:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018366:	4915      	ldr	r1, [pc, #84]	@ (80183bc <ip4_reass+0x328>)
 8018368:	4815      	ldr	r0, [pc, #84]	@ (80183c0 <ip4_reass+0x32c>)
 801836a:	f000 fdb3 	bl	8018ed4 <iprintf>
  if (ipr->p == NULL) {
 801836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d116      	bne.n	80183a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018376:	4b13      	ldr	r3, [pc, #76]	@ (80183c4 <ip4_reass+0x330>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801837c:	429a      	cmp	r2, r3
 801837e:	d006      	beq.n	801838e <ip4_reass+0x2fa>
 8018380:	4b0d      	ldr	r3, [pc, #52]	@ (80183b8 <ip4_reass+0x324>)
 8018382:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018386:	4910      	ldr	r1, [pc, #64]	@ (80183c8 <ip4_reass+0x334>)
 8018388:	480d      	ldr	r0, [pc, #52]	@ (80183c0 <ip4_reass+0x32c>)
 801838a:	f000 fda3 	bl	8018ed4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801838e:	2100      	movs	r1, #0
 8018390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018392:	f7ff fce7 	bl	8017d64 <ip_reass_dequeue_datagram>
 8018396:	e006      	b.n	80183a6 <ip4_reass+0x312>
    goto nullreturn;
 8018398:	bf00      	nop
 801839a:	e004      	b.n	80183a6 <ip4_reass+0x312>
    goto nullreturn;
 801839c:	bf00      	nop
 801839e:	e002      	b.n	80183a6 <ip4_reass+0x312>
      goto nullreturn;
 80183a0:	bf00      	nop
 80183a2:	e000      	b.n	80183a6 <ip4_reass+0x312>
  }

nullreturn:
 80183a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7f4 fe5a 	bl	800d060 <pbuf_free>
  return NULL;
 80183ac:	2300      	movs	r3, #0
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3738      	adds	r7, #56	@ 0x38
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	0801dc40 	.word	0x0801dc40
 80183bc:	0801ddcc 	.word	0x0801ddcc
 80183c0:	0801dc88 	.word	0x0801dc88
 80183c4:	200110fc 	.word	0x200110fc
 80183c8:	0801ddd8 	.word	0x0801ddd8

080183cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80183d0:	2005      	movs	r0, #5
 80183d2:	f7f3 ff1f 	bl	800c214 <memp_malloc>
 80183d6:	4603      	mov	r3, r0
}
 80183d8:	4618      	mov	r0, r3
 80183da:	bd80      	pop	{r7, pc}

080183dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b082      	sub	sp, #8
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d106      	bne.n	80183f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80183ea:	4b07      	ldr	r3, [pc, #28]	@ (8018408 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80183ec:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80183f0:	4906      	ldr	r1, [pc, #24]	@ (801840c <ip_frag_free_pbuf_custom_ref+0x30>)
 80183f2:	4807      	ldr	r0, [pc, #28]	@ (8018410 <ip_frag_free_pbuf_custom_ref+0x34>)
 80183f4:	f000 fd6e 	bl	8018ed4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80183f8:	6879      	ldr	r1, [r7, #4]
 80183fa:	2005      	movs	r0, #5
 80183fc:	f7f3 ff80 	bl	800c300 <memp_free>
}
 8018400:	bf00      	nop
 8018402:	3708      	adds	r7, #8
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}
 8018408:	0801dc40 	.word	0x0801dc40
 801840c:	0801ddf8 	.word	0x0801ddf8
 8018410:	0801dc88 	.word	0x0801dc88

08018414 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b084      	sub	sp, #16
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d106      	bne.n	8018434 <ipfrag_free_pbuf_custom+0x20>
 8018426:	4b11      	ldr	r3, [pc, #68]	@ (801846c <ipfrag_free_pbuf_custom+0x58>)
 8018428:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801842c:	4910      	ldr	r1, [pc, #64]	@ (8018470 <ipfrag_free_pbuf_custom+0x5c>)
 801842e:	4811      	ldr	r0, [pc, #68]	@ (8018474 <ipfrag_free_pbuf_custom+0x60>)
 8018430:	f000 fd50 	bl	8018ed4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018434:	68fa      	ldr	r2, [r7, #12]
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	429a      	cmp	r2, r3
 801843a:	d006      	beq.n	801844a <ipfrag_free_pbuf_custom+0x36>
 801843c:	4b0b      	ldr	r3, [pc, #44]	@ (801846c <ipfrag_free_pbuf_custom+0x58>)
 801843e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018442:	490d      	ldr	r1, [pc, #52]	@ (8018478 <ipfrag_free_pbuf_custom+0x64>)
 8018444:	480b      	ldr	r0, [pc, #44]	@ (8018474 <ipfrag_free_pbuf_custom+0x60>)
 8018446:	f000 fd45 	bl	8018ed4 <iprintf>
  if (pcr->original != NULL) {
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	695b      	ldr	r3, [r3, #20]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d004      	beq.n	801845c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	695b      	ldr	r3, [r3, #20]
 8018456:	4618      	mov	r0, r3
 8018458:	f7f4 fe02 	bl	800d060 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801845c:	68f8      	ldr	r0, [r7, #12]
 801845e:	f7ff ffbd 	bl	80183dc <ip_frag_free_pbuf_custom_ref>
}
 8018462:	bf00      	nop
 8018464:	3710      	adds	r7, #16
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}
 801846a:	bf00      	nop
 801846c:	0801dc40 	.word	0x0801dc40
 8018470:	0801de04 	.word	0x0801de04
 8018474:	0801dc88 	.word	0x0801dc88
 8018478:	0801de10 	.word	0x0801de10

0801847c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b094      	sub	sp, #80	@ 0x50
 8018480:	af02      	add	r7, sp, #8
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018488:	2300      	movs	r3, #0
 801848a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018492:	3b14      	subs	r3, #20
 8018494:	2b00      	cmp	r3, #0
 8018496:	da00      	bge.n	801849a <ip4_frag+0x1e>
 8018498:	3307      	adds	r3, #7
 801849a:	10db      	asrs	r3, r3, #3
 801849c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801849e:	2314      	movs	r3, #20
 80184a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	685b      	ldr	r3, [r3, #4]
 80184a6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80184a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80184ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184ae:	781b      	ldrb	r3, [r3, #0]
 80184b0:	f003 030f 	and.w	r3, r3, #15
 80184b4:	b2db      	uxtb	r3, r3
 80184b6:	009b      	lsls	r3, r3, #2
 80184b8:	b2db      	uxtb	r3, r3
 80184ba:	2b14      	cmp	r3, #20
 80184bc:	d002      	beq.n	80184c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80184be:	f06f 0305 	mvn.w	r3, #5
 80184c2:	e110      	b.n	80186e6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	895b      	ldrh	r3, [r3, #10]
 80184c8:	2b13      	cmp	r3, #19
 80184ca:	d809      	bhi.n	80184e0 <ip4_frag+0x64>
 80184cc:	4b88      	ldr	r3, [pc, #544]	@ (80186f0 <ip4_frag+0x274>)
 80184ce:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80184d2:	4988      	ldr	r1, [pc, #544]	@ (80186f4 <ip4_frag+0x278>)
 80184d4:	4888      	ldr	r0, [pc, #544]	@ (80186f8 <ip4_frag+0x27c>)
 80184d6:	f000 fcfd 	bl	8018ed4 <iprintf>
 80184da:	f06f 0305 	mvn.w	r3, #5
 80184de:	e102      	b.n	80186e6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80184e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184e2:	88db      	ldrh	r3, [r3, #6]
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f3 f986 	bl	800b7f8 <lwip_htons>
 80184ec:	4603      	mov	r3, r0
 80184ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80184f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80184f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80184fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80184fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018500:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	891b      	ldrh	r3, [r3, #8]
 8018506:	3b14      	subs	r3, #20
 8018508:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801850c:	e0e1      	b.n	80186d2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801850e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018510:	00db      	lsls	r3, r3, #3
 8018512:	b29b      	uxth	r3, r3
 8018514:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018518:	4293      	cmp	r3, r2
 801851a:	bf28      	it	cs
 801851c:	4613      	movcs	r3, r2
 801851e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018520:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018524:	2114      	movs	r1, #20
 8018526:	200e      	movs	r0, #14
 8018528:	f7f4 fab6 	bl	800ca98 <pbuf_alloc>
 801852c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018530:	2b00      	cmp	r3, #0
 8018532:	f000 80d5 	beq.w	80186e0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018538:	895b      	ldrh	r3, [r3, #10]
 801853a:	2b13      	cmp	r3, #19
 801853c:	d806      	bhi.n	801854c <ip4_frag+0xd0>
 801853e:	4b6c      	ldr	r3, [pc, #432]	@ (80186f0 <ip4_frag+0x274>)
 8018540:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018544:	496d      	ldr	r1, [pc, #436]	@ (80186fc <ip4_frag+0x280>)
 8018546:	486c      	ldr	r0, [pc, #432]	@ (80186f8 <ip4_frag+0x27c>)
 8018548:	f000 fcc4 	bl	8018ed4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801854e:	685b      	ldr	r3, [r3, #4]
 8018550:	2214      	movs	r2, #20
 8018552:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018554:	4618      	mov	r0, r3
 8018556:	f000 febe 	bl	80192d6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801855c:	685b      	ldr	r3, [r3, #4]
 801855e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018560:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018562:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018566:	e064      	b.n	8018632 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	895a      	ldrh	r2, [r3, #10]
 801856c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801856e:	1ad3      	subs	r3, r2, r3
 8018570:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	895b      	ldrh	r3, [r3, #10]
 8018576:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018578:	429a      	cmp	r2, r3
 801857a:	d906      	bls.n	801858a <ip4_frag+0x10e>
 801857c:	4b5c      	ldr	r3, [pc, #368]	@ (80186f0 <ip4_frag+0x274>)
 801857e:	f240 322d 	movw	r2, #813	@ 0x32d
 8018582:	495f      	ldr	r1, [pc, #380]	@ (8018700 <ip4_frag+0x284>)
 8018584:	485c      	ldr	r0, [pc, #368]	@ (80186f8 <ip4_frag+0x27c>)
 8018586:	f000 fca5 	bl	8018ed4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801858a:	8bfa      	ldrh	r2, [r7, #30]
 801858c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018590:	4293      	cmp	r3, r2
 8018592:	bf28      	it	cs
 8018594:	4613      	movcs	r3, r2
 8018596:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801859a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d105      	bne.n	80185ae <ip4_frag+0x132>
        poff = 0;
 80185a2:	2300      	movs	r3, #0
 80185a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	60fb      	str	r3, [r7, #12]
        continue;
 80185ac:	e041      	b.n	8018632 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80185ae:	f7ff ff0d 	bl	80183cc <ip_frag_alloc_pbuf_custom_ref>
 80185b2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80185b4:	69bb      	ldr	r3, [r7, #24]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d103      	bne.n	80185c2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80185ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80185bc:	f7f4 fd50 	bl	800d060 <pbuf_free>
        goto memerr;
 80185c0:	e08f      	b.n	80186e2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185c2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80185ca:	4413      	add	r3, r2
 80185cc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80185d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80185d4:	9201      	str	r2, [sp, #4]
 80185d6:	9300      	str	r3, [sp, #0]
 80185d8:	4603      	mov	r3, r0
 80185da:	2241      	movs	r2, #65	@ 0x41
 80185dc:	2000      	movs	r0, #0
 80185de:	f7f4 fb85 	bl	800ccec <pbuf_alloced_custom>
 80185e2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d106      	bne.n	80185f8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80185ea:	69b8      	ldr	r0, [r7, #24]
 80185ec:	f7ff fef6 	bl	80183dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80185f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80185f2:	f7f4 fd35 	bl	800d060 <pbuf_free>
        goto memerr;
 80185f6:	e074      	b.n	80186e2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80185f8:	68f8      	ldr	r0, [r7, #12]
 80185fa:	f7f4 fdd7 	bl	800d1ac <pbuf_ref>
      pcr->original = p;
 80185fe:	69bb      	ldr	r3, [r7, #24]
 8018600:	68fa      	ldr	r2, [r7, #12]
 8018602:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018604:	69bb      	ldr	r3, [r7, #24]
 8018606:	4a3f      	ldr	r2, [pc, #252]	@ (8018704 <ip4_frag+0x288>)
 8018608:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801860a:	6979      	ldr	r1, [r7, #20]
 801860c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801860e:	f7f4 fdf5 	bl	800d1fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018612:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801861a:	1ad3      	subs	r3, r2, r3
 801861c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018620:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018624:	2b00      	cmp	r3, #0
 8018626:	d004      	beq.n	8018632 <ip4_frag+0x1b6>
        poff = 0;
 8018628:	2300      	movs	r3, #0
 801862a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018636:	2b00      	cmp	r3, #0
 8018638:	d196      	bne.n	8018568 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801863a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801863c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018640:	4413      	add	r3, r2
 8018642:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018648:	f1a3 0213 	sub.w	r2, r3, #19
 801864c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018650:	429a      	cmp	r2, r3
 8018652:	bfcc      	ite	gt
 8018654:	2301      	movgt	r3, #1
 8018656:	2300      	movle	r3, #0
 8018658:	b2db      	uxtb	r3, r3
 801865a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801865c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018664:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018666:	6a3b      	ldr	r3, [r7, #32]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d002      	beq.n	8018672 <ip4_frag+0x1f6>
 801866c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801866e:	2b00      	cmp	r3, #0
 8018670:	d003      	beq.n	801867a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018672:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018674:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801867a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801867c:	4618      	mov	r0, r3
 801867e:	f7f3 f8bb 	bl	800b7f8 <lwip_htons>
 8018682:	4603      	mov	r3, r0
 8018684:	461a      	mov	r2, r3
 8018686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018688:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801868a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801868c:	3314      	adds	r3, #20
 801868e:	b29b      	uxth	r3, r3
 8018690:	4618      	mov	r0, r3
 8018692:	f7f3 f8b1 	bl	800b7f8 <lwip_htons>
 8018696:	4603      	mov	r3, r0
 8018698:	461a      	mov	r2, r3
 801869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801869c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186a0:	2200      	movs	r2, #0
 80186a2:	729a      	strb	r2, [r3, #10]
 80186a4:	2200      	movs	r2, #0
 80186a6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80186a8:	68bb      	ldr	r3, [r7, #8]
 80186aa:	695b      	ldr	r3, [r3, #20]
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80186b0:	68b8      	ldr	r0, [r7, #8]
 80186b2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80186b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80186b6:	f7f4 fcd3 	bl	800d060 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80186ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80186be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80186c0:	1ad3      	subs	r3, r2, r3
 80186c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80186c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80186ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80186cc:	4413      	add	r3, r2
 80186ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80186d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	f47f af19 	bne.w	801850e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80186dc:	2300      	movs	r3, #0
 80186de:	e002      	b.n	80186e6 <ip4_frag+0x26a>
      goto memerr;
 80186e0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80186e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80186e6:	4618      	mov	r0, r3
 80186e8:	3748      	adds	r7, #72	@ 0x48
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}
 80186ee:	bf00      	nop
 80186f0:	0801dc40 	.word	0x0801dc40
 80186f4:	0801de1c 	.word	0x0801de1c
 80186f8:	0801dc88 	.word	0x0801dc88
 80186fc:	0801de38 	.word	0x0801de38
 8018700:	0801de58 	.word	0x0801de58
 8018704:	08018415 	.word	0x08018415

08018708 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b086      	sub	sp, #24
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
 8018710:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018712:	230e      	movs	r3, #14
 8018714:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	895b      	ldrh	r3, [r3, #10]
 801871a:	2b0e      	cmp	r3, #14
 801871c:	d96e      	bls.n	80187fc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	7bdb      	ldrb	r3, [r3, #15]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d106      	bne.n	8018734 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801872c:	3301      	adds	r3, #1
 801872e:	b2da      	uxtb	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	685b      	ldr	r3, [r3, #4]
 8018738:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801873a:	693b      	ldr	r3, [r7, #16]
 801873c:	7b1a      	ldrb	r2, [r3, #12]
 801873e:	7b5b      	ldrb	r3, [r3, #13]
 8018740:	021b      	lsls	r3, r3, #8
 8018742:	4313      	orrs	r3, r2
 8018744:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	f003 0301 	and.w	r3, r3, #1
 801874e:	2b00      	cmp	r3, #0
 8018750:	d023      	beq.n	801879a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	2b01      	cmp	r3, #1
 8018758:	d10f      	bne.n	801877a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	785b      	ldrb	r3, [r3, #1]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d11b      	bne.n	801879a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018766:	2b5e      	cmp	r3, #94	@ 0x5e
 8018768:	d117      	bne.n	801879a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	7b5b      	ldrb	r3, [r3, #13]
 801876e:	f043 0310 	orr.w	r3, r3, #16
 8018772:	b2da      	uxtb	r2, r3
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	735a      	strb	r2, [r3, #13]
 8018778:	e00f      	b.n	801879a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	2206      	movs	r2, #6
 801877e:	4928      	ldr	r1, [pc, #160]	@ (8018820 <ethernet_input+0x118>)
 8018780:	4618      	mov	r0, r3
 8018782:	f000 fc1c 	bl	8018fbe <memcmp>
 8018786:	4603      	mov	r3, r0
 8018788:	2b00      	cmp	r3, #0
 801878a:	d106      	bne.n	801879a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	7b5b      	ldrb	r3, [r3, #13]
 8018790:	f043 0308 	orr.w	r3, r3, #8
 8018794:	b2da      	uxtb	r2, r3
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801879a:	89fb      	ldrh	r3, [r7, #14]
 801879c:	2b08      	cmp	r3, #8
 801879e:	d003      	beq.n	80187a8 <ethernet_input+0xa0>
 80187a0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80187a4:	d014      	beq.n	80187d0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80187a6:	e032      	b.n	801880e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80187ae:	f003 0308 	and.w	r3, r3, #8
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d024      	beq.n	8018800 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80187b6:	8afb      	ldrh	r3, [r7, #22]
 80187b8:	4619      	mov	r1, r3
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f7f4 fbca 	bl	800cf54 <pbuf_remove_header>
 80187c0:	4603      	mov	r3, r0
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d11e      	bne.n	8018804 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80187c6:	6839      	ldr	r1, [r7, #0]
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f7fe ff03 	bl	80175d4 <ip4_input>
      break;
 80187ce:	e013      	b.n	80187f8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80187d6:	f003 0308 	and.w	r3, r3, #8
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d014      	beq.n	8018808 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80187de:	8afb      	ldrh	r3, [r7, #22]
 80187e0:	4619      	mov	r1, r3
 80187e2:	6878      	ldr	r0, [r7, #4]
 80187e4:	f7f4 fbb6 	bl	800cf54 <pbuf_remove_header>
 80187e8:	4603      	mov	r3, r0
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d10e      	bne.n	801880c <ethernet_input+0x104>
        etharp_input(p, netif);
 80187ee:	6839      	ldr	r1, [r7, #0]
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f7fe f89f 	bl	8016934 <etharp_input>
      break;
 80187f6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80187f8:	2300      	movs	r3, #0
 80187fa:	e00c      	b.n	8018816 <ethernet_input+0x10e>
    goto free_and_return;
 80187fc:	bf00      	nop
 80187fe:	e006      	b.n	801880e <ethernet_input+0x106>
        goto free_and_return;
 8018800:	bf00      	nop
 8018802:	e004      	b.n	801880e <ethernet_input+0x106>
        goto free_and_return;
 8018804:	bf00      	nop
 8018806:	e002      	b.n	801880e <ethernet_input+0x106>
        goto free_and_return;
 8018808:	bf00      	nop
 801880a:	e000      	b.n	801880e <ethernet_input+0x106>
        goto free_and_return;
 801880c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801880e:	6878      	ldr	r0, [r7, #4]
 8018810:	f7f4 fc26 	bl	800d060 <pbuf_free>
  return ERR_OK;
 8018814:	2300      	movs	r3, #0
}
 8018816:	4618      	mov	r0, r3
 8018818:	3718      	adds	r7, #24
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	08028184 	.word	0x08028184

08018824 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018824:	b580      	push	{r7, lr}
 8018826:	b086      	sub	sp, #24
 8018828:	af00      	add	r7, sp, #0
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
 8018830:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018832:	8c3b      	ldrh	r3, [r7, #32]
 8018834:	4618      	mov	r0, r3
 8018836:	f7f2 ffdf 	bl	800b7f8 <lwip_htons>
 801883a:	4603      	mov	r3, r0
 801883c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801883e:	210e      	movs	r1, #14
 8018840:	68b8      	ldr	r0, [r7, #8]
 8018842:	f7f4 fb77 	bl	800cf34 <pbuf_add_header>
 8018846:	4603      	mov	r3, r0
 8018848:	2b00      	cmp	r3, #0
 801884a:	d125      	bne.n	8018898 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801884c:	68bb      	ldr	r3, [r7, #8]
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018852:	693b      	ldr	r3, [r7, #16]
 8018854:	8afa      	ldrh	r2, [r7, #22]
 8018856:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018858:	693b      	ldr	r3, [r7, #16]
 801885a:	2206      	movs	r2, #6
 801885c:	6839      	ldr	r1, [r7, #0]
 801885e:	4618      	mov	r0, r3
 8018860:	f000 fd39 	bl	80192d6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	3306      	adds	r3, #6
 8018868:	2206      	movs	r2, #6
 801886a:	6879      	ldr	r1, [r7, #4]
 801886c:	4618      	mov	r0, r3
 801886e:	f000 fd32 	bl	80192d6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018878:	2b06      	cmp	r3, #6
 801887a:	d006      	beq.n	801888a <ethernet_output+0x66>
 801887c:	4b0a      	ldr	r3, [pc, #40]	@ (80188a8 <ethernet_output+0x84>)
 801887e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018882:	490a      	ldr	r1, [pc, #40]	@ (80188ac <ethernet_output+0x88>)
 8018884:	480a      	ldr	r0, [pc, #40]	@ (80188b0 <ethernet_output+0x8c>)
 8018886:	f000 fb25 	bl	8018ed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	699b      	ldr	r3, [r3, #24]
 801888e:	68b9      	ldr	r1, [r7, #8]
 8018890:	68f8      	ldr	r0, [r7, #12]
 8018892:	4798      	blx	r3
 8018894:	4603      	mov	r3, r0
 8018896:	e002      	b.n	801889e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018898:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801889a:	f06f 0301 	mvn.w	r3, #1
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3718      	adds	r7, #24
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	0801de68 	.word	0x0801de68
 80188ac:	0801dea0 	.word	0x0801dea0
 80188b0:	0801ded4 	.word	0x0801ded4

080188b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b086      	sub	sp, #24
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	60bb      	str	r3, [r7, #8]
 80188c2:	2304      	movs	r3, #4
 80188c4:	60fb      	str	r3, [r7, #12]
 80188c6:	2300      	movs	r3, #0
 80188c8:	613b      	str	r3, [r7, #16]
 80188ca:	2300      	movs	r3, #0
 80188cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80188ce:	f107 0308 	add.w	r3, r7, #8
 80188d2:	2100      	movs	r1, #0
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7ec feb0 	bl	800563a <osMessageCreate>
 80188da:	4602      	mov	r2, r0
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d102      	bne.n	80188ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 80188e8:	f04f 33ff 	mov.w	r3, #4294967295
 80188ec:	e000      	b.n	80188f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80188ee:	2300      	movs	r3, #0
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3718      	adds	r7, #24
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	4618      	mov	r0, r3
 8018906:	f7ec ff75 	bl	80057f4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	4618      	mov	r0, r3
 8018910:	f7ec ff86 	bl	8005820 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018914:	bf00      	nop
 8018916:	3708      	adds	r7, #8
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}

0801891c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	6839      	ldr	r1, [r7, #0]
 801892c:	2200      	movs	r2, #0
 801892e:	4618      	mov	r0, r3
 8018930:	f7ec feac 	bl	800568c <osMessagePut>
 8018934:	4603      	mov	r3, r0
 8018936:	2b00      	cmp	r3, #0
 8018938:	d102      	bne.n	8018940 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801893a:	2300      	movs	r3, #0
 801893c:	73fb      	strb	r3, [r7, #15]
 801893e:	e001      	b.n	8018944 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018940:	23ff      	movs	r3, #255	@ 0xff
 8018942:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018948:	4618      	mov	r0, r3
 801894a:	3710      	adds	r7, #16
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}

08018950 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b08c      	sub	sp, #48	@ 0x30
 8018954:	af00      	add	r7, sp, #0
 8018956:	61f8      	str	r0, [r7, #28]
 8018958:	61b9      	str	r1, [r7, #24]
 801895a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801895c:	f7ec fc98 	bl	8005290 <osKernelSysTick>
 8018960:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018962:	697b      	ldr	r3, [r7, #20]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d017      	beq.n	8018998 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018968:	69fb      	ldr	r3, [r7, #28]
 801896a:	6819      	ldr	r1, [r3, #0]
 801896c:	f107 0320 	add.w	r3, r7, #32
 8018970:	697a      	ldr	r2, [r7, #20]
 8018972:	4618      	mov	r0, r3
 8018974:	f7ec feca 	bl	800570c <osMessageGet>

    if(event.status == osEventMessage)
 8018978:	6a3b      	ldr	r3, [r7, #32]
 801897a:	2b10      	cmp	r3, #16
 801897c:	d109      	bne.n	8018992 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018980:	461a      	mov	r2, r3
 8018982:	69bb      	ldr	r3, [r7, #24]
 8018984:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018986:	f7ec fc83 	bl	8005290 <osKernelSysTick>
 801898a:	4602      	mov	r2, r0
 801898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801898e:	1ad3      	subs	r3, r2, r3
 8018990:	e019      	b.n	80189c6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018992:	f04f 33ff 	mov.w	r3, #4294967295
 8018996:	e016      	b.n	80189c6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018998:	69fb      	ldr	r3, [r7, #28]
 801899a:	6819      	ldr	r1, [r3, #0]
 801899c:	463b      	mov	r3, r7
 801899e:	f04f 32ff 	mov.w	r2, #4294967295
 80189a2:	4618      	mov	r0, r3
 80189a4:	f7ec feb2 	bl	800570c <osMessageGet>
 80189a8:	f107 0320 	add.w	r3, r7, #32
 80189ac:	463a      	mov	r2, r7
 80189ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80189b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80189b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189b6:	461a      	mov	r2, r3
 80189b8:	69bb      	ldr	r3, [r7, #24]
 80189ba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80189bc:	f7ec fc68 	bl	8005290 <osKernelSysTick>
 80189c0:	4602      	mov	r2, r0
 80189c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189c4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3730      	adds	r7, #48	@ 0x30
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}

080189ce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80189ce:	b580      	push	{r7, lr}
 80189d0:	b086      	sub	sp, #24
 80189d2:	af00      	add	r7, sp, #0
 80189d4:	6078      	str	r0, [r7, #4]
 80189d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6819      	ldr	r1, [r3, #0]
 80189dc:	f107 030c 	add.w	r3, r7, #12
 80189e0:	2200      	movs	r2, #0
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7ec fe92 	bl	800570c <osMessageGet>

  if(event.status == osEventMessage)
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	2b10      	cmp	r3, #16
 80189ec:	d105      	bne.n	80189fa <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80189ee:	693b      	ldr	r3, [r7, #16]
 80189f0:	461a      	mov	r2, r3
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80189f6:	2300      	movs	r3, #0
 80189f8:	e001      	b.n	80189fe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80189fa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80189fe:	4618      	mov	r0, r3
 8018a00:	3718      	adds	r7, #24
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}

08018a06 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018a06:	b480      	push	{r7}
 8018a08:	b083      	sub	sp, #12
 8018a0a:	af00      	add	r7, sp, #0
 8018a0c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d101      	bne.n	8018a1a <sys_mbox_valid+0x14>
    return 0;
 8018a16:	2300      	movs	r3, #0
 8018a18:	e000      	b.n	8018a1c <sys_mbox_valid+0x16>
  else
    return 1;
 8018a1a:	2301      	movs	r3, #1
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	370c      	adds	r7, #12
 8018a20:	46bd      	mov	sp, r7
 8018a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a26:	4770      	bx	lr

08018a28 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018a28:	b480      	push	{r7}
 8018a2a:	b083      	sub	sp, #12
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	2200      	movs	r2, #0
 8018a34:	601a      	str	r2, [r3, #0]
}
 8018a36:	bf00      	nop
 8018a38:	370c      	adds	r7, #12
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a40:	4770      	bx	lr

08018a42 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018a42:	b580      	push	{r7, lr}
 8018a44:	b084      	sub	sp, #16
 8018a46:	af00      	add	r7, sp, #0
 8018a48:	6078      	str	r0, [r7, #4]
 8018a4a:	460b      	mov	r3, r1
 8018a4c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018a4e:	2300      	movs	r3, #0
 8018a50:	60bb      	str	r3, [r7, #8]
 8018a52:	2300      	movs	r3, #0
 8018a54:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018a56:	f107 0308 	add.w	r3, r7, #8
 8018a5a:	2101      	movs	r1, #1
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f7ec fd23 	bl	80054a8 <osSemaphoreCreate>
 8018a62:	4602      	mov	r2, r0
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d102      	bne.n	8018a76 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018a70:	f04f 33ff 	mov.w	r3, #4294967295
 8018a74:	e009      	b.n	8018a8a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018a76:	78fb      	ldrb	r3, [r7, #3]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d105      	bne.n	8018a88 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	2100      	movs	r1, #0
 8018a82:	4618      	mov	r0, r3
 8018a84:	f7ec fd42 	bl	800550c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018a88:	2300      	movs	r3, #0
}
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	3710      	adds	r7, #16
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}

08018a92 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018a92:	b580      	push	{r7, lr}
 8018a94:	b084      	sub	sp, #16
 8018a96:	af00      	add	r7, sp, #0
 8018a98:	6078      	str	r0, [r7, #4]
 8018a9a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018a9c:	f7ec fbf8 	bl	8005290 <osKernelSysTick>
 8018aa0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d011      	beq.n	8018acc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	6839      	ldr	r1, [r7, #0]
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f7ec fd2c 	bl	800550c <osSemaphoreWait>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d105      	bne.n	8018ac6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018aba:	f7ec fbe9 	bl	8005290 <osKernelSysTick>
 8018abe:	4602      	mov	r2, r0
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	1ad3      	subs	r3, r2, r3
 8018ac4:	e012      	b.n	8018aec <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8018aca:	e00f      	b.n	8018aec <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018acc:	bf00      	nop
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7ec fd18 	bl	800550c <osSemaphoreWait>
 8018adc:	4603      	mov	r3, r0
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d1f5      	bne.n	8018ace <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018ae2:	f7ec fbd5 	bl	8005290 <osKernelSysTick>
 8018ae6:	4602      	mov	r2, r0
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018aec:	4618      	mov	r0, r3
 8018aee:	3710      	adds	r7, #16
 8018af0:	46bd      	mov	sp, r7
 8018af2:	bd80      	pop	{r7, pc}

08018af4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b082      	sub	sp, #8
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7ec fd51 	bl	80055a8 <osSemaphoreRelease>
}
 8018b06:	bf00      	nop
 8018b08:	3708      	adds	r7, #8
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bd80      	pop	{r7, pc}

08018b0e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018b0e:	b580      	push	{r7, lr}
 8018b10:	b082      	sub	sp, #8
 8018b12:	af00      	add	r7, sp, #0
 8018b14:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7ec fd7a 	bl	8005614 <osSemaphoreDelete>
}
 8018b20:	bf00      	nop
 8018b22:	3708      	adds	r7, #8
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}

08018b28 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018b28:	b480      	push	{r7}
 8018b2a:	b083      	sub	sp, #12
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d101      	bne.n	8018b3c <sys_sem_valid+0x14>
    return 0;
 8018b38:	2300      	movs	r3, #0
 8018b3a:	e000      	b.n	8018b3e <sys_sem_valid+0x16>
  else
    return 1;
 8018b3c:	2301      	movs	r3, #1
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	370c      	adds	r7, #12
 8018b42:	46bd      	mov	sp, r7
 8018b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b48:	4770      	bx	lr

08018b4a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018b4a:	b480      	push	{r7}
 8018b4c:	b083      	sub	sp, #12
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2200      	movs	r2, #0
 8018b56:	601a      	str	r2, [r3, #0]
}
 8018b58:	bf00      	nop
 8018b5a:	370c      	adds	r7, #12
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b62:	4770      	bx	lr

08018b64 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018b68:	4803      	ldr	r0, [pc, #12]	@ (8018b78 <sys_init+0x14>)
 8018b6a:	f7ec fc01 	bl	8005370 <osMutexCreate>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	4a02      	ldr	r2, [pc, #8]	@ (8018b7c <sys_init+0x18>)
 8018b72:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018b74:	bf00      	nop
 8018b76:	bd80      	pop	{r7, pc}
 8018b78:	08028194 	.word	0x08028194
 8018b7c:	20011104 	.word	0x20011104

08018b80 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b084      	sub	sp, #16
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018b88:	2300      	movs	r3, #0
 8018b8a:	60bb      	str	r3, [r7, #8]
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018b90:	f107 0308 	add.w	r3, r7, #8
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7ec fbeb 	bl	8005370 <osMutexCreate>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d102      	bne.n	8018bae <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8018bac:	e000      	b.n	8018bb0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018bae:	2300      	movs	r3, #0
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3710      	adds	r7, #16
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7ec fbe9 	bl	80053a0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018bce:	bf00      	nop
 8018bd0:	3708      	adds	r7, #8
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}

08018bd6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018bd6:	b580      	push	{r7, lr}
 8018bd8:	b082      	sub	sp, #8
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7ec fc2a 	bl	800543c <osMutexRelease>
}
 8018be8:	bf00      	nop
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}

08018bf0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b08c      	sub	sp, #48	@ 0x30
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	60f8      	str	r0, [r7, #12]
 8018bf8:	60b9      	str	r1, [r7, #8]
 8018bfa:	607a      	str	r2, [r7, #4]
 8018bfc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018bfe:	f107 0314 	add.w	r3, r7, #20
 8018c02:	2200      	movs	r2, #0
 8018c04:	601a      	str	r2, [r3, #0]
 8018c06:	605a      	str	r2, [r3, #4]
 8018c08:	609a      	str	r2, [r3, #8]
 8018c0a:	60da      	str	r2, [r3, #12]
 8018c0c:	611a      	str	r2, [r3, #16]
 8018c0e:	615a      	str	r2, [r3, #20]
 8018c10:	619a      	str	r2, [r3, #24]
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	617b      	str	r3, [r7, #20]
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	61bb      	str	r3, [r7, #24]
 8018c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c1c:	b21b      	sxth	r3, r3
 8018c1e:	83bb      	strh	r3, [r7, #28]
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018c24:	f107 0314 	add.w	r3, r7, #20
 8018c28:	6879      	ldr	r1, [r7, #4]
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7ec fb40 	bl	80052b0 <osThreadCreate>
 8018c30:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3730      	adds	r7, #48	@ 0x30
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}
	...

08018c3c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018c40:	4b04      	ldr	r3, [pc, #16]	@ (8018c54 <sys_arch_protect+0x18>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	f04f 31ff 	mov.w	r1, #4294967295
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f7ec fba9 	bl	80053a0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018c4e:	2301      	movs	r3, #1
}
 8018c50:	4618      	mov	r0, r3
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	20011104 	.word	0x20011104

08018c58 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018c60:	4b04      	ldr	r3, [pc, #16]	@ (8018c74 <sys_arch_unprotect+0x1c>)
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7ec fbe9 	bl	800543c <osMutexRelease>
}
 8018c6a:	bf00      	nop
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
 8018c72:	bf00      	nop
 8018c74:	20011104 	.word	0x20011104

08018c78 <srand>:
 8018c78:	b538      	push	{r3, r4, r5, lr}
 8018c7a:	4b10      	ldr	r3, [pc, #64]	@ (8018cbc <srand+0x44>)
 8018c7c:	681d      	ldr	r5, [r3, #0]
 8018c7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018c80:	4604      	mov	r4, r0
 8018c82:	b9b3      	cbnz	r3, 8018cb2 <srand+0x3a>
 8018c84:	2018      	movs	r0, #24
 8018c86:	f000 fb9d 	bl	80193c4 <malloc>
 8018c8a:	4602      	mov	r2, r0
 8018c8c:	6328      	str	r0, [r5, #48]	@ 0x30
 8018c8e:	b920      	cbnz	r0, 8018c9a <srand+0x22>
 8018c90:	4b0b      	ldr	r3, [pc, #44]	@ (8018cc0 <srand+0x48>)
 8018c92:	480c      	ldr	r0, [pc, #48]	@ (8018cc4 <srand+0x4c>)
 8018c94:	2146      	movs	r1, #70	@ 0x46
 8018c96:	f000 fb2d 	bl	80192f4 <__assert_func>
 8018c9a:	490b      	ldr	r1, [pc, #44]	@ (8018cc8 <srand+0x50>)
 8018c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8018ccc <srand+0x54>)
 8018c9e:	e9c0 1300 	strd	r1, r3, [r0]
 8018ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8018cd0 <srand+0x58>)
 8018ca4:	6083      	str	r3, [r0, #8]
 8018ca6:	230b      	movs	r3, #11
 8018ca8:	8183      	strh	r3, [r0, #12]
 8018caa:	2100      	movs	r1, #0
 8018cac:	2001      	movs	r0, #1
 8018cae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018cb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	611c      	str	r4, [r3, #16]
 8018cb8:	615a      	str	r2, [r3, #20]
 8018cba:	bd38      	pop	{r3, r4, r5, pc}
 8018cbc:	20000040 	.word	0x20000040
 8018cc0:	0802819c 	.word	0x0802819c
 8018cc4:	080281b3 	.word	0x080281b3
 8018cc8:	abcd330e 	.word	0xabcd330e
 8018ccc:	e66d1234 	.word	0xe66d1234
 8018cd0:	0005deec 	.word	0x0005deec

08018cd4 <rand>:
 8018cd4:	4b16      	ldr	r3, [pc, #88]	@ (8018d30 <rand+0x5c>)
 8018cd6:	b510      	push	{r4, lr}
 8018cd8:	681c      	ldr	r4, [r3, #0]
 8018cda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018cdc:	b9b3      	cbnz	r3, 8018d0c <rand+0x38>
 8018cde:	2018      	movs	r0, #24
 8018ce0:	f000 fb70 	bl	80193c4 <malloc>
 8018ce4:	4602      	mov	r2, r0
 8018ce6:	6320      	str	r0, [r4, #48]	@ 0x30
 8018ce8:	b920      	cbnz	r0, 8018cf4 <rand+0x20>
 8018cea:	4b12      	ldr	r3, [pc, #72]	@ (8018d34 <rand+0x60>)
 8018cec:	4812      	ldr	r0, [pc, #72]	@ (8018d38 <rand+0x64>)
 8018cee:	2152      	movs	r1, #82	@ 0x52
 8018cf0:	f000 fb00 	bl	80192f4 <__assert_func>
 8018cf4:	4911      	ldr	r1, [pc, #68]	@ (8018d3c <rand+0x68>)
 8018cf6:	4b12      	ldr	r3, [pc, #72]	@ (8018d40 <rand+0x6c>)
 8018cf8:	e9c0 1300 	strd	r1, r3, [r0]
 8018cfc:	4b11      	ldr	r3, [pc, #68]	@ (8018d44 <rand+0x70>)
 8018cfe:	6083      	str	r3, [r0, #8]
 8018d00:	230b      	movs	r3, #11
 8018d02:	8183      	strh	r3, [r0, #12]
 8018d04:	2100      	movs	r1, #0
 8018d06:	2001      	movs	r0, #1
 8018d08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018d0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018d0e:	480e      	ldr	r0, [pc, #56]	@ (8018d48 <rand+0x74>)
 8018d10:	690b      	ldr	r3, [r1, #16]
 8018d12:	694c      	ldr	r4, [r1, #20]
 8018d14:	4a0d      	ldr	r2, [pc, #52]	@ (8018d4c <rand+0x78>)
 8018d16:	4358      	muls	r0, r3
 8018d18:	fb02 0004 	mla	r0, r2, r4, r0
 8018d1c:	fba3 3202 	umull	r3, r2, r3, r2
 8018d20:	3301      	adds	r3, #1
 8018d22:	eb40 0002 	adc.w	r0, r0, r2
 8018d26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018d2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018d2e:	bd10      	pop	{r4, pc}
 8018d30:	20000040 	.word	0x20000040
 8018d34:	0802819c 	.word	0x0802819c
 8018d38:	080281b3 	.word	0x080281b3
 8018d3c:	abcd330e 	.word	0xabcd330e
 8018d40:	e66d1234 	.word	0xe66d1234
 8018d44:	0005deec 	.word	0x0005deec
 8018d48:	5851f42d 	.word	0x5851f42d
 8018d4c:	4c957f2d 	.word	0x4c957f2d

08018d50 <std>:
 8018d50:	2300      	movs	r3, #0
 8018d52:	b510      	push	{r4, lr}
 8018d54:	4604      	mov	r4, r0
 8018d56:	e9c0 3300 	strd	r3, r3, [r0]
 8018d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018d5e:	6083      	str	r3, [r0, #8]
 8018d60:	8181      	strh	r1, [r0, #12]
 8018d62:	6643      	str	r3, [r0, #100]	@ 0x64
 8018d64:	81c2      	strh	r2, [r0, #14]
 8018d66:	6183      	str	r3, [r0, #24]
 8018d68:	4619      	mov	r1, r3
 8018d6a:	2208      	movs	r2, #8
 8018d6c:	305c      	adds	r0, #92	@ 0x5c
 8018d6e:	f000 f950 	bl	8019012 <memset>
 8018d72:	4b0d      	ldr	r3, [pc, #52]	@ (8018da8 <std+0x58>)
 8018d74:	6263      	str	r3, [r4, #36]	@ 0x24
 8018d76:	4b0d      	ldr	r3, [pc, #52]	@ (8018dac <std+0x5c>)
 8018d78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8018db0 <std+0x60>)
 8018d7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8018db4 <std+0x64>)
 8018d80:	6323      	str	r3, [r4, #48]	@ 0x30
 8018d82:	4b0d      	ldr	r3, [pc, #52]	@ (8018db8 <std+0x68>)
 8018d84:	6224      	str	r4, [r4, #32]
 8018d86:	429c      	cmp	r4, r3
 8018d88:	d006      	beq.n	8018d98 <std+0x48>
 8018d8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018d8e:	4294      	cmp	r4, r2
 8018d90:	d002      	beq.n	8018d98 <std+0x48>
 8018d92:	33d0      	adds	r3, #208	@ 0xd0
 8018d94:	429c      	cmp	r4, r3
 8018d96:	d105      	bne.n	8018da4 <std+0x54>
 8018d98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018da0:	f000 ba96 	b.w	80192d0 <__retarget_lock_init_recursive>
 8018da4:	bd10      	pop	{r4, pc}
 8018da6:	bf00      	nop
 8018da8:	08018f39 	.word	0x08018f39
 8018dac:	08018f5b 	.word	0x08018f5b
 8018db0:	08018f93 	.word	0x08018f93
 8018db4:	08018fb7 	.word	0x08018fb7
 8018db8:	20011108 	.word	0x20011108

08018dbc <stdio_exit_handler>:
 8018dbc:	4a02      	ldr	r2, [pc, #8]	@ (8018dc8 <stdio_exit_handler+0xc>)
 8018dbe:	4903      	ldr	r1, [pc, #12]	@ (8018dcc <stdio_exit_handler+0x10>)
 8018dc0:	4803      	ldr	r0, [pc, #12]	@ (8018dd0 <stdio_exit_handler+0x14>)
 8018dc2:	f000 b869 	b.w	8018e98 <_fwalk_sglue>
 8018dc6:	bf00      	nop
 8018dc8:	20000034 	.word	0x20000034
 8018dcc:	08019e89 	.word	0x08019e89
 8018dd0:	20000044 	.word	0x20000044

08018dd4 <cleanup_stdio>:
 8018dd4:	6841      	ldr	r1, [r0, #4]
 8018dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8018e08 <cleanup_stdio+0x34>)
 8018dd8:	4299      	cmp	r1, r3
 8018dda:	b510      	push	{r4, lr}
 8018ddc:	4604      	mov	r4, r0
 8018dde:	d001      	beq.n	8018de4 <cleanup_stdio+0x10>
 8018de0:	f001 f852 	bl	8019e88 <_fflush_r>
 8018de4:	68a1      	ldr	r1, [r4, #8]
 8018de6:	4b09      	ldr	r3, [pc, #36]	@ (8018e0c <cleanup_stdio+0x38>)
 8018de8:	4299      	cmp	r1, r3
 8018dea:	d002      	beq.n	8018df2 <cleanup_stdio+0x1e>
 8018dec:	4620      	mov	r0, r4
 8018dee:	f001 f84b 	bl	8019e88 <_fflush_r>
 8018df2:	68e1      	ldr	r1, [r4, #12]
 8018df4:	4b06      	ldr	r3, [pc, #24]	@ (8018e10 <cleanup_stdio+0x3c>)
 8018df6:	4299      	cmp	r1, r3
 8018df8:	d004      	beq.n	8018e04 <cleanup_stdio+0x30>
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e00:	f001 b842 	b.w	8019e88 <_fflush_r>
 8018e04:	bd10      	pop	{r4, pc}
 8018e06:	bf00      	nop
 8018e08:	20011108 	.word	0x20011108
 8018e0c:	20011170 	.word	0x20011170
 8018e10:	200111d8 	.word	0x200111d8

08018e14 <global_stdio_init.part.0>:
 8018e14:	b510      	push	{r4, lr}
 8018e16:	4b0b      	ldr	r3, [pc, #44]	@ (8018e44 <global_stdio_init.part.0+0x30>)
 8018e18:	4c0b      	ldr	r4, [pc, #44]	@ (8018e48 <global_stdio_init.part.0+0x34>)
 8018e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8018e4c <global_stdio_init.part.0+0x38>)
 8018e1c:	601a      	str	r2, [r3, #0]
 8018e1e:	4620      	mov	r0, r4
 8018e20:	2200      	movs	r2, #0
 8018e22:	2104      	movs	r1, #4
 8018e24:	f7ff ff94 	bl	8018d50 <std>
 8018e28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018e2c:	2201      	movs	r2, #1
 8018e2e:	2109      	movs	r1, #9
 8018e30:	f7ff ff8e 	bl	8018d50 <std>
 8018e34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018e38:	2202      	movs	r2, #2
 8018e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e3e:	2112      	movs	r1, #18
 8018e40:	f7ff bf86 	b.w	8018d50 <std>
 8018e44:	20011240 	.word	0x20011240
 8018e48:	20011108 	.word	0x20011108
 8018e4c:	08018dbd 	.word	0x08018dbd

08018e50 <__sfp_lock_acquire>:
 8018e50:	4801      	ldr	r0, [pc, #4]	@ (8018e58 <__sfp_lock_acquire+0x8>)
 8018e52:	f000 ba3e 	b.w	80192d2 <__retarget_lock_acquire_recursive>
 8018e56:	bf00      	nop
 8018e58:	20011249 	.word	0x20011249

08018e5c <__sfp_lock_release>:
 8018e5c:	4801      	ldr	r0, [pc, #4]	@ (8018e64 <__sfp_lock_release+0x8>)
 8018e5e:	f000 ba39 	b.w	80192d4 <__retarget_lock_release_recursive>
 8018e62:	bf00      	nop
 8018e64:	20011249 	.word	0x20011249

08018e68 <__sinit>:
 8018e68:	b510      	push	{r4, lr}
 8018e6a:	4604      	mov	r4, r0
 8018e6c:	f7ff fff0 	bl	8018e50 <__sfp_lock_acquire>
 8018e70:	6a23      	ldr	r3, [r4, #32]
 8018e72:	b11b      	cbz	r3, 8018e7c <__sinit+0x14>
 8018e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e78:	f7ff bff0 	b.w	8018e5c <__sfp_lock_release>
 8018e7c:	4b04      	ldr	r3, [pc, #16]	@ (8018e90 <__sinit+0x28>)
 8018e7e:	6223      	str	r3, [r4, #32]
 8018e80:	4b04      	ldr	r3, [pc, #16]	@ (8018e94 <__sinit+0x2c>)
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d1f5      	bne.n	8018e74 <__sinit+0xc>
 8018e88:	f7ff ffc4 	bl	8018e14 <global_stdio_init.part.0>
 8018e8c:	e7f2      	b.n	8018e74 <__sinit+0xc>
 8018e8e:	bf00      	nop
 8018e90:	08018dd5 	.word	0x08018dd5
 8018e94:	20011240 	.word	0x20011240

08018e98 <_fwalk_sglue>:
 8018e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e9c:	4607      	mov	r7, r0
 8018e9e:	4688      	mov	r8, r1
 8018ea0:	4614      	mov	r4, r2
 8018ea2:	2600      	movs	r6, #0
 8018ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8018eac:	d505      	bpl.n	8018eba <_fwalk_sglue+0x22>
 8018eae:	6824      	ldr	r4, [r4, #0]
 8018eb0:	2c00      	cmp	r4, #0
 8018eb2:	d1f7      	bne.n	8018ea4 <_fwalk_sglue+0xc>
 8018eb4:	4630      	mov	r0, r6
 8018eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018eba:	89ab      	ldrh	r3, [r5, #12]
 8018ebc:	2b01      	cmp	r3, #1
 8018ebe:	d907      	bls.n	8018ed0 <_fwalk_sglue+0x38>
 8018ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018ec4:	3301      	adds	r3, #1
 8018ec6:	d003      	beq.n	8018ed0 <_fwalk_sglue+0x38>
 8018ec8:	4629      	mov	r1, r5
 8018eca:	4638      	mov	r0, r7
 8018ecc:	47c0      	blx	r8
 8018ece:	4306      	orrs	r6, r0
 8018ed0:	3568      	adds	r5, #104	@ 0x68
 8018ed2:	e7e9      	b.n	8018ea8 <_fwalk_sglue+0x10>

08018ed4 <iprintf>:
 8018ed4:	b40f      	push	{r0, r1, r2, r3}
 8018ed6:	b507      	push	{r0, r1, r2, lr}
 8018ed8:	4906      	ldr	r1, [pc, #24]	@ (8018ef4 <iprintf+0x20>)
 8018eda:	ab04      	add	r3, sp, #16
 8018edc:	6808      	ldr	r0, [r1, #0]
 8018ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee2:	6881      	ldr	r1, [r0, #8]
 8018ee4:	9301      	str	r3, [sp, #4]
 8018ee6:	f000 fca5 	bl	8019834 <_vfiprintf_r>
 8018eea:	b003      	add	sp, #12
 8018eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ef0:	b004      	add	sp, #16
 8018ef2:	4770      	bx	lr
 8018ef4:	20000040 	.word	0x20000040

08018ef8 <siprintf>:
 8018ef8:	b40e      	push	{r1, r2, r3}
 8018efa:	b500      	push	{lr}
 8018efc:	b09c      	sub	sp, #112	@ 0x70
 8018efe:	ab1d      	add	r3, sp, #116	@ 0x74
 8018f00:	9002      	str	r0, [sp, #8]
 8018f02:	9006      	str	r0, [sp, #24]
 8018f04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018f08:	4809      	ldr	r0, [pc, #36]	@ (8018f30 <siprintf+0x38>)
 8018f0a:	9107      	str	r1, [sp, #28]
 8018f0c:	9104      	str	r1, [sp, #16]
 8018f0e:	4909      	ldr	r1, [pc, #36]	@ (8018f34 <siprintf+0x3c>)
 8018f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f14:	9105      	str	r1, [sp, #20]
 8018f16:	6800      	ldr	r0, [r0, #0]
 8018f18:	9301      	str	r3, [sp, #4]
 8018f1a:	a902      	add	r1, sp, #8
 8018f1c:	f000 fb64 	bl	80195e8 <_svfiprintf_r>
 8018f20:	9b02      	ldr	r3, [sp, #8]
 8018f22:	2200      	movs	r2, #0
 8018f24:	701a      	strb	r2, [r3, #0]
 8018f26:	b01c      	add	sp, #112	@ 0x70
 8018f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f2c:	b003      	add	sp, #12
 8018f2e:	4770      	bx	lr
 8018f30:	20000040 	.word	0x20000040
 8018f34:	ffff0208 	.word	0xffff0208

08018f38 <__sread>:
 8018f38:	b510      	push	{r4, lr}
 8018f3a:	460c      	mov	r4, r1
 8018f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f40:	f000 f97e 	bl	8019240 <_read_r>
 8018f44:	2800      	cmp	r0, #0
 8018f46:	bfab      	itete	ge
 8018f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8018f4c:	181b      	addge	r3, r3, r0
 8018f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018f52:	bfac      	ite	ge
 8018f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018f56:	81a3      	strhlt	r3, [r4, #12]
 8018f58:	bd10      	pop	{r4, pc}

08018f5a <__swrite>:
 8018f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f5e:	461f      	mov	r7, r3
 8018f60:	898b      	ldrh	r3, [r1, #12]
 8018f62:	05db      	lsls	r3, r3, #23
 8018f64:	4605      	mov	r5, r0
 8018f66:	460c      	mov	r4, r1
 8018f68:	4616      	mov	r6, r2
 8018f6a:	d505      	bpl.n	8018f78 <__swrite+0x1e>
 8018f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f70:	2302      	movs	r3, #2
 8018f72:	2200      	movs	r2, #0
 8018f74:	f000 f952 	bl	801921c <_lseek_r>
 8018f78:	89a3      	ldrh	r3, [r4, #12]
 8018f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018f82:	81a3      	strh	r3, [r4, #12]
 8018f84:	4632      	mov	r2, r6
 8018f86:	463b      	mov	r3, r7
 8018f88:	4628      	mov	r0, r5
 8018f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f8e:	f000 b969 	b.w	8019264 <_write_r>

08018f92 <__sseek>:
 8018f92:	b510      	push	{r4, lr}
 8018f94:	460c      	mov	r4, r1
 8018f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f9a:	f000 f93f 	bl	801921c <_lseek_r>
 8018f9e:	1c43      	adds	r3, r0, #1
 8018fa0:	89a3      	ldrh	r3, [r4, #12]
 8018fa2:	bf15      	itete	ne
 8018fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018fae:	81a3      	strheq	r3, [r4, #12]
 8018fb0:	bf18      	it	ne
 8018fb2:	81a3      	strhne	r3, [r4, #12]
 8018fb4:	bd10      	pop	{r4, pc}

08018fb6 <__sclose>:
 8018fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fba:	f000 b8c9 	b.w	8019150 <_close_r>

08018fbe <memcmp>:
 8018fbe:	b510      	push	{r4, lr}
 8018fc0:	3901      	subs	r1, #1
 8018fc2:	4402      	add	r2, r0
 8018fc4:	4290      	cmp	r0, r2
 8018fc6:	d101      	bne.n	8018fcc <memcmp+0xe>
 8018fc8:	2000      	movs	r0, #0
 8018fca:	e005      	b.n	8018fd8 <memcmp+0x1a>
 8018fcc:	7803      	ldrb	r3, [r0, #0]
 8018fce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018fd2:	42a3      	cmp	r3, r4
 8018fd4:	d001      	beq.n	8018fda <memcmp+0x1c>
 8018fd6:	1b18      	subs	r0, r3, r4
 8018fd8:	bd10      	pop	{r4, pc}
 8018fda:	3001      	adds	r0, #1
 8018fdc:	e7f2      	b.n	8018fc4 <memcmp+0x6>

08018fde <memmove>:
 8018fde:	4288      	cmp	r0, r1
 8018fe0:	b510      	push	{r4, lr}
 8018fe2:	eb01 0402 	add.w	r4, r1, r2
 8018fe6:	d902      	bls.n	8018fee <memmove+0x10>
 8018fe8:	4284      	cmp	r4, r0
 8018fea:	4623      	mov	r3, r4
 8018fec:	d807      	bhi.n	8018ffe <memmove+0x20>
 8018fee:	1e43      	subs	r3, r0, #1
 8018ff0:	42a1      	cmp	r1, r4
 8018ff2:	d008      	beq.n	8019006 <memmove+0x28>
 8018ff4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018ff8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ffc:	e7f8      	b.n	8018ff0 <memmove+0x12>
 8018ffe:	4402      	add	r2, r0
 8019000:	4601      	mov	r1, r0
 8019002:	428a      	cmp	r2, r1
 8019004:	d100      	bne.n	8019008 <memmove+0x2a>
 8019006:	bd10      	pop	{r4, pc}
 8019008:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801900c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019010:	e7f7      	b.n	8019002 <memmove+0x24>

08019012 <memset>:
 8019012:	4402      	add	r2, r0
 8019014:	4603      	mov	r3, r0
 8019016:	4293      	cmp	r3, r2
 8019018:	d100      	bne.n	801901c <memset+0xa>
 801901a:	4770      	bx	lr
 801901c:	f803 1b01 	strb.w	r1, [r3], #1
 8019020:	e7f9      	b.n	8019016 <memset+0x4>
	...

08019024 <strcasecmp>:
 8019024:	b530      	push	{r4, r5, lr}
 8019026:	4d0b      	ldr	r5, [pc, #44]	@ (8019054 <strcasecmp+0x30>)
 8019028:	4604      	mov	r4, r0
 801902a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801902e:	5cea      	ldrb	r2, [r5, r3]
 8019030:	f002 0203 	and.w	r2, r2, #3
 8019034:	2a01      	cmp	r2, #1
 8019036:	f811 2b01 	ldrb.w	r2, [r1], #1
 801903a:	5ca8      	ldrb	r0, [r5, r2]
 801903c:	f000 0003 	and.w	r0, r0, #3
 8019040:	bf08      	it	eq
 8019042:	3320      	addeq	r3, #32
 8019044:	2801      	cmp	r0, #1
 8019046:	bf08      	it	eq
 8019048:	3220      	addeq	r2, #32
 801904a:	1a98      	subs	r0, r3, r2
 801904c:	d101      	bne.n	8019052 <strcasecmp+0x2e>
 801904e:	2a00      	cmp	r2, #0
 8019050:	d1eb      	bne.n	801902a <strcasecmp+0x6>
 8019052:	bd30      	pop	{r4, r5, pc}
 8019054:	0802820c 	.word	0x0802820c

08019058 <strchr>:
 8019058:	b2c9      	uxtb	r1, r1
 801905a:	4603      	mov	r3, r0
 801905c:	4618      	mov	r0, r3
 801905e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019062:	b112      	cbz	r2, 801906a <strchr+0x12>
 8019064:	428a      	cmp	r2, r1
 8019066:	d1f9      	bne.n	801905c <strchr+0x4>
 8019068:	4770      	bx	lr
 801906a:	2900      	cmp	r1, #0
 801906c:	bf18      	it	ne
 801906e:	2000      	movne	r0, #0
 8019070:	4770      	bx	lr

08019072 <strncmp>:
 8019072:	b510      	push	{r4, lr}
 8019074:	b16a      	cbz	r2, 8019092 <strncmp+0x20>
 8019076:	3901      	subs	r1, #1
 8019078:	1884      	adds	r4, r0, r2
 801907a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801907e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019082:	429a      	cmp	r2, r3
 8019084:	d103      	bne.n	801908e <strncmp+0x1c>
 8019086:	42a0      	cmp	r0, r4
 8019088:	d001      	beq.n	801908e <strncmp+0x1c>
 801908a:	2a00      	cmp	r2, #0
 801908c:	d1f5      	bne.n	801907a <strncmp+0x8>
 801908e:	1ad0      	subs	r0, r2, r3
 8019090:	bd10      	pop	{r4, pc}
 8019092:	4610      	mov	r0, r2
 8019094:	e7fc      	b.n	8019090 <strncmp+0x1e>
	...

08019098 <strtok>:
 8019098:	4b16      	ldr	r3, [pc, #88]	@ (80190f4 <strtok+0x5c>)
 801909a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801909e:	681f      	ldr	r7, [r3, #0]
 80190a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80190a2:	4605      	mov	r5, r0
 80190a4:	460e      	mov	r6, r1
 80190a6:	b9ec      	cbnz	r4, 80190e4 <strtok+0x4c>
 80190a8:	2050      	movs	r0, #80	@ 0x50
 80190aa:	f000 f98b 	bl	80193c4 <malloc>
 80190ae:	4602      	mov	r2, r0
 80190b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80190b2:	b920      	cbnz	r0, 80190be <strtok+0x26>
 80190b4:	4b10      	ldr	r3, [pc, #64]	@ (80190f8 <strtok+0x60>)
 80190b6:	4811      	ldr	r0, [pc, #68]	@ (80190fc <strtok+0x64>)
 80190b8:	215b      	movs	r1, #91	@ 0x5b
 80190ba:	f000 f91b 	bl	80192f4 <__assert_func>
 80190be:	e9c0 4400 	strd	r4, r4, [r0]
 80190c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80190c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80190ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80190ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80190d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80190d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80190da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80190de:	6184      	str	r4, [r0, #24]
 80190e0:	7704      	strb	r4, [r0, #28]
 80190e2:	6244      	str	r4, [r0, #36]	@ 0x24
 80190e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80190e6:	4631      	mov	r1, r6
 80190e8:	4628      	mov	r0, r5
 80190ea:	2301      	movs	r3, #1
 80190ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190f0:	f000 b806 	b.w	8019100 <__strtok_r>
 80190f4:	20000040 	.word	0x20000040
 80190f8:	0802819c 	.word	0x0802819c
 80190fc:	0802830c 	.word	0x0802830c

08019100 <__strtok_r>:
 8019100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019102:	4604      	mov	r4, r0
 8019104:	b908      	cbnz	r0, 801910a <__strtok_r+0xa>
 8019106:	6814      	ldr	r4, [r2, #0]
 8019108:	b144      	cbz	r4, 801911c <__strtok_r+0x1c>
 801910a:	4620      	mov	r0, r4
 801910c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8019110:	460f      	mov	r7, r1
 8019112:	f817 6b01 	ldrb.w	r6, [r7], #1
 8019116:	b91e      	cbnz	r6, 8019120 <__strtok_r+0x20>
 8019118:	b965      	cbnz	r5, 8019134 <__strtok_r+0x34>
 801911a:	6015      	str	r5, [r2, #0]
 801911c:	2000      	movs	r0, #0
 801911e:	e005      	b.n	801912c <__strtok_r+0x2c>
 8019120:	42b5      	cmp	r5, r6
 8019122:	d1f6      	bne.n	8019112 <__strtok_r+0x12>
 8019124:	2b00      	cmp	r3, #0
 8019126:	d1f0      	bne.n	801910a <__strtok_r+0xa>
 8019128:	6014      	str	r4, [r2, #0]
 801912a:	7003      	strb	r3, [r0, #0]
 801912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801912e:	461c      	mov	r4, r3
 8019130:	e00c      	b.n	801914c <__strtok_r+0x4c>
 8019132:	b915      	cbnz	r5, 801913a <__strtok_r+0x3a>
 8019134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019138:	460e      	mov	r6, r1
 801913a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801913e:	42ab      	cmp	r3, r5
 8019140:	d1f7      	bne.n	8019132 <__strtok_r+0x32>
 8019142:	2b00      	cmp	r3, #0
 8019144:	d0f3      	beq.n	801912e <__strtok_r+0x2e>
 8019146:	2300      	movs	r3, #0
 8019148:	f804 3c01 	strb.w	r3, [r4, #-1]
 801914c:	6014      	str	r4, [r2, #0]
 801914e:	e7ed      	b.n	801912c <__strtok_r+0x2c>

08019150 <_close_r>:
 8019150:	b538      	push	{r3, r4, r5, lr}
 8019152:	4d06      	ldr	r5, [pc, #24]	@ (801916c <_close_r+0x1c>)
 8019154:	2300      	movs	r3, #0
 8019156:	4604      	mov	r4, r0
 8019158:	4608      	mov	r0, r1
 801915a:	602b      	str	r3, [r5, #0]
 801915c:	f7e7 fdb2 	bl	8000cc4 <_close>
 8019160:	1c43      	adds	r3, r0, #1
 8019162:	d102      	bne.n	801916a <_close_r+0x1a>
 8019164:	682b      	ldr	r3, [r5, #0]
 8019166:	b103      	cbz	r3, 801916a <_close_r+0x1a>
 8019168:	6023      	str	r3, [r4, #0]
 801916a:	bd38      	pop	{r3, r4, r5, pc}
 801916c:	20011244 	.word	0x20011244

08019170 <_reclaim_reent>:
 8019170:	4b29      	ldr	r3, [pc, #164]	@ (8019218 <_reclaim_reent+0xa8>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	4283      	cmp	r3, r0
 8019176:	b570      	push	{r4, r5, r6, lr}
 8019178:	4604      	mov	r4, r0
 801917a:	d04b      	beq.n	8019214 <_reclaim_reent+0xa4>
 801917c:	69c3      	ldr	r3, [r0, #28]
 801917e:	b1ab      	cbz	r3, 80191ac <_reclaim_reent+0x3c>
 8019180:	68db      	ldr	r3, [r3, #12]
 8019182:	b16b      	cbz	r3, 80191a0 <_reclaim_reent+0x30>
 8019184:	2500      	movs	r5, #0
 8019186:	69e3      	ldr	r3, [r4, #28]
 8019188:	68db      	ldr	r3, [r3, #12]
 801918a:	5959      	ldr	r1, [r3, r5]
 801918c:	2900      	cmp	r1, #0
 801918e:	d13b      	bne.n	8019208 <_reclaim_reent+0x98>
 8019190:	3504      	adds	r5, #4
 8019192:	2d80      	cmp	r5, #128	@ 0x80
 8019194:	d1f7      	bne.n	8019186 <_reclaim_reent+0x16>
 8019196:	69e3      	ldr	r3, [r4, #28]
 8019198:	4620      	mov	r0, r4
 801919a:	68d9      	ldr	r1, [r3, #12]
 801919c:	f000 f8c8 	bl	8019330 <_free_r>
 80191a0:	69e3      	ldr	r3, [r4, #28]
 80191a2:	6819      	ldr	r1, [r3, #0]
 80191a4:	b111      	cbz	r1, 80191ac <_reclaim_reent+0x3c>
 80191a6:	4620      	mov	r0, r4
 80191a8:	f000 f8c2 	bl	8019330 <_free_r>
 80191ac:	6961      	ldr	r1, [r4, #20]
 80191ae:	b111      	cbz	r1, 80191b6 <_reclaim_reent+0x46>
 80191b0:	4620      	mov	r0, r4
 80191b2:	f000 f8bd 	bl	8019330 <_free_r>
 80191b6:	69e1      	ldr	r1, [r4, #28]
 80191b8:	b111      	cbz	r1, 80191c0 <_reclaim_reent+0x50>
 80191ba:	4620      	mov	r0, r4
 80191bc:	f000 f8b8 	bl	8019330 <_free_r>
 80191c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80191c2:	b111      	cbz	r1, 80191ca <_reclaim_reent+0x5a>
 80191c4:	4620      	mov	r0, r4
 80191c6:	f000 f8b3 	bl	8019330 <_free_r>
 80191ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80191cc:	b111      	cbz	r1, 80191d4 <_reclaim_reent+0x64>
 80191ce:	4620      	mov	r0, r4
 80191d0:	f000 f8ae 	bl	8019330 <_free_r>
 80191d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80191d6:	b111      	cbz	r1, 80191de <_reclaim_reent+0x6e>
 80191d8:	4620      	mov	r0, r4
 80191da:	f000 f8a9 	bl	8019330 <_free_r>
 80191de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80191e0:	b111      	cbz	r1, 80191e8 <_reclaim_reent+0x78>
 80191e2:	4620      	mov	r0, r4
 80191e4:	f000 f8a4 	bl	8019330 <_free_r>
 80191e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80191ea:	b111      	cbz	r1, 80191f2 <_reclaim_reent+0x82>
 80191ec:	4620      	mov	r0, r4
 80191ee:	f000 f89f 	bl	8019330 <_free_r>
 80191f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80191f4:	b111      	cbz	r1, 80191fc <_reclaim_reent+0x8c>
 80191f6:	4620      	mov	r0, r4
 80191f8:	f000 f89a 	bl	8019330 <_free_r>
 80191fc:	6a23      	ldr	r3, [r4, #32]
 80191fe:	b14b      	cbz	r3, 8019214 <_reclaim_reent+0xa4>
 8019200:	4620      	mov	r0, r4
 8019202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019206:	4718      	bx	r3
 8019208:	680e      	ldr	r6, [r1, #0]
 801920a:	4620      	mov	r0, r4
 801920c:	f000 f890 	bl	8019330 <_free_r>
 8019210:	4631      	mov	r1, r6
 8019212:	e7bb      	b.n	801918c <_reclaim_reent+0x1c>
 8019214:	bd70      	pop	{r4, r5, r6, pc}
 8019216:	bf00      	nop
 8019218:	20000040 	.word	0x20000040

0801921c <_lseek_r>:
 801921c:	b538      	push	{r3, r4, r5, lr}
 801921e:	4d07      	ldr	r5, [pc, #28]	@ (801923c <_lseek_r+0x20>)
 8019220:	4604      	mov	r4, r0
 8019222:	4608      	mov	r0, r1
 8019224:	4611      	mov	r1, r2
 8019226:	2200      	movs	r2, #0
 8019228:	602a      	str	r2, [r5, #0]
 801922a:	461a      	mov	r2, r3
 801922c:	f7e7 fd71 	bl	8000d12 <_lseek>
 8019230:	1c43      	adds	r3, r0, #1
 8019232:	d102      	bne.n	801923a <_lseek_r+0x1e>
 8019234:	682b      	ldr	r3, [r5, #0]
 8019236:	b103      	cbz	r3, 801923a <_lseek_r+0x1e>
 8019238:	6023      	str	r3, [r4, #0]
 801923a:	bd38      	pop	{r3, r4, r5, pc}
 801923c:	20011244 	.word	0x20011244

08019240 <_read_r>:
 8019240:	b538      	push	{r3, r4, r5, lr}
 8019242:	4d07      	ldr	r5, [pc, #28]	@ (8019260 <_read_r+0x20>)
 8019244:	4604      	mov	r4, r0
 8019246:	4608      	mov	r0, r1
 8019248:	4611      	mov	r1, r2
 801924a:	2200      	movs	r2, #0
 801924c:	602a      	str	r2, [r5, #0]
 801924e:	461a      	mov	r2, r3
 8019250:	f7e7 fcff 	bl	8000c52 <_read>
 8019254:	1c43      	adds	r3, r0, #1
 8019256:	d102      	bne.n	801925e <_read_r+0x1e>
 8019258:	682b      	ldr	r3, [r5, #0]
 801925a:	b103      	cbz	r3, 801925e <_read_r+0x1e>
 801925c:	6023      	str	r3, [r4, #0]
 801925e:	bd38      	pop	{r3, r4, r5, pc}
 8019260:	20011244 	.word	0x20011244

08019264 <_write_r>:
 8019264:	b538      	push	{r3, r4, r5, lr}
 8019266:	4d07      	ldr	r5, [pc, #28]	@ (8019284 <_write_r+0x20>)
 8019268:	4604      	mov	r4, r0
 801926a:	4608      	mov	r0, r1
 801926c:	4611      	mov	r1, r2
 801926e:	2200      	movs	r2, #0
 8019270:	602a      	str	r2, [r5, #0]
 8019272:	461a      	mov	r2, r3
 8019274:	f7e7 fd0a 	bl	8000c8c <_write>
 8019278:	1c43      	adds	r3, r0, #1
 801927a:	d102      	bne.n	8019282 <_write_r+0x1e>
 801927c:	682b      	ldr	r3, [r5, #0]
 801927e:	b103      	cbz	r3, 8019282 <_write_r+0x1e>
 8019280:	6023      	str	r3, [r4, #0]
 8019282:	bd38      	pop	{r3, r4, r5, pc}
 8019284:	20011244 	.word	0x20011244

08019288 <__libc_init_array>:
 8019288:	b570      	push	{r4, r5, r6, lr}
 801928a:	4d0d      	ldr	r5, [pc, #52]	@ (80192c0 <__libc_init_array+0x38>)
 801928c:	4c0d      	ldr	r4, [pc, #52]	@ (80192c4 <__libc_init_array+0x3c>)
 801928e:	1b64      	subs	r4, r4, r5
 8019290:	10a4      	asrs	r4, r4, #2
 8019292:	2600      	movs	r6, #0
 8019294:	42a6      	cmp	r6, r4
 8019296:	d109      	bne.n	80192ac <__libc_init_array+0x24>
 8019298:	4d0b      	ldr	r5, [pc, #44]	@ (80192c8 <__libc_init_array+0x40>)
 801929a:	4c0c      	ldr	r4, [pc, #48]	@ (80192cc <__libc_init_array+0x44>)
 801929c:	f000 ffd8 	bl	801a250 <_init>
 80192a0:	1b64      	subs	r4, r4, r5
 80192a2:	10a4      	asrs	r4, r4, #2
 80192a4:	2600      	movs	r6, #0
 80192a6:	42a6      	cmp	r6, r4
 80192a8:	d105      	bne.n	80192b6 <__libc_init_array+0x2e>
 80192aa:	bd70      	pop	{r4, r5, r6, pc}
 80192ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80192b0:	4798      	blx	r3
 80192b2:	3601      	adds	r6, #1
 80192b4:	e7ee      	b.n	8019294 <__libc_init_array+0xc>
 80192b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80192ba:	4798      	blx	r3
 80192bc:	3601      	adds	r6, #1
 80192be:	e7f2      	b.n	80192a6 <__libc_init_array+0x1e>
 80192c0:	080283e0 	.word	0x080283e0
 80192c4:	080283e0 	.word	0x080283e0
 80192c8:	080283e0 	.word	0x080283e0
 80192cc:	080283e4 	.word	0x080283e4

080192d0 <__retarget_lock_init_recursive>:
 80192d0:	4770      	bx	lr

080192d2 <__retarget_lock_acquire_recursive>:
 80192d2:	4770      	bx	lr

080192d4 <__retarget_lock_release_recursive>:
 80192d4:	4770      	bx	lr

080192d6 <memcpy>:
 80192d6:	440a      	add	r2, r1
 80192d8:	4291      	cmp	r1, r2
 80192da:	f100 33ff 	add.w	r3, r0, #4294967295
 80192de:	d100      	bne.n	80192e2 <memcpy+0xc>
 80192e0:	4770      	bx	lr
 80192e2:	b510      	push	{r4, lr}
 80192e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80192ec:	4291      	cmp	r1, r2
 80192ee:	d1f9      	bne.n	80192e4 <memcpy+0xe>
 80192f0:	bd10      	pop	{r4, pc}
	...

080192f4 <__assert_func>:
 80192f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192f6:	4614      	mov	r4, r2
 80192f8:	461a      	mov	r2, r3
 80192fa:	4b09      	ldr	r3, [pc, #36]	@ (8019320 <__assert_func+0x2c>)
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	4605      	mov	r5, r0
 8019300:	68d8      	ldr	r0, [r3, #12]
 8019302:	b954      	cbnz	r4, 801931a <__assert_func+0x26>
 8019304:	4b07      	ldr	r3, [pc, #28]	@ (8019324 <__assert_func+0x30>)
 8019306:	461c      	mov	r4, r3
 8019308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801930c:	9100      	str	r1, [sp, #0]
 801930e:	462b      	mov	r3, r5
 8019310:	4905      	ldr	r1, [pc, #20]	@ (8019328 <__assert_func+0x34>)
 8019312:	f000 fde1 	bl	8019ed8 <fiprintf>
 8019316:	f000 fe95 	bl	801a044 <abort>
 801931a:	4b04      	ldr	r3, [pc, #16]	@ (801932c <__assert_func+0x38>)
 801931c:	e7f4      	b.n	8019308 <__assert_func+0x14>
 801931e:	bf00      	nop
 8019320:	20000040 	.word	0x20000040
 8019324:	080283a1 	.word	0x080283a1
 8019328:	08028373 	.word	0x08028373
 801932c:	08028366 	.word	0x08028366

08019330 <_free_r>:
 8019330:	b538      	push	{r3, r4, r5, lr}
 8019332:	4605      	mov	r5, r0
 8019334:	2900      	cmp	r1, #0
 8019336:	d041      	beq.n	80193bc <_free_r+0x8c>
 8019338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801933c:	1f0c      	subs	r4, r1, #4
 801933e:	2b00      	cmp	r3, #0
 8019340:	bfb8      	it	lt
 8019342:	18e4      	addlt	r4, r4, r3
 8019344:	f000 f8e8 	bl	8019518 <__malloc_lock>
 8019348:	4a1d      	ldr	r2, [pc, #116]	@ (80193c0 <_free_r+0x90>)
 801934a:	6813      	ldr	r3, [r2, #0]
 801934c:	b933      	cbnz	r3, 801935c <_free_r+0x2c>
 801934e:	6063      	str	r3, [r4, #4]
 8019350:	6014      	str	r4, [r2, #0]
 8019352:	4628      	mov	r0, r5
 8019354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019358:	f000 b8e4 	b.w	8019524 <__malloc_unlock>
 801935c:	42a3      	cmp	r3, r4
 801935e:	d908      	bls.n	8019372 <_free_r+0x42>
 8019360:	6820      	ldr	r0, [r4, #0]
 8019362:	1821      	adds	r1, r4, r0
 8019364:	428b      	cmp	r3, r1
 8019366:	bf01      	itttt	eq
 8019368:	6819      	ldreq	r1, [r3, #0]
 801936a:	685b      	ldreq	r3, [r3, #4]
 801936c:	1809      	addeq	r1, r1, r0
 801936e:	6021      	streq	r1, [r4, #0]
 8019370:	e7ed      	b.n	801934e <_free_r+0x1e>
 8019372:	461a      	mov	r2, r3
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	b10b      	cbz	r3, 801937c <_free_r+0x4c>
 8019378:	42a3      	cmp	r3, r4
 801937a:	d9fa      	bls.n	8019372 <_free_r+0x42>
 801937c:	6811      	ldr	r1, [r2, #0]
 801937e:	1850      	adds	r0, r2, r1
 8019380:	42a0      	cmp	r0, r4
 8019382:	d10b      	bne.n	801939c <_free_r+0x6c>
 8019384:	6820      	ldr	r0, [r4, #0]
 8019386:	4401      	add	r1, r0
 8019388:	1850      	adds	r0, r2, r1
 801938a:	4283      	cmp	r3, r0
 801938c:	6011      	str	r1, [r2, #0]
 801938e:	d1e0      	bne.n	8019352 <_free_r+0x22>
 8019390:	6818      	ldr	r0, [r3, #0]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	6053      	str	r3, [r2, #4]
 8019396:	4408      	add	r0, r1
 8019398:	6010      	str	r0, [r2, #0]
 801939a:	e7da      	b.n	8019352 <_free_r+0x22>
 801939c:	d902      	bls.n	80193a4 <_free_r+0x74>
 801939e:	230c      	movs	r3, #12
 80193a0:	602b      	str	r3, [r5, #0]
 80193a2:	e7d6      	b.n	8019352 <_free_r+0x22>
 80193a4:	6820      	ldr	r0, [r4, #0]
 80193a6:	1821      	adds	r1, r4, r0
 80193a8:	428b      	cmp	r3, r1
 80193aa:	bf04      	itt	eq
 80193ac:	6819      	ldreq	r1, [r3, #0]
 80193ae:	685b      	ldreq	r3, [r3, #4]
 80193b0:	6063      	str	r3, [r4, #4]
 80193b2:	bf04      	itt	eq
 80193b4:	1809      	addeq	r1, r1, r0
 80193b6:	6021      	streq	r1, [r4, #0]
 80193b8:	6054      	str	r4, [r2, #4]
 80193ba:	e7ca      	b.n	8019352 <_free_r+0x22>
 80193bc:	bd38      	pop	{r3, r4, r5, pc}
 80193be:	bf00      	nop
 80193c0:	20011250 	.word	0x20011250

080193c4 <malloc>:
 80193c4:	4b02      	ldr	r3, [pc, #8]	@ (80193d0 <malloc+0xc>)
 80193c6:	4601      	mov	r1, r0
 80193c8:	6818      	ldr	r0, [r3, #0]
 80193ca:	f000 b825 	b.w	8019418 <_malloc_r>
 80193ce:	bf00      	nop
 80193d0:	20000040 	.word	0x20000040

080193d4 <sbrk_aligned>:
 80193d4:	b570      	push	{r4, r5, r6, lr}
 80193d6:	4e0f      	ldr	r6, [pc, #60]	@ (8019414 <sbrk_aligned+0x40>)
 80193d8:	460c      	mov	r4, r1
 80193da:	6831      	ldr	r1, [r6, #0]
 80193dc:	4605      	mov	r5, r0
 80193de:	b911      	cbnz	r1, 80193e6 <sbrk_aligned+0x12>
 80193e0:	f000 fe20 	bl	801a024 <_sbrk_r>
 80193e4:	6030      	str	r0, [r6, #0]
 80193e6:	4621      	mov	r1, r4
 80193e8:	4628      	mov	r0, r5
 80193ea:	f000 fe1b 	bl	801a024 <_sbrk_r>
 80193ee:	1c43      	adds	r3, r0, #1
 80193f0:	d103      	bne.n	80193fa <sbrk_aligned+0x26>
 80193f2:	f04f 34ff 	mov.w	r4, #4294967295
 80193f6:	4620      	mov	r0, r4
 80193f8:	bd70      	pop	{r4, r5, r6, pc}
 80193fa:	1cc4      	adds	r4, r0, #3
 80193fc:	f024 0403 	bic.w	r4, r4, #3
 8019400:	42a0      	cmp	r0, r4
 8019402:	d0f8      	beq.n	80193f6 <sbrk_aligned+0x22>
 8019404:	1a21      	subs	r1, r4, r0
 8019406:	4628      	mov	r0, r5
 8019408:	f000 fe0c 	bl	801a024 <_sbrk_r>
 801940c:	3001      	adds	r0, #1
 801940e:	d1f2      	bne.n	80193f6 <sbrk_aligned+0x22>
 8019410:	e7ef      	b.n	80193f2 <sbrk_aligned+0x1e>
 8019412:	bf00      	nop
 8019414:	2001124c 	.word	0x2001124c

08019418 <_malloc_r>:
 8019418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801941c:	1ccd      	adds	r5, r1, #3
 801941e:	f025 0503 	bic.w	r5, r5, #3
 8019422:	3508      	adds	r5, #8
 8019424:	2d0c      	cmp	r5, #12
 8019426:	bf38      	it	cc
 8019428:	250c      	movcc	r5, #12
 801942a:	2d00      	cmp	r5, #0
 801942c:	4606      	mov	r6, r0
 801942e:	db01      	blt.n	8019434 <_malloc_r+0x1c>
 8019430:	42a9      	cmp	r1, r5
 8019432:	d904      	bls.n	801943e <_malloc_r+0x26>
 8019434:	230c      	movs	r3, #12
 8019436:	6033      	str	r3, [r6, #0]
 8019438:	2000      	movs	r0, #0
 801943a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801943e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019514 <_malloc_r+0xfc>
 8019442:	f000 f869 	bl	8019518 <__malloc_lock>
 8019446:	f8d8 3000 	ldr.w	r3, [r8]
 801944a:	461c      	mov	r4, r3
 801944c:	bb44      	cbnz	r4, 80194a0 <_malloc_r+0x88>
 801944e:	4629      	mov	r1, r5
 8019450:	4630      	mov	r0, r6
 8019452:	f7ff ffbf 	bl	80193d4 <sbrk_aligned>
 8019456:	1c43      	adds	r3, r0, #1
 8019458:	4604      	mov	r4, r0
 801945a:	d158      	bne.n	801950e <_malloc_r+0xf6>
 801945c:	f8d8 4000 	ldr.w	r4, [r8]
 8019460:	4627      	mov	r7, r4
 8019462:	2f00      	cmp	r7, #0
 8019464:	d143      	bne.n	80194ee <_malloc_r+0xd6>
 8019466:	2c00      	cmp	r4, #0
 8019468:	d04b      	beq.n	8019502 <_malloc_r+0xea>
 801946a:	6823      	ldr	r3, [r4, #0]
 801946c:	4639      	mov	r1, r7
 801946e:	4630      	mov	r0, r6
 8019470:	eb04 0903 	add.w	r9, r4, r3
 8019474:	f000 fdd6 	bl	801a024 <_sbrk_r>
 8019478:	4581      	cmp	r9, r0
 801947a:	d142      	bne.n	8019502 <_malloc_r+0xea>
 801947c:	6821      	ldr	r1, [r4, #0]
 801947e:	1a6d      	subs	r5, r5, r1
 8019480:	4629      	mov	r1, r5
 8019482:	4630      	mov	r0, r6
 8019484:	f7ff ffa6 	bl	80193d4 <sbrk_aligned>
 8019488:	3001      	adds	r0, #1
 801948a:	d03a      	beq.n	8019502 <_malloc_r+0xea>
 801948c:	6823      	ldr	r3, [r4, #0]
 801948e:	442b      	add	r3, r5
 8019490:	6023      	str	r3, [r4, #0]
 8019492:	f8d8 3000 	ldr.w	r3, [r8]
 8019496:	685a      	ldr	r2, [r3, #4]
 8019498:	bb62      	cbnz	r2, 80194f4 <_malloc_r+0xdc>
 801949a:	f8c8 7000 	str.w	r7, [r8]
 801949e:	e00f      	b.n	80194c0 <_malloc_r+0xa8>
 80194a0:	6822      	ldr	r2, [r4, #0]
 80194a2:	1b52      	subs	r2, r2, r5
 80194a4:	d420      	bmi.n	80194e8 <_malloc_r+0xd0>
 80194a6:	2a0b      	cmp	r2, #11
 80194a8:	d917      	bls.n	80194da <_malloc_r+0xc2>
 80194aa:	1961      	adds	r1, r4, r5
 80194ac:	42a3      	cmp	r3, r4
 80194ae:	6025      	str	r5, [r4, #0]
 80194b0:	bf18      	it	ne
 80194b2:	6059      	strne	r1, [r3, #4]
 80194b4:	6863      	ldr	r3, [r4, #4]
 80194b6:	bf08      	it	eq
 80194b8:	f8c8 1000 	streq.w	r1, [r8]
 80194bc:	5162      	str	r2, [r4, r5]
 80194be:	604b      	str	r3, [r1, #4]
 80194c0:	4630      	mov	r0, r6
 80194c2:	f000 f82f 	bl	8019524 <__malloc_unlock>
 80194c6:	f104 000b 	add.w	r0, r4, #11
 80194ca:	1d23      	adds	r3, r4, #4
 80194cc:	f020 0007 	bic.w	r0, r0, #7
 80194d0:	1ac2      	subs	r2, r0, r3
 80194d2:	bf1c      	itt	ne
 80194d4:	1a1b      	subne	r3, r3, r0
 80194d6:	50a3      	strne	r3, [r4, r2]
 80194d8:	e7af      	b.n	801943a <_malloc_r+0x22>
 80194da:	6862      	ldr	r2, [r4, #4]
 80194dc:	42a3      	cmp	r3, r4
 80194de:	bf0c      	ite	eq
 80194e0:	f8c8 2000 	streq.w	r2, [r8]
 80194e4:	605a      	strne	r2, [r3, #4]
 80194e6:	e7eb      	b.n	80194c0 <_malloc_r+0xa8>
 80194e8:	4623      	mov	r3, r4
 80194ea:	6864      	ldr	r4, [r4, #4]
 80194ec:	e7ae      	b.n	801944c <_malloc_r+0x34>
 80194ee:	463c      	mov	r4, r7
 80194f0:	687f      	ldr	r7, [r7, #4]
 80194f2:	e7b6      	b.n	8019462 <_malloc_r+0x4a>
 80194f4:	461a      	mov	r2, r3
 80194f6:	685b      	ldr	r3, [r3, #4]
 80194f8:	42a3      	cmp	r3, r4
 80194fa:	d1fb      	bne.n	80194f4 <_malloc_r+0xdc>
 80194fc:	2300      	movs	r3, #0
 80194fe:	6053      	str	r3, [r2, #4]
 8019500:	e7de      	b.n	80194c0 <_malloc_r+0xa8>
 8019502:	230c      	movs	r3, #12
 8019504:	6033      	str	r3, [r6, #0]
 8019506:	4630      	mov	r0, r6
 8019508:	f000 f80c 	bl	8019524 <__malloc_unlock>
 801950c:	e794      	b.n	8019438 <_malloc_r+0x20>
 801950e:	6005      	str	r5, [r0, #0]
 8019510:	e7d6      	b.n	80194c0 <_malloc_r+0xa8>
 8019512:	bf00      	nop
 8019514:	20011250 	.word	0x20011250

08019518 <__malloc_lock>:
 8019518:	4801      	ldr	r0, [pc, #4]	@ (8019520 <__malloc_lock+0x8>)
 801951a:	f7ff beda 	b.w	80192d2 <__retarget_lock_acquire_recursive>
 801951e:	bf00      	nop
 8019520:	20011248 	.word	0x20011248

08019524 <__malloc_unlock>:
 8019524:	4801      	ldr	r0, [pc, #4]	@ (801952c <__malloc_unlock+0x8>)
 8019526:	f7ff bed5 	b.w	80192d4 <__retarget_lock_release_recursive>
 801952a:	bf00      	nop
 801952c:	20011248 	.word	0x20011248

08019530 <__ssputs_r>:
 8019530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019534:	688e      	ldr	r6, [r1, #8]
 8019536:	461f      	mov	r7, r3
 8019538:	42be      	cmp	r6, r7
 801953a:	680b      	ldr	r3, [r1, #0]
 801953c:	4682      	mov	sl, r0
 801953e:	460c      	mov	r4, r1
 8019540:	4690      	mov	r8, r2
 8019542:	d82d      	bhi.n	80195a0 <__ssputs_r+0x70>
 8019544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019548:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801954c:	d026      	beq.n	801959c <__ssputs_r+0x6c>
 801954e:	6965      	ldr	r5, [r4, #20]
 8019550:	6909      	ldr	r1, [r1, #16]
 8019552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019556:	eba3 0901 	sub.w	r9, r3, r1
 801955a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801955e:	1c7b      	adds	r3, r7, #1
 8019560:	444b      	add	r3, r9
 8019562:	106d      	asrs	r5, r5, #1
 8019564:	429d      	cmp	r5, r3
 8019566:	bf38      	it	cc
 8019568:	461d      	movcc	r5, r3
 801956a:	0553      	lsls	r3, r2, #21
 801956c:	d527      	bpl.n	80195be <__ssputs_r+0x8e>
 801956e:	4629      	mov	r1, r5
 8019570:	f7ff ff52 	bl	8019418 <_malloc_r>
 8019574:	4606      	mov	r6, r0
 8019576:	b360      	cbz	r0, 80195d2 <__ssputs_r+0xa2>
 8019578:	6921      	ldr	r1, [r4, #16]
 801957a:	464a      	mov	r2, r9
 801957c:	f7ff feab 	bl	80192d6 <memcpy>
 8019580:	89a3      	ldrh	r3, [r4, #12]
 8019582:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801958a:	81a3      	strh	r3, [r4, #12]
 801958c:	6126      	str	r6, [r4, #16]
 801958e:	6165      	str	r5, [r4, #20]
 8019590:	444e      	add	r6, r9
 8019592:	eba5 0509 	sub.w	r5, r5, r9
 8019596:	6026      	str	r6, [r4, #0]
 8019598:	60a5      	str	r5, [r4, #8]
 801959a:	463e      	mov	r6, r7
 801959c:	42be      	cmp	r6, r7
 801959e:	d900      	bls.n	80195a2 <__ssputs_r+0x72>
 80195a0:	463e      	mov	r6, r7
 80195a2:	6820      	ldr	r0, [r4, #0]
 80195a4:	4632      	mov	r2, r6
 80195a6:	4641      	mov	r1, r8
 80195a8:	f7ff fd19 	bl	8018fde <memmove>
 80195ac:	68a3      	ldr	r3, [r4, #8]
 80195ae:	1b9b      	subs	r3, r3, r6
 80195b0:	60a3      	str	r3, [r4, #8]
 80195b2:	6823      	ldr	r3, [r4, #0]
 80195b4:	4433      	add	r3, r6
 80195b6:	6023      	str	r3, [r4, #0]
 80195b8:	2000      	movs	r0, #0
 80195ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195be:	462a      	mov	r2, r5
 80195c0:	f000 fd47 	bl	801a052 <_realloc_r>
 80195c4:	4606      	mov	r6, r0
 80195c6:	2800      	cmp	r0, #0
 80195c8:	d1e0      	bne.n	801958c <__ssputs_r+0x5c>
 80195ca:	6921      	ldr	r1, [r4, #16]
 80195cc:	4650      	mov	r0, sl
 80195ce:	f7ff feaf 	bl	8019330 <_free_r>
 80195d2:	230c      	movs	r3, #12
 80195d4:	f8ca 3000 	str.w	r3, [sl]
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195de:	81a3      	strh	r3, [r4, #12]
 80195e0:	f04f 30ff 	mov.w	r0, #4294967295
 80195e4:	e7e9      	b.n	80195ba <__ssputs_r+0x8a>
	...

080195e8 <_svfiprintf_r>:
 80195e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ec:	4698      	mov	r8, r3
 80195ee:	898b      	ldrh	r3, [r1, #12]
 80195f0:	061b      	lsls	r3, r3, #24
 80195f2:	b09d      	sub	sp, #116	@ 0x74
 80195f4:	4607      	mov	r7, r0
 80195f6:	460d      	mov	r5, r1
 80195f8:	4614      	mov	r4, r2
 80195fa:	d510      	bpl.n	801961e <_svfiprintf_r+0x36>
 80195fc:	690b      	ldr	r3, [r1, #16]
 80195fe:	b973      	cbnz	r3, 801961e <_svfiprintf_r+0x36>
 8019600:	2140      	movs	r1, #64	@ 0x40
 8019602:	f7ff ff09 	bl	8019418 <_malloc_r>
 8019606:	6028      	str	r0, [r5, #0]
 8019608:	6128      	str	r0, [r5, #16]
 801960a:	b930      	cbnz	r0, 801961a <_svfiprintf_r+0x32>
 801960c:	230c      	movs	r3, #12
 801960e:	603b      	str	r3, [r7, #0]
 8019610:	f04f 30ff 	mov.w	r0, #4294967295
 8019614:	b01d      	add	sp, #116	@ 0x74
 8019616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801961a:	2340      	movs	r3, #64	@ 0x40
 801961c:	616b      	str	r3, [r5, #20]
 801961e:	2300      	movs	r3, #0
 8019620:	9309      	str	r3, [sp, #36]	@ 0x24
 8019622:	2320      	movs	r3, #32
 8019624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019628:	f8cd 800c 	str.w	r8, [sp, #12]
 801962c:	2330      	movs	r3, #48	@ 0x30
 801962e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80197cc <_svfiprintf_r+0x1e4>
 8019632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019636:	f04f 0901 	mov.w	r9, #1
 801963a:	4623      	mov	r3, r4
 801963c:	469a      	mov	sl, r3
 801963e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019642:	b10a      	cbz	r2, 8019648 <_svfiprintf_r+0x60>
 8019644:	2a25      	cmp	r2, #37	@ 0x25
 8019646:	d1f9      	bne.n	801963c <_svfiprintf_r+0x54>
 8019648:	ebba 0b04 	subs.w	fp, sl, r4
 801964c:	d00b      	beq.n	8019666 <_svfiprintf_r+0x7e>
 801964e:	465b      	mov	r3, fp
 8019650:	4622      	mov	r2, r4
 8019652:	4629      	mov	r1, r5
 8019654:	4638      	mov	r0, r7
 8019656:	f7ff ff6b 	bl	8019530 <__ssputs_r>
 801965a:	3001      	adds	r0, #1
 801965c:	f000 80a7 	beq.w	80197ae <_svfiprintf_r+0x1c6>
 8019660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019662:	445a      	add	r2, fp
 8019664:	9209      	str	r2, [sp, #36]	@ 0x24
 8019666:	f89a 3000 	ldrb.w	r3, [sl]
 801966a:	2b00      	cmp	r3, #0
 801966c:	f000 809f 	beq.w	80197ae <_svfiprintf_r+0x1c6>
 8019670:	2300      	movs	r3, #0
 8019672:	f04f 32ff 	mov.w	r2, #4294967295
 8019676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801967a:	f10a 0a01 	add.w	sl, sl, #1
 801967e:	9304      	str	r3, [sp, #16]
 8019680:	9307      	str	r3, [sp, #28]
 8019682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019686:	931a      	str	r3, [sp, #104]	@ 0x68
 8019688:	4654      	mov	r4, sl
 801968a:	2205      	movs	r2, #5
 801968c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019690:	484e      	ldr	r0, [pc, #312]	@ (80197cc <_svfiprintf_r+0x1e4>)
 8019692:	f7e6 fdc5 	bl	8000220 <memchr>
 8019696:	9a04      	ldr	r2, [sp, #16]
 8019698:	b9d8      	cbnz	r0, 80196d2 <_svfiprintf_r+0xea>
 801969a:	06d0      	lsls	r0, r2, #27
 801969c:	bf44      	itt	mi
 801969e:	2320      	movmi	r3, #32
 80196a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196a4:	0711      	lsls	r1, r2, #28
 80196a6:	bf44      	itt	mi
 80196a8:	232b      	movmi	r3, #43	@ 0x2b
 80196aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196ae:	f89a 3000 	ldrb.w	r3, [sl]
 80196b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80196b4:	d015      	beq.n	80196e2 <_svfiprintf_r+0xfa>
 80196b6:	9a07      	ldr	r2, [sp, #28]
 80196b8:	4654      	mov	r4, sl
 80196ba:	2000      	movs	r0, #0
 80196bc:	f04f 0c0a 	mov.w	ip, #10
 80196c0:	4621      	mov	r1, r4
 80196c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80196c6:	3b30      	subs	r3, #48	@ 0x30
 80196c8:	2b09      	cmp	r3, #9
 80196ca:	d94b      	bls.n	8019764 <_svfiprintf_r+0x17c>
 80196cc:	b1b0      	cbz	r0, 80196fc <_svfiprintf_r+0x114>
 80196ce:	9207      	str	r2, [sp, #28]
 80196d0:	e014      	b.n	80196fc <_svfiprintf_r+0x114>
 80196d2:	eba0 0308 	sub.w	r3, r0, r8
 80196d6:	fa09 f303 	lsl.w	r3, r9, r3
 80196da:	4313      	orrs	r3, r2
 80196dc:	9304      	str	r3, [sp, #16]
 80196de:	46a2      	mov	sl, r4
 80196e0:	e7d2      	b.n	8019688 <_svfiprintf_r+0xa0>
 80196e2:	9b03      	ldr	r3, [sp, #12]
 80196e4:	1d19      	adds	r1, r3, #4
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	9103      	str	r1, [sp, #12]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	bfbb      	ittet	lt
 80196ee:	425b      	neglt	r3, r3
 80196f0:	f042 0202 	orrlt.w	r2, r2, #2
 80196f4:	9307      	strge	r3, [sp, #28]
 80196f6:	9307      	strlt	r3, [sp, #28]
 80196f8:	bfb8      	it	lt
 80196fa:	9204      	strlt	r2, [sp, #16]
 80196fc:	7823      	ldrb	r3, [r4, #0]
 80196fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8019700:	d10a      	bne.n	8019718 <_svfiprintf_r+0x130>
 8019702:	7863      	ldrb	r3, [r4, #1]
 8019704:	2b2a      	cmp	r3, #42	@ 0x2a
 8019706:	d132      	bne.n	801976e <_svfiprintf_r+0x186>
 8019708:	9b03      	ldr	r3, [sp, #12]
 801970a:	1d1a      	adds	r2, r3, #4
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	9203      	str	r2, [sp, #12]
 8019710:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019714:	3402      	adds	r4, #2
 8019716:	9305      	str	r3, [sp, #20]
 8019718:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80197dc <_svfiprintf_r+0x1f4>
 801971c:	7821      	ldrb	r1, [r4, #0]
 801971e:	2203      	movs	r2, #3
 8019720:	4650      	mov	r0, sl
 8019722:	f7e6 fd7d 	bl	8000220 <memchr>
 8019726:	b138      	cbz	r0, 8019738 <_svfiprintf_r+0x150>
 8019728:	9b04      	ldr	r3, [sp, #16]
 801972a:	eba0 000a 	sub.w	r0, r0, sl
 801972e:	2240      	movs	r2, #64	@ 0x40
 8019730:	4082      	lsls	r2, r0
 8019732:	4313      	orrs	r3, r2
 8019734:	3401      	adds	r4, #1
 8019736:	9304      	str	r3, [sp, #16]
 8019738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801973c:	4824      	ldr	r0, [pc, #144]	@ (80197d0 <_svfiprintf_r+0x1e8>)
 801973e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019742:	2206      	movs	r2, #6
 8019744:	f7e6 fd6c 	bl	8000220 <memchr>
 8019748:	2800      	cmp	r0, #0
 801974a:	d036      	beq.n	80197ba <_svfiprintf_r+0x1d2>
 801974c:	4b21      	ldr	r3, [pc, #132]	@ (80197d4 <_svfiprintf_r+0x1ec>)
 801974e:	bb1b      	cbnz	r3, 8019798 <_svfiprintf_r+0x1b0>
 8019750:	9b03      	ldr	r3, [sp, #12]
 8019752:	3307      	adds	r3, #7
 8019754:	f023 0307 	bic.w	r3, r3, #7
 8019758:	3308      	adds	r3, #8
 801975a:	9303      	str	r3, [sp, #12]
 801975c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801975e:	4433      	add	r3, r6
 8019760:	9309      	str	r3, [sp, #36]	@ 0x24
 8019762:	e76a      	b.n	801963a <_svfiprintf_r+0x52>
 8019764:	fb0c 3202 	mla	r2, ip, r2, r3
 8019768:	460c      	mov	r4, r1
 801976a:	2001      	movs	r0, #1
 801976c:	e7a8      	b.n	80196c0 <_svfiprintf_r+0xd8>
 801976e:	2300      	movs	r3, #0
 8019770:	3401      	adds	r4, #1
 8019772:	9305      	str	r3, [sp, #20]
 8019774:	4619      	mov	r1, r3
 8019776:	f04f 0c0a 	mov.w	ip, #10
 801977a:	4620      	mov	r0, r4
 801977c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019780:	3a30      	subs	r2, #48	@ 0x30
 8019782:	2a09      	cmp	r2, #9
 8019784:	d903      	bls.n	801978e <_svfiprintf_r+0x1a6>
 8019786:	2b00      	cmp	r3, #0
 8019788:	d0c6      	beq.n	8019718 <_svfiprintf_r+0x130>
 801978a:	9105      	str	r1, [sp, #20]
 801978c:	e7c4      	b.n	8019718 <_svfiprintf_r+0x130>
 801978e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019792:	4604      	mov	r4, r0
 8019794:	2301      	movs	r3, #1
 8019796:	e7f0      	b.n	801977a <_svfiprintf_r+0x192>
 8019798:	ab03      	add	r3, sp, #12
 801979a:	9300      	str	r3, [sp, #0]
 801979c:	462a      	mov	r2, r5
 801979e:	4b0e      	ldr	r3, [pc, #56]	@ (80197d8 <_svfiprintf_r+0x1f0>)
 80197a0:	a904      	add	r1, sp, #16
 80197a2:	4638      	mov	r0, r7
 80197a4:	f3af 8000 	nop.w
 80197a8:	1c42      	adds	r2, r0, #1
 80197aa:	4606      	mov	r6, r0
 80197ac:	d1d6      	bne.n	801975c <_svfiprintf_r+0x174>
 80197ae:	89ab      	ldrh	r3, [r5, #12]
 80197b0:	065b      	lsls	r3, r3, #25
 80197b2:	f53f af2d 	bmi.w	8019610 <_svfiprintf_r+0x28>
 80197b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80197b8:	e72c      	b.n	8019614 <_svfiprintf_r+0x2c>
 80197ba:	ab03      	add	r3, sp, #12
 80197bc:	9300      	str	r3, [sp, #0]
 80197be:	462a      	mov	r2, r5
 80197c0:	4b05      	ldr	r3, [pc, #20]	@ (80197d8 <_svfiprintf_r+0x1f0>)
 80197c2:	a904      	add	r1, sp, #16
 80197c4:	4638      	mov	r0, r7
 80197c6:	f000 f9bb 	bl	8019b40 <_printf_i>
 80197ca:	e7ed      	b.n	80197a8 <_svfiprintf_r+0x1c0>
 80197cc:	080283a2 	.word	0x080283a2
 80197d0:	080283ac 	.word	0x080283ac
 80197d4:	00000000 	.word	0x00000000
 80197d8:	08019531 	.word	0x08019531
 80197dc:	080283a8 	.word	0x080283a8

080197e0 <__sfputc_r>:
 80197e0:	6893      	ldr	r3, [r2, #8]
 80197e2:	3b01      	subs	r3, #1
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	b410      	push	{r4}
 80197e8:	6093      	str	r3, [r2, #8]
 80197ea:	da08      	bge.n	80197fe <__sfputc_r+0x1e>
 80197ec:	6994      	ldr	r4, [r2, #24]
 80197ee:	42a3      	cmp	r3, r4
 80197f0:	db01      	blt.n	80197f6 <__sfputc_r+0x16>
 80197f2:	290a      	cmp	r1, #10
 80197f4:	d103      	bne.n	80197fe <__sfputc_r+0x1e>
 80197f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197fa:	f000 bb7f 	b.w	8019efc <__swbuf_r>
 80197fe:	6813      	ldr	r3, [r2, #0]
 8019800:	1c58      	adds	r0, r3, #1
 8019802:	6010      	str	r0, [r2, #0]
 8019804:	7019      	strb	r1, [r3, #0]
 8019806:	4608      	mov	r0, r1
 8019808:	f85d 4b04 	ldr.w	r4, [sp], #4
 801980c:	4770      	bx	lr

0801980e <__sfputs_r>:
 801980e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019810:	4606      	mov	r6, r0
 8019812:	460f      	mov	r7, r1
 8019814:	4614      	mov	r4, r2
 8019816:	18d5      	adds	r5, r2, r3
 8019818:	42ac      	cmp	r4, r5
 801981a:	d101      	bne.n	8019820 <__sfputs_r+0x12>
 801981c:	2000      	movs	r0, #0
 801981e:	e007      	b.n	8019830 <__sfputs_r+0x22>
 8019820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019824:	463a      	mov	r2, r7
 8019826:	4630      	mov	r0, r6
 8019828:	f7ff ffda 	bl	80197e0 <__sfputc_r>
 801982c:	1c43      	adds	r3, r0, #1
 801982e:	d1f3      	bne.n	8019818 <__sfputs_r+0xa>
 8019830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019834 <_vfiprintf_r>:
 8019834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019838:	460d      	mov	r5, r1
 801983a:	b09d      	sub	sp, #116	@ 0x74
 801983c:	4614      	mov	r4, r2
 801983e:	4698      	mov	r8, r3
 8019840:	4606      	mov	r6, r0
 8019842:	b118      	cbz	r0, 801984c <_vfiprintf_r+0x18>
 8019844:	6a03      	ldr	r3, [r0, #32]
 8019846:	b90b      	cbnz	r3, 801984c <_vfiprintf_r+0x18>
 8019848:	f7ff fb0e 	bl	8018e68 <__sinit>
 801984c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801984e:	07d9      	lsls	r1, r3, #31
 8019850:	d405      	bmi.n	801985e <_vfiprintf_r+0x2a>
 8019852:	89ab      	ldrh	r3, [r5, #12]
 8019854:	059a      	lsls	r2, r3, #22
 8019856:	d402      	bmi.n	801985e <_vfiprintf_r+0x2a>
 8019858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801985a:	f7ff fd3a 	bl	80192d2 <__retarget_lock_acquire_recursive>
 801985e:	89ab      	ldrh	r3, [r5, #12]
 8019860:	071b      	lsls	r3, r3, #28
 8019862:	d501      	bpl.n	8019868 <_vfiprintf_r+0x34>
 8019864:	692b      	ldr	r3, [r5, #16]
 8019866:	b99b      	cbnz	r3, 8019890 <_vfiprintf_r+0x5c>
 8019868:	4629      	mov	r1, r5
 801986a:	4630      	mov	r0, r6
 801986c:	f000 fb84 	bl	8019f78 <__swsetup_r>
 8019870:	b170      	cbz	r0, 8019890 <_vfiprintf_r+0x5c>
 8019872:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019874:	07dc      	lsls	r4, r3, #31
 8019876:	d504      	bpl.n	8019882 <_vfiprintf_r+0x4e>
 8019878:	f04f 30ff 	mov.w	r0, #4294967295
 801987c:	b01d      	add	sp, #116	@ 0x74
 801987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019882:	89ab      	ldrh	r3, [r5, #12]
 8019884:	0598      	lsls	r0, r3, #22
 8019886:	d4f7      	bmi.n	8019878 <_vfiprintf_r+0x44>
 8019888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801988a:	f7ff fd23 	bl	80192d4 <__retarget_lock_release_recursive>
 801988e:	e7f3      	b.n	8019878 <_vfiprintf_r+0x44>
 8019890:	2300      	movs	r3, #0
 8019892:	9309      	str	r3, [sp, #36]	@ 0x24
 8019894:	2320      	movs	r3, #32
 8019896:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801989a:	f8cd 800c 	str.w	r8, [sp, #12]
 801989e:	2330      	movs	r3, #48	@ 0x30
 80198a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019a50 <_vfiprintf_r+0x21c>
 80198a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80198a8:	f04f 0901 	mov.w	r9, #1
 80198ac:	4623      	mov	r3, r4
 80198ae:	469a      	mov	sl, r3
 80198b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198b4:	b10a      	cbz	r2, 80198ba <_vfiprintf_r+0x86>
 80198b6:	2a25      	cmp	r2, #37	@ 0x25
 80198b8:	d1f9      	bne.n	80198ae <_vfiprintf_r+0x7a>
 80198ba:	ebba 0b04 	subs.w	fp, sl, r4
 80198be:	d00b      	beq.n	80198d8 <_vfiprintf_r+0xa4>
 80198c0:	465b      	mov	r3, fp
 80198c2:	4622      	mov	r2, r4
 80198c4:	4629      	mov	r1, r5
 80198c6:	4630      	mov	r0, r6
 80198c8:	f7ff ffa1 	bl	801980e <__sfputs_r>
 80198cc:	3001      	adds	r0, #1
 80198ce:	f000 80a7 	beq.w	8019a20 <_vfiprintf_r+0x1ec>
 80198d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80198d4:	445a      	add	r2, fp
 80198d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80198d8:	f89a 3000 	ldrb.w	r3, [sl]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f000 809f 	beq.w	8019a20 <_vfiprintf_r+0x1ec>
 80198e2:	2300      	movs	r3, #0
 80198e4:	f04f 32ff 	mov.w	r2, #4294967295
 80198e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198ec:	f10a 0a01 	add.w	sl, sl, #1
 80198f0:	9304      	str	r3, [sp, #16]
 80198f2:	9307      	str	r3, [sp, #28]
 80198f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80198f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80198fa:	4654      	mov	r4, sl
 80198fc:	2205      	movs	r2, #5
 80198fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019902:	4853      	ldr	r0, [pc, #332]	@ (8019a50 <_vfiprintf_r+0x21c>)
 8019904:	f7e6 fc8c 	bl	8000220 <memchr>
 8019908:	9a04      	ldr	r2, [sp, #16]
 801990a:	b9d8      	cbnz	r0, 8019944 <_vfiprintf_r+0x110>
 801990c:	06d1      	lsls	r1, r2, #27
 801990e:	bf44      	itt	mi
 8019910:	2320      	movmi	r3, #32
 8019912:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019916:	0713      	lsls	r3, r2, #28
 8019918:	bf44      	itt	mi
 801991a:	232b      	movmi	r3, #43	@ 0x2b
 801991c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019920:	f89a 3000 	ldrb.w	r3, [sl]
 8019924:	2b2a      	cmp	r3, #42	@ 0x2a
 8019926:	d015      	beq.n	8019954 <_vfiprintf_r+0x120>
 8019928:	9a07      	ldr	r2, [sp, #28]
 801992a:	4654      	mov	r4, sl
 801992c:	2000      	movs	r0, #0
 801992e:	f04f 0c0a 	mov.w	ip, #10
 8019932:	4621      	mov	r1, r4
 8019934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019938:	3b30      	subs	r3, #48	@ 0x30
 801993a:	2b09      	cmp	r3, #9
 801993c:	d94b      	bls.n	80199d6 <_vfiprintf_r+0x1a2>
 801993e:	b1b0      	cbz	r0, 801996e <_vfiprintf_r+0x13a>
 8019940:	9207      	str	r2, [sp, #28]
 8019942:	e014      	b.n	801996e <_vfiprintf_r+0x13a>
 8019944:	eba0 0308 	sub.w	r3, r0, r8
 8019948:	fa09 f303 	lsl.w	r3, r9, r3
 801994c:	4313      	orrs	r3, r2
 801994e:	9304      	str	r3, [sp, #16]
 8019950:	46a2      	mov	sl, r4
 8019952:	e7d2      	b.n	80198fa <_vfiprintf_r+0xc6>
 8019954:	9b03      	ldr	r3, [sp, #12]
 8019956:	1d19      	adds	r1, r3, #4
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	9103      	str	r1, [sp, #12]
 801995c:	2b00      	cmp	r3, #0
 801995e:	bfbb      	ittet	lt
 8019960:	425b      	neglt	r3, r3
 8019962:	f042 0202 	orrlt.w	r2, r2, #2
 8019966:	9307      	strge	r3, [sp, #28]
 8019968:	9307      	strlt	r3, [sp, #28]
 801996a:	bfb8      	it	lt
 801996c:	9204      	strlt	r2, [sp, #16]
 801996e:	7823      	ldrb	r3, [r4, #0]
 8019970:	2b2e      	cmp	r3, #46	@ 0x2e
 8019972:	d10a      	bne.n	801998a <_vfiprintf_r+0x156>
 8019974:	7863      	ldrb	r3, [r4, #1]
 8019976:	2b2a      	cmp	r3, #42	@ 0x2a
 8019978:	d132      	bne.n	80199e0 <_vfiprintf_r+0x1ac>
 801997a:	9b03      	ldr	r3, [sp, #12]
 801997c:	1d1a      	adds	r2, r3, #4
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	9203      	str	r2, [sp, #12]
 8019982:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019986:	3402      	adds	r4, #2
 8019988:	9305      	str	r3, [sp, #20]
 801998a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019a60 <_vfiprintf_r+0x22c>
 801998e:	7821      	ldrb	r1, [r4, #0]
 8019990:	2203      	movs	r2, #3
 8019992:	4650      	mov	r0, sl
 8019994:	f7e6 fc44 	bl	8000220 <memchr>
 8019998:	b138      	cbz	r0, 80199aa <_vfiprintf_r+0x176>
 801999a:	9b04      	ldr	r3, [sp, #16]
 801999c:	eba0 000a 	sub.w	r0, r0, sl
 80199a0:	2240      	movs	r2, #64	@ 0x40
 80199a2:	4082      	lsls	r2, r0
 80199a4:	4313      	orrs	r3, r2
 80199a6:	3401      	adds	r4, #1
 80199a8:	9304      	str	r3, [sp, #16]
 80199aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199ae:	4829      	ldr	r0, [pc, #164]	@ (8019a54 <_vfiprintf_r+0x220>)
 80199b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80199b4:	2206      	movs	r2, #6
 80199b6:	f7e6 fc33 	bl	8000220 <memchr>
 80199ba:	2800      	cmp	r0, #0
 80199bc:	d03f      	beq.n	8019a3e <_vfiprintf_r+0x20a>
 80199be:	4b26      	ldr	r3, [pc, #152]	@ (8019a58 <_vfiprintf_r+0x224>)
 80199c0:	bb1b      	cbnz	r3, 8019a0a <_vfiprintf_r+0x1d6>
 80199c2:	9b03      	ldr	r3, [sp, #12]
 80199c4:	3307      	adds	r3, #7
 80199c6:	f023 0307 	bic.w	r3, r3, #7
 80199ca:	3308      	adds	r3, #8
 80199cc:	9303      	str	r3, [sp, #12]
 80199ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199d0:	443b      	add	r3, r7
 80199d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80199d4:	e76a      	b.n	80198ac <_vfiprintf_r+0x78>
 80199d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80199da:	460c      	mov	r4, r1
 80199dc:	2001      	movs	r0, #1
 80199de:	e7a8      	b.n	8019932 <_vfiprintf_r+0xfe>
 80199e0:	2300      	movs	r3, #0
 80199e2:	3401      	adds	r4, #1
 80199e4:	9305      	str	r3, [sp, #20]
 80199e6:	4619      	mov	r1, r3
 80199e8:	f04f 0c0a 	mov.w	ip, #10
 80199ec:	4620      	mov	r0, r4
 80199ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f2:	3a30      	subs	r2, #48	@ 0x30
 80199f4:	2a09      	cmp	r2, #9
 80199f6:	d903      	bls.n	8019a00 <_vfiprintf_r+0x1cc>
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d0c6      	beq.n	801998a <_vfiprintf_r+0x156>
 80199fc:	9105      	str	r1, [sp, #20]
 80199fe:	e7c4      	b.n	801998a <_vfiprintf_r+0x156>
 8019a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a04:	4604      	mov	r4, r0
 8019a06:	2301      	movs	r3, #1
 8019a08:	e7f0      	b.n	80199ec <_vfiprintf_r+0x1b8>
 8019a0a:	ab03      	add	r3, sp, #12
 8019a0c:	9300      	str	r3, [sp, #0]
 8019a0e:	462a      	mov	r2, r5
 8019a10:	4b12      	ldr	r3, [pc, #72]	@ (8019a5c <_vfiprintf_r+0x228>)
 8019a12:	a904      	add	r1, sp, #16
 8019a14:	4630      	mov	r0, r6
 8019a16:	f3af 8000 	nop.w
 8019a1a:	4607      	mov	r7, r0
 8019a1c:	1c78      	adds	r0, r7, #1
 8019a1e:	d1d6      	bne.n	80199ce <_vfiprintf_r+0x19a>
 8019a20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a22:	07d9      	lsls	r1, r3, #31
 8019a24:	d405      	bmi.n	8019a32 <_vfiprintf_r+0x1fe>
 8019a26:	89ab      	ldrh	r3, [r5, #12]
 8019a28:	059a      	lsls	r2, r3, #22
 8019a2a:	d402      	bmi.n	8019a32 <_vfiprintf_r+0x1fe>
 8019a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a2e:	f7ff fc51 	bl	80192d4 <__retarget_lock_release_recursive>
 8019a32:	89ab      	ldrh	r3, [r5, #12]
 8019a34:	065b      	lsls	r3, r3, #25
 8019a36:	f53f af1f 	bmi.w	8019878 <_vfiprintf_r+0x44>
 8019a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a3c:	e71e      	b.n	801987c <_vfiprintf_r+0x48>
 8019a3e:	ab03      	add	r3, sp, #12
 8019a40:	9300      	str	r3, [sp, #0]
 8019a42:	462a      	mov	r2, r5
 8019a44:	4b05      	ldr	r3, [pc, #20]	@ (8019a5c <_vfiprintf_r+0x228>)
 8019a46:	a904      	add	r1, sp, #16
 8019a48:	4630      	mov	r0, r6
 8019a4a:	f000 f879 	bl	8019b40 <_printf_i>
 8019a4e:	e7e4      	b.n	8019a1a <_vfiprintf_r+0x1e6>
 8019a50:	080283a2 	.word	0x080283a2
 8019a54:	080283ac 	.word	0x080283ac
 8019a58:	00000000 	.word	0x00000000
 8019a5c:	0801980f 	.word	0x0801980f
 8019a60:	080283a8 	.word	0x080283a8

08019a64 <_printf_common>:
 8019a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a68:	4616      	mov	r6, r2
 8019a6a:	4698      	mov	r8, r3
 8019a6c:	688a      	ldr	r2, [r1, #8]
 8019a6e:	690b      	ldr	r3, [r1, #16]
 8019a70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019a74:	4293      	cmp	r3, r2
 8019a76:	bfb8      	it	lt
 8019a78:	4613      	movlt	r3, r2
 8019a7a:	6033      	str	r3, [r6, #0]
 8019a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019a80:	4607      	mov	r7, r0
 8019a82:	460c      	mov	r4, r1
 8019a84:	b10a      	cbz	r2, 8019a8a <_printf_common+0x26>
 8019a86:	3301      	adds	r3, #1
 8019a88:	6033      	str	r3, [r6, #0]
 8019a8a:	6823      	ldr	r3, [r4, #0]
 8019a8c:	0699      	lsls	r1, r3, #26
 8019a8e:	bf42      	ittt	mi
 8019a90:	6833      	ldrmi	r3, [r6, #0]
 8019a92:	3302      	addmi	r3, #2
 8019a94:	6033      	strmi	r3, [r6, #0]
 8019a96:	6825      	ldr	r5, [r4, #0]
 8019a98:	f015 0506 	ands.w	r5, r5, #6
 8019a9c:	d106      	bne.n	8019aac <_printf_common+0x48>
 8019a9e:	f104 0a19 	add.w	sl, r4, #25
 8019aa2:	68e3      	ldr	r3, [r4, #12]
 8019aa4:	6832      	ldr	r2, [r6, #0]
 8019aa6:	1a9b      	subs	r3, r3, r2
 8019aa8:	42ab      	cmp	r3, r5
 8019aaa:	dc26      	bgt.n	8019afa <_printf_common+0x96>
 8019aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019ab0:	6822      	ldr	r2, [r4, #0]
 8019ab2:	3b00      	subs	r3, #0
 8019ab4:	bf18      	it	ne
 8019ab6:	2301      	movne	r3, #1
 8019ab8:	0692      	lsls	r2, r2, #26
 8019aba:	d42b      	bmi.n	8019b14 <_printf_common+0xb0>
 8019abc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019ac0:	4641      	mov	r1, r8
 8019ac2:	4638      	mov	r0, r7
 8019ac4:	47c8      	blx	r9
 8019ac6:	3001      	adds	r0, #1
 8019ac8:	d01e      	beq.n	8019b08 <_printf_common+0xa4>
 8019aca:	6823      	ldr	r3, [r4, #0]
 8019acc:	6922      	ldr	r2, [r4, #16]
 8019ace:	f003 0306 	and.w	r3, r3, #6
 8019ad2:	2b04      	cmp	r3, #4
 8019ad4:	bf02      	ittt	eq
 8019ad6:	68e5      	ldreq	r5, [r4, #12]
 8019ad8:	6833      	ldreq	r3, [r6, #0]
 8019ada:	1aed      	subeq	r5, r5, r3
 8019adc:	68a3      	ldr	r3, [r4, #8]
 8019ade:	bf0c      	ite	eq
 8019ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ae4:	2500      	movne	r5, #0
 8019ae6:	4293      	cmp	r3, r2
 8019ae8:	bfc4      	itt	gt
 8019aea:	1a9b      	subgt	r3, r3, r2
 8019aec:	18ed      	addgt	r5, r5, r3
 8019aee:	2600      	movs	r6, #0
 8019af0:	341a      	adds	r4, #26
 8019af2:	42b5      	cmp	r5, r6
 8019af4:	d11a      	bne.n	8019b2c <_printf_common+0xc8>
 8019af6:	2000      	movs	r0, #0
 8019af8:	e008      	b.n	8019b0c <_printf_common+0xa8>
 8019afa:	2301      	movs	r3, #1
 8019afc:	4652      	mov	r2, sl
 8019afe:	4641      	mov	r1, r8
 8019b00:	4638      	mov	r0, r7
 8019b02:	47c8      	blx	r9
 8019b04:	3001      	adds	r0, #1
 8019b06:	d103      	bne.n	8019b10 <_printf_common+0xac>
 8019b08:	f04f 30ff 	mov.w	r0, #4294967295
 8019b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b10:	3501      	adds	r5, #1
 8019b12:	e7c6      	b.n	8019aa2 <_printf_common+0x3e>
 8019b14:	18e1      	adds	r1, r4, r3
 8019b16:	1c5a      	adds	r2, r3, #1
 8019b18:	2030      	movs	r0, #48	@ 0x30
 8019b1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019b1e:	4422      	add	r2, r4
 8019b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019b24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019b28:	3302      	adds	r3, #2
 8019b2a:	e7c7      	b.n	8019abc <_printf_common+0x58>
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	4622      	mov	r2, r4
 8019b30:	4641      	mov	r1, r8
 8019b32:	4638      	mov	r0, r7
 8019b34:	47c8      	blx	r9
 8019b36:	3001      	adds	r0, #1
 8019b38:	d0e6      	beq.n	8019b08 <_printf_common+0xa4>
 8019b3a:	3601      	adds	r6, #1
 8019b3c:	e7d9      	b.n	8019af2 <_printf_common+0x8e>
	...

08019b40 <_printf_i>:
 8019b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b44:	7e0f      	ldrb	r7, [r1, #24]
 8019b46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019b48:	2f78      	cmp	r7, #120	@ 0x78
 8019b4a:	4691      	mov	r9, r2
 8019b4c:	4680      	mov	r8, r0
 8019b4e:	460c      	mov	r4, r1
 8019b50:	469a      	mov	sl, r3
 8019b52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019b56:	d807      	bhi.n	8019b68 <_printf_i+0x28>
 8019b58:	2f62      	cmp	r7, #98	@ 0x62
 8019b5a:	d80a      	bhi.n	8019b72 <_printf_i+0x32>
 8019b5c:	2f00      	cmp	r7, #0
 8019b5e:	f000 80d2 	beq.w	8019d06 <_printf_i+0x1c6>
 8019b62:	2f58      	cmp	r7, #88	@ 0x58
 8019b64:	f000 80b9 	beq.w	8019cda <_printf_i+0x19a>
 8019b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019b6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019b70:	e03a      	b.n	8019be8 <_printf_i+0xa8>
 8019b72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019b76:	2b15      	cmp	r3, #21
 8019b78:	d8f6      	bhi.n	8019b68 <_printf_i+0x28>
 8019b7a:	a101      	add	r1, pc, #4	@ (adr r1, 8019b80 <_printf_i+0x40>)
 8019b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019b80:	08019bd9 	.word	0x08019bd9
 8019b84:	08019bed 	.word	0x08019bed
 8019b88:	08019b69 	.word	0x08019b69
 8019b8c:	08019b69 	.word	0x08019b69
 8019b90:	08019b69 	.word	0x08019b69
 8019b94:	08019b69 	.word	0x08019b69
 8019b98:	08019bed 	.word	0x08019bed
 8019b9c:	08019b69 	.word	0x08019b69
 8019ba0:	08019b69 	.word	0x08019b69
 8019ba4:	08019b69 	.word	0x08019b69
 8019ba8:	08019b69 	.word	0x08019b69
 8019bac:	08019ced 	.word	0x08019ced
 8019bb0:	08019c17 	.word	0x08019c17
 8019bb4:	08019ca7 	.word	0x08019ca7
 8019bb8:	08019b69 	.word	0x08019b69
 8019bbc:	08019b69 	.word	0x08019b69
 8019bc0:	08019d0f 	.word	0x08019d0f
 8019bc4:	08019b69 	.word	0x08019b69
 8019bc8:	08019c17 	.word	0x08019c17
 8019bcc:	08019b69 	.word	0x08019b69
 8019bd0:	08019b69 	.word	0x08019b69
 8019bd4:	08019caf 	.word	0x08019caf
 8019bd8:	6833      	ldr	r3, [r6, #0]
 8019bda:	1d1a      	adds	r2, r3, #4
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	6032      	str	r2, [r6, #0]
 8019be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019be4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019be8:	2301      	movs	r3, #1
 8019bea:	e09d      	b.n	8019d28 <_printf_i+0x1e8>
 8019bec:	6833      	ldr	r3, [r6, #0]
 8019bee:	6820      	ldr	r0, [r4, #0]
 8019bf0:	1d19      	adds	r1, r3, #4
 8019bf2:	6031      	str	r1, [r6, #0]
 8019bf4:	0606      	lsls	r6, r0, #24
 8019bf6:	d501      	bpl.n	8019bfc <_printf_i+0xbc>
 8019bf8:	681d      	ldr	r5, [r3, #0]
 8019bfa:	e003      	b.n	8019c04 <_printf_i+0xc4>
 8019bfc:	0645      	lsls	r5, r0, #25
 8019bfe:	d5fb      	bpl.n	8019bf8 <_printf_i+0xb8>
 8019c00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019c04:	2d00      	cmp	r5, #0
 8019c06:	da03      	bge.n	8019c10 <_printf_i+0xd0>
 8019c08:	232d      	movs	r3, #45	@ 0x2d
 8019c0a:	426d      	negs	r5, r5
 8019c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019c10:	4859      	ldr	r0, [pc, #356]	@ (8019d78 <_printf_i+0x238>)
 8019c12:	230a      	movs	r3, #10
 8019c14:	e011      	b.n	8019c3a <_printf_i+0xfa>
 8019c16:	6821      	ldr	r1, [r4, #0]
 8019c18:	6833      	ldr	r3, [r6, #0]
 8019c1a:	0608      	lsls	r0, r1, #24
 8019c1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019c20:	d402      	bmi.n	8019c28 <_printf_i+0xe8>
 8019c22:	0649      	lsls	r1, r1, #25
 8019c24:	bf48      	it	mi
 8019c26:	b2ad      	uxthmi	r5, r5
 8019c28:	2f6f      	cmp	r7, #111	@ 0x6f
 8019c2a:	4853      	ldr	r0, [pc, #332]	@ (8019d78 <_printf_i+0x238>)
 8019c2c:	6033      	str	r3, [r6, #0]
 8019c2e:	bf14      	ite	ne
 8019c30:	230a      	movne	r3, #10
 8019c32:	2308      	moveq	r3, #8
 8019c34:	2100      	movs	r1, #0
 8019c36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019c3a:	6866      	ldr	r6, [r4, #4]
 8019c3c:	60a6      	str	r6, [r4, #8]
 8019c3e:	2e00      	cmp	r6, #0
 8019c40:	bfa2      	ittt	ge
 8019c42:	6821      	ldrge	r1, [r4, #0]
 8019c44:	f021 0104 	bicge.w	r1, r1, #4
 8019c48:	6021      	strge	r1, [r4, #0]
 8019c4a:	b90d      	cbnz	r5, 8019c50 <_printf_i+0x110>
 8019c4c:	2e00      	cmp	r6, #0
 8019c4e:	d04b      	beq.n	8019ce8 <_printf_i+0x1a8>
 8019c50:	4616      	mov	r6, r2
 8019c52:	fbb5 f1f3 	udiv	r1, r5, r3
 8019c56:	fb03 5711 	mls	r7, r3, r1, r5
 8019c5a:	5dc7      	ldrb	r7, [r0, r7]
 8019c5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019c60:	462f      	mov	r7, r5
 8019c62:	42bb      	cmp	r3, r7
 8019c64:	460d      	mov	r5, r1
 8019c66:	d9f4      	bls.n	8019c52 <_printf_i+0x112>
 8019c68:	2b08      	cmp	r3, #8
 8019c6a:	d10b      	bne.n	8019c84 <_printf_i+0x144>
 8019c6c:	6823      	ldr	r3, [r4, #0]
 8019c6e:	07df      	lsls	r7, r3, #31
 8019c70:	d508      	bpl.n	8019c84 <_printf_i+0x144>
 8019c72:	6923      	ldr	r3, [r4, #16]
 8019c74:	6861      	ldr	r1, [r4, #4]
 8019c76:	4299      	cmp	r1, r3
 8019c78:	bfde      	ittt	le
 8019c7a:	2330      	movle	r3, #48	@ 0x30
 8019c7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019c80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019c84:	1b92      	subs	r2, r2, r6
 8019c86:	6122      	str	r2, [r4, #16]
 8019c88:	f8cd a000 	str.w	sl, [sp]
 8019c8c:	464b      	mov	r3, r9
 8019c8e:	aa03      	add	r2, sp, #12
 8019c90:	4621      	mov	r1, r4
 8019c92:	4640      	mov	r0, r8
 8019c94:	f7ff fee6 	bl	8019a64 <_printf_common>
 8019c98:	3001      	adds	r0, #1
 8019c9a:	d14a      	bne.n	8019d32 <_printf_i+0x1f2>
 8019c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca0:	b004      	add	sp, #16
 8019ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ca6:	6823      	ldr	r3, [r4, #0]
 8019ca8:	f043 0320 	orr.w	r3, r3, #32
 8019cac:	6023      	str	r3, [r4, #0]
 8019cae:	4833      	ldr	r0, [pc, #204]	@ (8019d7c <_printf_i+0x23c>)
 8019cb0:	2778      	movs	r7, #120	@ 0x78
 8019cb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019cb6:	6823      	ldr	r3, [r4, #0]
 8019cb8:	6831      	ldr	r1, [r6, #0]
 8019cba:	061f      	lsls	r7, r3, #24
 8019cbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8019cc0:	d402      	bmi.n	8019cc8 <_printf_i+0x188>
 8019cc2:	065f      	lsls	r7, r3, #25
 8019cc4:	bf48      	it	mi
 8019cc6:	b2ad      	uxthmi	r5, r5
 8019cc8:	6031      	str	r1, [r6, #0]
 8019cca:	07d9      	lsls	r1, r3, #31
 8019ccc:	bf44      	itt	mi
 8019cce:	f043 0320 	orrmi.w	r3, r3, #32
 8019cd2:	6023      	strmi	r3, [r4, #0]
 8019cd4:	b11d      	cbz	r5, 8019cde <_printf_i+0x19e>
 8019cd6:	2310      	movs	r3, #16
 8019cd8:	e7ac      	b.n	8019c34 <_printf_i+0xf4>
 8019cda:	4827      	ldr	r0, [pc, #156]	@ (8019d78 <_printf_i+0x238>)
 8019cdc:	e7e9      	b.n	8019cb2 <_printf_i+0x172>
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	f023 0320 	bic.w	r3, r3, #32
 8019ce4:	6023      	str	r3, [r4, #0]
 8019ce6:	e7f6      	b.n	8019cd6 <_printf_i+0x196>
 8019ce8:	4616      	mov	r6, r2
 8019cea:	e7bd      	b.n	8019c68 <_printf_i+0x128>
 8019cec:	6833      	ldr	r3, [r6, #0]
 8019cee:	6825      	ldr	r5, [r4, #0]
 8019cf0:	6961      	ldr	r1, [r4, #20]
 8019cf2:	1d18      	adds	r0, r3, #4
 8019cf4:	6030      	str	r0, [r6, #0]
 8019cf6:	062e      	lsls	r6, r5, #24
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	d501      	bpl.n	8019d00 <_printf_i+0x1c0>
 8019cfc:	6019      	str	r1, [r3, #0]
 8019cfe:	e002      	b.n	8019d06 <_printf_i+0x1c6>
 8019d00:	0668      	lsls	r0, r5, #25
 8019d02:	d5fb      	bpl.n	8019cfc <_printf_i+0x1bc>
 8019d04:	8019      	strh	r1, [r3, #0]
 8019d06:	2300      	movs	r3, #0
 8019d08:	6123      	str	r3, [r4, #16]
 8019d0a:	4616      	mov	r6, r2
 8019d0c:	e7bc      	b.n	8019c88 <_printf_i+0x148>
 8019d0e:	6833      	ldr	r3, [r6, #0]
 8019d10:	1d1a      	adds	r2, r3, #4
 8019d12:	6032      	str	r2, [r6, #0]
 8019d14:	681e      	ldr	r6, [r3, #0]
 8019d16:	6862      	ldr	r2, [r4, #4]
 8019d18:	2100      	movs	r1, #0
 8019d1a:	4630      	mov	r0, r6
 8019d1c:	f7e6 fa80 	bl	8000220 <memchr>
 8019d20:	b108      	cbz	r0, 8019d26 <_printf_i+0x1e6>
 8019d22:	1b80      	subs	r0, r0, r6
 8019d24:	6060      	str	r0, [r4, #4]
 8019d26:	6863      	ldr	r3, [r4, #4]
 8019d28:	6123      	str	r3, [r4, #16]
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019d30:	e7aa      	b.n	8019c88 <_printf_i+0x148>
 8019d32:	6923      	ldr	r3, [r4, #16]
 8019d34:	4632      	mov	r2, r6
 8019d36:	4649      	mov	r1, r9
 8019d38:	4640      	mov	r0, r8
 8019d3a:	47d0      	blx	sl
 8019d3c:	3001      	adds	r0, #1
 8019d3e:	d0ad      	beq.n	8019c9c <_printf_i+0x15c>
 8019d40:	6823      	ldr	r3, [r4, #0]
 8019d42:	079b      	lsls	r3, r3, #30
 8019d44:	d413      	bmi.n	8019d6e <_printf_i+0x22e>
 8019d46:	68e0      	ldr	r0, [r4, #12]
 8019d48:	9b03      	ldr	r3, [sp, #12]
 8019d4a:	4298      	cmp	r0, r3
 8019d4c:	bfb8      	it	lt
 8019d4e:	4618      	movlt	r0, r3
 8019d50:	e7a6      	b.n	8019ca0 <_printf_i+0x160>
 8019d52:	2301      	movs	r3, #1
 8019d54:	4632      	mov	r2, r6
 8019d56:	4649      	mov	r1, r9
 8019d58:	4640      	mov	r0, r8
 8019d5a:	47d0      	blx	sl
 8019d5c:	3001      	adds	r0, #1
 8019d5e:	d09d      	beq.n	8019c9c <_printf_i+0x15c>
 8019d60:	3501      	adds	r5, #1
 8019d62:	68e3      	ldr	r3, [r4, #12]
 8019d64:	9903      	ldr	r1, [sp, #12]
 8019d66:	1a5b      	subs	r3, r3, r1
 8019d68:	42ab      	cmp	r3, r5
 8019d6a:	dcf2      	bgt.n	8019d52 <_printf_i+0x212>
 8019d6c:	e7eb      	b.n	8019d46 <_printf_i+0x206>
 8019d6e:	2500      	movs	r5, #0
 8019d70:	f104 0619 	add.w	r6, r4, #25
 8019d74:	e7f5      	b.n	8019d62 <_printf_i+0x222>
 8019d76:	bf00      	nop
 8019d78:	080283b3 	.word	0x080283b3
 8019d7c:	080283c4 	.word	0x080283c4

08019d80 <__sflush_r>:
 8019d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d88:	0716      	lsls	r6, r2, #28
 8019d8a:	4605      	mov	r5, r0
 8019d8c:	460c      	mov	r4, r1
 8019d8e:	d454      	bmi.n	8019e3a <__sflush_r+0xba>
 8019d90:	684b      	ldr	r3, [r1, #4]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	dc02      	bgt.n	8019d9c <__sflush_r+0x1c>
 8019d96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	dd48      	ble.n	8019e2e <__sflush_r+0xae>
 8019d9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019d9e:	2e00      	cmp	r6, #0
 8019da0:	d045      	beq.n	8019e2e <__sflush_r+0xae>
 8019da2:	2300      	movs	r3, #0
 8019da4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019da8:	682f      	ldr	r7, [r5, #0]
 8019daa:	6a21      	ldr	r1, [r4, #32]
 8019dac:	602b      	str	r3, [r5, #0]
 8019dae:	d030      	beq.n	8019e12 <__sflush_r+0x92>
 8019db0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019db2:	89a3      	ldrh	r3, [r4, #12]
 8019db4:	0759      	lsls	r1, r3, #29
 8019db6:	d505      	bpl.n	8019dc4 <__sflush_r+0x44>
 8019db8:	6863      	ldr	r3, [r4, #4]
 8019dba:	1ad2      	subs	r2, r2, r3
 8019dbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019dbe:	b10b      	cbz	r3, 8019dc4 <__sflush_r+0x44>
 8019dc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019dc2:	1ad2      	subs	r2, r2, r3
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019dc8:	6a21      	ldr	r1, [r4, #32]
 8019dca:	4628      	mov	r0, r5
 8019dcc:	47b0      	blx	r6
 8019dce:	1c43      	adds	r3, r0, #1
 8019dd0:	89a3      	ldrh	r3, [r4, #12]
 8019dd2:	d106      	bne.n	8019de2 <__sflush_r+0x62>
 8019dd4:	6829      	ldr	r1, [r5, #0]
 8019dd6:	291d      	cmp	r1, #29
 8019dd8:	d82b      	bhi.n	8019e32 <__sflush_r+0xb2>
 8019dda:	4a2a      	ldr	r2, [pc, #168]	@ (8019e84 <__sflush_r+0x104>)
 8019ddc:	410a      	asrs	r2, r1
 8019dde:	07d6      	lsls	r6, r2, #31
 8019de0:	d427      	bmi.n	8019e32 <__sflush_r+0xb2>
 8019de2:	2200      	movs	r2, #0
 8019de4:	6062      	str	r2, [r4, #4]
 8019de6:	04d9      	lsls	r1, r3, #19
 8019de8:	6922      	ldr	r2, [r4, #16]
 8019dea:	6022      	str	r2, [r4, #0]
 8019dec:	d504      	bpl.n	8019df8 <__sflush_r+0x78>
 8019dee:	1c42      	adds	r2, r0, #1
 8019df0:	d101      	bne.n	8019df6 <__sflush_r+0x76>
 8019df2:	682b      	ldr	r3, [r5, #0]
 8019df4:	b903      	cbnz	r3, 8019df8 <__sflush_r+0x78>
 8019df6:	6560      	str	r0, [r4, #84]	@ 0x54
 8019df8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019dfa:	602f      	str	r7, [r5, #0]
 8019dfc:	b1b9      	cbz	r1, 8019e2e <__sflush_r+0xae>
 8019dfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019e02:	4299      	cmp	r1, r3
 8019e04:	d002      	beq.n	8019e0c <__sflush_r+0x8c>
 8019e06:	4628      	mov	r0, r5
 8019e08:	f7ff fa92 	bl	8019330 <_free_r>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019e10:	e00d      	b.n	8019e2e <__sflush_r+0xae>
 8019e12:	2301      	movs	r3, #1
 8019e14:	4628      	mov	r0, r5
 8019e16:	47b0      	blx	r6
 8019e18:	4602      	mov	r2, r0
 8019e1a:	1c50      	adds	r0, r2, #1
 8019e1c:	d1c9      	bne.n	8019db2 <__sflush_r+0x32>
 8019e1e:	682b      	ldr	r3, [r5, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d0c6      	beq.n	8019db2 <__sflush_r+0x32>
 8019e24:	2b1d      	cmp	r3, #29
 8019e26:	d001      	beq.n	8019e2c <__sflush_r+0xac>
 8019e28:	2b16      	cmp	r3, #22
 8019e2a:	d11e      	bne.n	8019e6a <__sflush_r+0xea>
 8019e2c:	602f      	str	r7, [r5, #0]
 8019e2e:	2000      	movs	r0, #0
 8019e30:	e022      	b.n	8019e78 <__sflush_r+0xf8>
 8019e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e36:	b21b      	sxth	r3, r3
 8019e38:	e01b      	b.n	8019e72 <__sflush_r+0xf2>
 8019e3a:	690f      	ldr	r7, [r1, #16]
 8019e3c:	2f00      	cmp	r7, #0
 8019e3e:	d0f6      	beq.n	8019e2e <__sflush_r+0xae>
 8019e40:	0793      	lsls	r3, r2, #30
 8019e42:	680e      	ldr	r6, [r1, #0]
 8019e44:	bf08      	it	eq
 8019e46:	694b      	ldreq	r3, [r1, #20]
 8019e48:	600f      	str	r7, [r1, #0]
 8019e4a:	bf18      	it	ne
 8019e4c:	2300      	movne	r3, #0
 8019e4e:	eba6 0807 	sub.w	r8, r6, r7
 8019e52:	608b      	str	r3, [r1, #8]
 8019e54:	f1b8 0f00 	cmp.w	r8, #0
 8019e58:	dde9      	ble.n	8019e2e <__sflush_r+0xae>
 8019e5a:	6a21      	ldr	r1, [r4, #32]
 8019e5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019e5e:	4643      	mov	r3, r8
 8019e60:	463a      	mov	r2, r7
 8019e62:	4628      	mov	r0, r5
 8019e64:	47b0      	blx	r6
 8019e66:	2800      	cmp	r0, #0
 8019e68:	dc08      	bgt.n	8019e7c <__sflush_r+0xfc>
 8019e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e72:	81a3      	strh	r3, [r4, #12]
 8019e74:	f04f 30ff 	mov.w	r0, #4294967295
 8019e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e7c:	4407      	add	r7, r0
 8019e7e:	eba8 0800 	sub.w	r8, r8, r0
 8019e82:	e7e7      	b.n	8019e54 <__sflush_r+0xd4>
 8019e84:	dfbffffe 	.word	0xdfbffffe

08019e88 <_fflush_r>:
 8019e88:	b538      	push	{r3, r4, r5, lr}
 8019e8a:	690b      	ldr	r3, [r1, #16]
 8019e8c:	4605      	mov	r5, r0
 8019e8e:	460c      	mov	r4, r1
 8019e90:	b913      	cbnz	r3, 8019e98 <_fflush_r+0x10>
 8019e92:	2500      	movs	r5, #0
 8019e94:	4628      	mov	r0, r5
 8019e96:	bd38      	pop	{r3, r4, r5, pc}
 8019e98:	b118      	cbz	r0, 8019ea2 <_fflush_r+0x1a>
 8019e9a:	6a03      	ldr	r3, [r0, #32]
 8019e9c:	b90b      	cbnz	r3, 8019ea2 <_fflush_r+0x1a>
 8019e9e:	f7fe ffe3 	bl	8018e68 <__sinit>
 8019ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d0f3      	beq.n	8019e92 <_fflush_r+0xa>
 8019eaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019eac:	07d0      	lsls	r0, r2, #31
 8019eae:	d404      	bmi.n	8019eba <_fflush_r+0x32>
 8019eb0:	0599      	lsls	r1, r3, #22
 8019eb2:	d402      	bmi.n	8019eba <_fflush_r+0x32>
 8019eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019eb6:	f7ff fa0c 	bl	80192d2 <__retarget_lock_acquire_recursive>
 8019eba:	4628      	mov	r0, r5
 8019ebc:	4621      	mov	r1, r4
 8019ebe:	f7ff ff5f 	bl	8019d80 <__sflush_r>
 8019ec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019ec4:	07da      	lsls	r2, r3, #31
 8019ec6:	4605      	mov	r5, r0
 8019ec8:	d4e4      	bmi.n	8019e94 <_fflush_r+0xc>
 8019eca:	89a3      	ldrh	r3, [r4, #12]
 8019ecc:	059b      	lsls	r3, r3, #22
 8019ece:	d4e1      	bmi.n	8019e94 <_fflush_r+0xc>
 8019ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019ed2:	f7ff f9ff 	bl	80192d4 <__retarget_lock_release_recursive>
 8019ed6:	e7dd      	b.n	8019e94 <_fflush_r+0xc>

08019ed8 <fiprintf>:
 8019ed8:	b40e      	push	{r1, r2, r3}
 8019eda:	b503      	push	{r0, r1, lr}
 8019edc:	4601      	mov	r1, r0
 8019ede:	ab03      	add	r3, sp, #12
 8019ee0:	4805      	ldr	r0, [pc, #20]	@ (8019ef8 <fiprintf+0x20>)
 8019ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ee6:	6800      	ldr	r0, [r0, #0]
 8019ee8:	9301      	str	r3, [sp, #4]
 8019eea:	f7ff fca3 	bl	8019834 <_vfiprintf_r>
 8019eee:	b002      	add	sp, #8
 8019ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ef4:	b003      	add	sp, #12
 8019ef6:	4770      	bx	lr
 8019ef8:	20000040 	.word	0x20000040

08019efc <__swbuf_r>:
 8019efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019efe:	460e      	mov	r6, r1
 8019f00:	4614      	mov	r4, r2
 8019f02:	4605      	mov	r5, r0
 8019f04:	b118      	cbz	r0, 8019f0e <__swbuf_r+0x12>
 8019f06:	6a03      	ldr	r3, [r0, #32]
 8019f08:	b90b      	cbnz	r3, 8019f0e <__swbuf_r+0x12>
 8019f0a:	f7fe ffad 	bl	8018e68 <__sinit>
 8019f0e:	69a3      	ldr	r3, [r4, #24]
 8019f10:	60a3      	str	r3, [r4, #8]
 8019f12:	89a3      	ldrh	r3, [r4, #12]
 8019f14:	071a      	lsls	r2, r3, #28
 8019f16:	d501      	bpl.n	8019f1c <__swbuf_r+0x20>
 8019f18:	6923      	ldr	r3, [r4, #16]
 8019f1a:	b943      	cbnz	r3, 8019f2e <__swbuf_r+0x32>
 8019f1c:	4621      	mov	r1, r4
 8019f1e:	4628      	mov	r0, r5
 8019f20:	f000 f82a 	bl	8019f78 <__swsetup_r>
 8019f24:	b118      	cbz	r0, 8019f2e <__swbuf_r+0x32>
 8019f26:	f04f 37ff 	mov.w	r7, #4294967295
 8019f2a:	4638      	mov	r0, r7
 8019f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f2e:	6823      	ldr	r3, [r4, #0]
 8019f30:	6922      	ldr	r2, [r4, #16]
 8019f32:	1a98      	subs	r0, r3, r2
 8019f34:	6963      	ldr	r3, [r4, #20]
 8019f36:	b2f6      	uxtb	r6, r6
 8019f38:	4283      	cmp	r3, r0
 8019f3a:	4637      	mov	r7, r6
 8019f3c:	dc05      	bgt.n	8019f4a <__swbuf_r+0x4e>
 8019f3e:	4621      	mov	r1, r4
 8019f40:	4628      	mov	r0, r5
 8019f42:	f7ff ffa1 	bl	8019e88 <_fflush_r>
 8019f46:	2800      	cmp	r0, #0
 8019f48:	d1ed      	bne.n	8019f26 <__swbuf_r+0x2a>
 8019f4a:	68a3      	ldr	r3, [r4, #8]
 8019f4c:	3b01      	subs	r3, #1
 8019f4e:	60a3      	str	r3, [r4, #8]
 8019f50:	6823      	ldr	r3, [r4, #0]
 8019f52:	1c5a      	adds	r2, r3, #1
 8019f54:	6022      	str	r2, [r4, #0]
 8019f56:	701e      	strb	r6, [r3, #0]
 8019f58:	6962      	ldr	r2, [r4, #20]
 8019f5a:	1c43      	adds	r3, r0, #1
 8019f5c:	429a      	cmp	r2, r3
 8019f5e:	d004      	beq.n	8019f6a <__swbuf_r+0x6e>
 8019f60:	89a3      	ldrh	r3, [r4, #12]
 8019f62:	07db      	lsls	r3, r3, #31
 8019f64:	d5e1      	bpl.n	8019f2a <__swbuf_r+0x2e>
 8019f66:	2e0a      	cmp	r6, #10
 8019f68:	d1df      	bne.n	8019f2a <__swbuf_r+0x2e>
 8019f6a:	4621      	mov	r1, r4
 8019f6c:	4628      	mov	r0, r5
 8019f6e:	f7ff ff8b 	bl	8019e88 <_fflush_r>
 8019f72:	2800      	cmp	r0, #0
 8019f74:	d0d9      	beq.n	8019f2a <__swbuf_r+0x2e>
 8019f76:	e7d6      	b.n	8019f26 <__swbuf_r+0x2a>

08019f78 <__swsetup_r>:
 8019f78:	b538      	push	{r3, r4, r5, lr}
 8019f7a:	4b29      	ldr	r3, [pc, #164]	@ (801a020 <__swsetup_r+0xa8>)
 8019f7c:	4605      	mov	r5, r0
 8019f7e:	6818      	ldr	r0, [r3, #0]
 8019f80:	460c      	mov	r4, r1
 8019f82:	b118      	cbz	r0, 8019f8c <__swsetup_r+0x14>
 8019f84:	6a03      	ldr	r3, [r0, #32]
 8019f86:	b90b      	cbnz	r3, 8019f8c <__swsetup_r+0x14>
 8019f88:	f7fe ff6e 	bl	8018e68 <__sinit>
 8019f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f90:	0719      	lsls	r1, r3, #28
 8019f92:	d422      	bmi.n	8019fda <__swsetup_r+0x62>
 8019f94:	06da      	lsls	r2, r3, #27
 8019f96:	d407      	bmi.n	8019fa8 <__swsetup_r+0x30>
 8019f98:	2209      	movs	r2, #9
 8019f9a:	602a      	str	r2, [r5, #0]
 8019f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fa0:	81a3      	strh	r3, [r4, #12]
 8019fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8019fa6:	e033      	b.n	801a010 <__swsetup_r+0x98>
 8019fa8:	0758      	lsls	r0, r3, #29
 8019faa:	d512      	bpl.n	8019fd2 <__swsetup_r+0x5a>
 8019fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019fae:	b141      	cbz	r1, 8019fc2 <__swsetup_r+0x4a>
 8019fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019fb4:	4299      	cmp	r1, r3
 8019fb6:	d002      	beq.n	8019fbe <__swsetup_r+0x46>
 8019fb8:	4628      	mov	r0, r5
 8019fba:	f7ff f9b9 	bl	8019330 <_free_r>
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8019fc2:	89a3      	ldrh	r3, [r4, #12]
 8019fc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019fc8:	81a3      	strh	r3, [r4, #12]
 8019fca:	2300      	movs	r3, #0
 8019fcc:	6063      	str	r3, [r4, #4]
 8019fce:	6923      	ldr	r3, [r4, #16]
 8019fd0:	6023      	str	r3, [r4, #0]
 8019fd2:	89a3      	ldrh	r3, [r4, #12]
 8019fd4:	f043 0308 	orr.w	r3, r3, #8
 8019fd8:	81a3      	strh	r3, [r4, #12]
 8019fda:	6923      	ldr	r3, [r4, #16]
 8019fdc:	b94b      	cbnz	r3, 8019ff2 <__swsetup_r+0x7a>
 8019fde:	89a3      	ldrh	r3, [r4, #12]
 8019fe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019fe8:	d003      	beq.n	8019ff2 <__swsetup_r+0x7a>
 8019fea:	4621      	mov	r1, r4
 8019fec:	4628      	mov	r0, r5
 8019fee:	f000 f884 	bl	801a0fa <__smakebuf_r>
 8019ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ff6:	f013 0201 	ands.w	r2, r3, #1
 8019ffa:	d00a      	beq.n	801a012 <__swsetup_r+0x9a>
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	60a2      	str	r2, [r4, #8]
 801a000:	6962      	ldr	r2, [r4, #20]
 801a002:	4252      	negs	r2, r2
 801a004:	61a2      	str	r2, [r4, #24]
 801a006:	6922      	ldr	r2, [r4, #16]
 801a008:	b942      	cbnz	r2, 801a01c <__swsetup_r+0xa4>
 801a00a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a00e:	d1c5      	bne.n	8019f9c <__swsetup_r+0x24>
 801a010:	bd38      	pop	{r3, r4, r5, pc}
 801a012:	0799      	lsls	r1, r3, #30
 801a014:	bf58      	it	pl
 801a016:	6962      	ldrpl	r2, [r4, #20]
 801a018:	60a2      	str	r2, [r4, #8]
 801a01a:	e7f4      	b.n	801a006 <__swsetup_r+0x8e>
 801a01c:	2000      	movs	r0, #0
 801a01e:	e7f7      	b.n	801a010 <__swsetup_r+0x98>
 801a020:	20000040 	.word	0x20000040

0801a024 <_sbrk_r>:
 801a024:	b538      	push	{r3, r4, r5, lr}
 801a026:	4d06      	ldr	r5, [pc, #24]	@ (801a040 <_sbrk_r+0x1c>)
 801a028:	2300      	movs	r3, #0
 801a02a:	4604      	mov	r4, r0
 801a02c:	4608      	mov	r0, r1
 801a02e:	602b      	str	r3, [r5, #0]
 801a030:	f7e6 fe7c 	bl	8000d2c <_sbrk>
 801a034:	1c43      	adds	r3, r0, #1
 801a036:	d102      	bne.n	801a03e <_sbrk_r+0x1a>
 801a038:	682b      	ldr	r3, [r5, #0]
 801a03a:	b103      	cbz	r3, 801a03e <_sbrk_r+0x1a>
 801a03c:	6023      	str	r3, [r4, #0]
 801a03e:	bd38      	pop	{r3, r4, r5, pc}
 801a040:	20011244 	.word	0x20011244

0801a044 <abort>:
 801a044:	b508      	push	{r3, lr}
 801a046:	2006      	movs	r0, #6
 801a048:	f000 f8bc 	bl	801a1c4 <raise>
 801a04c:	2001      	movs	r0, #1
 801a04e:	f7e6 fdf5 	bl	8000c3c <_exit>

0801a052 <_realloc_r>:
 801a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a056:	4680      	mov	r8, r0
 801a058:	4615      	mov	r5, r2
 801a05a:	460c      	mov	r4, r1
 801a05c:	b921      	cbnz	r1, 801a068 <_realloc_r+0x16>
 801a05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a062:	4611      	mov	r1, r2
 801a064:	f7ff b9d8 	b.w	8019418 <_malloc_r>
 801a068:	b92a      	cbnz	r2, 801a076 <_realloc_r+0x24>
 801a06a:	f7ff f961 	bl	8019330 <_free_r>
 801a06e:	2400      	movs	r4, #0
 801a070:	4620      	mov	r0, r4
 801a072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a076:	f000 f8e3 	bl	801a240 <_malloc_usable_size_r>
 801a07a:	4285      	cmp	r5, r0
 801a07c:	4606      	mov	r6, r0
 801a07e:	d802      	bhi.n	801a086 <_realloc_r+0x34>
 801a080:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a084:	d8f4      	bhi.n	801a070 <_realloc_r+0x1e>
 801a086:	4629      	mov	r1, r5
 801a088:	4640      	mov	r0, r8
 801a08a:	f7ff f9c5 	bl	8019418 <_malloc_r>
 801a08e:	4607      	mov	r7, r0
 801a090:	2800      	cmp	r0, #0
 801a092:	d0ec      	beq.n	801a06e <_realloc_r+0x1c>
 801a094:	42b5      	cmp	r5, r6
 801a096:	462a      	mov	r2, r5
 801a098:	4621      	mov	r1, r4
 801a09a:	bf28      	it	cs
 801a09c:	4632      	movcs	r2, r6
 801a09e:	f7ff f91a 	bl	80192d6 <memcpy>
 801a0a2:	4621      	mov	r1, r4
 801a0a4:	4640      	mov	r0, r8
 801a0a6:	f7ff f943 	bl	8019330 <_free_r>
 801a0aa:	463c      	mov	r4, r7
 801a0ac:	e7e0      	b.n	801a070 <_realloc_r+0x1e>

0801a0ae <__swhatbuf_r>:
 801a0ae:	b570      	push	{r4, r5, r6, lr}
 801a0b0:	460c      	mov	r4, r1
 801a0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0b6:	2900      	cmp	r1, #0
 801a0b8:	b096      	sub	sp, #88	@ 0x58
 801a0ba:	4615      	mov	r5, r2
 801a0bc:	461e      	mov	r6, r3
 801a0be:	da0d      	bge.n	801a0dc <__swhatbuf_r+0x2e>
 801a0c0:	89a3      	ldrh	r3, [r4, #12]
 801a0c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a0c6:	f04f 0100 	mov.w	r1, #0
 801a0ca:	bf14      	ite	ne
 801a0cc:	2340      	movne	r3, #64	@ 0x40
 801a0ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a0d2:	2000      	movs	r0, #0
 801a0d4:	6031      	str	r1, [r6, #0]
 801a0d6:	602b      	str	r3, [r5, #0]
 801a0d8:	b016      	add	sp, #88	@ 0x58
 801a0da:	bd70      	pop	{r4, r5, r6, pc}
 801a0dc:	466a      	mov	r2, sp
 801a0de:	f000 f879 	bl	801a1d4 <_fstat_r>
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	dbec      	blt.n	801a0c0 <__swhatbuf_r+0x12>
 801a0e6:	9901      	ldr	r1, [sp, #4]
 801a0e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a0ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a0f0:	4259      	negs	r1, r3
 801a0f2:	4159      	adcs	r1, r3
 801a0f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a0f8:	e7eb      	b.n	801a0d2 <__swhatbuf_r+0x24>

0801a0fa <__smakebuf_r>:
 801a0fa:	898b      	ldrh	r3, [r1, #12]
 801a0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a0fe:	079d      	lsls	r5, r3, #30
 801a100:	4606      	mov	r6, r0
 801a102:	460c      	mov	r4, r1
 801a104:	d507      	bpl.n	801a116 <__smakebuf_r+0x1c>
 801a106:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a10a:	6023      	str	r3, [r4, #0]
 801a10c:	6123      	str	r3, [r4, #16]
 801a10e:	2301      	movs	r3, #1
 801a110:	6163      	str	r3, [r4, #20]
 801a112:	b003      	add	sp, #12
 801a114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a116:	ab01      	add	r3, sp, #4
 801a118:	466a      	mov	r2, sp
 801a11a:	f7ff ffc8 	bl	801a0ae <__swhatbuf_r>
 801a11e:	9f00      	ldr	r7, [sp, #0]
 801a120:	4605      	mov	r5, r0
 801a122:	4639      	mov	r1, r7
 801a124:	4630      	mov	r0, r6
 801a126:	f7ff f977 	bl	8019418 <_malloc_r>
 801a12a:	b948      	cbnz	r0, 801a140 <__smakebuf_r+0x46>
 801a12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a130:	059a      	lsls	r2, r3, #22
 801a132:	d4ee      	bmi.n	801a112 <__smakebuf_r+0x18>
 801a134:	f023 0303 	bic.w	r3, r3, #3
 801a138:	f043 0302 	orr.w	r3, r3, #2
 801a13c:	81a3      	strh	r3, [r4, #12]
 801a13e:	e7e2      	b.n	801a106 <__smakebuf_r+0xc>
 801a140:	89a3      	ldrh	r3, [r4, #12]
 801a142:	6020      	str	r0, [r4, #0]
 801a144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a148:	81a3      	strh	r3, [r4, #12]
 801a14a:	9b01      	ldr	r3, [sp, #4]
 801a14c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a150:	b15b      	cbz	r3, 801a16a <__smakebuf_r+0x70>
 801a152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a156:	4630      	mov	r0, r6
 801a158:	f000 f84e 	bl	801a1f8 <_isatty_r>
 801a15c:	b128      	cbz	r0, 801a16a <__smakebuf_r+0x70>
 801a15e:	89a3      	ldrh	r3, [r4, #12]
 801a160:	f023 0303 	bic.w	r3, r3, #3
 801a164:	f043 0301 	orr.w	r3, r3, #1
 801a168:	81a3      	strh	r3, [r4, #12]
 801a16a:	89a3      	ldrh	r3, [r4, #12]
 801a16c:	431d      	orrs	r5, r3
 801a16e:	81a5      	strh	r5, [r4, #12]
 801a170:	e7cf      	b.n	801a112 <__smakebuf_r+0x18>

0801a172 <_raise_r>:
 801a172:	291f      	cmp	r1, #31
 801a174:	b538      	push	{r3, r4, r5, lr}
 801a176:	4605      	mov	r5, r0
 801a178:	460c      	mov	r4, r1
 801a17a:	d904      	bls.n	801a186 <_raise_r+0x14>
 801a17c:	2316      	movs	r3, #22
 801a17e:	6003      	str	r3, [r0, #0]
 801a180:	f04f 30ff 	mov.w	r0, #4294967295
 801a184:	bd38      	pop	{r3, r4, r5, pc}
 801a186:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a188:	b112      	cbz	r2, 801a190 <_raise_r+0x1e>
 801a18a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a18e:	b94b      	cbnz	r3, 801a1a4 <_raise_r+0x32>
 801a190:	4628      	mov	r0, r5
 801a192:	f000 f853 	bl	801a23c <_getpid_r>
 801a196:	4622      	mov	r2, r4
 801a198:	4601      	mov	r1, r0
 801a19a:	4628      	mov	r0, r5
 801a19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1a0:	f000 b83a 	b.w	801a218 <_kill_r>
 801a1a4:	2b01      	cmp	r3, #1
 801a1a6:	d00a      	beq.n	801a1be <_raise_r+0x4c>
 801a1a8:	1c59      	adds	r1, r3, #1
 801a1aa:	d103      	bne.n	801a1b4 <_raise_r+0x42>
 801a1ac:	2316      	movs	r3, #22
 801a1ae:	6003      	str	r3, [r0, #0]
 801a1b0:	2001      	movs	r0, #1
 801a1b2:	e7e7      	b.n	801a184 <_raise_r+0x12>
 801a1b4:	2100      	movs	r1, #0
 801a1b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	4798      	blx	r3
 801a1be:	2000      	movs	r0, #0
 801a1c0:	e7e0      	b.n	801a184 <_raise_r+0x12>
	...

0801a1c4 <raise>:
 801a1c4:	4b02      	ldr	r3, [pc, #8]	@ (801a1d0 <raise+0xc>)
 801a1c6:	4601      	mov	r1, r0
 801a1c8:	6818      	ldr	r0, [r3, #0]
 801a1ca:	f7ff bfd2 	b.w	801a172 <_raise_r>
 801a1ce:	bf00      	nop
 801a1d0:	20000040 	.word	0x20000040

0801a1d4 <_fstat_r>:
 801a1d4:	b538      	push	{r3, r4, r5, lr}
 801a1d6:	4d07      	ldr	r5, [pc, #28]	@ (801a1f4 <_fstat_r+0x20>)
 801a1d8:	2300      	movs	r3, #0
 801a1da:	4604      	mov	r4, r0
 801a1dc:	4608      	mov	r0, r1
 801a1de:	4611      	mov	r1, r2
 801a1e0:	602b      	str	r3, [r5, #0]
 801a1e2:	f7e6 fd7b 	bl	8000cdc <_fstat>
 801a1e6:	1c43      	adds	r3, r0, #1
 801a1e8:	d102      	bne.n	801a1f0 <_fstat_r+0x1c>
 801a1ea:	682b      	ldr	r3, [r5, #0]
 801a1ec:	b103      	cbz	r3, 801a1f0 <_fstat_r+0x1c>
 801a1ee:	6023      	str	r3, [r4, #0]
 801a1f0:	bd38      	pop	{r3, r4, r5, pc}
 801a1f2:	bf00      	nop
 801a1f4:	20011244 	.word	0x20011244

0801a1f8 <_isatty_r>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	4d06      	ldr	r5, [pc, #24]	@ (801a214 <_isatty_r+0x1c>)
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	4604      	mov	r4, r0
 801a200:	4608      	mov	r0, r1
 801a202:	602b      	str	r3, [r5, #0]
 801a204:	f7e6 fd7a 	bl	8000cfc <_isatty>
 801a208:	1c43      	adds	r3, r0, #1
 801a20a:	d102      	bne.n	801a212 <_isatty_r+0x1a>
 801a20c:	682b      	ldr	r3, [r5, #0]
 801a20e:	b103      	cbz	r3, 801a212 <_isatty_r+0x1a>
 801a210:	6023      	str	r3, [r4, #0]
 801a212:	bd38      	pop	{r3, r4, r5, pc}
 801a214:	20011244 	.word	0x20011244

0801a218 <_kill_r>:
 801a218:	b538      	push	{r3, r4, r5, lr}
 801a21a:	4d07      	ldr	r5, [pc, #28]	@ (801a238 <_kill_r+0x20>)
 801a21c:	2300      	movs	r3, #0
 801a21e:	4604      	mov	r4, r0
 801a220:	4608      	mov	r0, r1
 801a222:	4611      	mov	r1, r2
 801a224:	602b      	str	r3, [r5, #0]
 801a226:	f7e6 fcf7 	bl	8000c18 <_kill>
 801a22a:	1c43      	adds	r3, r0, #1
 801a22c:	d102      	bne.n	801a234 <_kill_r+0x1c>
 801a22e:	682b      	ldr	r3, [r5, #0]
 801a230:	b103      	cbz	r3, 801a234 <_kill_r+0x1c>
 801a232:	6023      	str	r3, [r4, #0]
 801a234:	bd38      	pop	{r3, r4, r5, pc}
 801a236:	bf00      	nop
 801a238:	20011244 	.word	0x20011244

0801a23c <_getpid_r>:
 801a23c:	f7e6 bce4 	b.w	8000c08 <_getpid>

0801a240 <_malloc_usable_size_r>:
 801a240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a244:	1f18      	subs	r0, r3, #4
 801a246:	2b00      	cmp	r3, #0
 801a248:	bfbc      	itt	lt
 801a24a:	580b      	ldrlt	r3, [r1, r0]
 801a24c:	18c0      	addlt	r0, r0, r3
 801a24e:	4770      	bx	lr

0801a250 <_init>:
 801a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a252:	bf00      	nop
 801a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a256:	bc08      	pop	{r3}
 801a258:	469e      	mov	lr, r3
 801a25a:	4770      	bx	lr

0801a25c <_fini>:
 801a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a25e:	bf00      	nop
 801a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a262:	bc08      	pop	{r3}
 801a264:	469e      	mov	lr, r3
 801a266:	4770      	bx	lr
