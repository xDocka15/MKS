
MKS5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080053e8  080053e8  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e8  080053e8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000068  08005458  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08005458  00007440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5d5  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d70  00000000  00000000  00012665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  000143d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d6  00000000  00000000  00014df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b6f  00000000  00000000  000155c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4bd  00000000  00000000  00026135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fcef  00000000  00000000  000345f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000942e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  00094324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000971f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050d8 	.word	0x080050d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080050d8 	.word	0x080050d8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <_write+0x28>)
 800024c:	f002 ff5c 	bl	8003108 <HAL_UART_Transmit>
	return n;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	2000011c 	.word	0x2000011c

08000260 <uart_process_command>:

static void uart_process_command(char *cmd)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b08e      	sub	sp, #56	@ 0x38
 8000264:	af04      	add	r7, sp, #16
 8000266:	6078      	str	r0, [r7, #4]
	printf("received: '%s'\n", cmd);
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4bce      	ldr	r3, [pc, #824]	@ (80005a4 <uart_process_command+0x344>)
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fef2 	bl	8004058 <iprintf>

	uint16_t addr = 1;
 8000274:	2324      	movs	r3, #36	@ 0x24
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	2201      	movs	r2, #1
 800027a:	801a      	strh	r2, [r3, #0]
	uint16_t EEPROM_ADDR = 0xA0;
 800027c:	2322      	movs	r3, #34	@ 0x22
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	22a0      	movs	r2, #160	@ 0xa0
 8000282:	801a      	strh	r2, [r3, #0]
	uint8_t value = 0;
 8000284:	231b      	movs	r3, #27
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
	uint8_t value2[16];
	char *token;
	token = strtok(cmd, " ");
 800028c:	4ac6      	ldr	r2, [pc, #792]	@ (80005a8 <uart_process_command+0x348>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	0011      	movs	r1, r2
 8000292:	0018      	movs	r0, r3
 8000294:	f004 f868 	bl	8004368 <strtok>
 8000298:	0003      	movs	r3, r0
 800029a:	61fb      	str	r3, [r7, #28]
	if (strcasecmp(token, "HELLO") == 0)
 800029c:	4ac3      	ldr	r2, [pc, #780]	@ (80005ac <uart_process_command+0x34c>)
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f004 f846 	bl	8004334 <strcasecmp>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d104      	bne.n	80002b6 <uart_process_command+0x56>
	{
		printf("Communication OK\n");
 80002ac:	4bc0      	ldr	r3, [pc, #768]	@ (80005b0 <uart_process_command+0x350>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f003 ff42 	bl	8004138 <puts>
				printf("\n");
			}
		}

	}
}
 80002b4:	e171      	b.n	800059a <uart_process_command+0x33a>
	else if (strcasecmp(token, "LED1") == 0)
 80002b6:	4abf      	ldr	r2, [pc, #764]	@ (80005b4 <uart_process_command+0x354>)
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f004 f839 	bl	8004334 <strcasecmp>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d12a      	bne.n	800031c <uart_process_command+0xbc>
		token = strtok(NULL, " "); // led1?"ON":"OFF"
 80002c6:	4bb8      	ldr	r3, [pc, #736]	@ (80005a8 <uart_process_command+0x348>)
 80002c8:	0019      	movs	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f004 f84c 	bl	8004368 <strtok>
 80002d0:	0003      	movs	r3, r0
 80002d2:	61fb      	str	r3, [r7, #28]
		if (strcasecmp(token, "ON") == 0)
 80002d4:	4ab8      	ldr	r2, [pc, #736]	@ (80005b8 <uart_process_command+0x358>)
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	0011      	movs	r1, r2
 80002da:	0018      	movs	r0, r3
 80002dc:	f004 f82a 	bl	8004334 <strcasecmp>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d107      	bne.n	80002f4 <uart_process_command+0x94>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80002e4:	2390      	movs	r3, #144	@ 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2201      	movs	r2, #1
 80002ea:	2110      	movs	r1, #16
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 f9d6 	bl	800169e <HAL_GPIO_WritePin>
 80002f2:	e00e      	b.n	8000312 <uart_process_command+0xb2>
		} else if (strcasecmp(token, "OFF") == 0)
 80002f4:	4ab1      	ldr	r2, [pc, #708]	@ (80005bc <uart_process_command+0x35c>)
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f004 f81a 	bl	8004334 <strcasecmp>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d106      	bne.n	8000312 <uart_process_command+0xb2>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000304:	2390      	movs	r3, #144	@ 0x90
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	2200      	movs	r2, #0
 800030a:	2110      	movs	r1, #16
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f9c6 	bl	800169e <HAL_GPIO_WritePin>
		printf("OK\n");
 8000312:	4bab      	ldr	r3, [pc, #684]	@ (80005c0 <uart_process_command+0x360>)
 8000314:	0018      	movs	r0, r3
 8000316:	f003 ff0f 	bl	8004138 <puts>
}
 800031a:	e13e      	b.n	800059a <uart_process_command+0x33a>
	else if (strcasecmp(token, "LED2") == 0)
 800031c:	4aa9      	ldr	r2, [pc, #676]	@ (80005c4 <uart_process_command+0x364>)
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	0011      	movs	r1, r2
 8000322:	0018      	movs	r0, r3
 8000324:	f004 f806 	bl	8004334 <strcasecmp>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d128      	bne.n	800037e <uart_process_command+0x11e>
		token = strtok(NULL, " ");
 800032c:	4b9e      	ldr	r3, [pc, #632]	@ (80005a8 <uart_process_command+0x348>)
 800032e:	0019      	movs	r1, r3
 8000330:	2000      	movs	r0, #0
 8000332:	f004 f819 	bl	8004368 <strtok>
 8000336:	0003      	movs	r3, r0
 8000338:	61fb      	str	r3, [r7, #28]
		if (strcasecmp(token, "ON") == 0)
 800033a:	4a9f      	ldr	r2, [pc, #636]	@ (80005b8 <uart_process_command+0x358>)
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	0011      	movs	r1, r2
 8000340:	0018      	movs	r0, r3
 8000342:	f003 fff7 	bl	8004334 <strcasecmp>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d106      	bne.n	8000358 <uart_process_command+0xf8>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800034a:	4b9f      	ldr	r3, [pc, #636]	@ (80005c8 <uart_process_command+0x368>)
 800034c:	2201      	movs	r2, #1
 800034e:	2101      	movs	r1, #1
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f9a4 	bl	800169e <HAL_GPIO_WritePin>
 8000356:	e00d      	b.n	8000374 <uart_process_command+0x114>
		} else if (strcasecmp(token, "OFF") == 0)
 8000358:	4a98      	ldr	r2, [pc, #608]	@ (80005bc <uart_process_command+0x35c>)
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f003 ffe8 	bl	8004334 <strcasecmp>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d105      	bne.n	8000374 <uart_process_command+0x114>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000368:	4b97      	ldr	r3, [pc, #604]	@ (80005c8 <uart_process_command+0x368>)
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	0018      	movs	r0, r3
 8000370:	f001 f995 	bl	800169e <HAL_GPIO_WritePin>
		printf("OK\n");
 8000374:	4b92      	ldr	r3, [pc, #584]	@ (80005c0 <uart_process_command+0x360>)
 8000376:	0018      	movs	r0, r3
 8000378:	f003 fede 	bl	8004138 <puts>
}
 800037c:	e10d      	b.n	800059a <uart_process_command+0x33a>
	else if (strcasecmp(token, "STATUS") == 0)
 800037e:	4a93      	ldr	r2, [pc, #588]	@ (80005cc <uart_process_command+0x36c>)
 8000380:	69fb      	ldr	r3, [r7, #28]
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f003 ffd5 	bl	8004334 <strcasecmp>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d121      	bne.n	80003d2 <uart_process_command+0x172>
		if(HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin))
 800038e:	2390      	movs	r3, #144	@ 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2110      	movs	r1, #16
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f965 	bl	8001664 <HAL_GPIO_ReadPin>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d004      	beq.n	80003a8 <uart_process_command+0x148>
			printf("LED1 is ON \n");
 800039e:	4b8c      	ldr	r3, [pc, #560]	@ (80005d0 <uart_process_command+0x370>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f003 fec9 	bl	8004138 <puts>
 80003a6:	e003      	b.n	80003b0 <uart_process_command+0x150>
			printf("LED1 is OFF \n");
 80003a8:	4b8a      	ldr	r3, [pc, #552]	@ (80005d4 <uart_process_command+0x374>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f003 fec4 	bl	8004138 <puts>
		if(HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin))
 80003b0:	4b85      	ldr	r3, [pc, #532]	@ (80005c8 <uart_process_command+0x368>)
 80003b2:	2101      	movs	r1, #1
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f955 	bl	8001664 <HAL_GPIO_ReadPin>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d004      	beq.n	80003c8 <uart_process_command+0x168>
			printf("LED2 is ON \n");
 80003be:	4b86      	ldr	r3, [pc, #536]	@ (80005d8 <uart_process_command+0x378>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f003 feb9 	bl	8004138 <puts>
}
 80003c6:	e0e8      	b.n	800059a <uart_process_command+0x33a>
			printf("LED2 is OFF \n");
 80003c8:	4b84      	ldr	r3, [pc, #528]	@ (80005dc <uart_process_command+0x37c>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f003 feb4 	bl	8004138 <puts>
}
 80003d0:	e0e3      	b.n	800059a <uart_process_command+0x33a>
	else if (strcasecmp(token, "READ") == 0)
 80003d2:	4a83      	ldr	r2, [pc, #524]	@ (80005e0 <uart_process_command+0x380>)
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f003 ffab 	bl	8004334 <strcasecmp>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d13a      	bne.n	8000458 <uart_process_command+0x1f8>
		token = strtok(NULL, " ");
 80003e2:	4b71      	ldr	r3, [pc, #452]	@ (80005a8 <uart_process_command+0x348>)
 80003e4:	0019      	movs	r1, r3
 80003e6:	2000      	movs	r0, #0
 80003e8:	f003 ffbe 	bl	8004368 <strtok>
 80003ec:	0003      	movs	r3, r0
 80003ee:	61fb      	str	r3, [r7, #28]
		addr = atoi(token);
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	0018      	movs	r0, r3
 80003f4:	f003 fccf 	bl	8003d96 <atoi>
 80003f8:	0002      	movs	r2, r0
 80003fa:	2124      	movs	r1, #36	@ 0x24
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 8000400:	187b      	adds	r3, r7, r1
 8000402:	881a      	ldrh	r2, [r3, #0]
 8000404:	2322      	movs	r3, #34	@ 0x22
 8000406:	18fb      	adds	r3, r7, r3
 8000408:	8819      	ldrh	r1, [r3, #0]
 800040a:	4876      	ldr	r0, [pc, #472]	@ (80005e4 <uart_process_command+0x384>)
 800040c:	23fa      	movs	r3, #250	@ 0xfa
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	9302      	str	r3, [sp, #8]
 8000412:	2301      	movs	r3, #1
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	231b      	movs	r3, #27
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2302      	movs	r3, #2
 800041e:	f001 fb2f 	bl	8001a80 <HAL_I2C_Mem_Read>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT) {}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	23fa      	movs	r3, #250	@ 0xfa
 8000426:	009c      	lsls	r4, r3, #2
 8000428:	2396      	movs	r3, #150	@ 0x96
 800042a:	005a      	lsls	r2, r3, #1
 800042c:	2322      	movs	r3, #34	@ 0x22
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	8819      	ldrh	r1, [r3, #0]
 8000432:	486c      	ldr	r0, [pc, #432]	@ (80005e4 <uart_process_command+0x384>)
 8000434:	0023      	movs	r3, r4
 8000436:	f001 fc57 	bl	8001ce8 <HAL_I2C_IsDeviceReady>
 800043a:	0003      	movs	r3, r0
 800043c:	2b03      	cmp	r3, #3
 800043e:	d0f1      	beq.n	8000424 <uart_process_command+0x1c4>
		printf("MEM READ '%d' '%d' \n", addr, value);
 8000440:	2324      	movs	r3, #36	@ 0x24
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	8819      	ldrh	r1, [r3, #0]
 8000446:	231b      	movs	r3, #27
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	001a      	movs	r2, r3
 800044e:	4b66      	ldr	r3, [pc, #408]	@ (80005e8 <uart_process_command+0x388>)
 8000450:	0018      	movs	r0, r3
 8000452:	f003 fe01 	bl	8004058 <iprintf>
}
 8000456:	e0a0      	b.n	800059a <uart_process_command+0x33a>
	} else if (strcasecmp(token, "WRITE") == 0)
 8000458:	4a64      	ldr	r2, [pc, #400]	@ (80005ec <uart_process_command+0x38c>)
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f003 ff68 	bl	8004334 <strcasecmp>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d149      	bne.n	80004fc <uart_process_command+0x29c>
		token = strtok(NULL, " ");
 8000468:	4b4f      	ldr	r3, [pc, #316]	@ (80005a8 <uart_process_command+0x348>)
 800046a:	0019      	movs	r1, r3
 800046c:	2000      	movs	r0, #0
 800046e:	f003 ff7b 	bl	8004368 <strtok>
 8000472:	0003      	movs	r3, r0
 8000474:	61fb      	str	r3, [r7, #28]
		addr = atoi(token);
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	0018      	movs	r0, r3
 800047a:	f003 fc8c 	bl	8003d96 <atoi>
 800047e:	0002      	movs	r2, r0
 8000480:	2424      	movs	r4, #36	@ 0x24
 8000482:	193b      	adds	r3, r7, r4
 8000484:	801a      	strh	r2, [r3, #0]
		token = strtok(NULL, " ");
 8000486:	4b48      	ldr	r3, [pc, #288]	@ (80005a8 <uart_process_command+0x348>)
 8000488:	0019      	movs	r1, r3
 800048a:	2000      	movs	r0, #0
 800048c:	f003 ff6c 	bl	8004368 <strtok>
 8000490:	0003      	movs	r3, r0
 8000492:	61fb      	str	r3, [r7, #28]
		value = atoi(token);
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	0018      	movs	r0, r3
 8000498:	f003 fc7d 	bl	8003d96 <atoi>
 800049c:	0003      	movs	r3, r0
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	251b      	movs	r5, #27
 80004a2:	197b      	adds	r3, r7, r5
 80004a4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	881a      	ldrh	r2, [r3, #0]
 80004aa:	2322      	movs	r3, #34	@ 0x22
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	8819      	ldrh	r1, [r3, #0]
 80004b0:	484c      	ldr	r0, [pc, #304]	@ (80005e4 <uart_process_command+0x384>)
 80004b2:	23fa      	movs	r3, #250	@ 0xfa
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	9302      	str	r3, [sp, #8]
 80004b8:	2301      	movs	r3, #1
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	197b      	adds	r3, r7, r5
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2302      	movs	r3, #2
 80004c2:	f001 f9af 	bl	8001824 <HAL_I2C_Mem_Write>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT) {}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	23fa      	movs	r3, #250	@ 0xfa
 80004ca:	009c      	lsls	r4, r3, #2
 80004cc:	2396      	movs	r3, #150	@ 0x96
 80004ce:	005a      	lsls	r2, r3, #1
 80004d0:	2322      	movs	r3, #34	@ 0x22
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	8819      	ldrh	r1, [r3, #0]
 80004d6:	4843      	ldr	r0, [pc, #268]	@ (80005e4 <uart_process_command+0x384>)
 80004d8:	0023      	movs	r3, r4
 80004da:	f001 fc05 	bl	8001ce8 <HAL_I2C_IsDeviceReady>
 80004de:	0003      	movs	r3, r0
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d0f1      	beq.n	80004c8 <uart_process_command+0x268>
		printf("WROTE '%d' to '%d' \n", value, addr);
 80004e4:	231b      	movs	r3, #27
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	0019      	movs	r1, r3
 80004ec:	2324      	movs	r3, #36	@ 0x24
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	881a      	ldrh	r2, [r3, #0]
 80004f2:	4b3f      	ldr	r3, [pc, #252]	@ (80005f0 <uart_process_command+0x390>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f003 fdaf 	bl	8004058 <iprintf>
}
 80004fa:	e04e      	b.n	800059a <uart_process_command+0x33a>
	} else if (strcasecmp(token, "DUMP") == 0)
 80004fc:	4a3d      	ldr	r2, [pc, #244]	@ (80005f4 <uart_process_command+0x394>)
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f003 ff16 	bl	8004334 <strcasecmp>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d146      	bne.n	800059a <uart_process_command+0x33a>
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, value2, 16, 1000);
 800050c:	2324      	movs	r3, #36	@ 0x24
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	881a      	ldrh	r2, [r3, #0]
 8000512:	2322      	movs	r3, #34	@ 0x22
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	8819      	ldrh	r1, [r3, #0]
 8000518:	4832      	ldr	r0, [pc, #200]	@ (80005e4 <uart_process_command+0x384>)
 800051a:	23fa      	movs	r3, #250	@ 0xfa
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	2310      	movs	r3, #16
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2308      	movs	r3, #8
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	f001 faa8 	bl	8001a80 <HAL_I2C_Mem_Read>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000) == HAL_TIMEOUT) {}
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	23fa      	movs	r3, #250	@ 0xfa
 8000534:	009c      	lsls	r4, r3, #2
 8000536:	2396      	movs	r3, #150	@ 0x96
 8000538:	005a      	lsls	r2, r3, #1
 800053a:	2322      	movs	r3, #34	@ 0x22
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	8819      	ldrh	r1, [r3, #0]
 8000540:	4828      	ldr	r0, [pc, #160]	@ (80005e4 <uart_process_command+0x384>)
 8000542:	0023      	movs	r3, r4
 8000544:	f001 fbd0 	bl	8001ce8 <HAL_I2C_IsDeviceReady>
 8000548:	0003      	movs	r3, r0
 800054a:	2b03      	cmp	r3, #3
 800054c:	d0f1      	beq.n	8000532 <uart_process_command+0x2d2>
		for (uint8_t var = 0; var < 16; var++)
 800054e:	2327      	movs	r3, #39	@ 0x27
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e01b      	b.n	8000590 <uart_process_command+0x330>
			printf(" %02x", value2[var]);
 8000558:	2427      	movs	r4, #39	@ 0x27
 800055a:	193b      	adds	r3, r7, r4
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2208      	movs	r2, #8
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	5cd3      	ldrb	r3, [r2, r3]
 8000564:	001a      	movs	r2, r3
 8000566:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <uart_process_command+0x398>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f003 fd74 	bl	8004058 <iprintf>
			if (var%8 == 7)
 8000570:	193b      	adds	r3, r7, r4
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2207      	movs	r2, #7
 8000576:	4013      	ands	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b07      	cmp	r3, #7
 800057c:	d102      	bne.n	8000584 <uart_process_command+0x324>
				printf("\n");
 800057e:	200a      	movs	r0, #10
 8000580:	f003 fd7a 	bl	8004078 <putchar>
		for (uint8_t var = 0; var < 16; var++)
 8000584:	2127      	movs	r1, #39	@ 0x27
 8000586:	187b      	adds	r3, r7, r1
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	187b      	adds	r3, r7, r1
 800058c:	3201      	adds	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	2327      	movs	r3, #39	@ 0x27
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b0f      	cmp	r3, #15
 8000598:	d9de      	bls.n	8000558 <uart_process_command+0x2f8>
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b00a      	add	sp, #40	@ 0x28
 80005a0:	bdb0      	pop	{r4, r5, r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	080050f0 	.word	0x080050f0
 80005a8:	08005100 	.word	0x08005100
 80005ac:	08005104 	.word	0x08005104
 80005b0:	0800510c 	.word	0x0800510c
 80005b4:	08005120 	.word	0x08005120
 80005b8:	08005128 	.word	0x08005128
 80005bc:	0800512c 	.word	0x0800512c
 80005c0:	08005130 	.word	0x08005130
 80005c4:	08005134 	.word	0x08005134
 80005c8:	48000400 	.word	0x48000400
 80005cc:	0800513c 	.word	0x0800513c
 80005d0:	08005144 	.word	0x08005144
 80005d4:	08005150 	.word	0x08005150
 80005d8:	08005160 	.word	0x08005160
 80005dc:	0800516c 	.word	0x0800516c
 80005e0:	0800517c 	.word	0x0800517c
 80005e4:	200000c8 	.word	0x200000c8
 80005e8:	08005184 	.word	0x08005184
 80005ec:	0800519c 	.word	0x0800519c
 80005f0:	080051a4 	.word	0x080051a4
 80005f4:	080051bc 	.word	0x080051bc
 80005f8:	080051c4 	.word	0x080051c4

080005fc <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	0002      	movs	r2, r0
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <uart_byte_available+0x74>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2bff      	cmp	r3, #255	@ 0xff
 800060e:	d812      	bhi.n	8000636 <uart_byte_available+0x3a>
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b1f      	cmp	r3, #31
 8000616:	d90e      	bls.n	8000636 <uart_byte_available+0x3a>
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b7e      	cmp	r3, #126	@ 0x7e
 800061e:	d80a      	bhi.n	8000636 <uart_byte_available+0x3a>
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <uart_byte_available+0x74>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	b291      	uxth	r1, r2
 8000628:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <uart_byte_available+0x74>)
 800062a:	8011      	strh	r1, [r2, #0]
 800062c:	0019      	movs	r1, r3
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <uart_byte_available+0x78>)
 8000630:	1dfa      	adds	r2, r7, #7
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b0a      	cmp	r3, #10
 800063c:	d003      	beq.n	8000646 <uart_byte_available+0x4a>
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d110      	bne.n	8000668 <uart_byte_available+0x6c>
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <uart_byte_available+0x74>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <uart_byte_available+0x6c>
		data[cnt] = '\0';
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <uart_byte_available+0x74>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	001a      	movs	r2, r3
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <uart_byte_available+0x78>)
 8000656:	2100      	movs	r1, #0
 8000658:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <uart_byte_available+0x78>)
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fdff 	bl	8000260 <uart_process_command>
		cnt = 0;
 8000662:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <uart_byte_available+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	801a      	strh	r2, [r3, #0]
	}
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001e8 	.word	0x200001e8
 8000674:	200001ec 	.word	0x200001ec

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fba7 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f83d 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f92b 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800068a:	f000 f90b 	bl	80008a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800068e:	f000 f8d9 	bl	8000844 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000692:	f000 f897 	bl	80007c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000696:	4916      	ldr	r1, [pc, #88]	@ (80006f0 <main+0x78>)
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <main+0x7c>)
 800069a:	2240      	movs	r2, #64	@ 0x40
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fdd2 	bl	8003246 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80006a2:	e019      	b.n	80006d8 <main+0x60>
	   uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <main+0x80>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	0019      	movs	r1, r3
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <main+0x78>)
 80006b0:	5c52      	ldrb	r2, [r2, r1]
 80006b2:	701a      	strb	r2, [r3, #0]
	   // increase read pointer
	   if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <main+0x80>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <main+0x80>)
 80006c0:	1c19      	adds	r1, r3, #0
 80006c2:	8011      	strh	r1, [r2, #0]
 80006c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80006c6:	d902      	bls.n	80006ce <main+0x56>
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <main+0x80>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	801a      	strh	r2, [r3, #0]
	   // process every received byte with the RX state machine
	   uart_byte_available(b);
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ff92 	bl	80005fc <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <main+0x80>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	0019      	movs	r1, r3
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <main+0x84>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	2240      	movs	r2, #64	@ 0x40
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4299      	cmp	r1, r3
 80006ec:	d1da      	bne.n	80006a4 <main+0x2c>
 80006ee:	e7f3      	b.n	80006d8 <main+0x60>
 80006f0:	20000084 	.word	0x20000084
 80006f4:	2000011c 	.word	0x2000011c
 80006f8:	200000c4 	.word	0x200000c4
 80006fc:	200001a4 	.word	0x200001a4

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b095      	sub	sp, #84	@ 0x54
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	2420      	movs	r4, #32
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2330      	movs	r3, #48	@ 0x30
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 fe07 	bl	8004324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000716:	2310      	movs	r3, #16
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	2310      	movs	r3, #16
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 fdff 	bl	8004324 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	2310      	movs	r3, #16
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 fdf8 	bl	8004324 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2210      	movs	r2, #16
 8000746:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2202      	movs	r2, #2
 800074c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	22a0      	movs	r2, #160	@ 0xa0
 8000758:	0392      	lsls	r2, r2, #14
 800075a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	187b      	adds	r3, r7, r1
 8000764:	0018      	movs	r0, r3
 8000766:	f001 ff4f 	bl	8002608 <HAL_RCC_OscConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800076e:	f000 f949 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	2110      	movs	r1, #16
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2207      	movs	r2, #7
 8000778:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2202      	movs	r2, #2
 800077e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2101      	movs	r1, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fa53 	bl	8002c3c <HAL_RCC_ClockConfig>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800079a:	f000 f933 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800079e:	003b      	movs	r3, r7
 80007a0:	2220      	movs	r2, #32
 80007a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	003b      	movs	r3, r7
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fb89 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007b6:	f000 f925 	bl	8000a04 <Error_Handler>
  }
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b015      	add	sp, #84	@ 0x54
 80007c0:	bd90      	pop	{r4, r7, pc}
	...

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000800:	0018      	movs	r0, r3
 8000802:	f000 ff69 	bl	80016d8 <HAL_I2C_Init>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 f8fb 	bl	8000a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fe60 	bl	80024d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f8f2 	bl	8000a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000822:	2100      	movs	r1, #0
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fea3 	bl	8002570 <HAL_I2CEx_ConfigDigitalFilter>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8e9 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000c8 	.word	0x200000c8
 800083c:	40005400 	.word	0x40005400
 8000840:	00201d2b 	.word	0x00201d2b

08000844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART2_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000850:	2296      	movs	r2, #150	@ 0x96
 8000852:	0212      	lsls	r2, r2, #8
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000888:	0018      	movs	r0, r3
 800088a:	f002 fbe9 	bl	8003060 <HAL_UART_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f8b7 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000011c 	.word	0x2000011c
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_DMA_Init+0x38>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_DMA_Init+0x38>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_DMA_Init+0x38>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	200b      	movs	r0, #11
 80008c8:	f000 fb92 	bl	8000ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80008cc:	200b      	movs	r0, #11
 80008ce:	f000 fba4 	bl	800101a <HAL_NVIC_EnableIRQ>

}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b08b      	sub	sp, #44	@ 0x2c
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	2414      	movs	r4, #20
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	2314      	movs	r3, #20
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f003 fd17 	bl	8004324 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b40      	ldr	r3, [pc, #256]	@ (80009f8 <MX_GPIO_Init+0x118>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <MX_GPIO_Init+0x118>)
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	0309      	lsls	r1, r1, #12
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	031b      	lsls	r3, r3, #12
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	03c9      	lsls	r1, r1, #15
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	03db      	lsls	r3, r3, #15
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b32      	ldr	r3, [pc, #200]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0289      	lsls	r1, r1, #10
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b2e      	ldr	r3, [pc, #184]	@ (80009f8 <MX_GPIO_Init+0x118>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <MX_GPIO_Init+0x118>)
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000950:	2180      	movs	r1, #128	@ 0x80
 8000952:	02c9      	lsls	r1, r1, #11
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <MX_GPIO_Init+0x118>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	02db      	lsls	r3, r3, #11
 8000960:	4013      	ands	r3, r2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000966:	2390      	movs	r3, #144	@ 0x90
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2200      	movs	r2, #0
 800096c:	2130      	movs	r1, #48	@ 0x30
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fe95 	bl	800169e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000974:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <MX_GPIO_Init+0x11c>)
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fe8f 	bl	800169e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	0192      	lsls	r2, r2, #6
 8000986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2284      	movs	r2, #132	@ 0x84
 800098c:	0392      	lsls	r2, r2, #14
 800098e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0x120>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f000 fcf1 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2230      	movs	r2, #48	@ 0x30
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	193a      	adds	r2, r7, r4
 80009bc:	2390      	movs	r3, #144	@ 0x90
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fcde 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80009c8:	0021      	movs	r1, r4
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2201      	movs	r2, #1
 80009d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <MX_GPIO_Init+0x11c>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f000 fccb 	bl	8001384 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b00b      	add	sp, #44	@ 0x2c
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48000800 	.word	0x48000800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a18:	699a      	ldr	r2, [r3, #24]
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	619a      	str	r2, [r3, #24]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a30:	69da      	ldr	r2, [r3, #28]
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	0549      	lsls	r1, r1, #21
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	61da      	str	r2, [r3, #28]
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a3e:	69da      	ldr	r2, [r3, #28]
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	055b      	lsls	r3, r3, #21
 8000a44:	4013      	ands	r3, r2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	@ 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fc5a 	bl	8004324 <memset>
  if(hi2c->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <HAL_I2C_MspInit+0x90>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d132      	bne.n	8000ae0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <HAL_I2C_MspInit+0x94>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_I2C_MspInit+0x94>)
 8000a80:	2180      	movs	r1, #128	@ 0x80
 8000a82:	02c9      	lsls	r1, r1, #11
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_I2C_MspInit+0x94>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	02db      	lsls	r3, r3, #11
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	22c0      	movs	r2, #192	@ 0xc0
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2212      	movs	r2, #18
 8000aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <HAL_I2C_MspInit+0x98>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f000 fc60 	bl	8001384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_I2C_MspInit+0x94>)
 8000ac6:	69da      	ldr	r2, [r3, #28]
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_I2C_MspInit+0x94>)
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	0389      	lsls	r1, r1, #14
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	61da      	str	r2, [r3, #28]
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_I2C_MspInit+0x94>)
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	039b      	lsls	r3, r3, #14
 8000ada:	4013      	ands	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b00b      	add	sp, #44	@ 0x2c
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b08b      	sub	sp, #44	@ 0x2c
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	2414      	movs	r4, #20
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2314      	movs	r3, #20
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f003 fc0c 	bl	8004324 <memset>
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd0 <HAL_UART_MspInit+0xdc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d158      	bne.n	8000bc8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b18:	69da      	ldr	r2, [r3, #28]
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	0289      	lsls	r1, r1, #10
 8000b20:	430a      	orrs	r2, r1
 8000b22:	61da      	str	r2, [r3, #28]
 8000b24:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	029b      	lsls	r3, r3, #10
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b34:	695a      	ldr	r2, [r3, #20]
 8000b36:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	0289      	lsls	r1, r1, #10
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	615a      	str	r2, [r3, #20]
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	029b      	lsls	r3, r3, #10
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b4e:	0021      	movs	r1, r4
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	2390      	movs	r3, #144	@ 0x90
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fc04 	bl	8001384 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b7e:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xe8>)
 8000b80:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b94:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fa50 	bl	8001054 <HAL_DMA_Init>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000bb8:	f7ff ff24 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000bc0:	675a      	str	r2, [r3, #116]	@ 0x74
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b00b      	add	sp, #44	@ 0x2c
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	200001a4 	.word	0x200001a4
 8000bdc:	40020058 	.word	0x40020058

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f92a 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fac8 	bl	80011b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  return 1;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_kill>:

int _kill(int pid, int sig)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c42:	f003 fc3f 	bl	80044c4 <__errno>
 8000c46:	0003      	movs	r3, r0
 8000c48:	2216      	movs	r2, #22
 8000c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_exit>:

void _exit (int status)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c60:	2301      	movs	r3, #1
 8000c62:	425a      	negs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ffe5 	bl	8000c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	e7fd      	b.n	8000c6e <_exit+0x16>

08000c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e00a      	b.n	8000c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c84:	e000      	b.n	8000c88 <_read+0x16>
 8000c86:	bf00      	nop
 8000c88:	0001      	movs	r1, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60ba      	str	r2, [r7, #8]
 8000c90:	b2ca      	uxtb	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbf0      	blt.n	8000c84 <_read+0x12>
  }

  return len;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b006      	add	sp, #24
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	0192      	lsls	r2, r2, #6
 8000cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_isatty>:

int _isatty(int file)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b004      	add	sp, #16
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f003 fbc6 	bl	80044c4 <__errno>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	425b      	negs	r3, r3
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	18d2      	adds	r2, r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <_sbrk+0x64>)
 8000d54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b006      	add	sp, #24
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20002000 	.word	0x20002000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200002ec 	.word	0x200002ec
 8000d6c:	20000440 	.word	0x20000440

08000d70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d7c:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d80:	f7ff fff6 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc8 <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000daa:	f003 fb91 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff fc63 	bl	8000678 <main>

08000db2 <LoopForever>:

LoopForever:
    b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   r0, =_estack
 8000db4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dc0:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8000dc4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dc8:	20000440 	.word	0x20000440

08000dcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <HAL_Init+0x24>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_Init+0x24>)
 8000dda:	2110      	movs	r1, #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f809 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de6:	f7ff fe13 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e02:	681c      	ldr	r4, [r3, #0]
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_InitTick+0x60>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	0019      	movs	r1, r3
 8000e0a:	23fa      	movs	r3, #250	@ 0xfa
 8000e0c:	0098      	lsls	r0, r3, #2
 8000e0e:	f7ff f985 	bl	800011c <__udivsi3>
 8000e12:	0003      	movs	r3, r0
 8000e14:	0019      	movs	r1, r3
 8000e16:	0020      	movs	r0, r4
 8000e18:	f7ff f980 	bl	800011c <__udivsi3>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 f90b 	bl	800103a <HAL_SYSTICK_Config>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e00f      	b.n	8000e4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d80b      	bhi.n	8000e4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f8d8 	bl	8000ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_InitTick+0x64>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b003      	add	sp, #12
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	18d2      	adds	r2, r2, r3
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200002f0 	.word	0x200002f0

08000e84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	200002f0 	.word	0x200002f0

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eaa:	d809      	bhi.n	8000ec0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	231f      	movs	r3, #31
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_EnableIRQ+0x30>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
  }
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ee0:	d828      	bhi.n	8000f34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <__NVIC_SetPriority+0xd4>)
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	33c0      	adds	r3, #192	@ 0xc0
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	589b      	ldr	r3, [r3, r2]
 8000ef2:	1dfa      	adds	r2, r7, #7
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	2203      	movs	r2, #3
 8000efa:	400a      	ands	r2, r1
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	21ff      	movs	r1, #255	@ 0xff
 8000f00:	4091      	lsls	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	43d2      	mvns	r2, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	22ff      	movs	r2, #255	@ 0xff
 8000f10:	401a      	ands	r2, r3
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	0018      	movs	r0, r3
 8000f18:	2303      	movs	r3, #3
 8000f1a:	4003      	ands	r3, r0
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f20:	481f      	ldr	r0, [pc, #124]	@ (8000fa0 <__NVIC_SetPriority+0xd4>)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	33c0      	adds	r3, #192	@ 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f32:	e031      	b.n	8000f98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <__NVIC_SetPriority+0xd8>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	400b      	ands	r3, r1
 8000f40:	3b08      	subs	r3, #8
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3306      	adds	r3, #6
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0011      	movs	r1, r2
 8000f54:	2203      	movs	r2, #3
 8000f56:	400a      	ands	r2, r1
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	21ff      	movs	r1, #255	@ 0xff
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	401a      	ands	r2, r3
 8000f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	22ff      	movs	r2, #255	@ 0xff
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	2303      	movs	r3, #3
 8000f76:	4003      	ands	r3, r0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <__NVIC_SetPriority+0xd8>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	001c      	movs	r4, r3
 8000f84:	230f      	movs	r3, #15
 8000f86:	4023      	ands	r3, r4
 8000f88:	3b08      	subs	r3, #8
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	3306      	adds	r3, #6
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	18c3      	adds	r3, r0, r3
 8000f94:	3304      	adds	r3, #4
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	045b      	lsls	r3, r3, #17
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d301      	bcc.n	8000fc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e010      	b.n	8000fe2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <SysTick_Config+0x44>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	3a01      	subs	r2, #1
 8000fc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc8:	2301      	movs	r3, #1
 8000fca:	425b      	negs	r3, r3
 8000fcc:	2103      	movs	r1, #3
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff ff7c 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <SysTick_Config+0x44>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <SysTick_Config+0x44>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	1c02      	adds	r2, r0, #0
 8001000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	187b      	adds	r3, r7, r1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	0002      	movs	r2, r0
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b25b      	sxtb	r3, r3
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff33 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ffaf 	bl	8000fa8 <SysTick_Config>
 800104a:	0003      	movs	r3, r0
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e036      	b.n	80010d8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2221      	movs	r2, #33	@ 0x21
 800106e:	2102      	movs	r1, #2
 8001070:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <HAL_DMA_Init+0x8c>)
 800107e:	4013      	ands	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800108a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f946 	bl	800134c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2221      	movs	r2, #33	@ 0x21
 80010ca:	2101      	movs	r1, #1
 80010cc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2220      	movs	r2, #32
 80010d2:	2100      	movs	r1, #0
 80010d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b004      	add	sp, #16
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	ffffc00f 	.word	0xffffc00f

080010e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2317      	movs	r3, #23
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2220      	movs	r2, #32
 80010fe:	5c9b      	ldrb	r3, [r3, r2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_DMA_Start_IT+0x24>
 8001104:	2302      	movs	r3, #2
 8001106:	e04f      	b.n	80011a8 <HAL_DMA_Start_IT+0xc4>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2220      	movs	r2, #32
 800110c:	2101      	movs	r1, #1
 800110e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2221      	movs	r2, #33	@ 0x21
 8001114:	5c9b      	ldrb	r3, [r3, r2]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d13a      	bne.n	8001192 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2221      	movs	r2, #33	@ 0x21
 8001120:	2102      	movs	r1, #2
 8001122:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	438a      	bics	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f000 f8d7 	bl	80012f4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	210e      	movs	r1, #14
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e00f      	b.n	8001180 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	210a      	movs	r1, #10
 800116c:	430a      	orrs	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2104      	movs	r1, #4
 800117c:	438a      	bics	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e007      	b.n	80011a2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2220      	movs	r2, #32
 8001196:	2100      	movs	r1, #0
 8001198:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800119a:	2317      	movs	r3, #23
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2202      	movs	r2, #2
 80011a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011a2:	2317      	movs	r3, #23
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	781b      	ldrb	r3, [r3, #0]
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b006      	add	sp, #24
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	2204      	movs	r2, #4
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	d024      	beq.n	8001222 <HAL_DMA_IRQHandler+0x72>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2204      	movs	r2, #4
 80011dc:	4013      	ands	r3, r2
 80011de:	d020      	beq.n	8001222 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2220      	movs	r2, #32
 80011e8:	4013      	ands	r3, r2
 80011ea:	d107      	bne.n	80011fc <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2104      	movs	r1, #4
 80011f8:	438a      	bics	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001204:	2104      	movs	r1, #4
 8001206:	4091      	lsls	r1, r2
 8001208:	000a      	movs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d100      	bne.n	8001216 <HAL_DMA_IRQHandler+0x66>
 8001214:	e06a      	b.n	80012ec <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	0010      	movs	r0, r2
 800121e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001220:	e064      	b.n	80012ec <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	2202      	movs	r2, #2
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_DMA_IRQHandler+0xda>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2202      	movs	r2, #2
 8001236:	4013      	ands	r3, r2
 8001238:	d027      	beq.n	800128a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2220      	movs	r2, #32
 8001242:	4013      	ands	r3, r2
 8001244:	d10b      	bne.n	800125e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	210a      	movs	r1, #10
 8001252:	438a      	bics	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2221      	movs	r2, #33	@ 0x21
 800125a:	2101      	movs	r1, #1
 800125c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001266:	2102      	movs	r1, #2
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127a:	2b00      	cmp	r3, #0
 800127c:	d036      	beq.n	80012ec <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	0010      	movs	r0, r2
 8001286:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001288:	e030      	b.n	80012ec <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	2208      	movs	r2, #8
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	d028      	beq.n	80012ec <HAL_DMA_IRQHandler+0x13c>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	2208      	movs	r2, #8
 800129e:	4013      	ands	r3, r2
 80012a0:	d024      	beq.n	80012ec <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	210e      	movs	r1, #14
 80012ae:	438a      	bics	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ba:	2101      	movs	r1, #1
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2221      	movs	r2, #33	@ 0x21
 80012cc:	2101      	movs	r1, #1
 80012ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2220      	movs	r2, #32
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	0010      	movs	r0, r2
 80012e8:	4798      	blx	r3
    }
  }
}
 80012ea:	e7ff      	b.n	80012ec <HAL_DMA_IRQHandler+0x13c>
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800130a:	2101      	movs	r1, #1
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d108      	bne.n	8001334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001332:	e007      	b.n	8001344 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}

0800134c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a08      	ldr	r2, [pc, #32]	@ (800137c <DMA_CalcBaseAndBitshift+0x30>)
 800135a:	4694      	mov	ip, r2
 800135c:	4463      	add	r3, ip
 800135e:	2114      	movs	r1, #20
 8001360:	0018      	movs	r0, r3
 8001362:	f7fe fedb 	bl	800011c <__udivsi3>
 8001366:	0003      	movs	r3, r0
 8001368:	009a      	lsls	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a03      	ldr	r2, [pc, #12]	@ (8001380 <DMA_CalcBaseAndBitshift+0x34>)
 8001372:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}
 800137c:	bffdfff8 	.word	0xbffdfff8
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	e14f      	b.n	8001634 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4091      	lsls	r1, r2
 800139e:	000a      	movs	r2, r1
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d100      	bne.n	80013ac <HAL_GPIO_Init+0x28>
 80013aa:	e140      	b.n	800162e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	43da      	mvns	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	2201      	movs	r2, #1
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2203      	movs	r2, #3
 800142c:	4013      	ands	r3, r2
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	4013      	ands	r3, r2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	58d3      	ldr	r3, [r2, r3]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2207      	movs	r2, #7
 8001480:	4013      	ands	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	43da      	mvns	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2107      	movs	r1, #7
 800149a:	400b      	ands	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2203      	movs	r2, #3
 80014d4:	401a      	ands	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	23c0      	movs	r3, #192	@ 0xc0
 80014f0:	029b      	lsls	r3, r3, #10
 80014f2:	4013      	ands	r3, r2
 80014f4:	d100      	bne.n	80014f8 <HAL_GPIO_Init+0x174>
 80014f6:	e09a      	b.n	800162e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b54      	ldr	r3, [pc, #336]	@ (800164c <HAL_GPIO_Init+0x2c8>)
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	4b53      	ldr	r3, [pc, #332]	@ (800164c <HAL_GPIO_Init+0x2c8>)
 80014fe:	2101      	movs	r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	4b51      	ldr	r3, [pc, #324]	@ (800164c <HAL_GPIO_Init+0x2c8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001510:	4a4f      	ldr	r2, [pc, #316]	@ (8001650 <HAL_GPIO_Init+0x2cc>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	589b      	ldr	r3, [r3, r2]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	409a      	lsls	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	43da      	mvns	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	2390      	movs	r3, #144	@ 0x90
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	429a      	cmp	r2, r3
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1e2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a44      	ldr	r2, [pc, #272]	@ (8001654 <HAL_GPIO_Init+0x2d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1de>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a43      	ldr	r2, [pc, #268]	@ (8001658 <HAL_GPIO_Init+0x2d4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1da>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a42      	ldr	r2, [pc, #264]	@ (800165c <HAL_GPIO_Init+0x2d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1d6>
 8001556:	2303      	movs	r3, #3
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x1e4>
 800155a:	2305      	movs	r3, #5
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x1e4>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x1e4>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x1e4>
 8001566:	2300      	movs	r3, #0
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	2103      	movs	r1, #3
 800156c:	400a      	ands	r2, r1
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4093      	lsls	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001578:	4935      	ldr	r1, [pc, #212]	@ (8001650 <HAL_GPIO_Init+0x2cc>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001586:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	035b      	lsls	r3, r3, #13
 800159e:	4013      	ands	r3, r2
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	039b      	lsls	r3, r3, #14
 80015c8:	4013      	ands	r3, r2
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	4013      	ands	r3, r2
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43da      	mvns	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	4013      	ands	r3, r2
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_GPIO_Init+0x2dc>)
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	40da      	lsrs	r2, r3
 800163c:	1e13      	subs	r3, r2, #0
 800163e:	d000      	beq.n	8001642 <HAL_GPIO_Init+0x2be>
 8001640:	e6a8      	b.n	8001394 <HAL_GPIO_Init+0x10>
  } 
}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b006      	add	sp, #24
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	48000400 	.word	0x48000400
 8001658:	48000800 	.word	0x48000800
 800165c:	48000c00 	.word	0x48000c00
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	000a      	movs	r2, r1
 800166e:	1cbb      	adds	r3, r7, #2
 8001670:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	1cba      	adds	r2, r7, #2
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	4013      	ands	r3, r2
 800167c:	d004      	beq.n	8001688 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800167e:	230f      	movs	r3, #15
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	e003      	b.n	8001690 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001688:	230f      	movs	r3, #15
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	781b      	ldrb	r3, [r3, #0]
  }
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	0008      	movs	r0, r1
 80016a8:	0011      	movs	r1, r2
 80016aa:	1cbb      	adds	r3, r7, #2
 80016ac:	1c02      	adds	r2, r0, #0
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	1c7b      	adds	r3, r7, #1
 80016b2:	1c0a      	adds	r2, r1, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b6:	1c7b      	adds	r3, r7, #1
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016be:	1cbb      	adds	r3, r7, #2
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c6:	e003      	b.n	80016d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c8:	1cbb      	adds	r3, r7, #2
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e08f      	b.n	800180a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2241      	movs	r2, #65	@ 0x41
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2240      	movs	r2, #64	@ 0x40
 80016fa:	2100      	movs	r1, #0
 80016fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff f9a9 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2241      	movs	r2, #65	@ 0x41
 800170a:	2124      	movs	r1, #36	@ 0x24
 800170c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	438a      	bics	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	493b      	ldr	r1, [pc, #236]	@ (8001814 <HAL_I2C_Init+0x13c>)
 8001728:	400a      	ands	r2, r1
 800172a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4938      	ldr	r1, [pc, #224]	@ (8001818 <HAL_I2C_Init+0x140>)
 8001738:	400a      	ands	r2, r1
 800173a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0209      	lsls	r1, r1, #8
 8001750:	430a      	orrs	r2, r1
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	e007      	b.n	8001766 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2184      	movs	r1, #132	@ 0x84
 8001760:	0209      	lsls	r1, r1, #8
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d109      	bne.n	8001782 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2180      	movs	r1, #128	@ 0x80
 800177a:	0109      	lsls	r1, r1, #4
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e007      	b.n	8001792 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4923      	ldr	r1, [pc, #140]	@ (800181c <HAL_I2C_Init+0x144>)
 800178e:	400a      	ands	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4920      	ldr	r1, [pc, #128]	@ (8001820 <HAL_I2C_Init+0x148>)
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	491a      	ldr	r1, [pc, #104]	@ (8001818 <HAL_I2C_Init+0x140>)
 80017ae:	400a      	ands	r2, r1
 80017b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2241      	movs	r2, #65	@ 0x41
 80017f6:	2120      	movs	r1, #32
 80017f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2242      	movs	r2, #66	@ 0x42
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	f0ffffff 	.word	0xf0ffffff
 8001818:	ffff7fff 	.word	0xffff7fff
 800181c:	fffff7ff 	.word	0xfffff7ff
 8001820:	02008000 	.word	0x02008000

08001824 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	000c      	movs	r4, r1
 800182e:	0010      	movs	r0, r2
 8001830:	0019      	movs	r1, r3
 8001832:	230a      	movs	r3, #10
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	1c22      	adds	r2, r4, #0
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	2308      	movs	r3, #8
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	1c02      	adds	r2, r0, #0
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	1dbb      	adds	r3, r7, #6
 8001844:	1c0a      	adds	r2, r1, #0
 8001846:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2241      	movs	r2, #65	@ 0x41
 800184c:	5c9b      	ldrb	r3, [r3, r2]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b20      	cmp	r3, #32
 8001852:	d000      	beq.n	8001856 <HAL_I2C_Mem_Write+0x32>
 8001854:	e10c      	b.n	8001a70 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_I2C_Mem_Write+0x42>
 800185c:	232c      	movs	r3, #44	@ 0x2c
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0ff      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2240      	movs	r2, #64	@ 0x40
 8001876:	5c9b      	ldrb	r3, [r3, r2]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_I2C_Mem_Write+0x5c>
 800187c:	2302      	movs	r3, #2
 800187e:	e0f8      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	2101      	movs	r1, #1
 8001886:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001888:	f7ff fafc 	bl	8000e84 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	0219      	lsls	r1, r3, #8
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2319      	movs	r3, #25
 800189c:	2201      	movs	r2, #1
 800189e:	f000 fc07 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0e3      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2241      	movs	r2, #65	@ 0x41
 80018ae:	2121      	movs	r1, #33	@ 0x21
 80018b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2242      	movs	r2, #66	@ 0x42
 80018b6:	2140      	movs	r1, #64	@ 0x40
 80018b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	222c      	movs	r2, #44	@ 0x2c
 80018ca:	18ba      	adds	r2, r7, r2
 80018cc:	8812      	ldrh	r2, [r2, #0]
 80018ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018d6:	1dbb      	adds	r3, r7, #6
 80018d8:	881c      	ldrh	r4, [r3, #0]
 80018da:	2308      	movs	r3, #8
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	230a      	movs	r3, #10
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	8819      	ldrh	r1, [r3, #0]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	0023      	movs	r3, r4
 80018f2:	f000 faf5 	bl	8001ee0 <I2C_RequestMemoryWrite>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d005      	beq.n	8001906 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2240      	movs	r2, #64	@ 0x40
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0b5      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	2bff      	cmp	r3, #255	@ 0xff
 800190e:	d911      	bls.n	8001934 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	22ff      	movs	r2, #255	@ 0xff
 8001914:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191a:	b2da      	uxtb	r2, r3
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	045c      	lsls	r4, r3, #17
 8001920:	230a      	movs	r3, #10
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	8819      	ldrh	r1, [r3, #0]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	0023      	movs	r3, r4
 800192e:	f000 fd99 	bl	8002464 <I2C_TransferConfig>
 8001932:	e012      	b.n	800195a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001942:	b2da      	uxtb	r2, r3
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	049c      	lsls	r4, r3, #18
 8001948:	230a      	movs	r3, #10
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	8819      	ldrh	r1, [r3, #0]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	2300      	movs	r3, #0
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	0023      	movs	r3, r4
 8001956:	f000 fd85 	bl	8002464 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 fbfd 	bl	8002160 <I2C_WaitOnTXISFlagUntilTimeout>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e081      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d03a      	beq.n	8001a1e <HAL_I2C_Mem_Write+0x1fa>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d136      	bne.n	8001a1e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	0013      	movs	r3, r2
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	f000 fb77 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e053      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2bff      	cmp	r3, #255	@ 0xff
 80019d2:	d911      	bls.n	80019f8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	22ff      	movs	r2, #255	@ 0xff
 80019d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	045c      	lsls	r4, r3, #17
 80019e4:	230a      	movs	r3, #10
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	0023      	movs	r3, r4
 80019f2:	f000 fd37 	bl	8002464 <I2C_TransferConfig>
 80019f6:	e012      	b.n	8001a1e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	049c      	lsls	r4, r3, #18
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	8819      	ldrh	r1, [r3, #0]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	2300      	movs	r3, #0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	0023      	movs	r3, r4
 8001a1a:	f000 fd23 	bl	8002464 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d198      	bne.n	800195a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fbdc 	bl	80021ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e01a      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	490b      	ldr	r1, [pc, #44]	@ (8001a7c <HAL_I2C_Mem_Write+0x258>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2241      	movs	r2, #65	@ 0x41
 8001a58:	2120      	movs	r1, #32
 8001a5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2242      	movs	r2, #66	@ 0x42
 8001a60:	2100      	movs	r1, #0
 8001a62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2240      	movs	r2, #64	@ 0x40
 8001a68:	2100      	movs	r1, #0
 8001a6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
  }
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b007      	add	sp, #28
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	fe00e800 	.word	0xfe00e800

08001a80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	000c      	movs	r4, r1
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	230a      	movs	r3, #10
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	1c22      	adds	r2, r4, #0
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	2308      	movs	r3, #8
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	1c02      	adds	r2, r0, #0
 8001a9c:	801a      	strh	r2, [r3, #0]
 8001a9e:	1dbb      	adds	r3, r7, #6
 8001aa0:	1c0a      	adds	r2, r1, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2241      	movs	r2, #65	@ 0x41
 8001aa8:	5c9b      	ldrb	r3, [r3, r2]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d000      	beq.n	8001ab2 <HAL_I2C_Mem_Read+0x32>
 8001ab0:	e110      	b.n	8001cd4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <HAL_I2C_Mem_Read+0x42>
 8001ab8:	232c      	movs	r3, #44	@ 0x2c
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2280      	movs	r2, #128	@ 0x80
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e103      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2240      	movs	r2, #64	@ 0x40
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_I2C_Mem_Read+0x5c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e0fc      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2240      	movs	r2, #64	@ 0x40
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f9ce 	bl	8000e84 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	0219      	lsls	r1, r3, #8
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2319      	movs	r3, #25
 8001af8:	2201      	movs	r2, #1
 8001afa:	f000 fad9 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0e7      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2241      	movs	r2, #65	@ 0x41
 8001b0a:	2122      	movs	r1, #34	@ 0x22
 8001b0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2242      	movs	r2, #66	@ 0x42
 8001b12:	2140      	movs	r1, #64	@ 0x40
 8001b14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	222c      	movs	r2, #44	@ 0x2c
 8001b26:	18ba      	adds	r2, r7, r2
 8001b28:	8812      	ldrh	r2, [r2, #0]
 8001b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b32:	1dbb      	adds	r3, r7, #6
 8001b34:	881c      	ldrh	r4, [r3, #0]
 8001b36:	2308      	movs	r3, #8
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	8819      	ldrh	r1, [r3, #0]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	0023      	movs	r3, r4
 8001b4e:	f000 fa2b 	bl	8001fa8 <I2C_RequestMemoryRead>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2240      	movs	r2, #64	@ 0x40
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0b9      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2bff      	cmp	r3, #255	@ 0xff
 8001b6a:	d911      	bls.n	8001b90 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	045c      	lsls	r4, r3, #17
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	4b56      	ldr	r3, [pc, #344]	@ (8001ce0 <HAL_I2C_Mem_Read+0x260>)
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	0023      	movs	r3, r4
 8001b8a:	f000 fc6b 	bl	8002464 <I2C_TransferConfig>
 8001b8e:	e012      	b.n	8001bb6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	2380      	movs	r3, #128	@ 0x80
 8001ba2:	049c      	lsls	r4, r3, #18
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	8819      	ldrh	r1, [r3, #0]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce0 <HAL_I2C_Mem_Read+0x260>)
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	0023      	movs	r3, r4
 8001bb2:	f000 fc57 	bl	8002464 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	f000 fa74 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e082      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d03a      	beq.n	8001c82 <HAL_I2C_Mem_Read+0x202>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d136      	bne.n	8001c82 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2180      	movs	r1, #128	@ 0x80
 8001c22:	f000 fa45 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e053      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2bff      	cmp	r3, #255	@ 0xff
 8001c36:	d911      	bls.n	8001c5c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	045c      	lsls	r4, r3, #17
 8001c48:	230a      	movs	r3, #10
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	8819      	ldrh	r1, [r3, #0]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	0023      	movs	r3, r4
 8001c56:	f000 fc05 	bl	8002464 <I2C_TransferConfig>
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	049c      	lsls	r4, r3, #18
 8001c70:	230a      	movs	r3, #10
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	8819      	ldrh	r1, [r3, #0]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	f000 fbf1 	bl	8002464 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d194      	bne.n	8001bb6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 faaa 	bl	80021ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e01a      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <HAL_I2C_Mem_Read+0x264>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2241      	movs	r2, #65	@ 0x41
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2242      	movs	r2, #66	@ 0x42
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2240      	movs	r2, #64	@ 0x40
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b007      	add	sp, #28
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	80002400 	.word	0x80002400
 8001ce4:	fe00e800 	.word	0xfe00e800

08001ce8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2241      	movs	r2, #65	@ 0x41
 8001d04:	5c9b      	ldrb	r3, [r3, r2]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d000      	beq.n	8001d0e <HAL_I2C_IsDeviceReady+0x26>
 8001d0c:	e0df      	b.n	8001ece <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	401a      	ands	r2, r3
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	e0d4      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2240      	movs	r2, #64	@ 0x40
 8001d2a:	5c9b      	ldrb	r3, [r3, r2]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2C_IsDeviceReady+0x4c>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0cd      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2240      	movs	r2, #64	@ 0x40
 8001d38:	2101      	movs	r1, #1
 8001d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2241      	movs	r2, #65	@ 0x41
 8001d40:	2124      	movs	r1, #36	@ 0x24
 8001d42:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_I2C_IsDeviceReady+0x7a>
 8001d52:	230a      	movs	r3, #10
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	059b      	lsls	r3, r3, #22
 8001d5a:	0d9b      	lsrs	r3, r3, #22
 8001d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed8 <HAL_I2C_IsDeviceReady+0x1f0>)
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	e006      	b.n	8001d70 <HAL_I2C_IsDeviceReady+0x88>
 8001d62:	230a      	movs	r3, #10
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	059b      	lsls	r3, r3, #22
 8001d6a:	0d9b      	lsrs	r3, r3, #22
 8001d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8001edc <HAL_I2C_IsDeviceReady+0x1f4>)
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f885 	bl	8000e84 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2220      	movs	r2, #32
 8001d86:	4013      	ands	r3, r2
 8001d88:	3b20      	subs	r3, #32
 8001d8a:	425a      	negs	r2, r3
 8001d8c:	4153      	adcs	r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	4013      	ands	r3, r2
 8001da0:	3b10      	subs	r3, #16
 8001da2:	425a      	negs	r2, r3
 8001da4:	4153      	adcs	r3, r2
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	231e      	movs	r3, #30
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001dae:	e035      	b.n	8001e1c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	d01a      	beq.n	8001dec <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff f865 	bl	8000e84 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <HAL_I2C_IsDeviceReady+0xe4>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2241      	movs	r2, #65	@ 0x41
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	2220      	movs	r2, #32
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e071      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2220      	movs	r2, #32
 8001df4:	4013      	ands	r3, r2
 8001df6:	3b20      	subs	r3, #32
 8001df8:	425a      	negs	r2, r3
 8001dfa:	4153      	adcs	r3, r2
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	231f      	movs	r3, #31
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	3b10      	subs	r3, #16
 8001e10:	425a      	negs	r2, r3
 8001e12:	4153      	adcs	r3, r2
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	231e      	movs	r3, #30
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e1c:	231f      	movs	r3, #31
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d104      	bne.n	8001e30 <HAL_I2C_IsDeviceReady+0x148>
 8001e26:	231e      	movs	r3, #30
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0bf      	beq.n	8001db0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2210      	movs	r2, #16
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d01a      	beq.n	8001e74 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	0013      	movs	r3, r2
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2120      	movs	r1, #32
 8001e4c:	f000 f930 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e03b      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2241      	movs	r2, #65	@ 0x41
 8001e64:	2120      	movs	r1, #32
 8001e66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2240      	movs	r2, #64	@ 0x40
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e02d      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2120      	movs	r1, #32
 8001e82:	f000 f915 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e020      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2210      	movs	r2, #16
 8001e94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d900      	bls.n	8001eae <HAL_I2C_IsDeviceReady+0x1c6>
 8001eac:	e74d      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2241      	movs	r2, #65	@ 0x41
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	2220      	movs	r2, #32
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2240      	movs	r2, #64	@ 0x40
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b008      	add	sp, #32
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	02002000 	.word	0x02002000
 8001edc:	02002800 	.word	0x02002800

08001ee0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	000c      	movs	r4, r1
 8001eea:	0010      	movs	r0, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	250a      	movs	r5, #10
 8001ef0:	197b      	adds	r3, r7, r5
 8001ef2:	1c22      	adds	r2, r4, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	1c02      	adds	r2, r0, #0
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	1dbb      	adds	r3, r7, #6
 8001f00:	1c0a      	adds	r2, r1, #0
 8001f02:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f04:	1dbb      	adds	r3, r7, #6
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	045c      	lsls	r4, r3, #17
 8001f0e:	197b      	adds	r3, r7, r5
 8001f10:	8819      	ldrh	r1, [r3, #0]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <I2C_RequestMemoryWrite+0xc4>)
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	0023      	movs	r3, r4
 8001f1a:	f000 faa3 	bl	8002464 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 f91b 	bl	8002160 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e033      	b.n	8001f9a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f32:	1dbb      	adds	r3, r7, #6
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f48:	e019      	b.n	8001f7e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5e:	6a39      	ldr	r1, [r7, #32]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 f8fc 	bl	8002160 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d001      	beq.n	8001f70 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e014      	b.n	8001f9a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f70:	2308      	movs	r3, #8
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7e:	6a3a      	ldr	r2, [r7, #32]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	0013      	movs	r3, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	f000 f890 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	80002000 	.word	0x80002000

08001fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	000c      	movs	r4, r1
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	250a      	movs	r5, #10
 8001fb8:	197b      	adds	r3, r7, r5
 8001fba:	1c22      	adds	r2, r4, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	1c02      	adds	r2, r0, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	1c0a      	adds	r2, r1, #0
 8001fca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fcc:	1dbb      	adds	r3, r7, #6
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	197b      	adds	r3, r7, r5
 8001fd4:	8819      	ldrh	r1, [r3, #0]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <I2C_RequestMemoryRead+0xc0>)
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f000 fa41 	bl	8002464 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 f8b9 	bl	8002160 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e033      	b.n	800205e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ff6:	1dbb      	adds	r3, r7, #6
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffe:	2308      	movs	r3, #8
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
 800200c:	e019      	b.n	8002042 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800200e:	2308      	movs	r3, #8
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 f89a 	bl	8002160 <I2C_WaitOnTXISFlagUntilTimeout>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d001      	beq.n	8002034 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e014      	b.n	800205e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002034:	2308      	movs	r3, #8
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	0013      	movs	r3, r2
 800204c:	2200      	movs	r2, #0
 800204e:	2140      	movs	r1, #64	@ 0x40
 8002050:	f000 f82e 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bdb0      	pop	{r4, r5, r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	80002000 	.word	0x80002000

0800206c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d103      	bne.n	800208a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	2b01      	cmp	r3, #1
 8002096:	d007      	beq.n	80020a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
  }
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	e03a      	b.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f8d3 	bl	8002274 <I2C_IsErrorOccurred>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e040      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	d02d      	beq.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020dc:	f7fe fed2 	bl	8000e84 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d302      	bcc.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d122      	bne.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	425a      	negs	r2, r3
 8002102:	4153      	adcs	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	001a      	movs	r2, r3
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d113      	bne.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002114:	2220      	movs	r2, #32
 8002116:	431a      	orrs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2241      	movs	r2, #65	@ 0x41
 8002120:	2120      	movs	r1, #32
 8002122:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2242      	movs	r2, #66	@ 0x42
 8002128:	2100      	movs	r1, #0
 800212a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2240      	movs	r2, #64	@ 0x40
 8002130:	2100      	movs	r1, #0
 8002132:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e00f      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4013      	ands	r3, r2
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	425a      	negs	r2, r3
 8002148:	4153      	adcs	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	001a      	movs	r2, r3
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d0b5      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}

08002160 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800216c:	e032      	b.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f87d 	bl	8002274 <I2C_IsErrorOccurred>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d001      	beq.n	8002182 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e030      	b.n	80021e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	d025      	beq.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002188:	f7fe fe7c 	bl	8000e84 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d302      	bcc.n	800219e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11a      	bne.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2202      	movs	r2, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d013      	beq.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	2220      	movs	r2, #32
 80021b2:	431a      	orrs	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2241      	movs	r2, #65	@ 0x41
 80021bc:	2120      	movs	r1, #32
 80021be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2242      	movs	r2, #66	@ 0x42
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e007      	b.n	80021e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d1c5      	bne.n	800216e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f8:	e02f      	b.n	800225a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f837 	bl	8002274 <I2C_IsErrorOccurred>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d001      	beq.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e02d      	b.n	800226a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7fe fe39 	bl	8000e84 <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11a      	bne.n	800225a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2220      	movs	r2, #32
 800222c:	4013      	ands	r3, r2
 800222e:	2b20      	cmp	r3, #32
 8002230:	d013      	beq.n	800225a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	2220      	movs	r2, #32
 8002238:	431a      	orrs	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2241      	movs	r2, #65	@ 0x41
 8002242:	2120      	movs	r1, #32
 8002244:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2242      	movs	r2, #66	@ 0x42
 800224a:	2100      	movs	r1, #0
 800224c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2240      	movs	r2, #64	@ 0x40
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e007      	b.n	800226a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2220      	movs	r2, #32
 8002262:	4013      	ands	r3, r2
 8002264:	2b20      	cmp	r3, #32
 8002266:	d1c8      	bne.n	80021fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2327      	movs	r3, #39	@ 0x27
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2210      	movs	r2, #16
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <I2C_IsErrorOccurred+0x2e>
 80022a0:	e079      	b.n	8002396 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2210      	movs	r2, #16
 80022a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022aa:	e057      	b.n	800235c <I2C_IsErrorOccurred+0xe8>
 80022ac:	2227      	movs	r2, #39	@ 0x27
 80022ae:	18bb      	adds	r3, r7, r2
 80022b0:	18ba      	adds	r2, r7, r2
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	d04f      	beq.n	800235c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022bc:	f7fe fde2 	bl	8000e84 <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d302      	bcc.n	80022d2 <I2C_IsErrorOccurred+0x5e>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d144      	bne.n	800235c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	01db      	lsls	r3, r3, #7
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022e0:	2013      	movs	r0, #19
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	2142      	movs	r1, #66	@ 0x42
 80022e8:	5c52      	ldrb	r2, [r2, r1]
 80022ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	401a      	ands	r2, r3
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d126      	bne.n	800234e <I2C_IsErrorOccurred+0xda>
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	01db      	lsls	r3, r3, #7
 8002306:	429a      	cmp	r2, r3
 8002308:	d021      	beq.n	800234e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800230a:	183b      	adds	r3, r7, r0
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b20      	cmp	r3, #32
 8002310:	d01d      	beq.n	800234e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	01c9      	lsls	r1, r1, #7
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002324:	f7fe fdae 	bl	8000e84 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800232c:	e00f      	b.n	800234e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800232e:	f7fe fda9 	bl	8000e84 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b19      	cmp	r3, #25
 800233a:	d908      	bls.n	800234e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	2220      	movs	r2, #32
 8002340:	4313      	orrs	r3, r2
 8002342:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002344:	2327      	movs	r3, #39	@ 0x27
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]

              break;
 800234c:	e006      	b.n	800235c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2220      	movs	r2, #32
 8002356:	4013      	ands	r3, r2
 8002358:	2b20      	cmp	r3, #32
 800235a:	d1e8      	bne.n	800232e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2220      	movs	r2, #32
 8002364:	4013      	ands	r3, r2
 8002366:	2b20      	cmp	r3, #32
 8002368:	d004      	beq.n	8002374 <I2C_IsErrorOccurred+0x100>
 800236a:	2327      	movs	r3, #39	@ 0x27
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d09b      	beq.n	80022ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002374:	2327      	movs	r3, #39	@ 0x27
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2220      	movs	r2, #32
 8002384:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2204      	movs	r2, #4
 800238a:	4313      	orrs	r3, r2
 800238c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800238e:	2327      	movs	r3, #39	@ 0x27
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d00c      	beq.n	80023c2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4313      	orrs	r3, r2
 80023ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2280      	movs	r2, #128	@ 0x80
 80023b6:	0052      	lsls	r2, r2, #1
 80023b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ba:	2327      	movs	r3, #39	@ 0x27
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00c      	beq.n	80023e6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	2208      	movs	r2, #8
 80023d0:	4313      	orrs	r3, r2
 80023d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	00d2      	lsls	r2, r2, #3
 80023dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023de:	2327      	movs	r3, #39	@ 0x27
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4013      	ands	r3, r2
 80023ee:	d00c      	beq.n	800240a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4313      	orrs	r3, r2
 80023f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002402:	2327      	movs	r3, #39	@ 0x27
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800240a:	2327      	movs	r3, #39	@ 0x27
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01d      	beq.n	8002450 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0018      	movs	r0, r3
 8002418:	f7ff fe28 	bl	800206c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	490e      	ldr	r1, [pc, #56]	@ (8002460 <I2C_IsErrorOccurred+0x1ec>)
 8002428:	400a      	ands	r2, r1
 800242a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2241      	movs	r2, #65	@ 0x41
 800243c:	2120      	movs	r1, #32
 800243e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2242      	movs	r2, #66	@ 0x42
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2240      	movs	r2, #64	@ 0x40
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002450:	2327      	movs	r3, #39	@ 0x27
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b00a      	add	sp, #40	@ 0x28
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	fe00e800 	.word	0xfe00e800

08002464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	0008      	movs	r0, r1
 800246e:	0011      	movs	r1, r2
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	240a      	movs	r4, #10
 8002474:	193b      	adds	r3, r7, r4
 8002476:	1c02      	adds	r2, r0, #0
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	2009      	movs	r0, #9
 800247c:	183b      	adds	r3, r7, r0
 800247e:	1c0a      	adds	r2, r1, #0
 8002480:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002482:	193b      	adds	r3, r7, r4
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	059b      	lsls	r3, r3, #22
 8002488:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800248a:	183b      	adds	r3, r7, r0
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	0419      	lsls	r1, r3, #16
 8002490:	23ff      	movs	r3, #255	@ 0xff
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002496:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	4313      	orrs	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ae:	0d51      	lsrs	r1, r2, #21
 80024b0:	2280      	movs	r2, #128	@ 0x80
 80024b2:	00d2      	lsls	r2, r2, #3
 80024b4:	400a      	ands	r2, r1
 80024b6:	4907      	ldr	r1, [pc, #28]	@ (80024d4 <I2C_TransferConfig+0x70>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	43d2      	mvns	r2, r2
 80024bc:	401a      	ands	r2, r3
 80024be:	0011      	movs	r1, r2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b007      	add	sp, #28
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	03ff63ff 	.word	0x03ff63ff

080024d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2241      	movs	r2, #65	@ 0x41
 80024e6:	5c9b      	ldrb	r3, [r3, r2]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d138      	bne.n	8002560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2240      	movs	r2, #64	@ 0x40
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e032      	b.n	8002562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	2101      	movs	r1, #1
 8002502:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2241      	movs	r2, #65	@ 0x41
 8002508:	2124      	movs	r1, #36	@ 0x24
 800250a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4911      	ldr	r1, [pc, #68]	@ (800256c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2241      	movs	r2, #65	@ 0x41
 8002550:	2120      	movs	r1, #32
 8002552:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2240      	movs	r2, #64	@ 0x40
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e000      	b.n	8002562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	ffffefff 	.word	0xffffefff

08002570 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2241      	movs	r2, #65	@ 0x41
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	d139      	bne.n	80025fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2240      	movs	r2, #64	@ 0x40
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002590:	2302      	movs	r3, #2
 8002592:	e033      	b.n	80025fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2240      	movs	r2, #64	@ 0x40
 8002598:	2101      	movs	r1, #1
 800259a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2241      	movs	r2, #65	@ 0x41
 80025a0:	2124      	movs	r1, #36	@ 0x24
 80025a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2101      	movs	r1, #1
 80025b0:	438a      	bics	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2241      	movs	r2, #65	@ 0x41
 80025ea:	2120      	movs	r1, #32
 80025ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2240      	movs	r2, #64	@ 0x40
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bd80      	pop	{r7, pc}
 8002604:	fffff0ff 	.word	0xfffff0ff

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e301      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	4013      	ands	r3, r2
 8002622:	d100      	bne.n	8002626 <HAL_RCC_OscConfig+0x1e>
 8002624:	e08d      	b.n	8002742 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002626:	4bc3      	ldr	r3, [pc, #780]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	220c      	movs	r2, #12
 800262c:	4013      	ands	r3, r2
 800262e:	2b04      	cmp	r3, #4
 8002630:	d00e      	beq.n	8002650 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002632:	4bc0      	ldr	r3, [pc, #768]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	220c      	movs	r2, #12
 8002638:	4013      	ands	r3, r2
 800263a:	2b08      	cmp	r3, #8
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x64>
 800263e:	4bbd      	ldr	r3, [pc, #756]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	401a      	ands	r2, r3
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	429a      	cmp	r2, r3
 800264e:	d10d      	bne.n	800266c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4bb8      	ldr	r3, [pc, #736]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	4013      	ands	r3, r2
 800265a:	d100      	bne.n	800265e <HAL_RCC_OscConfig+0x56>
 800265c:	e070      	b.n	8002740 <HAL_RCC_OscConfig+0x138>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d000      	beq.n	8002668 <HAL_RCC_OscConfig+0x60>
 8002666:	e06b      	b.n	8002740 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e2d8      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x7c>
 8002674:	4baf      	ldr	r3, [pc, #700]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4bae      	ldr	r3, [pc, #696]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	0249      	lsls	r1, r1, #9
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e02f      	b.n	80026e4 <HAL_RCC_OscConfig+0xdc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x9e>
 800268c:	4ba9      	ldr	r3, [pc, #676]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4ba8      	ldr	r3, [pc, #672]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002692:	49a9      	ldr	r1, [pc, #676]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	4ba6      	ldr	r3, [pc, #664]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4ba5      	ldr	r3, [pc, #660]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800269e:	49a7      	ldr	r1, [pc, #668]	@ (800293c <HAL_RCC_OscConfig+0x334>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e01e      	b.n	80026e4 <HAL_RCC_OscConfig+0xdc>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10e      	bne.n	80026cc <HAL_RCC_OscConfig+0xc4>
 80026ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	02c9      	lsls	r1, r1, #11
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b9d      	ldr	r3, [pc, #628]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b9c      	ldr	r3, [pc, #624]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	2180      	movs	r1, #128	@ 0x80
 80026c4:	0249      	lsls	r1, r1, #9
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xdc>
 80026cc:	4b99      	ldr	r3, [pc, #612]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b98      	ldr	r3, [pc, #608]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026d2:	4999      	ldr	r1, [pc, #612]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4b96      	ldr	r3, [pc, #600]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b95      	ldr	r3, [pc, #596]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80026de:	4997      	ldr	r1, [pc, #604]	@ (800293c <HAL_RCC_OscConfig+0x334>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d014      	beq.n	8002716 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fbca 	bl	8000e84 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f6:	f7fe fbc5 	bl	8000e84 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	@ 0x64
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e28a      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002708:	4b8a      	ldr	r3, [pc, #552]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	4013      	ands	r3, r2
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0xee>
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fbb5 	bl	8000e84 <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fbb0 	bl	8000e84 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	@ 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e275      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	4b80      	ldr	r3, [pc, #512]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	4013      	ands	r3, r2
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x118>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x146>
 800274c:	e069      	b.n	8002822 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800274e:	4b79      	ldr	r3, [pc, #484]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	220c      	movs	r2, #12
 8002754:	4013      	ands	r3, r2
 8002756:	d00b      	beq.n	8002770 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002758:	4b76      	ldr	r3, [pc, #472]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	220c      	movs	r2, #12
 800275e:	4013      	ands	r3, r2
 8002760:	2b08      	cmp	r3, #8
 8002762:	d11c      	bne.n	800279e <HAL_RCC_OscConfig+0x196>
 8002764:	4b73      	ldr	r3, [pc, #460]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	025b      	lsls	r3, r3, #9
 800276c:	4013      	ands	r3, r2
 800276e:	d116      	bne.n	800279e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002770:	4b70      	ldr	r3, [pc, #448]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2202      	movs	r2, #2
 8002776:	4013      	ands	r3, r2
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e24b      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b6b      	ldr	r3, [pc, #428]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	22f8      	movs	r2, #248	@ 0xf8
 800278c:	4393      	bics	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00da      	lsls	r2, r3, #3
 8002796:	4b67      	ldr	r3, [pc, #412]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279c:	e041      	b.n	8002822 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d024      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a6:	4b63      	ldr	r3, [pc, #396]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b62      	ldr	r3, [pc, #392]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fb67 	bl	8000e84 <HAL_GetTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe fb62 	bl	8000e84 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e227      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2202      	movs	r2, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	d0f1      	beq.n	80027bc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b56      	ldr	r3, [pc, #344]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	22f8      	movs	r2, #248	@ 0xf8
 80027de:	4393      	bics	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00da      	lsls	r2, r3, #3
 80027e8:	4b52      	ldr	r3, [pc, #328]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e018      	b.n	8002822 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f0:	4b50      	ldr	r3, [pc, #320]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	438a      	bics	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fb42 	bl	8000e84 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fb3d 	bl	8000e84 <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e202      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002818:	4b46      	ldr	r3, [pc, #280]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d1f1      	bne.n	8002806 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2208      	movs	r2, #8
 8002828:	4013      	ands	r3, r2
 800282a:	d036      	beq.n	800289a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d019      	beq.n	8002868 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002834:	4b3f      	ldr	r3, [pc, #252]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002838:	4b3e      	ldr	r3, [pc, #248]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7fe fb20 	bl	8000e84 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284a:	f7fe fb1b 	bl	8000e84 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1e0      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285c:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d0f1      	beq.n	800284a <HAL_RCC_OscConfig+0x242>
 8002866:	e018      	b.n	800289a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800286a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800286c:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800286e:	2101      	movs	r1, #1
 8002870:	438a      	bics	r2, r1
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe fb06 	bl	8000e84 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe fb01 	bl	8000e84 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1c6      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d1f1      	bne.n	800287e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2204      	movs	r2, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	d100      	bne.n	80028a6 <HAL_RCC_OscConfig+0x29e>
 80028a4:	e0b4      	b.n	8002a10 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	201f      	movs	r0, #31
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	055b      	lsls	r3, r3, #21
 80028b6:	4013      	ands	r3, r2
 80028b8:	d110      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	0549      	lsls	r1, r1, #21
 80028c4:	430a      	orrs	r2, r1
 80028c6:	61da      	str	r2, [r3, #28]
 80028c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	055b      	lsls	r3, r3, #21
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028d6:	183b      	adds	r3, r7, r0
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <HAL_RCC_OscConfig+0x338>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d11a      	bne.n	800291e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_RCC_OscConfig+0x338>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <HAL_RCC_OscConfig+0x338>)
 80028ee:	2180      	movs	r1, #128	@ 0x80
 80028f0:	0049      	lsls	r1, r1, #1
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe fac5 	bl	8000e84 <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe fac0 	bl	8000e84 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	@ 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e185      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x338>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	@ 0x80
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10e      	bne.n	8002944 <HAL_RCC_OscConfig+0x33c>
 8002926:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	4b02      	ldr	r3, [pc, #8]	@ (8002934 <HAL_RCC_OscConfig+0x32c>)
 800292c:	2101      	movs	r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	621a      	str	r2, [r3, #32]
 8002932:	e035      	b.n	80029a0 <HAL_RCC_OscConfig+0x398>
 8002934:	40021000 	.word	0x40021000
 8002938:	fffeffff 	.word	0xfffeffff
 800293c:	fffbffff 	.word	0xfffbffff
 8002940:	40007000 	.word	0x40007000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x35e>
 800294c:	4bb6      	ldr	r3, [pc, #728]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	4bb5      	ldr	r3, [pc, #724]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002952:	2101      	movs	r1, #1
 8002954:	438a      	bics	r2, r1
 8002956:	621a      	str	r2, [r3, #32]
 8002958:	4bb3      	ldr	r3, [pc, #716]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	4bb2      	ldr	r3, [pc, #712]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800295e:	2104      	movs	r1, #4
 8002960:	438a      	bics	r2, r1
 8002962:	621a      	str	r2, [r3, #32]
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x398>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x380>
 800296e:	4bae      	ldr	r3, [pc, #696]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	4bad      	ldr	r3, [pc, #692]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002974:	2104      	movs	r1, #4
 8002976:	430a      	orrs	r2, r1
 8002978:	621a      	str	r2, [r3, #32]
 800297a:	4bab      	ldr	r3, [pc, #684]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	4baa      	ldr	r3, [pc, #680]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	621a      	str	r2, [r3, #32]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x398>
 8002988:	4ba7      	ldr	r3, [pc, #668]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	4ba6      	ldr	r3, [pc, #664]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800298e:	2101      	movs	r1, #1
 8002990:	438a      	bics	r2, r1
 8002992:	621a      	str	r2, [r3, #32]
 8002994:	4ba4      	ldr	r3, [pc, #656]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	4ba3      	ldr	r3, [pc, #652]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 800299a:	2104      	movs	r1, #4
 800299c:	438a      	bics	r2, r1
 800299e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d014      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a8:	f7fe fa6c 	bl	8000e84 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b0:	e009      	b.n	80029c6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe fa67 	bl	8000e84 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	4a9b      	ldr	r2, [pc, #620]	@ (8002c2c <HAL_RCC_OscConfig+0x624>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e12b      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	4b98      	ldr	r3, [pc, #608]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3aa>
 80029d0:	e013      	b.n	80029fa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fa57 	bl	8000e84 <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029da:	e009      	b.n	80029f0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fa52 	bl	8000e84 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4a91      	ldr	r2, [pc, #580]	@ (8002c2c <HAL_RCC_OscConfig+0x624>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e116      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2202      	movs	r2, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	4b87      	ldr	r3, [pc, #540]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a0a:	4989      	ldr	r1, [pc, #548]	@ (8002c30 <HAL_RCC_OscConfig+0x628>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	4013      	ands	r3, r2
 8002a18:	d063      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d12a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a22:	4b81      	ldr	r3, [pc, #516]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a26:	4b80      	ldr	r3, [pc, #512]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a28:	2104      	movs	r1, #4
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a2e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a32:	4b7d      	ldr	r3, [pc, #500]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fa23 	bl	8000e84 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a44:	f7fe fa1e 	bl	8000e84 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0e3      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a56:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0f1      	beq.n	8002a44 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a60:	4b71      	ldr	r3, [pc, #452]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	22f8      	movs	r2, #248	@ 0xf8
 8002a66:	4393      	bics	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	00da      	lsls	r2, r3, #3
 8002a70:	4b6d      	ldr	r3, [pc, #436]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a76:	e034      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	3305      	adds	r3, #5
 8002a7e:	d111      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a80:	4b69      	ldr	r3, [pc, #420]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a84:	4b68      	ldr	r3, [pc, #416]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a86:	2104      	movs	r1, #4
 8002a88:	438a      	bics	r2, r1
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a8c:	4b66      	ldr	r3, [pc, #408]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a90:	22f8      	movs	r2, #248	@ 0xf8
 8002a92:	4393      	bics	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	00da      	lsls	r2, r3, #3
 8002a9c:	4b62      	ldr	r3, [pc, #392]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aa2:	e01e      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002aa4:	4b60      	ldr	r3, [pc, #384]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002aaa:	2104      	movs	r1, #4
 8002aac:	430a      	orrs	r2, r1
 8002aae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe f9e2 	bl	8000e84 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ac6:	f7fe f9dd 	bl	8000e84 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0a2      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d1f1      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d100      	bne.n	8002aec <HAL_RCC_OscConfig+0x4e4>
 8002aea:	e097      	b.n	8002c1c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	4b4e      	ldr	r3, [pc, #312]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	220c      	movs	r2, #12
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d100      	bne.n	8002afa <HAL_RCC_OscConfig+0x4f2>
 8002af8:	e06b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d14c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b48      	ldr	r3, [pc, #288]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b08:	494a      	ldr	r1, [pc, #296]	@ (8002c34 <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe f9b9 	bl	8000e84 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe f9b4 	bl	8000e84 <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e079      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	049b      	lsls	r3, r3, #18
 8002b32:	4013      	ands	r3, r2
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b36:	4b3c      	ldr	r3, [pc, #240]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	4b38      	ldr	r3, [pc, #224]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b46:	430a      	orrs	r2, r1
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b4a:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c38 <HAL_RCC_OscConfig+0x630>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	4b32      	ldr	r3, [pc, #200]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b30      	ldr	r3, [pc, #192]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b2f      	ldr	r3, [pc, #188]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b6a:	2180      	movs	r1, #128	@ 0x80
 8002b6c:	0449      	lsls	r1, r1, #17
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe f987 	bl	8000e84 <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe f982 	bl	8000e84 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e047      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8e:	4b26      	ldr	r3, [pc, #152]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	049b      	lsls	r3, r3, #18
 8002b96:	4013      	ands	r3, r2
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x574>
 8002b9a:	e03f      	b.n	8002c1c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002ba2:	4924      	ldr	r1, [pc, #144]	@ (8002c34 <HAL_RCC_OscConfig+0x62c>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f96c 	bl	8000e84 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe f967 	bl	8000e84 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e02c      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	049b      	lsls	r3, r3, #18
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5aa>
 8002bd0:	e024      	b.n	8002c1c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e01f      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002be4:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <HAL_RCC_OscConfig+0x620>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10e      	bne.n	8002c18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	23f0      	movs	r3, #240	@ 0xf0
 8002c0c:	039b      	lsls	r3, r3, #14
 8002c0e:	401a      	ands	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b008      	add	sp, #32
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	00001388 	.word	0x00001388
 8002c30:	efffffff 	.word	0xefffffff
 8002c34:	feffffff 	.word	0xfeffffff
 8002c38:	ffc2ffff 	.word	0xffc2ffff

08002c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b3      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d911      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b58      	ldr	r3, [pc, #352]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4393      	bics	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	4b55      	ldr	r3, [pc, #340]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c70:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e09a      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2204      	movs	r2, #4
 8002c92:	4013      	ands	r3, r2
 8002c94:	d006      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c96:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	21e0      	movs	r1, #224	@ 0xe0
 8002c9e:	00c9      	lsls	r1, r1, #3
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca4:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	22f0      	movs	r2, #240	@ 0xf0
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4b44      	ldr	r3, [pc, #272]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	029b      	lsls	r3, r3, #10
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d114      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06e      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	049b      	lsls	r3, r3, #18
 8002cea:	4013      	ands	r3, r2
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e062      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e05b      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	4393      	bics	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fe f8b6 	bl	8000e84 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1c:	e009      	b.n	8002d32 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1e:	f7fe f8b1 	bl	8000e84 <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <HAL_RCC_ClockConfig+0x18c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e042      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	220c      	movs	r2, #12
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1ec      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d211      	bcs.n	8002d76 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4393      	bics	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d64:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <HAL_RCC_ClockConfig+0x184>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e020      	b.n	8002db8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <HAL_RCC_ClockConfig+0x190>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d94:	f000 f820 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d98:	0001      	movs	r1, r0
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_RCC_ClockConfig+0x188>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	220f      	movs	r2, #15
 8002da2:	4013      	ands	r3, r2
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <HAL_RCC_ClockConfig+0x194>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	000a      	movs	r2, r1
 8002daa:	40da      	lsrs	r2, r3
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x198>)
 8002dae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fe f821 	bl	8000df8 <HAL_InitTick>
  
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	00001388 	.word	0x00001388
 8002dcc:	fffff8ff 	.word	0xfffff8ff
 8002dd0:	080051cc 	.word	0x080051cc
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x30>
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x36>
 8002e06:	e02c      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e0a:	613b      	str	r3, [r7, #16]
      break;
 8002e0c:	e02c      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0c9b      	lsrs	r3, r3, #18
 8002e12:	220f      	movs	r2, #15
 8002e14:	4013      	ands	r3, r2
 8002e16:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	220f      	movs	r2, #15
 8002e22:	4013      	ands	r3, r2
 8002e24:	4a16      	ldr	r2, [pc, #88]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	025b      	lsls	r3, r3, #9
 8002e30:	4013      	ands	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	4810      	ldr	r0, [pc, #64]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e38:	f7fd f970 	bl	800011c <__udivsi3>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	001a      	movs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4353      	muls	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e009      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	000a      	movs	r2, r1
 8002e4c:	0152      	lsls	r2, r2, #5
 8002e4e:	1a52      	subs	r2, r2, r1
 8002e50:	0193      	lsls	r3, r2, #6
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	185b      	adds	r3, r3, r1
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
      break;
 8002e60:	e002      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e64:	613b      	str	r3, [r7, #16]
      break;
 8002e66:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e68:	693b      	ldr	r3, [r7, #16]
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b006      	add	sp, #24
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	40021000 	.word	0x40021000
 8002e78:	007a1200 	.word	0x007a1200
 8002e7c:	080051e4 	.word	0x080051e4
 8002e80:	080051f4 	.word	0x080051f4

08002e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b02      	ldr	r3, [pc, #8]	@ (8002e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	20000000 	.word	0x20000000

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e9c:	f7ff fff2 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea0:	0001      	movs	r1, r0
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	4013      	ands	r3, r2
 8002eac:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	40d9      	lsrs	r1, r3
 8002eb2:	000b      	movs	r3, r1
}    
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	080051dc 	.word	0x080051dc

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	4013      	ands	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ee0:	e08e      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2017      	movs	r0, #23
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b57      	ldr	r3, [pc, #348]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	055b      	lsls	r3, r3, #21
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d110      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b54      	ldr	r3, [pc, #336]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	0549      	lsls	r1, r1, #21
 8002f00:	430a      	orrs	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	055b      	lsls	r3, r3, #21
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	183b      	adds	r3, r7, r0
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	4b4c      	ldr	r3, [pc, #304]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	d11a      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f24:	4b49      	ldr	r3, [pc, #292]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b48      	ldr	r3, [pc, #288]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f2a:	2180      	movs	r1, #128	@ 0x80
 8002f2c:	0049      	lsls	r1, r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f32:	f7fd ffa7 	bl	8000e84 <HAL_GetTick>
 8002f36:	0003      	movs	r3, r0
 8002f38:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	e008      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7fd ffa2 	bl	8000e84 <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e077      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4013      	ands	r3, r2
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	23c0      	movs	r3, #192	@ 0xc0
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d034      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	23c0      	movs	r3, #192	@ 0xc0
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d02c      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7c:	4b32      	ldr	r3, [pc, #200]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a33      	ldr	r2, [pc, #204]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f86:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f8c:	2180      	movs	r1, #128	@ 0x80
 8002f8e:	0249      	lsls	r1, r1, #9
 8002f90:	430a      	orrs	r2, r1
 8002f92:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f94:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f9a:	492e      	ldr	r1, [pc, #184]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fa0:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fd ff69 	bl	8000e84 <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	e009      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fd ff64 	bl	8000e84 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4a25      	ldr	r2, [pc, #148]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e038      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a1d      	ldr	r2, [pc, #116]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fea:	2317      	movs	r3, #23
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ffa:	4918      	ldr	r1, [pc, #96]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2201      	movs	r2, #1
 8003006:	4013      	ands	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300a:	4b0f      	ldr	r3, [pc, #60]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	2203      	movs	r2, #3
 8003010:	4393      	bics	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800301a:	430a      	orrs	r2, r1
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2220      	movs	r2, #32
 8003024:	4013      	ands	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003028:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	2210      	movs	r2, #16
 800302e:	4393      	bics	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003038:	430a      	orrs	r2, r1
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b006      	add	sp, #24
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
 8003050:	fffffcff 	.word	0xfffffcff
 8003054:	fffeffff 	.word	0xfffeffff
 8003058:	00001388 	.word	0x00001388
 800305c:	efffffff 	.word	0xefffffff

08003060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e044      	b.n	80030fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2278      	movs	r2, #120	@ 0x78
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f7fd fd35 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2224      	movs	r2, #36	@ 0x24
 800308e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2101      	movs	r1, #1
 800309c:	438a      	bics	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fa86 	bl	80035bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f942 	bl	800333c <UART_SetConfig>
 80030b8:	0003      	movs	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01c      	b.n	80030fc <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	490d      	ldr	r1, [pc, #52]	@ (8003104 <HAL_UART_Init+0xa4>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2108      	movs	r1, #8
 80030de:	438a      	bics	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 fb15 	bl	8003724 <UART_CheckIdleState>
 80030fa:	0003      	movs	r3, r0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	fffff7ff 	.word	0xfffff7ff

08003108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	1dbb      	adds	r3, r7, #6
 8003116:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800311c:	2b20      	cmp	r3, #32
 800311e:	d000      	beq.n	8003122 <HAL_UART_Transmit+0x1a>
 8003120:	e08c      	b.n	800323c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_UART_Transmit+0x28>
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e084      	b.n	800323e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	015b      	lsls	r3, r3, #5
 800313c:	429a      	cmp	r2, r3
 800313e:	d109      	bne.n	8003154 <HAL_UART_Transmit+0x4c>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2201      	movs	r2, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d001      	beq.n	8003154 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e074      	b.n	800323e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2284      	movs	r2, #132	@ 0x84
 8003158:	2100      	movs	r1, #0
 800315a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2221      	movs	r2, #33	@ 0x21
 8003160:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003162:	f7fd fe8f 	bl	8000e84 <HAL_GetTick>
 8003166:	0003      	movs	r3, r0
 8003168:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1dba      	adds	r2, r7, #6
 800316e:	2150      	movs	r1, #80	@ 0x50
 8003170:	8812      	ldrh	r2, [r2, #0]
 8003172:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1dba      	adds	r2, r7, #6
 8003178:	2152      	movs	r1, #82	@ 0x52
 800317a:	8812      	ldrh	r2, [r2, #0]
 800317c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	015b      	lsls	r3, r3, #5
 8003186:	429a      	cmp	r2, r3
 8003188:	d108      	bne.n	800319c <HAL_UART_Transmit+0x94>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d104      	bne.n	800319c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e003      	b.n	80031a4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a4:	e02f      	b.n	8003206 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	0013      	movs	r3, r2
 80031b0:	2200      	movs	r2, #0
 80031b2:	2180      	movs	r1, #128	@ 0x80
 80031b4:	f000 fb5e 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e03b      	b.n	800323e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	05d2      	lsls	r2, r2, #23
 80031d6:	0dd2      	lsrs	r2, r2, #23
 80031d8:	b292      	uxth	r2, r2
 80031da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	3302      	adds	r3, #2
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e007      	b.n	80031f4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2252      	movs	r2, #82	@ 0x52
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b299      	uxth	r1, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2252      	movs	r2, #82	@ 0x52
 8003204:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2252      	movs	r2, #82	@ 0x52
 800320a:	5a9b      	ldrh	r3, [r3, r2]
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1c9      	bne.n	80031a6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	0013      	movs	r3, r2
 800321c:	2200      	movs	r2, #0
 800321e:	2140      	movs	r1, #64	@ 0x40
 8003220:	f000 fb28 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d004      	beq.n	8003232 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e005      	b.n	800323e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b008      	add	sp, #32
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b088      	sub	sp, #32
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	589b      	ldr	r3, [r3, r2]
 800325a:	2b20      	cmp	r3, #32
 800325c:	d145      	bne.n	80032ea <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_UART_Receive_DMA+0x26>
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e03d      	b.n	80032ec <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	2380      	movs	r3, #128	@ 0x80
 8003276:	015b      	lsls	r3, r3, #5
 8003278:	429a      	cmp	r2, r3
 800327a:	d109      	bne.n	8003290 <HAL_UART_Receive_DMA+0x4a>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2201      	movs	r2, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d001      	beq.n	8003290 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e02d      	b.n	80032ec <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	2380      	movs	r3, #128	@ 0x80
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	4013      	ands	r3, r2
 80032a2:	d019      	beq.n	80032d8 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	613b      	str	r3, [r7, #16]
  return(result);
 80032aa:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			@ (mov r8, r8)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	04c9      	lsls	r1, r1, #19
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f383 8810 	msr	PRIMASK, r3
}
 80032d6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fb37 	bl	8003954 <UART_Start_Receive_DMA>
 80032e6:	0003      	movs	r3, r0
 80032e8:	e000      	b.n	80032ec <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b008      	add	sp, #32
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	000a      	movs	r2, r1
 800332e:	1cbb      	adds	r3, r7, #2
 8003330:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003344:	231e      	movs	r3, #30
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a8d      	ldr	r2, [pc, #564]	@ (80035a0 <UART_SetConfig+0x264>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a88      	ldr	r2, [pc, #544]	@ (80035a4 <UART_SetConfig+0x268>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a7f      	ldr	r2, [pc, #508]	@ (80035a8 <UART_SetConfig+0x26c>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7b      	ldr	r2, [pc, #492]	@ (80035ac <UART_SetConfig+0x270>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d127      	bne.n	8003412 <UART_SetConfig+0xd6>
 80033c2:	4b7b      	ldr	r3, [pc, #492]	@ (80035b0 <UART_SetConfig+0x274>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	2203      	movs	r2, #3
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d00d      	beq.n	80033ea <UART_SetConfig+0xae>
 80033ce:	d81b      	bhi.n	8003408 <UART_SetConfig+0xcc>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d014      	beq.n	80033fe <UART_SetConfig+0xc2>
 80033d4:	d818      	bhi.n	8003408 <UART_SetConfig+0xcc>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <UART_SetConfig+0xa4>
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d00a      	beq.n	80033f4 <UART_SetConfig+0xb8>
 80033de:	e013      	b.n	8003408 <UART_SetConfig+0xcc>
 80033e0:	231f      	movs	r3, #31
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e021      	b.n	800342e <UART_SetConfig+0xf2>
 80033ea:	231f      	movs	r3, #31
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e01c      	b.n	800342e <UART_SetConfig+0xf2>
 80033f4:	231f      	movs	r3, #31
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2204      	movs	r2, #4
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e017      	b.n	800342e <UART_SetConfig+0xf2>
 80033fe:	231f      	movs	r3, #31
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2208      	movs	r2, #8
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e012      	b.n	800342e <UART_SetConfig+0xf2>
 8003408:	231f      	movs	r3, #31
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	2210      	movs	r2, #16
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e00d      	b.n	800342e <UART_SetConfig+0xf2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a67      	ldr	r2, [pc, #412]	@ (80035b4 <UART_SetConfig+0x278>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d104      	bne.n	8003426 <UART_SetConfig+0xea>
 800341c:	231f      	movs	r3, #31
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e003      	b.n	800342e <UART_SetConfig+0xf2>
 8003426:	231f      	movs	r3, #31
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2210      	movs	r2, #16
 800342c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	2380      	movs	r3, #128	@ 0x80
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	429a      	cmp	r2, r3
 8003438:	d15c      	bne.n	80034f4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800343a:	231f      	movs	r3, #31
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d015      	beq.n	8003470 <UART_SetConfig+0x134>
 8003444:	dc18      	bgt.n	8003478 <UART_SetConfig+0x13c>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d00d      	beq.n	8003466 <UART_SetConfig+0x12a>
 800344a:	dc15      	bgt.n	8003478 <UART_SetConfig+0x13c>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <UART_SetConfig+0x11a>
 8003450:	2b02      	cmp	r3, #2
 8003452:	d005      	beq.n	8003460 <UART_SetConfig+0x124>
 8003454:	e010      	b.n	8003478 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003456:	f7ff fd1f 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800345a:	0003      	movs	r3, r0
 800345c:	61bb      	str	r3, [r7, #24]
        break;
 800345e:	e012      	b.n	8003486 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b55      	ldr	r3, [pc, #340]	@ (80035b8 <UART_SetConfig+0x27c>)
 8003462:	61bb      	str	r3, [r7, #24]
        break;
 8003464:	e00f      	b.n	8003486 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7ff fcb7 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 800346a:	0003      	movs	r3, r0
 800346c:	61bb      	str	r3, [r7, #24]
        break;
 800346e:	e00a      	b.n	8003486 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	61bb      	str	r3, [r7, #24]
        break;
 8003476:	e006      	b.n	8003486 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800347c:	231e      	movs	r3, #30
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
        break;
 8003484:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d100      	bne.n	800348e <UART_SetConfig+0x152>
 800348c:	e07a      	b.n	8003584 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	18d2      	adds	r2, r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0019      	movs	r1, r3
 80034a0:	0010      	movs	r0, r2
 80034a2:	f7fc fe3b 	bl	800011c <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d91c      	bls.n	80034ea <UART_SetConfig+0x1ae>
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	025b      	lsls	r3, r3, #9
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d217      	bcs.n	80034ea <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	200e      	movs	r0, #14
 80034c0:	183b      	adds	r3, r7, r0
 80034c2:	210f      	movs	r1, #15
 80034c4:	438a      	bics	r2, r1
 80034c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2207      	movs	r2, #7
 80034d0:	4013      	ands	r3, r2
 80034d2:	b299      	uxth	r1, r3
 80034d4:	183b      	adds	r3, r7, r0
 80034d6:	183a      	adds	r2, r7, r0
 80034d8:	8812      	ldrh	r2, [r2, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	183a      	adds	r2, r7, r0
 80034e4:	8812      	ldrh	r2, [r2, #0]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e04c      	b.n	8003584 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	231e      	movs	r3, #30
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e047      	b.n	8003584 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f4:	231f      	movs	r3, #31
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d015      	beq.n	800352a <UART_SetConfig+0x1ee>
 80034fe:	dc18      	bgt.n	8003532 <UART_SetConfig+0x1f6>
 8003500:	2b04      	cmp	r3, #4
 8003502:	d00d      	beq.n	8003520 <UART_SetConfig+0x1e4>
 8003504:	dc15      	bgt.n	8003532 <UART_SetConfig+0x1f6>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <UART_SetConfig+0x1d4>
 800350a:	2b02      	cmp	r3, #2
 800350c:	d005      	beq.n	800351a <UART_SetConfig+0x1de>
 800350e:	e010      	b.n	8003532 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7ff fcc2 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8003514:	0003      	movs	r3, r0
 8003516:	61bb      	str	r3, [r7, #24]
        break;
 8003518:	e012      	b.n	8003540 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800351a:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <UART_SetConfig+0x27c>)
 800351c:	61bb      	str	r3, [r7, #24]
        break;
 800351e:	e00f      	b.n	8003540 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003520:	f7ff fc5a 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8003524:	0003      	movs	r3, r0
 8003526:	61bb      	str	r3, [r7, #24]
        break;
 8003528:	e00a      	b.n	8003540 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e006      	b.n	8003540 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003536:	231e      	movs	r3, #30
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
        break;
 800353e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01e      	beq.n	8003584 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	085a      	lsrs	r2, r3, #1
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	18d2      	adds	r2, r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	0019      	movs	r1, r3
 8003556:	0010      	movs	r0, r2
 8003558:	f7fc fde0 	bl	800011c <__udivsi3>
 800355c:	0003      	movs	r3, r0
 800355e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d90a      	bls.n	800357c <UART_SetConfig+0x240>
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	025b      	lsls	r3, r3, #9
 800356c:	429a      	cmp	r2, r3
 800356e:	d205      	bcs.n	800357c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	b29a      	uxth	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	e003      	b.n	8003584 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800357c:	231e      	movs	r3, #30
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003590:	231e      	movs	r3, #30
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	781b      	ldrb	r3, [r3, #0]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b008      	add	sp, #32
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	ffff69f3 	.word	0xffff69f3
 80035a4:	ffffcfff 	.word	0xffffcfff
 80035a8:	fffff4ff 	.word	0xfffff4ff
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40004400 	.word	0x40004400
 80035b8:	007a1200 	.word	0x007a1200

080035bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2208      	movs	r2, #8
 80035ca:	4013      	ands	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003700 <UART_AdvFeatureConfig+0x144>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2201      	movs	r2, #1
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00b      	beq.n	8003608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a43      	ldr	r2, [pc, #268]	@ (8003704 <UART_AdvFeatureConfig+0x148>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d00b      	beq.n	800362a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a3b      	ldr	r2, [pc, #236]	@ (8003708 <UART_AdvFeatureConfig+0x14c>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	2204      	movs	r2, #4
 8003630:	4013      	ands	r3, r2
 8003632:	d00b      	beq.n	800364c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4a34      	ldr	r2, [pc, #208]	@ (800370c <UART_AdvFeatureConfig+0x150>)
 800363c:	4013      	ands	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	2210      	movs	r2, #16
 8003652:	4013      	ands	r3, r2
 8003654:	d00b      	beq.n	800366e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a2c      	ldr	r2, [pc, #176]	@ (8003710 <UART_AdvFeatureConfig+0x154>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2220      	movs	r2, #32
 8003674:	4013      	ands	r3, r2
 8003676:	d00b      	beq.n	8003690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	4a25      	ldr	r2, [pc, #148]	@ (8003714 <UART_AdvFeatureConfig+0x158>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	2240      	movs	r2, #64	@ 0x40
 8003696:	4013      	ands	r3, r2
 8003698:	d01d      	beq.n	80036d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <UART_AdvFeatureConfig+0x15c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	035b      	lsls	r3, r3, #13
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10b      	bne.n	80036d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a15      	ldr	r2, [pc, #84]	@ (800371c <UART_AdvFeatureConfig+0x160>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	4013      	ands	r3, r2
 80036de:	d00b      	beq.n	80036f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003720 <UART_AdvFeatureConfig+0x164>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	ffff7fff 	.word	0xffff7fff
 8003704:	fffdffff 	.word	0xfffdffff
 8003708:	fffeffff 	.word	0xfffeffff
 800370c:	fffbffff 	.word	0xfffbffff
 8003710:	ffffefff 	.word	0xffffefff
 8003714:	ffffdfff 	.word	0xffffdfff
 8003718:	ffefffff 	.word	0xffefffff
 800371c:	ff9fffff 	.word	0xff9fffff
 8003720:	fff7ffff 	.word	0xfff7ffff

08003724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b092      	sub	sp, #72	@ 0x48
 8003728:	af02      	add	r7, sp, #8
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2284      	movs	r2, #132	@ 0x84
 8003730:	2100      	movs	r1, #0
 8003732:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003734:	f7fd fba6 	bl	8000e84 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2208      	movs	r2, #8
 8003744:	4013      	ands	r3, r2
 8003746:	2b08      	cmp	r3, #8
 8003748:	d12c      	bne.n	80037a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374c:	2280      	movs	r2, #128	@ 0x80
 800374e:	0391      	lsls	r1, r2, #14
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4a46      	ldr	r2, [pc, #280]	@ (800386c <UART_CheckIdleState+0x148>)
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	f000 f88c 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d021      	beq.n	80037a4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003760:	f3ef 8310 	mrs	r3, PRIMASK
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800376a:	2301      	movs	r3, #1
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	46c0      	nop			@ (mov r8, r8)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	438a      	bics	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378c:	f383 8810 	msr	PRIMASK, r3
}
 8003790:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2278      	movs	r2, #120	@ 0x78
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e05f      	b.n	8003864 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2204      	movs	r2, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d146      	bne.n	8003840 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b4:	2280      	movs	r2, #128	@ 0x80
 80037b6:	03d1      	lsls	r1, r2, #15
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	@ (800386c <UART_CheckIdleState+0x148>)
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	f000 f858 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d03b      	beq.n	8003840 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80037ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d2:	2301      	movs	r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4921      	ldr	r1, [pc, #132]	@ (8003870 <UART_CheckIdleState+0x14c>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003800:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30
 8003804:	2301      	movs	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2101      	movs	r1, #1
 800381c:	438a      	bics	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2280      	movs	r2, #128	@ 0x80
 8003830:	2120      	movs	r1, #32
 8003832:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2278      	movs	r2, #120	@ 0x78
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e011      	b.n	8003864 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2280      	movs	r2, #128	@ 0x80
 800384a:	2120      	movs	r1, #32
 800384c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2278      	movs	r2, #120	@ 0x78
 800385e:	2100      	movs	r1, #0
 8003860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b010      	add	sp, #64	@ 0x40
 800386a:	bd80      	pop	{r7, pc}
 800386c:	01ffffff 	.word	0x01ffffff
 8003870:	fffffedf 	.word	0xfffffedf

08003874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	e051      	b.n	800392a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3301      	adds	r3, #1
 800388a:	d04e      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fd fafa 	bl	8000e84 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e051      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2204      	movs	r2, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d03b      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0xb6>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d038      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0xb6>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d035      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2208      	movs	r2, #8
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d111      	bne.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 f900 	bl	8003adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2284      	movs	r2, #132	@ 0x84
 80038e0:	2108      	movs	r1, #8
 80038e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2278      	movs	r2, #120	@ 0x78
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e02c      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	401a      	ands	r2, r3
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	429a      	cmp	r2, r3
 8003902:	d112      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2280      	movs	r2, #128	@ 0x80
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 f8e3 	bl	8003adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2284      	movs	r2, #132	@ 0x84
 800391a:	2120      	movs	r1, #32
 800391c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2278      	movs	r2, #120	@ 0x78
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e00f      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	425a      	negs	r2, r3
 800393a:	4153      	adcs	r3, r2
 800393c:	b2db      	uxtb	r3, r3
 800393e:	001a      	movs	r2, r3
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d09e      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b004      	add	sp, #16
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b090      	sub	sp, #64	@ 0x40
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	1dbb      	adds	r3, r7, #6
 8003960:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1dba      	adds	r2, r7, #6
 800396c:	2158      	movs	r1, #88	@ 0x58
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2284      	movs	r2, #132	@ 0x84
 8003976:	2100      	movs	r1, #0
 8003978:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2280      	movs	r2, #128	@ 0x80
 800397e:	2122      	movs	r1, #34	@ 0x22
 8003980:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003986:	2b00      	cmp	r3, #0
 8003988:	d028      	beq.n	80039dc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	4a3e      	ldr	r2, [pc, #248]	@ (8003a88 <UART_Start_Receive_DMA+0x134>)
 8003990:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003996:	4a3d      	ldr	r2, [pc, #244]	@ (8003a8c <UART_Start_Receive_DMA+0x138>)
 8003998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a90 <UART_Start_Receive_DMA+0x13c>)
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a6:	2200      	movs	r2, #0
 80039a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3324      	adds	r3, #36	@ 0x24
 80039b4:	0019      	movs	r1, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	001a      	movs	r2, r3
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f7fd fb90 	bl	80010e4 <HAL_DMA_Start_IT>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d009      	beq.n	80039dc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2284      	movs	r2, #132	@ 0x84
 80039cc:	2110      	movs	r1, #16
 80039ce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2280      	movs	r2, #128	@ 0x80
 80039d4:	2120      	movs	r1, #32
 80039d6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e050      	b.n	8003a7e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d019      	beq.n	8003a18 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ee:	2301      	movs	r3, #1
 80039f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2180      	movs	r1, #128	@ 0x80
 8003a06:	0049      	lsls	r1, r1, #1
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	f383 8810 	msr	PRIMASK, r3
}
 8003a16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a1e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a22:	2301      	movs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a50:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a54:	2301      	movs	r3, #1
 8003a56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2140      	movs	r1, #64	@ 0x40
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b010      	add	sp, #64	@ 0x40
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	08003ba5 	.word	0x08003ba5
 8003a8c:	08003cd1 	.word	0x08003cd1
 8003a90:	08003d13 	.word	0x08003d13

08003a94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			@ (mov r8, r8)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	21c0      	movs	r1, #192	@ 0xc0
 8003abe:	438a      	bics	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	@ 0x38
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			@ (mov r8, r8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4926      	ldr	r1, [pc, #152]	@ (8003ba0 <UART_EndRxTransfer+0xc4>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f383 8810 	msr	PRIMASK, r3
}
 8003b14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b16:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b20:	2301      	movs	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	438a      	bics	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d118      	bne.n	8003b82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b50:	f3ef 8310 	mrs	r3, PRIMASK
 8003b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2110      	movs	r1, #16
 8003b72:	438a      	bics	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f383 8810 	msr	PRIMASK, r3
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2280      	movs	r2, #128	@ 0x80
 8003b86:	2120      	movs	r1, #32
 8003b88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b00e      	add	sp, #56	@ 0x38
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	fffffedf 	.word	0xfffffedf

08003ba4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b094      	sub	sp, #80	@ 0x50
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d06f      	beq.n	8003c9a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bbc:	225a      	movs	r2, #90	@ 0x5a
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bc8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bcc:	2301      	movs	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	493a      	ldr	r1, [pc, #232]	@ (8003ccc <UART_DMAReceiveCplt+0x128>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfe:	2301      	movs	r3, #1
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	438a      	bics	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2140      	movs	r1, #64	@ 0x40
 8003c48:	438a      	bics	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d118      	bne.n	8003c9a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c68:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c72:	2301      	movs	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2110      	movs	r1, #16
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f383 8810 	msr	PRIMASK, r3
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003caa:	2258      	movs	r2, #88	@ 0x58
 8003cac:	5a9a      	ldrh	r2, [r3, r2]
 8003cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff fb36 	bl	8003324 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cb8:	e003      	b.n	8003cc2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff fb19 	bl	80032f4 <HAL_UART_RxCpltCallback>
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b014      	add	sp, #80	@ 0x50
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	fffffeff 	.word	0xfffffeff

08003cd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10a      	bne.n	8003d02 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2258      	movs	r2, #88	@ 0x58
 8003cf0:	5a9b      	ldrh	r3, [r3, r2]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0011      	movs	r1, r2
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7ff fb12 	bl	8003324 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d00:	e003      	b.n	8003d0a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff fafd 	bl	8003304 <HAL_UART_RxHalfCpltCallback>
}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2280      	movs	r2, #128	@ 0x80
 8003d2a:	589b      	ldr	r3, [r3, r2]
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2280      	movs	r2, #128	@ 0x80
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b80      	cmp	r3, #128	@ 0x80
 8003d3a:	d10a      	bne.n	8003d52 <UART_DMAError+0x40>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b21      	cmp	r3, #33	@ 0x21
 8003d40:	d107      	bne.n	8003d52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2252      	movs	r2, #82	@ 0x52
 8003d46:	2100      	movs	r1, #0
 8003d48:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff fea1 	bl	8003a94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2240      	movs	r2, #64	@ 0x40
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d10a      	bne.n	8003d76 <UART_DMAError+0x64>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b22      	cmp	r3, #34	@ 0x22
 8003d64:	d107      	bne.n	8003d76 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	225a      	movs	r2, #90	@ 0x5a
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff feb3 	bl	8003adc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2284      	movs	r2, #132	@ 0x84
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2184      	movs	r1, #132	@ 0x84
 8003d84:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff fac3 	bl	8003314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b006      	add	sp, #24
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <atoi>:
 8003d96:	b510      	push	{r4, lr}
 8003d98:	220a      	movs	r2, #10
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f000 f88c 	bl	8003eb8 <strtol>
 8003da0:	bd10      	pop	{r4, pc}
	...

08003da4 <_strtol_l.constprop.0>:
 8003da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da6:	b085      	sub	sp, #20
 8003da8:	0017      	movs	r7, r2
 8003daa:	001e      	movs	r6, r3
 8003dac:	9003      	str	r0, [sp, #12]
 8003dae:	9101      	str	r1, [sp, #4]
 8003db0:	2b24      	cmp	r3, #36	@ 0x24
 8003db2:	d844      	bhi.n	8003e3e <_strtol_l.constprop.0+0x9a>
 8003db4:	000c      	movs	r4, r1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d041      	beq.n	8003e3e <_strtol_l.constprop.0+0x9a>
 8003dba:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <_strtol_l.constprop.0+0x10c>)
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	469c      	mov	ip, r3
 8003dc0:	0023      	movs	r3, r4
 8003dc2:	4661      	mov	r1, ip
 8003dc4:	781d      	ldrb	r5, [r3, #0]
 8003dc6:	3401      	adds	r4, #1
 8003dc8:	5d48      	ldrb	r0, [r1, r5]
 8003dca:	0001      	movs	r1, r0
 8003dcc:	4011      	ands	r1, r2
 8003dce:	4210      	tst	r0, r2
 8003dd0:	d1f6      	bne.n	8003dc0 <_strtol_l.constprop.0+0x1c>
 8003dd2:	2d2d      	cmp	r5, #45	@ 0x2d
 8003dd4:	d13a      	bne.n	8003e4c <_strtol_l.constprop.0+0xa8>
 8003dd6:	7825      	ldrb	r5, [r4, #0]
 8003dd8:	1c9c      	adds	r4, r3, #2
 8003dda:	2301      	movs	r3, #1
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2210      	movs	r2, #16
 8003de0:	0033      	movs	r3, r6
 8003de2:	4393      	bics	r3, r2
 8003de4:	d109      	bne.n	8003dfa <_strtol_l.constprop.0+0x56>
 8003de6:	2d30      	cmp	r5, #48	@ 0x30
 8003de8:	d136      	bne.n	8003e58 <_strtol_l.constprop.0+0xb4>
 8003dea:	2120      	movs	r1, #32
 8003dec:	7823      	ldrb	r3, [r4, #0]
 8003dee:	438b      	bics	r3, r1
 8003df0:	2b58      	cmp	r3, #88	@ 0x58
 8003df2:	d131      	bne.n	8003e58 <_strtol_l.constprop.0+0xb4>
 8003df4:	0016      	movs	r6, r2
 8003df6:	7865      	ldrb	r5, [r4, #1]
 8003df8:	3402      	adds	r4, #2
 8003dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb4 <_strtol_l.constprop.0+0x110>)
 8003dfc:	9b00      	ldr	r3, [sp, #0]
 8003dfe:	4694      	mov	ip, r2
 8003e00:	4463      	add	r3, ip
 8003e02:	0031      	movs	r1, r6
 8003e04:	0018      	movs	r0, r3
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	f7fc fa0e 	bl	8000228 <__aeabi_uidivmod>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4684      	mov	ip, r0
 8003e10:	0010      	movs	r0, r2
 8003e12:	002b      	movs	r3, r5
 8003e14:	3b30      	subs	r3, #48	@ 0x30
 8003e16:	2b09      	cmp	r3, #9
 8003e18:	d825      	bhi.n	8003e66 <_strtol_l.constprop.0+0xc2>
 8003e1a:	001d      	movs	r5, r3
 8003e1c:	42ae      	cmp	r6, r5
 8003e1e:	dd31      	ble.n	8003e84 <_strtol_l.constprop.0+0xe0>
 8003e20:	1c53      	adds	r3, r2, #1
 8003e22:	d009      	beq.n	8003e38 <_strtol_l.constprop.0+0x94>
 8003e24:	2201      	movs	r2, #1
 8003e26:	4252      	negs	r2, r2
 8003e28:	4584      	cmp	ip, r0
 8003e2a:	d305      	bcc.n	8003e38 <_strtol_l.constprop.0+0x94>
 8003e2c:	d101      	bne.n	8003e32 <_strtol_l.constprop.0+0x8e>
 8003e2e:	42a9      	cmp	r1, r5
 8003e30:	db25      	blt.n	8003e7e <_strtol_l.constprop.0+0xda>
 8003e32:	2201      	movs	r2, #1
 8003e34:	4370      	muls	r0, r6
 8003e36:	1828      	adds	r0, r5, r0
 8003e38:	7825      	ldrb	r5, [r4, #0]
 8003e3a:	3401      	adds	r4, #1
 8003e3c:	e7e9      	b.n	8003e12 <_strtol_l.constprop.0+0x6e>
 8003e3e:	f000 fb41 	bl	80044c4 <__errno>
 8003e42:	2316      	movs	r3, #22
 8003e44:	6003      	str	r3, [r0, #0]
 8003e46:	2000      	movs	r0, #0
 8003e48:	b005      	add	sp, #20
 8003e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4c:	9100      	str	r1, [sp, #0]
 8003e4e:	2d2b      	cmp	r5, #43	@ 0x2b
 8003e50:	d1c5      	bne.n	8003dde <_strtol_l.constprop.0+0x3a>
 8003e52:	7825      	ldrb	r5, [r4, #0]
 8003e54:	1c9c      	adds	r4, r3, #2
 8003e56:	e7c2      	b.n	8003dde <_strtol_l.constprop.0+0x3a>
 8003e58:	2e00      	cmp	r6, #0
 8003e5a:	d1ce      	bne.n	8003dfa <_strtol_l.constprop.0+0x56>
 8003e5c:	3608      	adds	r6, #8
 8003e5e:	2d30      	cmp	r5, #48	@ 0x30
 8003e60:	d0cb      	beq.n	8003dfa <_strtol_l.constprop.0+0x56>
 8003e62:	3602      	adds	r6, #2
 8003e64:	e7c9      	b.n	8003dfa <_strtol_l.constprop.0+0x56>
 8003e66:	002b      	movs	r3, r5
 8003e68:	3b41      	subs	r3, #65	@ 0x41
 8003e6a:	2b19      	cmp	r3, #25
 8003e6c:	d801      	bhi.n	8003e72 <_strtol_l.constprop.0+0xce>
 8003e6e:	3d37      	subs	r5, #55	@ 0x37
 8003e70:	e7d4      	b.n	8003e1c <_strtol_l.constprop.0+0x78>
 8003e72:	002b      	movs	r3, r5
 8003e74:	3b61      	subs	r3, #97	@ 0x61
 8003e76:	2b19      	cmp	r3, #25
 8003e78:	d804      	bhi.n	8003e84 <_strtol_l.constprop.0+0xe0>
 8003e7a:	3d57      	subs	r5, #87	@ 0x57
 8003e7c:	e7ce      	b.n	8003e1c <_strtol_l.constprop.0+0x78>
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4252      	negs	r2, r2
 8003e82:	e7d9      	b.n	8003e38 <_strtol_l.constprop.0+0x94>
 8003e84:	1c53      	adds	r3, r2, #1
 8003e86:	d108      	bne.n	8003e9a <_strtol_l.constprop.0+0xf6>
 8003e88:	2322      	movs	r3, #34	@ 0x22
 8003e8a:	9a03      	ldr	r2, [sp, #12]
 8003e8c:	9802      	ldr	r0, [sp, #8]
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	2f00      	cmp	r7, #0
 8003e92:	d0d9      	beq.n	8003e48 <_strtol_l.constprop.0+0xa4>
 8003e94:	1e63      	subs	r3, r4, #1
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	e007      	b.n	8003eaa <_strtol_l.constprop.0+0x106>
 8003e9a:	9b00      	ldr	r3, [sp, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d000      	beq.n	8003ea2 <_strtol_l.constprop.0+0xfe>
 8003ea0:	4240      	negs	r0, r0
 8003ea2:	2f00      	cmp	r7, #0
 8003ea4:	d0d0      	beq.n	8003e48 <_strtol_l.constprop.0+0xa4>
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d1f4      	bne.n	8003e94 <_strtol_l.constprop.0+0xf0>
 8003eaa:	9b01      	ldr	r3, [sp, #4]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	e7cb      	b.n	8003e48 <_strtol_l.constprop.0+0xa4>
 8003eb0:	08005205 	.word	0x08005205
 8003eb4:	7fffffff 	.word	0x7fffffff

08003eb8 <strtol>:
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	4c04      	ldr	r4, [pc, #16]	@ (8003ecc <strtol+0x14>)
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	000a      	movs	r2, r1
 8003ec0:	0001      	movs	r1, r0
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	f7ff ff6e 	bl	8003da4 <_strtol_l.constprop.0>
 8003ec8:	bd10      	pop	{r4, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	20000018 	.word	0x20000018

08003ed0 <std>:
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	0004      	movs	r4, r0
 8003ed6:	6003      	str	r3, [r0, #0]
 8003ed8:	6043      	str	r3, [r0, #4]
 8003eda:	6083      	str	r3, [r0, #8]
 8003edc:	8181      	strh	r1, [r0, #12]
 8003ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ee0:	81c2      	strh	r2, [r0, #14]
 8003ee2:	6103      	str	r3, [r0, #16]
 8003ee4:	6143      	str	r3, [r0, #20]
 8003ee6:	6183      	str	r3, [r0, #24]
 8003ee8:	0019      	movs	r1, r3
 8003eea:	2208      	movs	r2, #8
 8003eec:	305c      	adds	r0, #92	@ 0x5c
 8003eee:	f000 fa19 	bl	8004324 <memset>
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <std+0x50>)
 8003ef4:	6224      	str	r4, [r4, #32]
 8003ef6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <std+0x54>)
 8003efa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003efc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <std+0x58>)
 8003efe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f00:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <std+0x5c>)
 8003f02:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f04:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <std+0x60>)
 8003f06:	429c      	cmp	r4, r3
 8003f08:	d005      	beq.n	8003f16 <std+0x46>
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <std+0x64>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d002      	beq.n	8003f16 <std+0x46>
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <std+0x68>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d103      	bne.n	8003f1e <std+0x4e>
 8003f16:	0020      	movs	r0, r4
 8003f18:	3058      	adds	r0, #88	@ 0x58
 8003f1a:	f000 fafd 	bl	8004518 <__retarget_lock_init_recursive>
 8003f1e:	bd10      	pop	{r4, pc}
 8003f20:	0800414d 	.word	0x0800414d
 8003f24:	08004175 	.word	0x08004175
 8003f28:	080041ad 	.word	0x080041ad
 8003f2c:	080041d9 	.word	0x080041d9
 8003f30:	200002f4 	.word	0x200002f4
 8003f34:	2000035c 	.word	0x2000035c
 8003f38:	200003c4 	.word	0x200003c4

08003f3c <stdio_exit_handler>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	4a03      	ldr	r2, [pc, #12]	@ (8003f4c <stdio_exit_handler+0x10>)
 8003f40:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <stdio_exit_handler+0x14>)
 8003f42:	4804      	ldr	r0, [pc, #16]	@ (8003f54 <stdio_exit_handler+0x18>)
 8003f44:	f000 f86c 	bl	8004020 <_fwalk_sglue>
 8003f48:	bd10      	pop	{r4, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	2000000c 	.word	0x2000000c
 8003f50:	08004df9 	.word	0x08004df9
 8003f54:	2000001c 	.word	0x2000001c

08003f58 <cleanup_stdio>:
 8003f58:	6841      	ldr	r1, [r0, #4]
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <cleanup_stdio+0x30>)
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	0004      	movs	r4, r0
 8003f60:	4299      	cmp	r1, r3
 8003f62:	d001      	beq.n	8003f68 <cleanup_stdio+0x10>
 8003f64:	f000 ff48 	bl	8004df8 <_fflush_r>
 8003f68:	68a1      	ldr	r1, [r4, #8]
 8003f6a:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <cleanup_stdio+0x34>)
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	d002      	beq.n	8003f76 <cleanup_stdio+0x1e>
 8003f70:	0020      	movs	r0, r4
 8003f72:	f000 ff41 	bl	8004df8 <_fflush_r>
 8003f76:	68e1      	ldr	r1, [r4, #12]
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <cleanup_stdio+0x38>)
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d002      	beq.n	8003f84 <cleanup_stdio+0x2c>
 8003f7e:	0020      	movs	r0, r4
 8003f80:	f000 ff3a 	bl	8004df8 <_fflush_r>
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	200002f4 	.word	0x200002f4
 8003f8c:	2000035c 	.word	0x2000035c
 8003f90:	200003c4 	.word	0x200003c4

08003f94 <global_stdio_init.part.0>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <global_stdio_init.part.0+0x28>)
 8003f98:	4a09      	ldr	r2, [pc, #36]	@ (8003fc0 <global_stdio_init.part.0+0x2c>)
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	4809      	ldr	r0, [pc, #36]	@ (8003fc4 <global_stdio_init.part.0+0x30>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f7ff ff95 	bl	8003ed0 <std>
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2109      	movs	r1, #9
 8003faa:	4807      	ldr	r0, [pc, #28]	@ (8003fc8 <global_stdio_init.part.0+0x34>)
 8003fac:	f7ff ff90 	bl	8003ed0 <std>
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	2112      	movs	r1, #18
 8003fb4:	4805      	ldr	r0, [pc, #20]	@ (8003fcc <global_stdio_init.part.0+0x38>)
 8003fb6:	f7ff ff8b 	bl	8003ed0 <std>
 8003fba:	bd10      	pop	{r4, pc}
 8003fbc:	2000042c 	.word	0x2000042c
 8003fc0:	08003f3d 	.word	0x08003f3d
 8003fc4:	200002f4 	.word	0x200002f4
 8003fc8:	2000035c 	.word	0x2000035c
 8003fcc:	200003c4 	.word	0x200003c4

08003fd0 <__sfp_lock_acquire>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <__sfp_lock_acquire+0xc>)
 8003fd4:	f000 faa1 	bl	800451a <__retarget_lock_acquire_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	20000435 	.word	0x20000435

08003fe0 <__sfp_lock_release>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4802      	ldr	r0, [pc, #8]	@ (8003fec <__sfp_lock_release+0xc>)
 8003fe4:	f000 fa9a 	bl	800451c <__retarget_lock_release_recursive>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	20000435 	.word	0x20000435

08003ff0 <__sinit>:
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	0004      	movs	r4, r0
 8003ff4:	f7ff ffec 	bl	8003fd0 <__sfp_lock_acquire>
 8003ff8:	6a23      	ldr	r3, [r4, #32]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <__sinit+0x14>
 8003ffe:	f7ff ffef 	bl	8003fe0 <__sfp_lock_release>
 8004002:	bd10      	pop	{r4, pc}
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <__sinit+0x28>)
 8004006:	6223      	str	r3, [r4, #32]
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__sinit+0x2c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f6      	bne.n	8003ffe <__sinit+0xe>
 8004010:	f7ff ffc0 	bl	8003f94 <global_stdio_init.part.0>
 8004014:	e7f3      	b.n	8003ffe <__sinit+0xe>
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	08003f59 	.word	0x08003f59
 800401c:	2000042c 	.word	0x2000042c

08004020 <_fwalk_sglue>:
 8004020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004022:	0014      	movs	r4, r2
 8004024:	2600      	movs	r6, #0
 8004026:	9000      	str	r0, [sp, #0]
 8004028:	9101      	str	r1, [sp, #4]
 800402a:	68a5      	ldr	r5, [r4, #8]
 800402c:	6867      	ldr	r7, [r4, #4]
 800402e:	3f01      	subs	r7, #1
 8004030:	d504      	bpl.n	800403c <_fwalk_sglue+0x1c>
 8004032:	6824      	ldr	r4, [r4, #0]
 8004034:	2c00      	cmp	r4, #0
 8004036:	d1f8      	bne.n	800402a <_fwalk_sglue+0xa>
 8004038:	0030      	movs	r0, r6
 800403a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800403c:	89ab      	ldrh	r3, [r5, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d908      	bls.n	8004054 <_fwalk_sglue+0x34>
 8004042:	220e      	movs	r2, #14
 8004044:	5eab      	ldrsh	r3, [r5, r2]
 8004046:	3301      	adds	r3, #1
 8004048:	d004      	beq.n	8004054 <_fwalk_sglue+0x34>
 800404a:	0029      	movs	r1, r5
 800404c:	9800      	ldr	r0, [sp, #0]
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	4798      	blx	r3
 8004052:	4306      	orrs	r6, r0
 8004054:	3568      	adds	r5, #104	@ 0x68
 8004056:	e7ea      	b.n	800402e <_fwalk_sglue+0xe>

08004058 <iprintf>:
 8004058:	b40f      	push	{r0, r1, r2, r3}
 800405a:	b507      	push	{r0, r1, r2, lr}
 800405c:	4905      	ldr	r1, [pc, #20]	@ (8004074 <iprintf+0x1c>)
 800405e:	ab04      	add	r3, sp, #16
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	cb04      	ldmia	r3!, {r2}
 8004064:	6881      	ldr	r1, [r0, #8]
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	f000 fba6 	bl	80047b8 <_vfiprintf_r>
 800406c:	b003      	add	sp, #12
 800406e:	bc08      	pop	{r3}
 8004070:	b004      	add	sp, #16
 8004072:	4718      	bx	r3
 8004074:	20000018 	.word	0x20000018

08004078 <putchar>:
 8004078:	b510      	push	{r4, lr}
 800407a:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <putchar+0x10>)
 800407c:	0001      	movs	r1, r0
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	6882      	ldr	r2, [r0, #8]
 8004082:	f000 ff60 	bl	8004f46 <_putc_r>
 8004086:	bd10      	pop	{r4, pc}
 8004088:	20000018 	.word	0x20000018

0800408c <_puts_r>:
 800408c:	6a03      	ldr	r3, [r0, #32]
 800408e:	b570      	push	{r4, r5, r6, lr}
 8004090:	0005      	movs	r5, r0
 8004092:	000e      	movs	r6, r1
 8004094:	6884      	ldr	r4, [r0, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <_puts_r+0x12>
 800409a:	f7ff ffa9 	bl	8003ff0 <__sinit>
 800409e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040a0:	07db      	lsls	r3, r3, #31
 80040a2:	d405      	bmi.n	80040b0 <_puts_r+0x24>
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	059b      	lsls	r3, r3, #22
 80040a8:	d402      	bmi.n	80040b0 <_puts_r+0x24>
 80040aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ac:	f000 fa35 	bl	800451a <__retarget_lock_acquire_recursive>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	071b      	lsls	r3, r3, #28
 80040b4:	d502      	bpl.n	80040bc <_puts_r+0x30>
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11f      	bne.n	80040fc <_puts_r+0x70>
 80040bc:	0021      	movs	r1, r4
 80040be:	0028      	movs	r0, r5
 80040c0:	f000 f8d2 	bl	8004268 <__swsetup_r>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d019      	beq.n	80040fc <_puts_r+0x70>
 80040c8:	2501      	movs	r5, #1
 80040ca:	426d      	negs	r5, r5
 80040cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040ce:	07db      	lsls	r3, r3, #31
 80040d0:	d405      	bmi.n	80040de <_puts_r+0x52>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	059b      	lsls	r3, r3, #22
 80040d6:	d402      	bmi.n	80040de <_puts_r+0x52>
 80040d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040da:	f000 fa1f 	bl	800451c <__retarget_lock_release_recursive>
 80040de:	0028      	movs	r0, r5
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	3601      	adds	r6, #1
 80040e4:	60a3      	str	r3, [r4, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da04      	bge.n	80040f4 <_puts_r+0x68>
 80040ea:	69a2      	ldr	r2, [r4, #24]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dc16      	bgt.n	800411e <_puts_r+0x92>
 80040f0:	290a      	cmp	r1, #10
 80040f2:	d014      	beq.n	800411e <_puts_r+0x92>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	6022      	str	r2, [r4, #0]
 80040fa:	7019      	strb	r1, [r3, #0]
 80040fc:	68a3      	ldr	r3, [r4, #8]
 80040fe:	7831      	ldrb	r1, [r6, #0]
 8004100:	3b01      	subs	r3, #1
 8004102:	2900      	cmp	r1, #0
 8004104:	d1ed      	bne.n	80040e2 <_puts_r+0x56>
 8004106:	60a3      	str	r3, [r4, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da0f      	bge.n	800412c <_puts_r+0xa0>
 800410c:	0022      	movs	r2, r4
 800410e:	0028      	movs	r0, r5
 8004110:	310a      	adds	r1, #10
 8004112:	f000 f867 	bl	80041e4 <__swbuf_r>
 8004116:	3001      	adds	r0, #1
 8004118:	d0d6      	beq.n	80040c8 <_puts_r+0x3c>
 800411a:	250a      	movs	r5, #10
 800411c:	e7d6      	b.n	80040cc <_puts_r+0x40>
 800411e:	0022      	movs	r2, r4
 8004120:	0028      	movs	r0, r5
 8004122:	f000 f85f 	bl	80041e4 <__swbuf_r>
 8004126:	3001      	adds	r0, #1
 8004128:	d1e8      	bne.n	80040fc <_puts_r+0x70>
 800412a:	e7cd      	b.n	80040c8 <_puts_r+0x3c>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	6022      	str	r2, [r4, #0]
 8004132:	220a      	movs	r2, #10
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e7f0      	b.n	800411a <_puts_r+0x8e>

08004138 <puts>:
 8004138:	b510      	push	{r4, lr}
 800413a:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <puts+0x10>)
 800413c:	0001      	movs	r1, r0
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	f7ff ffa4 	bl	800408c <_puts_r>
 8004144:	bd10      	pop	{r4, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	20000018 	.word	0x20000018

0800414c <__sread>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	000c      	movs	r4, r1
 8004150:	250e      	movs	r5, #14
 8004152:	5f49      	ldrsh	r1, [r1, r5]
 8004154:	f000 f98e 	bl	8004474 <_read_r>
 8004158:	2800      	cmp	r0, #0
 800415a:	db03      	blt.n	8004164 <__sread+0x18>
 800415c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800415e:	181b      	adds	r3, r3, r0
 8004160:	6563      	str	r3, [r4, #84]	@ 0x54
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	4a02      	ldr	r2, [pc, #8]	@ (8004170 <__sread+0x24>)
 8004168:	4013      	ands	r3, r2
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	e7f9      	b.n	8004162 <__sread+0x16>
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	ffffefff 	.word	0xffffefff

08004174 <__swrite>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	001f      	movs	r7, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	0005      	movs	r5, r0
 800417c:	000c      	movs	r4, r1
 800417e:	0016      	movs	r6, r2
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	d505      	bpl.n	8004190 <__swrite+0x1c>
 8004184:	230e      	movs	r3, #14
 8004186:	5ec9      	ldrsh	r1, [r1, r3]
 8004188:	2200      	movs	r2, #0
 800418a:	2302      	movs	r3, #2
 800418c:	f000 f95e 	bl	800444c <_lseek_r>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	4a05      	ldr	r2, [pc, #20]	@ (80041a8 <__swrite+0x34>)
 8004194:	0028      	movs	r0, r5
 8004196:	4013      	ands	r3, r2
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	0032      	movs	r2, r6
 800419c:	230e      	movs	r3, #14
 800419e:	5ee1      	ldrsh	r1, [r4, r3]
 80041a0:	003b      	movs	r3, r7
 80041a2:	f000 f97b 	bl	800449c <_write_r>
 80041a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a8:	ffffefff 	.word	0xffffefff

080041ac <__sseek>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	000c      	movs	r4, r1
 80041b0:	250e      	movs	r5, #14
 80041b2:	5f49      	ldrsh	r1, [r1, r5]
 80041b4:	f000 f94a 	bl	800444c <_lseek_r>
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	1c42      	adds	r2, r0, #1
 80041bc:	d103      	bne.n	80041c6 <__sseek+0x1a>
 80041be:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <__sseek+0x28>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	0152      	lsls	r2, r2, #5
 80041ca:	4313      	orrs	r3, r2
 80041cc:	81a3      	strh	r3, [r4, #12]
 80041ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80041d0:	e7f8      	b.n	80041c4 <__sseek+0x18>
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	ffffefff 	.word	0xffffefff

080041d8 <__sclose>:
 80041d8:	b510      	push	{r4, lr}
 80041da:	230e      	movs	r3, #14
 80041dc:	5ec9      	ldrsh	r1, [r1, r3]
 80041de:	f000 f923 	bl	8004428 <_close_r>
 80041e2:	bd10      	pop	{r4, pc}

080041e4 <__swbuf_r>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	0006      	movs	r6, r0
 80041e8:	000d      	movs	r5, r1
 80041ea:	0014      	movs	r4, r2
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d004      	beq.n	80041fa <__swbuf_r+0x16>
 80041f0:	6a03      	ldr	r3, [r0, #32]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <__swbuf_r+0x16>
 80041f6:	f7ff fefb 	bl	8003ff0 <__sinit>
 80041fa:	69a3      	ldr	r3, [r4, #24]
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	071b      	lsls	r3, r3, #28
 8004202:	d502      	bpl.n	800420a <__swbuf_r+0x26>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <__swbuf_r+0x3a>
 800420a:	0021      	movs	r1, r4
 800420c:	0030      	movs	r0, r6
 800420e:	f000 f82b 	bl	8004268 <__swsetup_r>
 8004212:	2800      	cmp	r0, #0
 8004214:	d003      	beq.n	800421e <__swbuf_r+0x3a>
 8004216:	2501      	movs	r5, #1
 8004218:	426d      	negs	r5, r5
 800421a:	0028      	movs	r0, r5
 800421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	b2ef      	uxtb	r7, r5
 8004224:	1ac0      	subs	r0, r0, r3
 8004226:	6963      	ldr	r3, [r4, #20]
 8004228:	b2ed      	uxtb	r5, r5
 800422a:	4283      	cmp	r3, r0
 800422c:	dc05      	bgt.n	800423a <__swbuf_r+0x56>
 800422e:	0021      	movs	r1, r4
 8004230:	0030      	movs	r0, r6
 8004232:	f000 fde1 	bl	8004df8 <_fflush_r>
 8004236:	2800      	cmp	r0, #0
 8004238:	d1ed      	bne.n	8004216 <__swbuf_r+0x32>
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	3001      	adds	r0, #1
 800423e:	3b01      	subs	r3, #1
 8004240:	60a3      	str	r3, [r4, #8]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	701f      	strb	r7, [r3, #0]
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	4283      	cmp	r3, r0
 800424e:	d004      	beq.n	800425a <__swbuf_r+0x76>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	07db      	lsls	r3, r3, #31
 8004254:	d5e1      	bpl.n	800421a <__swbuf_r+0x36>
 8004256:	2d0a      	cmp	r5, #10
 8004258:	d1df      	bne.n	800421a <__swbuf_r+0x36>
 800425a:	0021      	movs	r1, r4
 800425c:	0030      	movs	r0, r6
 800425e:	f000 fdcb 	bl	8004df8 <_fflush_r>
 8004262:	2800      	cmp	r0, #0
 8004264:	d0d9      	beq.n	800421a <__swbuf_r+0x36>
 8004266:	e7d6      	b.n	8004216 <__swbuf_r+0x32>

08004268 <__swsetup_r>:
 8004268:	4b2d      	ldr	r3, [pc, #180]	@ (8004320 <__swsetup_r+0xb8>)
 800426a:	b570      	push	{r4, r5, r6, lr}
 800426c:	0005      	movs	r5, r0
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	000c      	movs	r4, r1
 8004272:	2800      	cmp	r0, #0
 8004274:	d004      	beq.n	8004280 <__swsetup_r+0x18>
 8004276:	6a03      	ldr	r3, [r0, #32]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <__swsetup_r+0x18>
 800427c:	f7ff feb8 	bl	8003ff0 <__sinit>
 8004280:	230c      	movs	r3, #12
 8004282:	5ee2      	ldrsh	r2, [r4, r3]
 8004284:	0713      	lsls	r3, r2, #28
 8004286:	d423      	bmi.n	80042d0 <__swsetup_r+0x68>
 8004288:	06d3      	lsls	r3, r2, #27
 800428a:	d407      	bmi.n	800429c <__swsetup_r+0x34>
 800428c:	2309      	movs	r3, #9
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	2340      	movs	r3, #64	@ 0x40
 8004292:	2001      	movs	r0, #1
 8004294:	4313      	orrs	r3, r2
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	4240      	negs	r0, r0
 800429a:	e03a      	b.n	8004312 <__swsetup_r+0xaa>
 800429c:	0752      	lsls	r2, r2, #29
 800429e:	d513      	bpl.n	80042c8 <__swsetup_r+0x60>
 80042a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d008      	beq.n	80042b8 <__swsetup_r+0x50>
 80042a6:	0023      	movs	r3, r4
 80042a8:	3344      	adds	r3, #68	@ 0x44
 80042aa:	4299      	cmp	r1, r3
 80042ac:	d002      	beq.n	80042b4 <__swsetup_r+0x4c>
 80042ae:	0028      	movs	r0, r5
 80042b0:	f000 f954 	bl	800455c <_free_r>
 80042b4:	2300      	movs	r3, #0
 80042b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80042b8:	2224      	movs	r2, #36	@ 0x24
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	4393      	bics	r3, r2
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	2300      	movs	r3, #0
 80042c2:	6063      	str	r3, [r4, #4]
 80042c4:	6923      	ldr	r3, [r4, #16]
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	2308      	movs	r3, #8
 80042ca:	89a2      	ldrh	r2, [r4, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <__swsetup_r+0x86>
 80042d6:	21a0      	movs	r1, #160	@ 0xa0
 80042d8:	2280      	movs	r2, #128	@ 0x80
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	0089      	lsls	r1, r1, #2
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	400b      	ands	r3, r1
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <__swsetup_r+0x86>
 80042e6:	0021      	movs	r1, r4
 80042e8:	0028      	movs	r0, r5
 80042ea:	f000 fdeb 	bl	8004ec4 <__smakebuf_r>
 80042ee:	230c      	movs	r3, #12
 80042f0:	5ee2      	ldrsh	r2, [r4, r3]
 80042f2:	2101      	movs	r1, #1
 80042f4:	0013      	movs	r3, r2
 80042f6:	400b      	ands	r3, r1
 80042f8:	420a      	tst	r2, r1
 80042fa:	d00b      	beq.n	8004314 <__swsetup_r+0xac>
 80042fc:	2300      	movs	r3, #0
 80042fe:	60a3      	str	r3, [r4, #8]
 8004300:	6963      	ldr	r3, [r4, #20]
 8004302:	425b      	negs	r3, r3
 8004304:	61a3      	str	r3, [r4, #24]
 8004306:	2000      	movs	r0, #0
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	4283      	cmp	r3, r0
 800430c:	d101      	bne.n	8004312 <__swsetup_r+0xaa>
 800430e:	0613      	lsls	r3, r2, #24
 8004310:	d4be      	bmi.n	8004290 <__swsetup_r+0x28>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	0791      	lsls	r1, r2, #30
 8004316:	d400      	bmi.n	800431a <__swsetup_r+0xb2>
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	60a3      	str	r3, [r4, #8]
 800431c:	e7f3      	b.n	8004306 <__swsetup_r+0x9e>
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	20000018 	.word	0x20000018

08004324 <memset>:
 8004324:	0003      	movs	r3, r0
 8004326:	1882      	adds	r2, r0, r2
 8004328:	4293      	cmp	r3, r2
 800432a:	d100      	bne.n	800432e <memset+0xa>
 800432c:	4770      	bx	lr
 800432e:	7019      	strb	r1, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	e7f9      	b.n	8004328 <memset+0x4>

08004334 <strcasecmp>:
 8004334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004336:	0005      	movs	r5, r0
 8004338:	2400      	movs	r4, #0
 800433a:	2703      	movs	r7, #3
 800433c:	4e09      	ldr	r6, [pc, #36]	@ (8004364 <strcasecmp+0x30>)
 800433e:	5d2a      	ldrb	r2, [r5, r4]
 8004340:	5cb3      	ldrb	r3, [r6, r2]
 8004342:	403b      	ands	r3, r7
 8004344:	2b01      	cmp	r3, #1
 8004346:	d100      	bne.n	800434a <strcasecmp+0x16>
 8004348:	3220      	adds	r2, #32
 800434a:	5d0b      	ldrb	r3, [r1, r4]
 800434c:	5cf0      	ldrb	r0, [r6, r3]
 800434e:	4038      	ands	r0, r7
 8004350:	2801      	cmp	r0, #1
 8004352:	d100      	bne.n	8004356 <strcasecmp+0x22>
 8004354:	3320      	adds	r3, #32
 8004356:	1ad0      	subs	r0, r2, r3
 8004358:	429a      	cmp	r2, r3
 800435a:	d102      	bne.n	8004362 <strcasecmp+0x2e>
 800435c:	3401      	adds	r4, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ed      	bne.n	800433e <strcasecmp+0xa>
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	08005205 	.word	0x08005205

08004368 <strtok>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	4b16      	ldr	r3, [pc, #88]	@ (80043c4 <strtok+0x5c>)
 800436c:	0005      	movs	r5, r0
 800436e:	681f      	ldr	r7, [r3, #0]
 8004370:	000e      	movs	r6, r1
 8004372:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004374:	2c00      	cmp	r4, #0
 8004376:	d11d      	bne.n	80043b4 <strtok+0x4c>
 8004378:	2050      	movs	r0, #80	@ 0x50
 800437a:	f000 f939 	bl	80045f0 <malloc>
 800437e:	1e02      	subs	r2, r0, #0
 8004380:	6478      	str	r0, [r7, #68]	@ 0x44
 8004382:	d104      	bne.n	800438e <strtok+0x26>
 8004384:	215b      	movs	r1, #91	@ 0x5b
 8004386:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <strtok+0x60>)
 8004388:	4810      	ldr	r0, [pc, #64]	@ (80043cc <strtok+0x64>)
 800438a:	f000 f8c9 	bl	8004520 <__assert_func>
 800438e:	6004      	str	r4, [r0, #0]
 8004390:	6044      	str	r4, [r0, #4]
 8004392:	6084      	str	r4, [r0, #8]
 8004394:	60c4      	str	r4, [r0, #12]
 8004396:	6104      	str	r4, [r0, #16]
 8004398:	6144      	str	r4, [r0, #20]
 800439a:	6184      	str	r4, [r0, #24]
 800439c:	6284      	str	r4, [r0, #40]	@ 0x28
 800439e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80043a0:	6304      	str	r4, [r0, #48]	@ 0x30
 80043a2:	6344      	str	r4, [r0, #52]	@ 0x34
 80043a4:	6384      	str	r4, [r0, #56]	@ 0x38
 80043a6:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80043a8:	6404      	str	r4, [r0, #64]	@ 0x40
 80043aa:	6444      	str	r4, [r0, #68]	@ 0x44
 80043ac:	6484      	str	r4, [r0, #72]	@ 0x48
 80043ae:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80043b0:	7704      	strb	r4, [r0, #28]
 80043b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80043b4:	0031      	movs	r1, r6
 80043b6:	0028      	movs	r0, r5
 80043b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ba:	2301      	movs	r3, #1
 80043bc:	f000 f808 	bl	80043d0 <__strtok_r>
 80043c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	20000018 	.word	0x20000018
 80043c8:	08005305 	.word	0x08005305
 80043cc:	0800531c 	.word	0x0800531c

080043d0 <__strtok_r>:
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	1e04      	subs	r4, r0, #0
 80043d4:	d102      	bne.n	80043dc <__strtok_r+0xc>
 80043d6:	6814      	ldr	r4, [r2, #0]
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d009      	beq.n	80043f0 <__strtok_r+0x20>
 80043dc:	0020      	movs	r0, r4
 80043de:	000e      	movs	r6, r1
 80043e0:	7805      	ldrb	r5, [r0, #0]
 80043e2:	3401      	adds	r4, #1
 80043e4:	7837      	ldrb	r7, [r6, #0]
 80043e6:	2f00      	cmp	r7, #0
 80043e8:	d104      	bne.n	80043f4 <__strtok_r+0x24>
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	d10d      	bne.n	800440a <__strtok_r+0x3a>
 80043ee:	6015      	str	r5, [r2, #0]
 80043f0:	2000      	movs	r0, #0
 80043f2:	e006      	b.n	8004402 <__strtok_r+0x32>
 80043f4:	3601      	adds	r6, #1
 80043f6:	42bd      	cmp	r5, r7
 80043f8:	d1f4      	bne.n	80043e4 <__strtok_r+0x14>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ee      	bne.n	80043dc <__strtok_r+0xc>
 80043fe:	6014      	str	r4, [r2, #0]
 8004400:	7003      	strb	r3, [r0, #0]
 8004402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004404:	3301      	adds	r3, #1
 8004406:	2d00      	cmp	r5, #0
 8004408:	d102      	bne.n	8004410 <__strtok_r+0x40>
 800440a:	000b      	movs	r3, r1
 800440c:	7826      	ldrb	r6, [r4, #0]
 800440e:	3401      	adds	r4, #1
 8004410:	781d      	ldrb	r5, [r3, #0]
 8004412:	42ae      	cmp	r6, r5
 8004414:	d1f6      	bne.n	8004404 <__strtok_r+0x34>
 8004416:	2300      	movs	r3, #0
 8004418:	001d      	movs	r5, r3
 800441a:	429e      	cmp	r6, r3
 800441c:	d002      	beq.n	8004424 <__strtok_r+0x54>
 800441e:	0023      	movs	r3, r4
 8004420:	1e61      	subs	r1, r4, #1
 8004422:	700d      	strb	r5, [r1, #0]
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e7ec      	b.n	8004402 <__strtok_r+0x32>

08004428 <_close_r>:
 8004428:	2300      	movs	r3, #0
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	4d06      	ldr	r5, [pc, #24]	@ (8004448 <_close_r+0x20>)
 800442e:	0004      	movs	r4, r0
 8004430:	0008      	movs	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc fc3a 	bl	8000cac <_close>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d103      	bne.n	8004444 <_close_r+0x1c>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d000      	beq.n	8004444 <_close_r+0x1c>
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	20000430 	.word	0x20000430

0800444c <_lseek_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	0004      	movs	r4, r0
 8004450:	0008      	movs	r0, r1
 8004452:	0011      	movs	r1, r2
 8004454:	001a      	movs	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	4d05      	ldr	r5, [pc, #20]	@ (8004470 <_lseek_r+0x24>)
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc fc47 	bl	8000cee <_lseek>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d103      	bne.n	800446c <_lseek_r+0x20>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d000      	beq.n	800446c <_lseek_r+0x20>
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	bd70      	pop	{r4, r5, r6, pc}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	20000430 	.word	0x20000430

08004474 <_read_r>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	0004      	movs	r4, r0
 8004478:	0008      	movs	r0, r1
 800447a:	0011      	movs	r1, r2
 800447c:	001a      	movs	r2, r3
 800447e:	2300      	movs	r3, #0
 8004480:	4d05      	ldr	r5, [pc, #20]	@ (8004498 <_read_r+0x24>)
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fbf5 	bl	8000c72 <_read>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d103      	bne.n	8004494 <_read_r+0x20>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d000      	beq.n	8004494 <_read_r+0x20>
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	bd70      	pop	{r4, r5, r6, pc}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	20000430 	.word	0x20000430

0800449c <_write_r>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	0004      	movs	r4, r0
 80044a0:	0008      	movs	r0, r1
 80044a2:	0011      	movs	r1, r2
 80044a4:	001a      	movs	r2, r3
 80044a6:	2300      	movs	r3, #0
 80044a8:	4d05      	ldr	r5, [pc, #20]	@ (80044c0 <_write_r+0x24>)
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fb fec2 	bl	8000234 <_write>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d103      	bne.n	80044bc <_write_r+0x20>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d000      	beq.n	80044bc <_write_r+0x20>
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	20000430 	.word	0x20000430

080044c4 <__errno>:
 80044c4:	4b01      	ldr	r3, [pc, #4]	@ (80044cc <__errno+0x8>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	4770      	bx	lr
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	20000018 	.word	0x20000018

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	2600      	movs	r6, #0
 80044d4:	4c0c      	ldr	r4, [pc, #48]	@ (8004508 <__libc_init_array+0x38>)
 80044d6:	4d0d      	ldr	r5, [pc, #52]	@ (800450c <__libc_init_array+0x3c>)
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	42a6      	cmp	r6, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	2600      	movs	r6, #0
 80044e2:	f000 fdf9 	bl	80050d8 <_init>
 80044e6:	4c0a      	ldr	r4, [pc, #40]	@ (8004510 <__libc_init_array+0x40>)
 80044e8:	4d0a      	ldr	r5, [pc, #40]	@ (8004514 <__libc_init_array+0x44>)
 80044ea:	1b64      	subs	r4, r4, r5
 80044ec:	10a4      	asrs	r4, r4, #2
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	00b3      	lsls	r3, r6, #2
 80044f6:	58eb      	ldr	r3, [r5, r3]
 80044f8:	4798      	blx	r3
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	00b3      	lsls	r3, r6, #2
 8004500:	58eb      	ldr	r3, [r5, r3]
 8004502:	4798      	blx	r3
 8004504:	3601      	adds	r6, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	080053e8 	.word	0x080053e8
 800450c:	080053e8 	.word	0x080053e8
 8004510:	080053ec 	.word	0x080053ec
 8004514:	080053e8 	.word	0x080053e8

08004518 <__retarget_lock_init_recursive>:
 8004518:	4770      	bx	lr

0800451a <__retarget_lock_acquire_recursive>:
 800451a:	4770      	bx	lr

0800451c <__retarget_lock_release_recursive>:
 800451c:	4770      	bx	lr
	...

08004520 <__assert_func>:
 8004520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004522:	0014      	movs	r4, r2
 8004524:	001a      	movs	r2, r3
 8004526:	4b09      	ldr	r3, [pc, #36]	@ (800454c <__assert_func+0x2c>)
 8004528:	0005      	movs	r5, r0
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	000e      	movs	r6, r1
 800452e:	68d8      	ldr	r0, [r3, #12]
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <__assert_func+0x30>)
 8004532:	2c00      	cmp	r4, #0
 8004534:	d101      	bne.n	800453a <__assert_func+0x1a>
 8004536:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <__assert_func+0x34>)
 8004538:	001c      	movs	r4, r3
 800453a:	4907      	ldr	r1, [pc, #28]	@ (8004558 <__assert_func+0x38>)
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	9402      	str	r4, [sp, #8]
 8004540:	002b      	movs	r3, r5
 8004542:	9600      	str	r6, [sp, #0]
 8004544:	f000 fc84 	bl	8004e50 <fiprintf>
 8004548:	f000 fd75 	bl	8005036 <abort>
 800454c:	20000018 	.word	0x20000018
 8004550:	08005376 	.word	0x08005376
 8004554:	080053b1 	.word	0x080053b1
 8004558:	08005383 	.word	0x08005383

0800455c <_free_r>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	0005      	movs	r5, r0
 8004560:	1e0c      	subs	r4, r1, #0
 8004562:	d010      	beq.n	8004586 <_free_r+0x2a>
 8004564:	3c04      	subs	r4, #4
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	da00      	bge.n	800456e <_free_r+0x12>
 800456c:	18e4      	adds	r4, r4, r3
 800456e:	0028      	movs	r0, r5
 8004570:	f000 f8ea 	bl	8004748 <__malloc_lock>
 8004574:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <_free_r+0x90>)
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <_free_r+0x2c>
 800457c:	6063      	str	r3, [r4, #4]
 800457e:	6014      	str	r4, [r2, #0]
 8004580:	0028      	movs	r0, r5
 8004582:	f000 f8e9 	bl	8004758 <__malloc_unlock>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	42a3      	cmp	r3, r4
 800458a:	d908      	bls.n	800459e <_free_r+0x42>
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	1821      	adds	r1, r4, r0
 8004590:	428b      	cmp	r3, r1
 8004592:	d1f3      	bne.n	800457c <_free_r+0x20>
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	1809      	adds	r1, r1, r0
 800459a:	6021      	str	r1, [r4, #0]
 800459c:	e7ee      	b.n	800457c <_free_r+0x20>
 800459e:	001a      	movs	r2, r3
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <_free_r+0x4e>
 80045a6:	42a3      	cmp	r3, r4
 80045a8:	d9f9      	bls.n	800459e <_free_r+0x42>
 80045aa:	6811      	ldr	r1, [r2, #0]
 80045ac:	1850      	adds	r0, r2, r1
 80045ae:	42a0      	cmp	r0, r4
 80045b0:	d10b      	bne.n	80045ca <_free_r+0x6e>
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1809      	adds	r1, r1, r0
 80045b6:	1850      	adds	r0, r2, r1
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	4283      	cmp	r3, r0
 80045bc:	d1e0      	bne.n	8004580 <_free_r+0x24>
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	1841      	adds	r1, r0, r1
 80045c4:	6011      	str	r1, [r2, #0]
 80045c6:	6053      	str	r3, [r2, #4]
 80045c8:	e7da      	b.n	8004580 <_free_r+0x24>
 80045ca:	42a0      	cmp	r0, r4
 80045cc:	d902      	bls.n	80045d4 <_free_r+0x78>
 80045ce:	230c      	movs	r3, #12
 80045d0:	602b      	str	r3, [r5, #0]
 80045d2:	e7d5      	b.n	8004580 <_free_r+0x24>
 80045d4:	6820      	ldr	r0, [r4, #0]
 80045d6:	1821      	adds	r1, r4, r0
 80045d8:	428b      	cmp	r3, r1
 80045da:	d103      	bne.n	80045e4 <_free_r+0x88>
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	1809      	adds	r1, r1, r0
 80045e2:	6021      	str	r1, [r4, #0]
 80045e4:	6063      	str	r3, [r4, #4]
 80045e6:	6054      	str	r4, [r2, #4]
 80045e8:	e7ca      	b.n	8004580 <_free_r+0x24>
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	2000043c 	.word	0x2000043c

080045f0 <malloc>:
 80045f0:	b510      	push	{r4, lr}
 80045f2:	4b03      	ldr	r3, [pc, #12]	@ (8004600 <malloc+0x10>)
 80045f4:	0001      	movs	r1, r0
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	f000 f826 	bl	8004648 <_malloc_r>
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	20000018 	.word	0x20000018

08004604 <sbrk_aligned>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	4e0f      	ldr	r6, [pc, #60]	@ (8004644 <sbrk_aligned+0x40>)
 8004608:	000d      	movs	r5, r1
 800460a:	6831      	ldr	r1, [r6, #0]
 800460c:	0004      	movs	r4, r0
 800460e:	2900      	cmp	r1, #0
 8004610:	d102      	bne.n	8004618 <sbrk_aligned+0x14>
 8004612:	f000 fcf3 	bl	8004ffc <_sbrk_r>
 8004616:	6030      	str	r0, [r6, #0]
 8004618:	0029      	movs	r1, r5
 800461a:	0020      	movs	r0, r4
 800461c:	f000 fcee 	bl	8004ffc <_sbrk_r>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d103      	bne.n	800462c <sbrk_aligned+0x28>
 8004624:	2501      	movs	r5, #1
 8004626:	426d      	negs	r5, r5
 8004628:	0028      	movs	r0, r5
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	2303      	movs	r3, #3
 800462e:	1cc5      	adds	r5, r0, #3
 8004630:	439d      	bics	r5, r3
 8004632:	42a8      	cmp	r0, r5
 8004634:	d0f8      	beq.n	8004628 <sbrk_aligned+0x24>
 8004636:	1a29      	subs	r1, r5, r0
 8004638:	0020      	movs	r0, r4
 800463a:	f000 fcdf 	bl	8004ffc <_sbrk_r>
 800463e:	3001      	adds	r0, #1
 8004640:	d1f2      	bne.n	8004628 <sbrk_aligned+0x24>
 8004642:	e7ef      	b.n	8004624 <sbrk_aligned+0x20>
 8004644:	20000438 	.word	0x20000438

08004648 <_malloc_r>:
 8004648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800464a:	2203      	movs	r2, #3
 800464c:	1ccb      	adds	r3, r1, #3
 800464e:	4393      	bics	r3, r2
 8004650:	3308      	adds	r3, #8
 8004652:	0005      	movs	r5, r0
 8004654:	001f      	movs	r7, r3
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d234      	bcs.n	80046c4 <_malloc_r+0x7c>
 800465a:	270c      	movs	r7, #12
 800465c:	42b9      	cmp	r1, r7
 800465e:	d833      	bhi.n	80046c8 <_malloc_r+0x80>
 8004660:	0028      	movs	r0, r5
 8004662:	f000 f871 	bl	8004748 <__malloc_lock>
 8004666:	4e37      	ldr	r6, [pc, #220]	@ (8004744 <_malloc_r+0xfc>)
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	001c      	movs	r4, r3
 800466c:	2c00      	cmp	r4, #0
 800466e:	d12f      	bne.n	80046d0 <_malloc_r+0x88>
 8004670:	0039      	movs	r1, r7
 8004672:	0028      	movs	r0, r5
 8004674:	f7ff ffc6 	bl	8004604 <sbrk_aligned>
 8004678:	0004      	movs	r4, r0
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d15f      	bne.n	800473e <_malloc_r+0xf6>
 800467e:	6834      	ldr	r4, [r6, #0]
 8004680:	9400      	str	r4, [sp, #0]
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d14a      	bne.n	800471e <_malloc_r+0xd6>
 8004688:	2c00      	cmp	r4, #0
 800468a:	d052      	beq.n	8004732 <_malloc_r+0xea>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	0028      	movs	r0, r5
 8004690:	18e3      	adds	r3, r4, r3
 8004692:	9900      	ldr	r1, [sp, #0]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	f000 fcb1 	bl	8004ffc <_sbrk_r>
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	4283      	cmp	r3, r0
 800469e:	d148      	bne.n	8004732 <_malloc_r+0xea>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	0028      	movs	r0, r5
 80046a4:	1aff      	subs	r7, r7, r3
 80046a6:	0039      	movs	r1, r7
 80046a8:	f7ff ffac 	bl	8004604 <sbrk_aligned>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d040      	beq.n	8004732 <_malloc_r+0xea>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	6833      	ldr	r3, [r6, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d133      	bne.n	8004726 <_malloc_r+0xde>
 80046be:	9b00      	ldr	r3, [sp, #0]
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	e019      	b.n	80046f8 <_malloc_r+0xb0>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	dac9      	bge.n	800465c <_malloc_r+0x14>
 80046c8:	230c      	movs	r3, #12
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	2000      	movs	r0, #0
 80046ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046d0:	6821      	ldr	r1, [r4, #0]
 80046d2:	1bc9      	subs	r1, r1, r7
 80046d4:	d420      	bmi.n	8004718 <_malloc_r+0xd0>
 80046d6:	290b      	cmp	r1, #11
 80046d8:	d90a      	bls.n	80046f0 <_malloc_r+0xa8>
 80046da:	19e2      	adds	r2, r4, r7
 80046dc:	6027      	str	r7, [r4, #0]
 80046de:	42a3      	cmp	r3, r4
 80046e0:	d104      	bne.n	80046ec <_malloc_r+0xa4>
 80046e2:	6032      	str	r2, [r6, #0]
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	6011      	str	r1, [r2, #0]
 80046e8:	6053      	str	r3, [r2, #4]
 80046ea:	e005      	b.n	80046f8 <_malloc_r+0xb0>
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	e7f9      	b.n	80046e4 <_malloc_r+0x9c>
 80046f0:	6862      	ldr	r2, [r4, #4]
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d10e      	bne.n	8004714 <_malloc_r+0xcc>
 80046f6:	6032      	str	r2, [r6, #0]
 80046f8:	0028      	movs	r0, r5
 80046fa:	f000 f82d 	bl	8004758 <__malloc_unlock>
 80046fe:	0020      	movs	r0, r4
 8004700:	2207      	movs	r2, #7
 8004702:	300b      	adds	r0, #11
 8004704:	1d23      	adds	r3, r4, #4
 8004706:	4390      	bics	r0, r2
 8004708:	1ac2      	subs	r2, r0, r3
 800470a:	4298      	cmp	r0, r3
 800470c:	d0df      	beq.n	80046ce <_malloc_r+0x86>
 800470e:	1a1b      	subs	r3, r3, r0
 8004710:	50a3      	str	r3, [r4, r2]
 8004712:	e7dc      	b.n	80046ce <_malloc_r+0x86>
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	e7ef      	b.n	80046f8 <_malloc_r+0xb0>
 8004718:	0023      	movs	r3, r4
 800471a:	6864      	ldr	r4, [r4, #4]
 800471c:	e7a6      	b.n	800466c <_malloc_r+0x24>
 800471e:	9c00      	ldr	r4, [sp, #0]
 8004720:	6863      	ldr	r3, [r4, #4]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	e7ad      	b.n	8004682 <_malloc_r+0x3a>
 8004726:	001a      	movs	r2, r3
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	42a3      	cmp	r3, r4
 800472c:	d1fb      	bne.n	8004726 <_malloc_r+0xde>
 800472e:	2300      	movs	r3, #0
 8004730:	e7da      	b.n	80046e8 <_malloc_r+0xa0>
 8004732:	230c      	movs	r3, #12
 8004734:	0028      	movs	r0, r5
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f000 f80e 	bl	8004758 <__malloc_unlock>
 800473c:	e7c6      	b.n	80046cc <_malloc_r+0x84>
 800473e:	6007      	str	r7, [r0, #0]
 8004740:	e7da      	b.n	80046f8 <_malloc_r+0xb0>
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	2000043c 	.word	0x2000043c

08004748 <__malloc_lock>:
 8004748:	b510      	push	{r4, lr}
 800474a:	4802      	ldr	r0, [pc, #8]	@ (8004754 <__malloc_lock+0xc>)
 800474c:	f7ff fee5 	bl	800451a <__retarget_lock_acquire_recursive>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	20000434 	.word	0x20000434

08004758 <__malloc_unlock>:
 8004758:	b510      	push	{r4, lr}
 800475a:	4802      	ldr	r0, [pc, #8]	@ (8004764 <__malloc_unlock+0xc>)
 800475c:	f7ff fede 	bl	800451c <__retarget_lock_release_recursive>
 8004760:	bd10      	pop	{r4, pc}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	20000434 	.word	0x20000434

08004768 <__sfputc_r>:
 8004768:	6893      	ldr	r3, [r2, #8]
 800476a:	b510      	push	{r4, lr}
 800476c:	3b01      	subs	r3, #1
 800476e:	6093      	str	r3, [r2, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	da04      	bge.n	800477e <__sfputc_r+0x16>
 8004774:	6994      	ldr	r4, [r2, #24]
 8004776:	42a3      	cmp	r3, r4
 8004778:	db07      	blt.n	800478a <__sfputc_r+0x22>
 800477a:	290a      	cmp	r1, #10
 800477c:	d005      	beq.n	800478a <__sfputc_r+0x22>
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	1c58      	adds	r0, r3, #1
 8004782:	6010      	str	r0, [r2, #0]
 8004784:	7019      	strb	r1, [r3, #0]
 8004786:	0008      	movs	r0, r1
 8004788:	bd10      	pop	{r4, pc}
 800478a:	f7ff fd2b 	bl	80041e4 <__swbuf_r>
 800478e:	0001      	movs	r1, r0
 8004790:	e7f9      	b.n	8004786 <__sfputc_r+0x1e>

08004792 <__sfputs_r>:
 8004792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004794:	0006      	movs	r6, r0
 8004796:	000f      	movs	r7, r1
 8004798:	0014      	movs	r4, r2
 800479a:	18d5      	adds	r5, r2, r3
 800479c:	42ac      	cmp	r4, r5
 800479e:	d101      	bne.n	80047a4 <__sfputs_r+0x12>
 80047a0:	2000      	movs	r0, #0
 80047a2:	e007      	b.n	80047b4 <__sfputs_r+0x22>
 80047a4:	7821      	ldrb	r1, [r4, #0]
 80047a6:	003a      	movs	r2, r7
 80047a8:	0030      	movs	r0, r6
 80047aa:	f7ff ffdd 	bl	8004768 <__sfputc_r>
 80047ae:	3401      	adds	r4, #1
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	d1f3      	bne.n	800479c <__sfputs_r+0xa>
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047b8 <_vfiprintf_r>:
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b0a1      	sub	sp, #132	@ 0x84
 80047bc:	000f      	movs	r7, r1
 80047be:	0015      	movs	r5, r2
 80047c0:	001e      	movs	r6, r3
 80047c2:	9003      	str	r0, [sp, #12]
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d004      	beq.n	80047d2 <_vfiprintf_r+0x1a>
 80047c8:	6a03      	ldr	r3, [r0, #32]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <_vfiprintf_r+0x1a>
 80047ce:	f7ff fc0f 	bl	8003ff0 <__sinit>
 80047d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	d405      	bmi.n	80047e4 <_vfiprintf_r+0x2c>
 80047d8:	89bb      	ldrh	r3, [r7, #12]
 80047da:	059b      	lsls	r3, r3, #22
 80047dc:	d402      	bmi.n	80047e4 <_vfiprintf_r+0x2c>
 80047de:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80047e0:	f7ff fe9b 	bl	800451a <__retarget_lock_acquire_recursive>
 80047e4:	89bb      	ldrh	r3, [r7, #12]
 80047e6:	071b      	lsls	r3, r3, #28
 80047e8:	d502      	bpl.n	80047f0 <_vfiprintf_r+0x38>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d113      	bne.n	8004818 <_vfiprintf_r+0x60>
 80047f0:	0039      	movs	r1, r7
 80047f2:	9803      	ldr	r0, [sp, #12]
 80047f4:	f7ff fd38 	bl	8004268 <__swsetup_r>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d00d      	beq.n	8004818 <_vfiprintf_r+0x60>
 80047fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047fe:	07db      	lsls	r3, r3, #31
 8004800:	d503      	bpl.n	800480a <_vfiprintf_r+0x52>
 8004802:	2001      	movs	r0, #1
 8004804:	4240      	negs	r0, r0
 8004806:	b021      	add	sp, #132	@ 0x84
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480a:	89bb      	ldrh	r3, [r7, #12]
 800480c:	059b      	lsls	r3, r3, #22
 800480e:	d4f8      	bmi.n	8004802 <_vfiprintf_r+0x4a>
 8004810:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004812:	f7ff fe83 	bl	800451c <__retarget_lock_release_recursive>
 8004816:	e7f4      	b.n	8004802 <_vfiprintf_r+0x4a>
 8004818:	2300      	movs	r3, #0
 800481a:	ac08      	add	r4, sp, #32
 800481c:	6163      	str	r3, [r4, #20]
 800481e:	3320      	adds	r3, #32
 8004820:	7663      	strb	r3, [r4, #25]
 8004822:	3310      	adds	r3, #16
 8004824:	76a3      	strb	r3, [r4, #26]
 8004826:	9607      	str	r6, [sp, #28]
 8004828:	002e      	movs	r6, r5
 800482a:	7833      	ldrb	r3, [r6, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <_vfiprintf_r+0x7c>
 8004830:	2b25      	cmp	r3, #37	@ 0x25
 8004832:	d148      	bne.n	80048c6 <_vfiprintf_r+0x10e>
 8004834:	1b73      	subs	r3, r6, r5
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	42ae      	cmp	r6, r5
 800483a:	d00b      	beq.n	8004854 <_vfiprintf_r+0x9c>
 800483c:	002a      	movs	r2, r5
 800483e:	0039      	movs	r1, r7
 8004840:	9803      	ldr	r0, [sp, #12]
 8004842:	f7ff ffa6 	bl	8004792 <__sfputs_r>
 8004846:	3001      	adds	r0, #1
 8004848:	d100      	bne.n	800484c <_vfiprintf_r+0x94>
 800484a:	e0ae      	b.n	80049aa <_vfiprintf_r+0x1f2>
 800484c:	6963      	ldr	r3, [r4, #20]
 800484e:	9a05      	ldr	r2, [sp, #20]
 8004850:	189b      	adds	r3, r3, r2
 8004852:	6163      	str	r3, [r4, #20]
 8004854:	7833      	ldrb	r3, [r6, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d100      	bne.n	800485c <_vfiprintf_r+0xa4>
 800485a:	e0a6      	b.n	80049aa <_vfiprintf_r+0x1f2>
 800485c:	2201      	movs	r2, #1
 800485e:	2300      	movs	r3, #0
 8004860:	4252      	negs	r2, r2
 8004862:	6062      	str	r2, [r4, #4]
 8004864:	a904      	add	r1, sp, #16
 8004866:	3254      	adds	r2, #84	@ 0x54
 8004868:	1852      	adds	r2, r2, r1
 800486a:	1c75      	adds	r5, r6, #1
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	60e3      	str	r3, [r4, #12]
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	7013      	strb	r3, [r2, #0]
 8004874:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004876:	4b59      	ldr	r3, [pc, #356]	@ (80049dc <_vfiprintf_r+0x224>)
 8004878:	2205      	movs	r2, #5
 800487a:	0018      	movs	r0, r3
 800487c:	7829      	ldrb	r1, [r5, #0]
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	f000 fbce 	bl	8005020 <memchr>
 8004884:	1c6e      	adds	r6, r5, #1
 8004886:	2800      	cmp	r0, #0
 8004888:	d11f      	bne.n	80048ca <_vfiprintf_r+0x112>
 800488a:	6822      	ldr	r2, [r4, #0]
 800488c:	06d3      	lsls	r3, r2, #27
 800488e:	d504      	bpl.n	800489a <_vfiprintf_r+0xe2>
 8004890:	2353      	movs	r3, #83	@ 0x53
 8004892:	a904      	add	r1, sp, #16
 8004894:	185b      	adds	r3, r3, r1
 8004896:	2120      	movs	r1, #32
 8004898:	7019      	strb	r1, [r3, #0]
 800489a:	0713      	lsls	r3, r2, #28
 800489c:	d504      	bpl.n	80048a8 <_vfiprintf_r+0xf0>
 800489e:	2353      	movs	r3, #83	@ 0x53
 80048a0:	a904      	add	r1, sp, #16
 80048a2:	185b      	adds	r3, r3, r1
 80048a4:	212b      	movs	r1, #43	@ 0x2b
 80048a6:	7019      	strb	r1, [r3, #0]
 80048a8:	782b      	ldrb	r3, [r5, #0]
 80048aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ac:	d016      	beq.n	80048dc <_vfiprintf_r+0x124>
 80048ae:	002e      	movs	r6, r5
 80048b0:	2100      	movs	r1, #0
 80048b2:	200a      	movs	r0, #10
 80048b4:	68e3      	ldr	r3, [r4, #12]
 80048b6:	7832      	ldrb	r2, [r6, #0]
 80048b8:	1c75      	adds	r5, r6, #1
 80048ba:	3a30      	subs	r2, #48	@ 0x30
 80048bc:	2a09      	cmp	r2, #9
 80048be:	d950      	bls.n	8004962 <_vfiprintf_r+0x1aa>
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d111      	bne.n	80048e8 <_vfiprintf_r+0x130>
 80048c4:	e017      	b.n	80048f6 <_vfiprintf_r+0x13e>
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7af      	b.n	800482a <_vfiprintf_r+0x72>
 80048ca:	9b05      	ldr	r3, [sp, #20]
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	1ac0      	subs	r0, r0, r3
 80048d0:	2301      	movs	r3, #1
 80048d2:	4083      	lsls	r3, r0
 80048d4:	4313      	orrs	r3, r2
 80048d6:	0035      	movs	r5, r6
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	e7cc      	b.n	8004876 <_vfiprintf_r+0xbe>
 80048dc:	9b07      	ldr	r3, [sp, #28]
 80048de:	1d19      	adds	r1, r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	9107      	str	r1, [sp, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db01      	blt.n	80048ec <_vfiprintf_r+0x134>
 80048e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048ea:	e004      	b.n	80048f6 <_vfiprintf_r+0x13e>
 80048ec:	425b      	negs	r3, r3
 80048ee:	60e3      	str	r3, [r4, #12]
 80048f0:	2302      	movs	r3, #2
 80048f2:	4313      	orrs	r3, r2
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	7833      	ldrb	r3, [r6, #0]
 80048f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80048fa:	d10c      	bne.n	8004916 <_vfiprintf_r+0x15e>
 80048fc:	7873      	ldrb	r3, [r6, #1]
 80048fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004900:	d134      	bne.n	800496c <_vfiprintf_r+0x1b4>
 8004902:	9b07      	ldr	r3, [sp, #28]
 8004904:	3602      	adds	r6, #2
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	9207      	str	r2, [sp, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	da01      	bge.n	8004914 <_vfiprintf_r+0x15c>
 8004910:	2301      	movs	r3, #1
 8004912:	425b      	negs	r3, r3
 8004914:	9309      	str	r3, [sp, #36]	@ 0x24
 8004916:	4d32      	ldr	r5, [pc, #200]	@ (80049e0 <_vfiprintf_r+0x228>)
 8004918:	2203      	movs	r2, #3
 800491a:	0028      	movs	r0, r5
 800491c:	7831      	ldrb	r1, [r6, #0]
 800491e:	f000 fb7f 	bl	8005020 <memchr>
 8004922:	2800      	cmp	r0, #0
 8004924:	d006      	beq.n	8004934 <_vfiprintf_r+0x17c>
 8004926:	2340      	movs	r3, #64	@ 0x40
 8004928:	1b40      	subs	r0, r0, r5
 800492a:	4083      	lsls	r3, r0
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	3601      	adds	r6, #1
 8004930:	4313      	orrs	r3, r2
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	7831      	ldrb	r1, [r6, #0]
 8004936:	2206      	movs	r2, #6
 8004938:	482a      	ldr	r0, [pc, #168]	@ (80049e4 <_vfiprintf_r+0x22c>)
 800493a:	1c75      	adds	r5, r6, #1
 800493c:	7621      	strb	r1, [r4, #24]
 800493e:	f000 fb6f 	bl	8005020 <memchr>
 8004942:	2800      	cmp	r0, #0
 8004944:	d040      	beq.n	80049c8 <_vfiprintf_r+0x210>
 8004946:	4b28      	ldr	r3, [pc, #160]	@ (80049e8 <_vfiprintf_r+0x230>)
 8004948:	2b00      	cmp	r3, #0
 800494a:	d122      	bne.n	8004992 <_vfiprintf_r+0x1da>
 800494c:	2207      	movs	r2, #7
 800494e:	9b07      	ldr	r3, [sp, #28]
 8004950:	3307      	adds	r3, #7
 8004952:	4393      	bics	r3, r2
 8004954:	3308      	adds	r3, #8
 8004956:	9307      	str	r3, [sp, #28]
 8004958:	6963      	ldr	r3, [r4, #20]
 800495a:	9a04      	ldr	r2, [sp, #16]
 800495c:	189b      	adds	r3, r3, r2
 800495e:	6163      	str	r3, [r4, #20]
 8004960:	e762      	b.n	8004828 <_vfiprintf_r+0x70>
 8004962:	4343      	muls	r3, r0
 8004964:	002e      	movs	r6, r5
 8004966:	2101      	movs	r1, #1
 8004968:	189b      	adds	r3, r3, r2
 800496a:	e7a4      	b.n	80048b6 <_vfiprintf_r+0xfe>
 800496c:	2300      	movs	r3, #0
 800496e:	200a      	movs	r0, #10
 8004970:	0019      	movs	r1, r3
 8004972:	3601      	adds	r6, #1
 8004974:	6063      	str	r3, [r4, #4]
 8004976:	7832      	ldrb	r2, [r6, #0]
 8004978:	1c75      	adds	r5, r6, #1
 800497a:	3a30      	subs	r2, #48	@ 0x30
 800497c:	2a09      	cmp	r2, #9
 800497e:	d903      	bls.n	8004988 <_vfiprintf_r+0x1d0>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0c8      	beq.n	8004916 <_vfiprintf_r+0x15e>
 8004984:	9109      	str	r1, [sp, #36]	@ 0x24
 8004986:	e7c6      	b.n	8004916 <_vfiprintf_r+0x15e>
 8004988:	4341      	muls	r1, r0
 800498a:	002e      	movs	r6, r5
 800498c:	2301      	movs	r3, #1
 800498e:	1889      	adds	r1, r1, r2
 8004990:	e7f1      	b.n	8004976 <_vfiprintf_r+0x1be>
 8004992:	aa07      	add	r2, sp, #28
 8004994:	9200      	str	r2, [sp, #0]
 8004996:	0021      	movs	r1, r4
 8004998:	003a      	movs	r2, r7
 800499a:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <_vfiprintf_r+0x234>)
 800499c:	9803      	ldr	r0, [sp, #12]
 800499e:	e000      	b.n	80049a2 <_vfiprintf_r+0x1ea>
 80049a0:	bf00      	nop
 80049a2:	9004      	str	r0, [sp, #16]
 80049a4:	9b04      	ldr	r3, [sp, #16]
 80049a6:	3301      	adds	r3, #1
 80049a8:	d1d6      	bne.n	8004958 <_vfiprintf_r+0x1a0>
 80049aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ac:	07db      	lsls	r3, r3, #31
 80049ae:	d405      	bmi.n	80049bc <_vfiprintf_r+0x204>
 80049b0:	89bb      	ldrh	r3, [r7, #12]
 80049b2:	059b      	lsls	r3, r3, #22
 80049b4:	d402      	bmi.n	80049bc <_vfiprintf_r+0x204>
 80049b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80049b8:	f7ff fdb0 	bl	800451c <__retarget_lock_release_recursive>
 80049bc:	89bb      	ldrh	r3, [r7, #12]
 80049be:	065b      	lsls	r3, r3, #25
 80049c0:	d500      	bpl.n	80049c4 <_vfiprintf_r+0x20c>
 80049c2:	e71e      	b.n	8004802 <_vfiprintf_r+0x4a>
 80049c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80049c6:	e71e      	b.n	8004806 <_vfiprintf_r+0x4e>
 80049c8:	aa07      	add	r2, sp, #28
 80049ca:	9200      	str	r2, [sp, #0]
 80049cc:	0021      	movs	r1, r4
 80049ce:	003a      	movs	r2, r7
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <_vfiprintf_r+0x234>)
 80049d2:	9803      	ldr	r0, [sp, #12]
 80049d4:	f000 f87c 	bl	8004ad0 <_printf_i>
 80049d8:	e7e3      	b.n	80049a2 <_vfiprintf_r+0x1ea>
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	080053b2 	.word	0x080053b2
 80049e0:	080053b8 	.word	0x080053b8
 80049e4:	080053bc 	.word	0x080053bc
 80049e8:	00000000 	.word	0x00000000
 80049ec:	08004793 	.word	0x08004793

080049f0 <_printf_common>:
 80049f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049f2:	0016      	movs	r6, r2
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	688a      	ldr	r2, [r1, #8]
 80049f8:	690b      	ldr	r3, [r1, #16]
 80049fa:	000c      	movs	r4, r1
 80049fc:	9000      	str	r0, [sp, #0]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	da00      	bge.n	8004a04 <_printf_common+0x14>
 8004a02:	0013      	movs	r3, r2
 8004a04:	0022      	movs	r2, r4
 8004a06:	6033      	str	r3, [r6, #0]
 8004a08:	3243      	adds	r2, #67	@ 0x43
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	2a00      	cmp	r2, #0
 8004a0e:	d001      	beq.n	8004a14 <_printf_common+0x24>
 8004a10:	3301      	adds	r3, #1
 8004a12:	6033      	str	r3, [r6, #0]
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	069b      	lsls	r3, r3, #26
 8004a18:	d502      	bpl.n	8004a20 <_printf_common+0x30>
 8004a1a:	6833      	ldr	r3, [r6, #0]
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	6033      	str	r3, [r6, #0]
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	2306      	movs	r3, #6
 8004a24:	0015      	movs	r5, r2
 8004a26:	401d      	ands	r5, r3
 8004a28:	421a      	tst	r2, r3
 8004a2a:	d027      	beq.n	8004a7c <_printf_common+0x8c>
 8004a2c:	0023      	movs	r3, r4
 8004a2e:	3343      	adds	r3, #67	@ 0x43
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	1e5a      	subs	r2, r3, #1
 8004a34:	4193      	sbcs	r3, r2
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	0692      	lsls	r2, r2, #26
 8004a3a:	d430      	bmi.n	8004a9e <_printf_common+0xae>
 8004a3c:	0022      	movs	r2, r4
 8004a3e:	9901      	ldr	r1, [sp, #4]
 8004a40:	9800      	ldr	r0, [sp, #0]
 8004a42:	9d08      	ldr	r5, [sp, #32]
 8004a44:	3243      	adds	r2, #67	@ 0x43
 8004a46:	47a8      	blx	r5
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d025      	beq.n	8004a98 <_printf_common+0xa8>
 8004a4c:	2206      	movs	r2, #6
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	2500      	movs	r5, #0
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d105      	bne.n	8004a64 <_printf_common+0x74>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	68e5      	ldr	r5, [r4, #12]
 8004a5c:	1aed      	subs	r5, r5, r3
 8004a5e:	43eb      	mvns	r3, r5
 8004a60:	17db      	asrs	r3, r3, #31
 8004a62:	401d      	ands	r5, r3
 8004a64:	68a3      	ldr	r3, [r4, #8]
 8004a66:	6922      	ldr	r2, [r4, #16]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	dd01      	ble.n	8004a70 <_printf_common+0x80>
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	18ed      	adds	r5, r5, r3
 8004a70:	2600      	movs	r6, #0
 8004a72:	42b5      	cmp	r5, r6
 8004a74:	d120      	bne.n	8004ab8 <_printf_common+0xc8>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e010      	b.n	8004a9c <_printf_common+0xac>
 8004a7a:	3501      	adds	r5, #1
 8004a7c:	68e3      	ldr	r3, [r4, #12]
 8004a7e:	6832      	ldr	r2, [r6, #0]
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	ddd2      	ble.n	8004a2c <_printf_common+0x3c>
 8004a86:	0022      	movs	r2, r4
 8004a88:	2301      	movs	r3, #1
 8004a8a:	9901      	ldr	r1, [sp, #4]
 8004a8c:	9800      	ldr	r0, [sp, #0]
 8004a8e:	9f08      	ldr	r7, [sp, #32]
 8004a90:	3219      	adds	r2, #25
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	d1f0      	bne.n	8004a7a <_printf_common+0x8a>
 8004a98:	2001      	movs	r0, #1
 8004a9a:	4240      	negs	r0, r0
 8004a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a9e:	2030      	movs	r0, #48	@ 0x30
 8004aa0:	18e1      	adds	r1, r4, r3
 8004aa2:	3143      	adds	r1, #67	@ 0x43
 8004aa4:	7008      	strb	r0, [r1, #0]
 8004aa6:	0021      	movs	r1, r4
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	3145      	adds	r1, #69	@ 0x45
 8004aac:	7809      	ldrb	r1, [r1, #0]
 8004aae:	18a2      	adds	r2, r4, r2
 8004ab0:	3243      	adds	r2, #67	@ 0x43
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	7011      	strb	r1, [r2, #0]
 8004ab6:	e7c1      	b.n	8004a3c <_printf_common+0x4c>
 8004ab8:	0022      	movs	r2, r4
 8004aba:	2301      	movs	r3, #1
 8004abc:	9901      	ldr	r1, [sp, #4]
 8004abe:	9800      	ldr	r0, [sp, #0]
 8004ac0:	9f08      	ldr	r7, [sp, #32]
 8004ac2:	321a      	adds	r2, #26
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d0e6      	beq.n	8004a98 <_printf_common+0xa8>
 8004aca:	3601      	adds	r6, #1
 8004acc:	e7d1      	b.n	8004a72 <_printf_common+0x82>
	...

08004ad0 <_printf_i>:
 8004ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad2:	b08b      	sub	sp, #44	@ 0x2c
 8004ad4:	9206      	str	r2, [sp, #24]
 8004ad6:	000a      	movs	r2, r1
 8004ad8:	3243      	adds	r2, #67	@ 0x43
 8004ada:	9307      	str	r3, [sp, #28]
 8004adc:	9005      	str	r0, [sp, #20]
 8004ade:	9203      	str	r2, [sp, #12]
 8004ae0:	7e0a      	ldrb	r2, [r1, #24]
 8004ae2:	000c      	movs	r4, r1
 8004ae4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ae6:	2a78      	cmp	r2, #120	@ 0x78
 8004ae8:	d809      	bhi.n	8004afe <_printf_i+0x2e>
 8004aea:	2a62      	cmp	r2, #98	@ 0x62
 8004aec:	d80b      	bhi.n	8004b06 <_printf_i+0x36>
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	d100      	bne.n	8004af4 <_printf_i+0x24>
 8004af2:	e0bc      	b.n	8004c6e <_printf_i+0x19e>
 8004af4:	497b      	ldr	r1, [pc, #492]	@ (8004ce4 <_printf_i+0x214>)
 8004af6:	9104      	str	r1, [sp, #16]
 8004af8:	2a58      	cmp	r2, #88	@ 0x58
 8004afa:	d100      	bne.n	8004afe <_printf_i+0x2e>
 8004afc:	e090      	b.n	8004c20 <_printf_i+0x150>
 8004afe:	0025      	movs	r5, r4
 8004b00:	3542      	adds	r5, #66	@ 0x42
 8004b02:	702a      	strb	r2, [r5, #0]
 8004b04:	e022      	b.n	8004b4c <_printf_i+0x7c>
 8004b06:	0010      	movs	r0, r2
 8004b08:	3863      	subs	r0, #99	@ 0x63
 8004b0a:	2815      	cmp	r0, #21
 8004b0c:	d8f7      	bhi.n	8004afe <_printf_i+0x2e>
 8004b0e:	f7fb fafb 	bl	8000108 <__gnu_thumb1_case_shi>
 8004b12:	0016      	.short	0x0016
 8004b14:	fff6001f 	.word	0xfff6001f
 8004b18:	fff6fff6 	.word	0xfff6fff6
 8004b1c:	001ffff6 	.word	0x001ffff6
 8004b20:	fff6fff6 	.word	0xfff6fff6
 8004b24:	fff6fff6 	.word	0xfff6fff6
 8004b28:	003600a1 	.word	0x003600a1
 8004b2c:	fff60080 	.word	0xfff60080
 8004b30:	00b2fff6 	.word	0x00b2fff6
 8004b34:	0036fff6 	.word	0x0036fff6
 8004b38:	fff6fff6 	.word	0xfff6fff6
 8004b3c:	0084      	.short	0x0084
 8004b3e:	0025      	movs	r5, r4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	3542      	adds	r5, #66	@ 0x42
 8004b44:	1d11      	adds	r1, r2, #4
 8004b46:	6019      	str	r1, [r3, #0]
 8004b48:	6813      	ldr	r3, [r2, #0]
 8004b4a:	702b      	strb	r3, [r5, #0]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0a0      	b.n	8004c92 <_printf_i+0x1c2>
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	6809      	ldr	r1, [r1, #0]
 8004b54:	1d02      	adds	r2, r0, #4
 8004b56:	060d      	lsls	r5, r1, #24
 8004b58:	d50b      	bpl.n	8004b72 <_printf_i+0xa2>
 8004b5a:	6806      	ldr	r6, [r0, #0]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	da03      	bge.n	8004b6a <_printf_i+0x9a>
 8004b62:	232d      	movs	r3, #45	@ 0x2d
 8004b64:	9a03      	ldr	r2, [sp, #12]
 8004b66:	4276      	negs	r6, r6
 8004b68:	7013      	strb	r3, [r2, #0]
 8004b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ce4 <_printf_i+0x214>)
 8004b6c:	270a      	movs	r7, #10
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	e018      	b.n	8004ba4 <_printf_i+0xd4>
 8004b72:	6806      	ldr	r6, [r0, #0]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	0649      	lsls	r1, r1, #25
 8004b78:	d5f1      	bpl.n	8004b5e <_printf_i+0x8e>
 8004b7a:	b236      	sxth	r6, r6
 8004b7c:	e7ef      	b.n	8004b5e <_printf_i+0x8e>
 8004b7e:	6808      	ldr	r0, [r1, #0]
 8004b80:	6819      	ldr	r1, [r3, #0]
 8004b82:	c940      	ldmia	r1!, {r6}
 8004b84:	0605      	lsls	r5, r0, #24
 8004b86:	d402      	bmi.n	8004b8e <_printf_i+0xbe>
 8004b88:	0640      	lsls	r0, r0, #25
 8004b8a:	d500      	bpl.n	8004b8e <_printf_i+0xbe>
 8004b8c:	b2b6      	uxth	r6, r6
 8004b8e:	6019      	str	r1, [r3, #0]
 8004b90:	4b54      	ldr	r3, [pc, #336]	@ (8004ce4 <_printf_i+0x214>)
 8004b92:	270a      	movs	r7, #10
 8004b94:	9304      	str	r3, [sp, #16]
 8004b96:	2a6f      	cmp	r2, #111	@ 0x6f
 8004b98:	d100      	bne.n	8004b9c <_printf_i+0xcc>
 8004b9a:	3f02      	subs	r7, #2
 8004b9c:	0023      	movs	r3, r4
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	3343      	adds	r3, #67	@ 0x43
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	60a3      	str	r3, [r4, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db03      	blt.n	8004bb4 <_printf_i+0xe4>
 8004bac:	2104      	movs	r1, #4
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	438a      	bics	r2, r1
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	2e00      	cmp	r6, #0
 8004bb6:	d102      	bne.n	8004bbe <_printf_i+0xee>
 8004bb8:	9d03      	ldr	r5, [sp, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <_printf_i+0x108>
 8004bbe:	9d03      	ldr	r5, [sp, #12]
 8004bc0:	0030      	movs	r0, r6
 8004bc2:	0039      	movs	r1, r7
 8004bc4:	f7fb fb30 	bl	8000228 <__aeabi_uidivmod>
 8004bc8:	9b04      	ldr	r3, [sp, #16]
 8004bca:	3d01      	subs	r5, #1
 8004bcc:	5c5b      	ldrb	r3, [r3, r1]
 8004bce:	702b      	strb	r3, [r5, #0]
 8004bd0:	0033      	movs	r3, r6
 8004bd2:	0006      	movs	r6, r0
 8004bd4:	429f      	cmp	r7, r3
 8004bd6:	d9f3      	bls.n	8004bc0 <_printf_i+0xf0>
 8004bd8:	2f08      	cmp	r7, #8
 8004bda:	d109      	bne.n	8004bf0 <_printf_i+0x120>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	07db      	lsls	r3, r3, #31
 8004be0:	d506      	bpl.n	8004bf0 <_printf_i+0x120>
 8004be2:	6862      	ldr	r2, [r4, #4]
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	dc02      	bgt.n	8004bf0 <_printf_i+0x120>
 8004bea:	2330      	movs	r3, #48	@ 0x30
 8004bec:	3d01      	subs	r5, #1
 8004bee:	702b      	strb	r3, [r5, #0]
 8004bf0:	9b03      	ldr	r3, [sp, #12]
 8004bf2:	1b5b      	subs	r3, r3, r5
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	9b07      	ldr	r3, [sp, #28]
 8004bf8:	0021      	movs	r1, r4
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	9805      	ldr	r0, [sp, #20]
 8004bfe:	9b06      	ldr	r3, [sp, #24]
 8004c00:	aa09      	add	r2, sp, #36	@ 0x24
 8004c02:	f7ff fef5 	bl	80049f0 <_printf_common>
 8004c06:	3001      	adds	r0, #1
 8004c08:	d148      	bne.n	8004c9c <_printf_i+0x1cc>
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	4240      	negs	r0, r0
 8004c0e:	b00b      	add	sp, #44	@ 0x2c
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c12:	2220      	movs	r2, #32
 8004c14:	6809      	ldr	r1, [r1, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	6022      	str	r2, [r4, #0]
 8004c1a:	2278      	movs	r2, #120	@ 0x78
 8004c1c:	4932      	ldr	r1, [pc, #200]	@ (8004ce8 <_printf_i+0x218>)
 8004c1e:	9104      	str	r1, [sp, #16]
 8004c20:	0021      	movs	r1, r4
 8004c22:	3145      	adds	r1, #69	@ 0x45
 8004c24:	700a      	strb	r2, [r1, #0]
 8004c26:	6819      	ldr	r1, [r3, #0]
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	c940      	ldmia	r1!, {r6}
 8004c2c:	0610      	lsls	r0, r2, #24
 8004c2e:	d402      	bmi.n	8004c36 <_printf_i+0x166>
 8004c30:	0650      	lsls	r0, r2, #25
 8004c32:	d500      	bpl.n	8004c36 <_printf_i+0x166>
 8004c34:	b2b6      	uxth	r6, r6
 8004c36:	6019      	str	r1, [r3, #0]
 8004c38:	07d3      	lsls	r3, r2, #31
 8004c3a:	d502      	bpl.n	8004c42 <_printf_i+0x172>
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	d001      	beq.n	8004c4a <_printf_i+0x17a>
 8004c46:	2710      	movs	r7, #16
 8004c48:	e7a8      	b.n	8004b9c <_printf_i+0xcc>
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	4393      	bics	r3, r2
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	e7f8      	b.n	8004c46 <_printf_i+0x176>
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	680d      	ldr	r5, [r1, #0]
 8004c58:	1d10      	adds	r0, r2, #4
 8004c5a:	6949      	ldr	r1, [r1, #20]
 8004c5c:	6018      	str	r0, [r3, #0]
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	062e      	lsls	r6, r5, #24
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0x198>
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	e002      	b.n	8004c6e <_printf_i+0x19e>
 8004c68:	066d      	lsls	r5, r5, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0x194>
 8004c6c:	8019      	strh	r1, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9d03      	ldr	r5, [sp, #12]
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	e7bf      	b.n	8004bf6 <_printf_i+0x126>
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	1d11      	adds	r1, r2, #4
 8004c7a:	6019      	str	r1, [r3, #0]
 8004c7c:	6815      	ldr	r5, [r2, #0]
 8004c7e:	2100      	movs	r1, #0
 8004c80:	0028      	movs	r0, r5
 8004c82:	6862      	ldr	r2, [r4, #4]
 8004c84:	f000 f9cc 	bl	8005020 <memchr>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d001      	beq.n	8004c90 <_printf_i+0x1c0>
 8004c8c:	1b40      	subs	r0, r0, r5
 8004c8e:	6060      	str	r0, [r4, #4]
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	9a03      	ldr	r2, [sp, #12]
 8004c98:	7013      	strb	r3, [r2, #0]
 8004c9a:	e7ac      	b.n	8004bf6 <_printf_i+0x126>
 8004c9c:	002a      	movs	r2, r5
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	9906      	ldr	r1, [sp, #24]
 8004ca2:	9805      	ldr	r0, [sp, #20]
 8004ca4:	9d07      	ldr	r5, [sp, #28]
 8004ca6:	47a8      	blx	r5
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d0ae      	beq.n	8004c0a <_printf_i+0x13a>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	079b      	lsls	r3, r3, #30
 8004cb0:	d415      	bmi.n	8004cde <_printf_i+0x20e>
 8004cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb4:	68e0      	ldr	r0, [r4, #12]
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	daa9      	bge.n	8004c0e <_printf_i+0x13e>
 8004cba:	0018      	movs	r0, r3
 8004cbc:	e7a7      	b.n	8004c0e <_printf_i+0x13e>
 8004cbe:	0022      	movs	r2, r4
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	9906      	ldr	r1, [sp, #24]
 8004cc4:	9805      	ldr	r0, [sp, #20]
 8004cc6:	9e07      	ldr	r6, [sp, #28]
 8004cc8:	3219      	adds	r2, #25
 8004cca:	47b0      	blx	r6
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d09c      	beq.n	8004c0a <_printf_i+0x13a>
 8004cd0:	3501      	adds	r5, #1
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dcf0      	bgt.n	8004cbe <_printf_i+0x1ee>
 8004cdc:	e7e9      	b.n	8004cb2 <_printf_i+0x1e2>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	e7f7      	b.n	8004cd2 <_printf_i+0x202>
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	080053c3 	.word	0x080053c3
 8004ce8:	080053d4 	.word	0x080053d4

08004cec <__sflush_r>:
 8004cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cee:	220c      	movs	r2, #12
 8004cf0:	5e8b      	ldrsh	r3, [r1, r2]
 8004cf2:	0005      	movs	r5, r0
 8004cf4:	000c      	movs	r4, r1
 8004cf6:	071a      	lsls	r2, r3, #28
 8004cf8:	d456      	bmi.n	8004da8 <__sflush_r+0xbc>
 8004cfa:	684a      	ldr	r2, [r1, #4]
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	dc02      	bgt.n	8004d06 <__sflush_r+0x1a>
 8004d00:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	dd4e      	ble.n	8004da4 <__sflush_r+0xb8>
 8004d06:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004d08:	2f00      	cmp	r7, #0
 8004d0a:	d04b      	beq.n	8004da4 <__sflush_r+0xb8>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2080      	movs	r0, #128	@ 0x80
 8004d10:	682e      	ldr	r6, [r5, #0]
 8004d12:	602a      	str	r2, [r5, #0]
 8004d14:	001a      	movs	r2, r3
 8004d16:	0140      	lsls	r0, r0, #5
 8004d18:	6a21      	ldr	r1, [r4, #32]
 8004d1a:	4002      	ands	r2, r0
 8004d1c:	4203      	tst	r3, r0
 8004d1e:	d033      	beq.n	8004d88 <__sflush_r+0x9c>
 8004d20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	075b      	lsls	r3, r3, #29
 8004d26:	d506      	bpl.n	8004d36 <__sflush_r+0x4a>
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <__sflush_r+0x4a>
 8004d32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d34:	1ad2      	subs	r2, r2, r3
 8004d36:	2300      	movs	r3, #0
 8004d38:	0028      	movs	r0, r5
 8004d3a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004d3c:	6a21      	ldr	r1, [r4, #32]
 8004d3e:	47b8      	blx	r7
 8004d40:	89a2      	ldrh	r2, [r4, #12]
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	d106      	bne.n	8004d54 <__sflush_r+0x68>
 8004d46:	6829      	ldr	r1, [r5, #0]
 8004d48:	291d      	cmp	r1, #29
 8004d4a:	d846      	bhi.n	8004dda <__sflush_r+0xee>
 8004d4c:	4b29      	ldr	r3, [pc, #164]	@ (8004df4 <__sflush_r+0x108>)
 8004d4e:	410b      	asrs	r3, r1
 8004d50:	07db      	lsls	r3, r3, #31
 8004d52:	d442      	bmi.n	8004dda <__sflush_r+0xee>
 8004d54:	2300      	movs	r3, #0
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	04d2      	lsls	r2, r2, #19
 8004d5e:	d505      	bpl.n	8004d6c <__sflush_r+0x80>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <__sflush_r+0x7e>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d100      	bne.n	8004d6c <__sflush_r+0x80>
 8004d6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d6e:	602e      	str	r6, [r5, #0]
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d017      	beq.n	8004da4 <__sflush_r+0xb8>
 8004d74:	0023      	movs	r3, r4
 8004d76:	3344      	adds	r3, #68	@ 0x44
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	d002      	beq.n	8004d82 <__sflush_r+0x96>
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	f7ff fbed 	bl	800455c <_free_r>
 8004d82:	2300      	movs	r3, #0
 8004d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d86:	e00d      	b.n	8004da4 <__sflush_r+0xb8>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	47b8      	blx	r7
 8004d8e:	0002      	movs	r2, r0
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d1c6      	bne.n	8004d22 <__sflush_r+0x36>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0c3      	beq.n	8004d22 <__sflush_r+0x36>
 8004d9a:	2b1d      	cmp	r3, #29
 8004d9c:	d001      	beq.n	8004da2 <__sflush_r+0xb6>
 8004d9e:	2b16      	cmp	r3, #22
 8004da0:	d11a      	bne.n	8004dd8 <__sflush_r+0xec>
 8004da2:	602e      	str	r6, [r5, #0]
 8004da4:	2000      	movs	r0, #0
 8004da6:	e01e      	b.n	8004de6 <__sflush_r+0xfa>
 8004da8:	690e      	ldr	r6, [r1, #16]
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	d0fa      	beq.n	8004da4 <__sflush_r+0xb8>
 8004dae:	680f      	ldr	r7, [r1, #0]
 8004db0:	600e      	str	r6, [r1, #0]
 8004db2:	1bba      	subs	r2, r7, r6
 8004db4:	9201      	str	r2, [sp, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	079b      	lsls	r3, r3, #30
 8004dba:	d100      	bne.n	8004dbe <__sflush_r+0xd2>
 8004dbc:	694a      	ldr	r2, [r1, #20]
 8004dbe:	60a2      	str	r2, [r4, #8]
 8004dc0:	9b01      	ldr	r3, [sp, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	ddee      	ble.n	8004da4 <__sflush_r+0xb8>
 8004dc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004dc8:	0032      	movs	r2, r6
 8004dca:	001f      	movs	r7, r3
 8004dcc:	0028      	movs	r0, r5
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	6a21      	ldr	r1, [r4, #32]
 8004dd2:	47b8      	blx	r7
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	dc07      	bgt.n	8004de8 <__sflush_r+0xfc>
 8004dd8:	89a2      	ldrh	r2, [r4, #12]
 8004dda:	2340      	movs	r3, #64	@ 0x40
 8004ddc:	2001      	movs	r0, #1
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b21b      	sxth	r3, r3
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	4240      	negs	r0, r0
 8004de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	1836      	adds	r6, r6, r0
 8004dec:	1a1b      	subs	r3, r3, r0
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	e7e6      	b.n	8004dc0 <__sflush_r+0xd4>
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	dfbffffe 	.word	0xdfbffffe

08004df8 <_fflush_r>:
 8004df8:	690b      	ldr	r3, [r1, #16]
 8004dfa:	b570      	push	{r4, r5, r6, lr}
 8004dfc:	0005      	movs	r5, r0
 8004dfe:	000c      	movs	r4, r1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <_fflush_r+0x12>
 8004e04:	2500      	movs	r5, #0
 8004e06:	0028      	movs	r0, r5
 8004e08:	bd70      	pop	{r4, r5, r6, pc}
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d004      	beq.n	8004e18 <_fflush_r+0x20>
 8004e0e:	6a03      	ldr	r3, [r0, #32]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <_fflush_r+0x20>
 8004e14:	f7ff f8ec 	bl	8003ff0 <__sinit>
 8004e18:	220c      	movs	r2, #12
 8004e1a:	5ea3      	ldrsh	r3, [r4, r2]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f1      	beq.n	8004e04 <_fflush_r+0xc>
 8004e20:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e22:	07d2      	lsls	r2, r2, #31
 8004e24:	d404      	bmi.n	8004e30 <_fflush_r+0x38>
 8004e26:	059b      	lsls	r3, r3, #22
 8004e28:	d402      	bmi.n	8004e30 <_fflush_r+0x38>
 8004e2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e2c:	f7ff fb75 	bl	800451a <__retarget_lock_acquire_recursive>
 8004e30:	0028      	movs	r0, r5
 8004e32:	0021      	movs	r1, r4
 8004e34:	f7ff ff5a 	bl	8004cec <__sflush_r>
 8004e38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e3a:	0005      	movs	r5, r0
 8004e3c:	07db      	lsls	r3, r3, #31
 8004e3e:	d4e2      	bmi.n	8004e06 <_fflush_r+0xe>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	059b      	lsls	r3, r3, #22
 8004e44:	d4df      	bmi.n	8004e06 <_fflush_r+0xe>
 8004e46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e48:	f7ff fb68 	bl	800451c <__retarget_lock_release_recursive>
 8004e4c:	e7db      	b.n	8004e06 <_fflush_r+0xe>
	...

08004e50 <fiprintf>:
 8004e50:	b40e      	push	{r1, r2, r3}
 8004e52:	b517      	push	{r0, r1, r2, r4, lr}
 8004e54:	4c05      	ldr	r4, [pc, #20]	@ (8004e6c <fiprintf+0x1c>)
 8004e56:	ab05      	add	r3, sp, #20
 8004e58:	cb04      	ldmia	r3!, {r2}
 8004e5a:	0001      	movs	r1, r0
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	f7ff fcaa 	bl	80047b8 <_vfiprintf_r>
 8004e64:	bc1e      	pop	{r1, r2, r3, r4}
 8004e66:	bc08      	pop	{r3}
 8004e68:	b003      	add	sp, #12
 8004e6a:	4718      	bx	r3
 8004e6c:	20000018 	.word	0x20000018

08004e70 <__swhatbuf_r>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	000e      	movs	r6, r1
 8004e74:	001d      	movs	r5, r3
 8004e76:	230e      	movs	r3, #14
 8004e78:	5ec9      	ldrsh	r1, [r1, r3]
 8004e7a:	0014      	movs	r4, r2
 8004e7c:	b096      	sub	sp, #88	@ 0x58
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	da0c      	bge.n	8004e9c <__swhatbuf_r+0x2c>
 8004e82:	89b2      	ldrh	r2, [r6, #12]
 8004e84:	2380      	movs	r3, #128	@ 0x80
 8004e86:	0011      	movs	r1, r2
 8004e88:	4019      	ands	r1, r3
 8004e8a:	421a      	tst	r2, r3
 8004e8c:	d114      	bne.n	8004eb8 <__swhatbuf_r+0x48>
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	2000      	movs	r0, #0
 8004e94:	6029      	str	r1, [r5, #0]
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	b016      	add	sp, #88	@ 0x58
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	466a      	mov	r2, sp
 8004e9e:	f000 f889 	bl	8004fb4 <_fstat_r>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	dbed      	blt.n	8004e82 <__swhatbuf_r+0x12>
 8004ea6:	23f0      	movs	r3, #240	@ 0xf0
 8004ea8:	9901      	ldr	r1, [sp, #4]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	4019      	ands	r1, r3
 8004eae:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <__swhatbuf_r+0x50>)
 8004eb0:	18c9      	adds	r1, r1, r3
 8004eb2:	424b      	negs	r3, r1
 8004eb4:	4159      	adcs	r1, r3
 8004eb6:	e7ea      	b.n	8004e8e <__swhatbuf_r+0x1e>
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2340      	movs	r3, #64	@ 0x40
 8004ebc:	e7e9      	b.n	8004e92 <__swhatbuf_r+0x22>
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	ffffe000 	.word	0xffffe000

08004ec4 <__smakebuf_r>:
 8004ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec6:	2602      	movs	r6, #2
 8004ec8:	898b      	ldrh	r3, [r1, #12]
 8004eca:	0005      	movs	r5, r0
 8004ecc:	000c      	movs	r4, r1
 8004ece:	b085      	sub	sp, #20
 8004ed0:	4233      	tst	r3, r6
 8004ed2:	d007      	beq.n	8004ee4 <__smakebuf_r+0x20>
 8004ed4:	0023      	movs	r3, r4
 8004ed6:	3347      	adds	r3, #71	@ 0x47
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	2301      	movs	r3, #1
 8004ede:	6163      	str	r3, [r4, #20]
 8004ee0:	b005      	add	sp, #20
 8004ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee4:	ab03      	add	r3, sp, #12
 8004ee6:	aa02      	add	r2, sp, #8
 8004ee8:	f7ff ffc2 	bl	8004e70 <__swhatbuf_r>
 8004eec:	9f02      	ldr	r7, [sp, #8]
 8004eee:	9001      	str	r0, [sp, #4]
 8004ef0:	0039      	movs	r1, r7
 8004ef2:	0028      	movs	r0, r5
 8004ef4:	f7ff fba8 	bl	8004648 <_malloc_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d108      	bne.n	8004f0e <__smakebuf_r+0x4a>
 8004efc:	220c      	movs	r2, #12
 8004efe:	5ea3      	ldrsh	r3, [r4, r2]
 8004f00:	059a      	lsls	r2, r3, #22
 8004f02:	d4ed      	bmi.n	8004ee0 <__smakebuf_r+0x1c>
 8004f04:	2203      	movs	r2, #3
 8004f06:	4393      	bics	r3, r2
 8004f08:	431e      	orrs	r6, r3
 8004f0a:	81a6      	strh	r6, [r4, #12]
 8004f0c:	e7e2      	b.n	8004ed4 <__smakebuf_r+0x10>
 8004f0e:	2380      	movs	r3, #128	@ 0x80
 8004f10:	89a2      	ldrh	r2, [r4, #12]
 8004f12:	6020      	str	r0, [r4, #0]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	6120      	str	r0, [r4, #16]
 8004f1c:	6167      	str	r7, [r4, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <__smakebuf_r+0x78>
 8004f22:	0028      	movs	r0, r5
 8004f24:	230e      	movs	r3, #14
 8004f26:	5ee1      	ldrsh	r1, [r4, r3]
 8004f28:	f000 f856 	bl	8004fd8 <_isatty_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d005      	beq.n	8004f3c <__smakebuf_r+0x78>
 8004f30:	2303      	movs	r3, #3
 8004f32:	89a2      	ldrh	r2, [r4, #12]
 8004f34:	439a      	bics	r2, r3
 8004f36:	3b02      	subs	r3, #2
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	9a01      	ldr	r2, [sp, #4]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	e7cc      	b.n	8004ee0 <__smakebuf_r+0x1c>

08004f46 <_putc_r>:
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	0006      	movs	r6, r0
 8004f4a:	000d      	movs	r5, r1
 8004f4c:	0014      	movs	r4, r2
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d004      	beq.n	8004f5c <_putc_r+0x16>
 8004f52:	6a03      	ldr	r3, [r0, #32]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <_putc_r+0x16>
 8004f58:	f7ff f84a 	bl	8003ff0 <__sinit>
 8004f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f5e:	07db      	lsls	r3, r3, #31
 8004f60:	d405      	bmi.n	8004f6e <_putc_r+0x28>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	059b      	lsls	r3, r3, #22
 8004f66:	d402      	bmi.n	8004f6e <_putc_r+0x28>
 8004f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f6a:	f7ff fad6 	bl	800451a <__retarget_lock_acquire_recursive>
 8004f6e:	68a3      	ldr	r3, [r4, #8]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	60a3      	str	r3, [r4, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da05      	bge.n	8004f84 <_putc_r+0x3e>
 8004f78:	69a2      	ldr	r2, [r4, #24]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	db12      	blt.n	8004fa4 <_putc_r+0x5e>
 8004f7e:	b2eb      	uxtb	r3, r5
 8004f80:	2b0a      	cmp	r3, #10
 8004f82:	d00f      	beq.n	8004fa4 <_putc_r+0x5e>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	6022      	str	r2, [r4, #0]
 8004f8a:	701d      	strb	r5, [r3, #0]
 8004f8c:	b2ed      	uxtb	r5, r5
 8004f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f90:	07db      	lsls	r3, r3, #31
 8004f92:	d405      	bmi.n	8004fa0 <_putc_r+0x5a>
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	059b      	lsls	r3, r3, #22
 8004f98:	d402      	bmi.n	8004fa0 <_putc_r+0x5a>
 8004f9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f9c:	f7ff fabe 	bl	800451c <__retarget_lock_release_recursive>
 8004fa0:	0028      	movs	r0, r5
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	0029      	movs	r1, r5
 8004fa6:	0022      	movs	r2, r4
 8004fa8:	0030      	movs	r0, r6
 8004faa:	f7ff f91b 	bl	80041e4 <__swbuf_r>
 8004fae:	0005      	movs	r5, r0
 8004fb0:	e7ed      	b.n	8004f8e <_putc_r+0x48>
	...

08004fb4 <_fstat_r>:
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	b570      	push	{r4, r5, r6, lr}
 8004fb8:	4d06      	ldr	r5, [pc, #24]	@ (8004fd4 <_fstat_r+0x20>)
 8004fba:	0004      	movs	r4, r0
 8004fbc:	0008      	movs	r0, r1
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	f7fb fe7d 	bl	8000cc0 <_fstat>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d103      	bne.n	8004fd2 <_fstat_r+0x1e>
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d000      	beq.n	8004fd2 <_fstat_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	20000430 	.word	0x20000430

08004fd8 <_isatty_r>:
 8004fd8:	2300      	movs	r3, #0
 8004fda:	b570      	push	{r4, r5, r6, lr}
 8004fdc:	4d06      	ldr	r5, [pc, #24]	@ (8004ff8 <_isatty_r+0x20>)
 8004fde:	0004      	movs	r4, r0
 8004fe0:	0008      	movs	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fb fe7a 	bl	8000cdc <_isatty>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d103      	bne.n	8004ff4 <_isatty_r+0x1c>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d000      	beq.n	8004ff4 <_isatty_r+0x1c>
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	20000430 	.word	0x20000430

08004ffc <_sbrk_r>:
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	4d06      	ldr	r5, [pc, #24]	@ (800501c <_sbrk_r+0x20>)
 8005002:	0004      	movs	r4, r0
 8005004:	0008      	movs	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fb fe7c 	bl	8000d04 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d103      	bne.n	8005018 <_sbrk_r+0x1c>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d000      	beq.n	8005018 <_sbrk_r+0x1c>
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	bd70      	pop	{r4, r5, r6, pc}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	20000430 	.word	0x20000430

08005020 <memchr>:
 8005020:	b2c9      	uxtb	r1, r1
 8005022:	1882      	adds	r2, r0, r2
 8005024:	4290      	cmp	r0, r2
 8005026:	d101      	bne.n	800502c <memchr+0xc>
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
 800502c:	7803      	ldrb	r3, [r0, #0]
 800502e:	428b      	cmp	r3, r1
 8005030:	d0fb      	beq.n	800502a <memchr+0xa>
 8005032:	3001      	adds	r0, #1
 8005034:	e7f6      	b.n	8005024 <memchr+0x4>

08005036 <abort>:
 8005036:	2006      	movs	r0, #6
 8005038:	b510      	push	{r4, lr}
 800503a:	f000 f82d 	bl	8005098 <raise>
 800503e:	2001      	movs	r0, #1
 8005040:	f7fb fe0a 	bl	8000c58 <_exit>

08005044 <_raise_r>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	0004      	movs	r4, r0
 8005048:	000d      	movs	r5, r1
 800504a:	291f      	cmp	r1, #31
 800504c:	d904      	bls.n	8005058 <_raise_r+0x14>
 800504e:	2316      	movs	r3, #22
 8005050:	6003      	str	r3, [r0, #0]
 8005052:	2001      	movs	r0, #1
 8005054:	4240      	negs	r0, r0
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <_raise_r+0x24>
 800505e:	008a      	lsls	r2, r1, #2
 8005060:	189b      	adds	r3, r3, r2
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	2a00      	cmp	r2, #0
 8005066:	d108      	bne.n	800507a <_raise_r+0x36>
 8005068:	0020      	movs	r0, r4
 800506a:	f000 f831 	bl	80050d0 <_getpid_r>
 800506e:	002a      	movs	r2, r5
 8005070:	0001      	movs	r1, r0
 8005072:	0020      	movs	r0, r4
 8005074:	f000 f81a 	bl	80050ac <_kill_r>
 8005078:	e7ed      	b.n	8005056 <_raise_r+0x12>
 800507a:	2a01      	cmp	r2, #1
 800507c:	d009      	beq.n	8005092 <_raise_r+0x4e>
 800507e:	1c51      	adds	r1, r2, #1
 8005080:	d103      	bne.n	800508a <_raise_r+0x46>
 8005082:	2316      	movs	r3, #22
 8005084:	6003      	str	r3, [r0, #0]
 8005086:	2001      	movs	r0, #1
 8005088:	e7e5      	b.n	8005056 <_raise_r+0x12>
 800508a:	2100      	movs	r1, #0
 800508c:	0028      	movs	r0, r5
 800508e:	6019      	str	r1, [r3, #0]
 8005090:	4790      	blx	r2
 8005092:	2000      	movs	r0, #0
 8005094:	e7df      	b.n	8005056 <_raise_r+0x12>
	...

08005098 <raise>:
 8005098:	b510      	push	{r4, lr}
 800509a:	4b03      	ldr	r3, [pc, #12]	@ (80050a8 <raise+0x10>)
 800509c:	0001      	movs	r1, r0
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f7ff ffd0 	bl	8005044 <_raise_r>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	20000018 	.word	0x20000018

080050ac <_kill_r>:
 80050ac:	2300      	movs	r3, #0
 80050ae:	b570      	push	{r4, r5, r6, lr}
 80050b0:	4d06      	ldr	r5, [pc, #24]	@ (80050cc <_kill_r+0x20>)
 80050b2:	0004      	movs	r4, r0
 80050b4:	0008      	movs	r0, r1
 80050b6:	0011      	movs	r1, r2
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	f7fb fdbd 	bl	8000c38 <_kill>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	d103      	bne.n	80050ca <_kill_r+0x1e>
 80050c2:	682b      	ldr	r3, [r5, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d000      	beq.n	80050ca <_kill_r+0x1e>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	20000430 	.word	0x20000430

080050d0 <_getpid_r>:
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f7fb fdab 	bl	8000c2c <_getpid>
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <_init>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr

080050e4 <_fini>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr
